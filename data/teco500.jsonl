{"index": 0, "project_index": 0, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OClientConnectionTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/OClientConnectionTest.java", "test_name": "testValidToken", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/OClientConnectionTest.java", "test_setup": "@Before\n  public void before() {\n    MockitoAnnotations.initMocks(this);\n    Mockito.when(protocol.getServer()).thenReturn(server);\n    Mockito.when(server.getClientConnectionManager()).thenReturn(manager);\n    Mockito.when(server.getContextConfiguration()).thenReturn(new OContextConfiguration());\n    db = new ODatabaseDocumentTx(\"memory:\" + OClientConnectionTest.class.getSimpleName());\n    db.create();\n  }", "test_setup_start_lineno": 41, "test_setup_end_lineno": 49, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/OClientConnectionTest.java", "test_prefix": "  @Test\n  public void testValidToken() throws IOException {\n    OClientConnection conn = new OClientConnection(1, protocol);\n    OTokenHandler handler = new OTokenHandlerImpl(server);\n    byte[] tokenBytes = handler.getSignedBinaryToken(db, db.getUser(), conn.getData());\n\n    conn.validateSession(tokenBytes, handler, null);\n    <AssertPlaceHolder>;\n    assertEquals(tokenBytes, conn.getTokenBytes());\n    assertNotNull(conn.getToken());\n  }", "test_prefix_start_lineno": 56, "test_prefix_end_lineno": 66, "focal_method_file_path": "server/src/main/java/com/orientechnologies/orient/server/OClientConnection.java", "focal_method": "  public Boolean getTokenBased() {\n    return tokenBased;\n  }", "focal_method_start_lineno": 242, "focal_method_end_lineno": 244, "ground_truth_oracle": "assertTrue(conn.getTokenBased());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testValidToken() throws IOException {\n    OClientConnection conn = new OClientConnection(1, protocol);\n    OTokenHandler handler = new OTokenHandlerImpl(server);\n    byte[] tokenBytes = handler.getSignedBinaryToken(db, db.getUser(), conn.getData());\n\n    conn.validateSession(tokenBytes, handler, null);\n  }", "original_test_prefix": "  @Test\n  public void testValidToken() throws IOException {\n    OClientConnection conn = new OClientConnection(1, protocol);\n    OTokenHandler handler = new OTokenHandlerImpl(server);\n    byte[] tokenBytes = handler.getSignedBinaryToken(db, db.getUser(), conn.getData());\n\n    conn.validateSession(tokenBytes, handler, null);\n    assertTrue(conn.getTokenBased());\n    assertEquals(tokenBytes, conn.getTokenBytes());\n    assertNotNull(conn.getToken());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.OClientConnectionTest#testValidToken", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    MockitoAnnotations.initMocks(this);\n    Mockito.when(protocol.getServer()).thenReturn(server);\n    Mockito.when(server.getClientConnectionManager()).thenReturn(manager);\n    Mockito.when(server.getContextConfiguration()).thenReturn(new OContextConfiguration());\n    db = new ODatabaseDocumentTx(\"memory:\" + OClientConnectionTest.class.getSimpleName());\n    db.create();\n  }", "start_lineno": 41, "end_lineno": 49}]}
{"index": 1, "project_index": 0, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OPropertyMapIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_name": "testProcessChangeEventAddKeyWithConversion", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }\n\n@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 37, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testProcessChangeEventAddKeyWithConversion() {\n    final Map<Object, Integer> keysToAdd = new HashMap<Object, Integer>();\n    final Map<Object, Integer> keysToRemove = new HashMap<Object, Integer>();\n    final OMultiValueChangeEvent<String, String> multiValueChangeEvent = new OMultiValueChangeEvent<String, String>(\n        OMultiValueChangeEvent.OChangeType.ADD, \"12\", \"value1\");\n\n    propertyIndexByIntegerKey.processChangeEvent(multiValueChangeEvent, keysToAdd, keysToRemove);\n\n    final Map<Object, Integer> addedKeys = new HashMap<Object, Integer>();\n    addedKeys.put(12, 1);\n\n    final Map<Object, Integer> removedKeys = new HashMap<Object, Integer>();\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(keysToRemove, removedKeys);\n  }", "test_prefix_start_lineno": 291, "test_prefix_end_lineno": 307, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focal_method": "  public void processChangeEvent(final OMultiValueChangeEvent<?, ?> changeEvent, final Map<Object, Integer> keysToAdd,\n      final Map<Object, Integer> keysToRemove) {\n    final boolean result;\n    if (indexBy.equals(INDEX_BY.KEY))\n      result = processKeyChangeEvent(changeEvent, keysToAdd, keysToRemove);\n    else\n      result = processValueChangeEvent(changeEvent, keysToAdd, keysToRemove);\n\n    if (!result)\n      throw new IllegalArgumentException(\"Invalid change type :\" + changeEvent.getChangeType());\n  }", "focal_method_start_lineno": 142, "focal_method_end_lineno": 152, "ground_truth_oracle": "Assert.assertEquals(keysToAdd, addedKeys);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testProcessChangeEventAddKeyWithConversion() {\n    final Map<Object, Integer> keysToAdd = new HashMap<Object, Integer>();\n    final Map<Object, Integer> keysToRemove = new HashMap<Object, Integer>();\n    final OMultiValueChangeEvent<String, String> multiValueChangeEvent = new OMultiValueChangeEvent<String, String>(\n        OMultiValueChangeEvent.OChangeType.ADD, \"12\", \"value1\");\n\n    propertyIndexByIntegerKey.processChangeEvent(multiValueChangeEvent, keysToAdd, keysToRemove);\n\n    final Map<Object, Integer> addedKeys = new HashMap<Object, Integer>();\n    addedKeys.put(12, 1);\n\n    final Map<Object, Integer> removedKeys = new HashMap<Object, Integer>();\n\n  }", "original_test_prefix": "  @Test\n  public void testProcessChangeEventAddKeyWithConversion() {\n    final Map<Object, Integer> keysToAdd = new HashMap<Object, Integer>();\n    final Map<Object, Integer> keysToRemove = new HashMap<Object, Integer>();\n    final OMultiValueChangeEvent<String, String> multiValueChangeEvent = new OMultiValueChangeEvent<String, String>(\n        OMultiValueChangeEvent.OChangeType.ADD, \"12\", \"value1\");\n\n    propertyIndexByIntegerKey.processChangeEvent(multiValueChangeEvent, keysToAdd, keysToRemove);\n\n    final Map<Object, Integer> addedKeys = new HashMap<Object, Integer>();\n    addedKeys.put(12, 1);\n\n    final Map<Object, Integer> removedKeys = new HashMap<Object, Integer>();\n\n    Assert.assertEquals(keysToAdd, addedKeys);\n    Assert.assertEquals(keysToRemove, removedKeys);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OPropertyMapIndexDefinitionTest#testProcessChangeEventAddKeyWithConversion", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }", "start_lineno": 23, "end_lineno": 27}, {"test_setup": "@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "start_lineno": 29, "end_lineno": 37}]}
{"index": 2, "project_index": 0, "class_index": 1, "test_index": 1, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OPropertyMapIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_name": "testGetTypes", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }\n\n@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 37, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testGetTypes() {\n    final OType[] result = propertyIndexByKey.getTypes();\n    <AssertPlaceHolder>;\n    Assert.assertEquals(result[0], OType.STRING);\n  }", "test_prefix_start_lineno": 192, "test_prefix_end_lineno": 197, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyIndexDefinition.java", "focal_method": "  public OType[] getTypes() {\n    return new OType[] { keyType };\n  }", "focal_method_start_lineno": 133, "focal_method_end_lineno": 135, "ground_truth_oracle": "Assert.assertEquals(result.length, 1);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testGetTypes() {\n    final OType[] result = propertyIndexByKey.getTypes();\n  }", "original_test_prefix": "  @Test\n  public void testGetTypes() {\n    final OType[] result = propertyIndexByKey.getTypes();\n    Assert.assertEquals(result.length, 1);\n    Assert.assertEquals(result[0], OType.STRING);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OPropertyMapIndexDefinitionTest#testGetTypes", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }", "start_lineno": 23, "end_lineno": 27}, {"test_setup": "@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "start_lineno": 29, "end_lineno": 37}]}
{"index": 3, "project_index": 0, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "RemoteQuerySupportTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java", "test_name": "testQueryEmbedded", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java", "test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.CLASS_MINIMUM_CLUSTERS.setValue(1);\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteQuerySupportTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    session = orientDB.open(RemoteQuerySupportTest.class.getSimpleName(), \"admin\", \"admin\");\n    session.createClass(\"Some\");\n    oldPageSize = QUERY_REMOTE_RESULTSET_PAGE_SIZE.getValueAsInteger();\n    QUERY_REMOTE_RESULTSET_PAGE_SIZE.setValue(10);\n  }", "test_setup_start_lineno": 50, "test_setup_end_lineno": 64, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java", "test_prefix": "  @Test\n  public void testQueryEmbedded() {\n    ODocument doc = new ODocument(\"Some\");\n    doc.setProperty(\"prop\", \"value\");\n    ODocument emb = new ODocument();\n    emb.setProperty(\"one\", \"value\");\n    doc.setProperty(\"emb\", emb, OType.EMBEDDED);\n    session.save(doc);\n    OResultSet res = session.query(\"select emb from Some\");\n\n    OResult item = res.next();\n    <AssertPlaceHolder>;\n    assertEquals(((OResult) item.getProperty(\"emb\")).getProperty(\"one\"), \"value\");\n  }", "test_prefix_start_lineno": 133, "test_prefix_end_lineno": 146, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focal_method": "  <T> T getProperty(String name);", "focal_method_start_lineno": 29, "focal_method_end_lineno": 29, "ground_truth_oracle": "assertNotNull(item.getProperty(\"emb\"));", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "  @Test\n  public void testQueryEmbedded() {\n    ODocument doc = new ODocument(\"Some\");\n    doc.setProperty(\"prop\", \"value\");\n    ODocument emb = new ODocument();\n    emb.setProperty(\"one\", \"value\");\n    doc.setProperty(\"emb\", emb, OType.EMBEDDED);\n    session.save(doc);\n    OResultSet res = session.query(\"select emb from Some\");\n\n    OResult item = res.next();\n  }", "original_test_prefix": "  @Test\n  public void testQueryEmbedded() {\n    ODocument doc = new ODocument(\"Some\");\n    doc.setProperty(\"prop\", \"value\");\n    ODocument emb = new ODocument();\n    emb.setProperty(\"one\", \"value\");\n    doc.setProperty(\"emb\", emb, OType.EMBEDDED);\n    session.save(doc);\n    OResultSet res = session.query(\"select emb from Some\");\n\n    OResult item = res.next();\n    assertNotNull(item.getProperty(\"emb\"));\n    assertEquals(((OResult) item.getProperty(\"emb\")).getProperty(\"one\"), \"value\");\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.query.RemoteQuerySupportTest#testQueryEmbedded", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.CLASS_MINIMUM_CLUSTERS.setValue(1);\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteQuerySupportTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    session = orientDB.open(RemoteQuerySupportTest.class.getSimpleName(), \"admin\", \"admin\");\n    session.createClass(\"Some\");\n    oldPageSize = QUERY_REMOTE_RESULTSET_PAGE_SIZE.getValueAsInteger();\n    QUERY_REMOTE_RESULTSET_PAGE_SIZE.setValue(10);\n  }", "start_lineno": 50, "end_lineno": 64}]}
{"index": 4, "project_index": 0, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OUTFSerializerTest", "class_path": "core/src/test/java/com/orientechnologies/common/serialization/types/OUTFSerializerTest.java", "test_name": "testSerializeWALChanges", "test_setup_file_path": "core/src/test/java/com/orientechnologies/common/serialization/types/OUTFSerializerTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    OBJECT = \"asd d astasf sdfrete 5678b sdf adfas ase sdf aas  t sdf ts d s e34523 sdf gsd 63 sdfs \u044b\u0430 \u044b \u043a\u044b \u0430\u0444\u0446\"\n        + \"3\u043c  \u044b\u043f\u0430\u044b\u0432\u0443  s sf s sdf asd asfsd w assf tet \u044b \u0446 \u043a \u043a \u0439\u0446\u043a\u0443\u0430\u044b\u0444\u0432 \u044b\u0444\u0430\u0444\u0430\u0444 \u0444\u0430\u044b\u0432\u0430\u044b\u0444\u0430\u0432 \u0430 \u0444\u0432 \u0430s  asf s sdfsa dscas \"\n        + \" s as asdf sfsr43r344 1tasdf asa  asdfa fgwe treqr3 qadfasf \u0430\u044b\u0432\u0444\u044b\u0444\u0446\u043a \u0443 \u0444\u044b\u0432\u0430 \u044b\u0435 \u0443\u043d\u043f\u0432\u0430\u044b\u0432\u0430  \u0432\u0430\u0439\u043a \u044b\u0430\u0432\u044b\u0444\u0432\u0430\u0443\u0446\";\n    stringSerializer = new OUTF8Serializer();\n  }", "test_setup_start_lineno": 17, "test_setup_end_lineno": 23, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/common/serialization/types/OUTFSerializerTest.java", "test_prefix": "  @Test\n  public void testSerializeWALChanges() {\n    final int serializationOffset = 5;\n    final ByteBuffer buffer = ByteBuffer.allocateDirect(stringSerializer.getObjectSize(OBJECT) + serializationOffset)\n        .order(ByteOrder.nativeOrder());\n\n    final byte[] data = new byte[stringSerializer.getObjectSize(OBJECT)];\n    stringSerializer.serializeNativeObject(OBJECT, data, 0);\n\n    OWALChanges walChanges = new OWALChangesTree();\n    walChanges.setBinaryValue(buffer, data, serializationOffset);\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer, walChanges, serializationOffset), OBJECT);\n  }", "test_prefix_start_lineno": 88, "test_prefix_end_lineno": 103, "focal_method_file_path": "core/src/main/java/com/orientechnologies/common/serialization/types/OUTF8Serializer.java", "focal_method": "  @Override\n  public int getObjectSize(String object, Object... hints) {\n    final byte[] encoded = object.getBytes(StandardCharsets.UTF_8);\n    return OShortSerializer.SHORT_SIZE + encoded.length;\n  }", "focal_method_start_lineno": 15, "focal_method_end_lineno": 19, "ground_truth_oracle": "Assert.assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer, walChanges, serializationOffset), stringSerializer.getObjectSize(OBJECT));", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test\n  public void testSerializeWALChanges() {\n    final int serializationOffset = 5;\n    final ByteBuffer buffer = ByteBuffer.allocateDirect(stringSerializer.getObjectSize(OBJECT) + serializationOffset)\n        .order(ByteOrder.nativeOrder());\n\n    final byte[] data = new byte[stringSerializer.getObjectSize(OBJECT)];\n    stringSerializer.serializeNativeObject(OBJECT, data, 0);\n\n    OWALChanges walChanges = new OWALChangesTree();\n    walChanges.setBinaryValue(buffer, data, serializationOffset);\n\n  }", "original_test_prefix": "  @Test\n  public void testSerializeWALChanges() {\n    final int serializationOffset = 5;\n    final ByteBuffer buffer = ByteBuffer.allocateDirect(stringSerializer.getObjectSize(OBJECT) + serializationOffset)\n        .order(ByteOrder.nativeOrder());\n\n    final byte[] data = new byte[stringSerializer.getObjectSize(OBJECT)];\n    stringSerializer.serializeNativeObject(OBJECT, data, 0);\n\n    OWALChanges walChanges = new OWALChangesTree();\n    walChanges.setBinaryValue(buffer, data, serializationOffset);\n\n    Assert.assertEquals(stringSerializer.getObjectSizeInByteBuffer(buffer, walChanges, serializationOffset), stringSerializer.getObjectSize(OBJECT));\n    Assert.assertEquals(stringSerializer.deserializeFromByteBufferObject(buffer, walChanges, serializationOffset), OBJECT);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.common.serialization.types.OUTFSerializerTest#testSerializeWALChanges", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    OBJECT = \"asd d astasf sdfrete 5678b sdf adfas ase sdf aas  t sdf ts d s e34523 sdf gsd 63 sdfs \u044b\u0430 \u044b \u043a\u044b \u0430\u0444\u0446\"\n        + \"3\u043c  \u044b\u043f\u0430\u044b\u0432\u0443  s sf s sdf asd asfsd w assf tet \u044b \u0446 \u043a \u043a \u0439\u0446\u043a\u0443\u0430\u044b\u0444\u0432 \u044b\u0444\u0430\u0444\u0430\u0444 \u0444\u0430\u044b\u0432\u0430\u044b\u0444\u0430\u0432 \u0430 \u0444\u0432 \u0430s  asf s sdfsa dscas \"\n        + \" s as asdf sfsr43r344 1tasdf asa  asdfa fgwe treqr3 qadfasf \u0430\u044b\u0432\u0444\u044b\u0444\u0446\u043a \u0443 \u0444\u044b\u0432\u0430 \u044b\u0435 \u0443\u043d\u043f\u0432\u0430\u044b\u0432\u0430  \u0432\u0430\u0439\u043a \u044b\u0430\u0432\u044b\u0444\u0432\u0430\u0443\u0446\";\n    stringSerializer = new OUTF8Serializer();\n  }", "start_lineno": 17, "end_lineno": 23}]}
{"index": 5, "project_index": 0, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "CollectionOfLinkInNestedDocumentTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/CollectionOfLinkInNestedDocumentTest.java", "test_name": "nestedLinkSet", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/CollectionOfLinkInNestedDocumentTest.java", "test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + CollectionOfLinkInNestedDocumentTest.class.getSimpleName());\n    db.create();\n  }", "test_setup_start_lineno": 22, "test_setup_end_lineno": 26, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/CollectionOfLinkInNestedDocumentTest.java", "test_prefix": "  @Test\n  public void nestedLinkSet() {\n    ODocument doc1 = new ODocument();\n    doc1.field(\"value\", \"item 1\");\n    ODocument doc2 = new ODocument();\n    doc2.field(\"value\", \"item 2\");\n    ODocument nested = new ODocument();\n    ORecordLazySet set = new ORecordLazySet(nested);\n    set.add(doc1);\n    set.add(doc2);\n\n    nested.field(\"set\", set);\n\n    ODocument base = new ODocument();\n    base.field(\"nested\", nested, OType.EMBEDDED);\n    OIdentifiable id = db.save(base, db.getClusterNameById(db.getDefaultClusterId()));\n    db.getLocalCache().clear();\n    ODocument base1 = db.load(id.getIdentity());\n    ODocument nest1 = base1.field(\"nested\");\n    <AssertPlaceHolder>;\n\n    assertTrue(nested.field(\"set\").equals(nest1.field(\"set\")));\n  }", "test_prefix_start_lineno": 33, "test_prefix_end_lineno": 55, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  @Override\n  public <RET> RET field(final String iFieldName) {\n    RET value = this.rawField(iFieldName);\n\n    if (!iFieldName.startsWith(\"@\") && _lazyLoad && value instanceof ORID && (((ORID) value).isPersistent() || ((ORID) value)\n        .isNew()) && ODatabaseRecordThreadLocal.instance().isDefined()) {\n      // CREATE THE DOCUMENT OBJECT IN LAZY WAY\n      RET newValue = getDatabase().load((ORID) value);\n      if (newValue != null) {\n        unTrack((ORID) value);\n        track((OIdentifiable) newValue);\n        value = newValue;\n        if (this.isTrackingChanges()) {\n          ORecordInternal.setDirtyManager((ORecord) value, this.getDirtyManager());\n        }\n        if (!iFieldName.contains(\".\")) {\n          ODocumentEntry entry = _fields.get(iFieldName);\n          removeCollectionChangeListener(entry, entry.value);\n          entry.value = value;\n          addCollectionChangeListener(entry);\n        }\n      }\n    }\n\n    return value;\n  }", "focal_method_start_lineno": 1201, "focal_method_end_lineno": 1226, "ground_truth_oracle": "assertNotNull(nest1);", "ground_truth_oracle_lineno": 15, "test_prefix_wo_placeholder": "  @Test\n  public void nestedLinkSet() {\n    ODocument doc1 = new ODocument();\n    doc1.field(\"value\", \"item 1\");\n    ODocument doc2 = new ODocument();\n    doc2.field(\"value\", \"item 2\");\n    ODocument nested = new ODocument();\n    ORecordLazySet set = new ORecordLazySet(nested);\n    set.add(doc1);\n    set.add(doc2);\n\n    nested.field(\"set\", set);\n\n    ODocument base = new ODocument();\n    base.field(\"nested\", nested, OType.EMBEDDED);\n    OIdentifiable id = db.save(base, db.getClusterNameById(db.getDefaultClusterId()));\n    db.getLocalCache().clear();\n    ODocument base1 = db.load(id.getIdentity());\n    ODocument nest1 = base1.field(\"nested\");\n  }", "original_test_prefix": "  @Test\n  public void nestedLinkSet() {\n    ODocument doc1 = new ODocument();\n    doc1.field(\"value\", \"item 1\");\n    ODocument doc2 = new ODocument();\n    doc2.field(\"value\", \"item 2\");\n    ODocument nested = new ODocument();\n    ORecordLazySet set = new ORecordLazySet(nested);\n    set.add(doc1);\n    set.add(doc2);\n\n    nested.field(\"set\", set);\n\n    ODocument base = new ODocument();\n    base.field(\"nested\", nested, OType.EMBEDDED);\n    OIdentifiable id = db.save(base, db.getClusterNameById(db.getDefaultClusterId()));\n    db.getLocalCache().clear();\n    ODocument base1 = db.load(id.getIdentity());\n    ODocument nest1 = base1.field(\"nested\");\n    assertNotNull(nest1);\n\n    assertTrue(nested.field(\"set\").equals(nest1.field(\"set\")));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.record.impl.CollectionOfLinkInNestedDocumentTest#nestedLinkSet", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + CollectionOfLinkInNestedDocumentTest.class.getSimpleName());\n    db.create();\n  }", "start_lineno": 22, "end_lineno": 26}]}
{"index": 6, "project_index": 0, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "SQLMoveVertexCommandTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/SQLMoveVertexCommandTest.java", "test_name": "testMoveSingleRecordToAnotherClass", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/SQLMoveVertexCommandTest.java", "test_setup": "@Before public void setUp() throws Exception {\n    customer = graph.getVertexType(\"Customer\");\n    if (customer != null) {\n      graph.command(new OCommandSQL(\"delete vertex Customer\")).execute();\n      graph.dropVertexType(\"Customer\");\n    }\n\n    if (graph.getRawGraph().existsCluster(\"Customer_genius\"))\n      graph.getRawGraph().dropCluster(\"Customer_genius\", true);\n\n    customer = (OrientVertexType) graph.createVertexType(\"Customer\").setClusterSelection(\"default\");\n    customer.addCluster(\"Customer_genius\");\n    customerGeniusCluster = graph.getRawGraph().getClusterIdByName(\"Customer_genius\");\n\n    provider = reinitVertexType(\"Provider\");\n    provider.setClusterSelection(\"default\");\n    \n    knows = reinitEdgeType(\"Knows\");\n\n    reinitVertexType(\"testMoveSupernode_From\");\n    reinitVertexType(\"testMoveSupernode_To\");\n    reinitEdgeType(\"testMoveSupernode_Edge\");\n\n  }\n\n@BeforeClass public static void init() {\n    init(SQLMoveVertexCommandTest.class.getSimpleName());\n  }", "test_setup_start_lineno": 330, "test_setup_end_lineno": 332, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/SQLMoveVertexCommandTest.java", "test_prefix": "  @Test public void testMoveSingleRecordToAnotherClass() {\n    ODocument doc = new ODocument(\"Customer\").field(\"name\", \"Jay\").field(\"test\", \"testMoveSingleRecordToAnotherClass\").save();\n\n    <AssertPlaceHolder>;\n\n    Iterable<OrientVertex> result = graph.command(new OCommandSQL(\"MOVE VERTEX \" + doc.getIdentity() + \" TO CLASS:Provider\"))\n        .execute();\n\n    ODocument fromTo = result.iterator().next().getRecord();\n\n    Assert.assertFalse(result.iterator().hasNext());\n\n    OIdentifiable from = fromTo.field(\"old\");\n    OIdentifiable to = fromTo.field(\"new\");\n\n    Assert.assertEquals(from, doc.getIdentity());\n\n    Assert.assertEquals(to.getIdentity().getClusterId(), provider.getDefaultClusterId());\n    ODocument newDocument = to.getRecord();\n    Assert.assertEquals(newDocument.getClassName(), \"Provider\");\n\n    Assert.assertEquals(newDocument.field(\"name\"), \"Jay\");\n    Assert.assertEquals(newDocument.field(\"test\"), \"testMoveSingleRecordToAnotherClass\");\n  }", "test_prefix_start_lineno": 138, "test_prefix_end_lineno": 164, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClassAbstractDelegate.java", "focal_method": "  @Override\n  public int getDefaultClusterId() {\n    return delegate.getDefaultClusterId();\n  }", "focal_method_start_lineno": 205, "focal_method_end_lineno": 208, "ground_truth_oracle": "Assert.assertEquals(doc.getIdentity().getClusterId(), customer.getDefaultClusterId());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test public void testMoveSingleRecordToAnotherClass() {\n    ODocument doc = new ODocument(\"Customer\").field(\"name\", \"Jay\").field(\"test\", \"testMoveSingleRecordToAnotherClass\").save();\n\n  }", "original_test_prefix": "  @Test public void testMoveSingleRecordToAnotherClass() {\n    ODocument doc = new ODocument(\"Customer\").field(\"name\", \"Jay\").field(\"test\", \"testMoveSingleRecordToAnotherClass\").save();\n\n    Assert.assertEquals(doc.getIdentity().getClusterId(), customer.getDefaultClusterId());\n\n    Iterable<OrientVertex> result = graph.command(new OCommandSQL(\"MOVE VERTEX \" + doc.getIdentity() + \" TO CLASS:Provider\"))\n        .execute();\n\n    ODocument fromTo = result.iterator().next().getRecord();\n\n    Assert.assertFalse(result.iterator().hasNext());\n\n    OIdentifiable from = fromTo.field(\"old\");\n    OIdentifiable to = fromTo.field(\"new\");\n\n    Assert.assertEquals(from, doc.getIdentity());\n\n    Assert.assertEquals(to.getIdentity().getClusterId(), provider.getDefaultClusterId());\n    ODocument newDocument = to.getRecord();\n    Assert.assertEquals(newDocument.getClassName(), \"Provider\");\n\n    Assert.assertEquals(newDocument.field(\"name\"), \"Jay\");\n    Assert.assertEquals(newDocument.field(\"test\"), \"testMoveSingleRecordToAnotherClass\");\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.SQLMoveVertexCommandTest#testMoveSingleRecordToAnotherClass", "test_setup_list": [{"test_setup": "@Before public void setUp() throws Exception {\n    customer = graph.getVertexType(\"Customer\");\n    if (customer != null) {\n      graph.command(new OCommandSQL(\"delete vertex Customer\")).execute();\n      graph.dropVertexType(\"Customer\");\n    }\n\n    if (graph.getRawGraph().existsCluster(\"Customer_genius\"))\n      graph.getRawGraph().dropCluster(\"Customer_genius\", true);\n\n    customer = (OrientVertexType) graph.createVertexType(\"Customer\").setClusterSelection(\"default\");\n    customer.addCluster(\"Customer_genius\");\n    customerGeniusCluster = graph.getRawGraph().getClusterIdByName(\"Customer_genius\");\n\n    provider = reinitVertexType(\"Provider\");\n    provider.setClusterSelection(\"default\");\n    \n    knows = reinitEdgeType(\"Knows\");\n\n    reinitVertexType(\"testMoveSupernode_From\");\n    reinitVertexType(\"testMoveSupernode_To\");\n    reinitEdgeType(\"testMoveSupernode_Edge\");\n\n  }", "start_lineno": 45, "end_lineno": 68}, {"test_setup": "@BeforeClass public static void init() {\n    init(SQLMoveVertexCommandTest.class.getSimpleName());\n  }", "start_lineno": 330, "end_lineno": 332}]}
{"index": 7, "project_index": 1, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "JenkinsTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest.java", "test_name": "testGetBuildUrl", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest.java", "test_prefix": "    @Test\n    public void testGetBuildUrl() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 71, "test_prefix_end_lineno": 74, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/Jenkins.java", "focal_method": "    @Override\n    public String getBuildUrl() {\n        return getProperty(JENKINS_BUILD_URL);\n    }", "focal_method_start_lineno": 65, "focal_method_end_lineno": 68, "ground_truth_oracle": "assertEquals(\"http://company.com/jenkins/build123\", new Jenkins(env()).getBuildUrl());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetBuildUrl() {\n    }", "original_test_prefix": "    @Test\n    public void testGetBuildUrl() {\n        assertEquals(\"http://company.com/jenkins/build123\", new Jenkins(env()).getBuildUrl());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.JenkinsTest#testGetBuildUrl", "test_setup_list": []}
{"index": 8, "project_index": 1, "class_index": 1, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "EnvironmentTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/EnvironmentTest.java", "test_name": "testSetupWithIncompleteJob", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/EnvironmentTest.java", "test_setup": "@Before\n    public void init() throws Exception {\n        mojo = new CoverallsReportMojo() {\n            @Override\n            protected List<CoverageParser> createCoverageParsers(SourceLoader sourceLoader) {\n                return Arrays.asList(coverageParserMock);\n            }\n\n            @Override\n            public Log getLog() {\n                return logMock;\n            }\n        };\n        mojo.serviceName = \"service\";\n        mojo.sourceEncoding = \"UTF-8\";\n        when(serviceMock.isSelected()).thenReturn(true);\n    }", "test_setup_start_lineno": 61, "test_setup_end_lineno": 77, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/EnvironmentTest.java", "test_prefix": "    @Test\n    public void testSetupWithIncompleteJob() {\n        when(serviceMock.getJobId()).thenReturn(\"\");\n        when(serviceMock.getBuildUrl()).thenReturn(\"  \");\n        \n        create(Arrays.asList(serviceMock)).setup();\n        <AssertPlaceHolder>;\n        assertNull(mojo.serviceJobId);\n        assertNull(mojo.serviceBuildNumber);\n        assertNull(mojo.serviceBuildUrl);\n        assertNull(mojo.branch);\n        assertNull(mojo.pullRequest);\n        assertNull(mojo.serviceEnvironment);\n    }", "test_prefix_start_lineno": 101, "test_prefix_end_lineno": 114, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/Environment.java", "focal_method": "    public void setup() {\n        setupService();\n        verify();\n    }", "focal_method_start_lineno": 53, "focal_method_end_lineno": 56, "ground_truth_oracle": "assertEquals(\"service\", mojo.serviceName);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testSetupWithIncompleteJob() {\n        when(serviceMock.getJobId()).thenReturn(\"\");\n        when(serviceMock.getBuildUrl()).thenReturn(\"  \");\n        \n        create(Arrays.asList(serviceMock)).setup();\n    }", "original_test_prefix": "    @Test\n    public void testSetupWithIncompleteJob() {\n        when(serviceMock.getJobId()).thenReturn(\"\");\n        when(serviceMock.getBuildUrl()).thenReturn(\"  \");\n        \n        create(Arrays.asList(serviceMock)).setup();\n        assertEquals(\"service\", mojo.serviceName);\n        assertNull(mojo.serviceJobId);\n        assertNull(mojo.serviceBuildNumber);\n        assertNull(mojo.serviceBuildUrl);\n        assertNull(mojo.branch);\n        assertNull(mojo.pullRequest);\n        assertNull(mojo.serviceEnvironment);\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.EnvironmentTest#testSetupWithIncompleteJob", "test_setup_list": [{"test_setup": "@Before\n    public void init() throws Exception {\n        mojo = new CoverallsReportMojo() {\n            @Override\n            protected List<CoverageParser> createCoverageParsers(SourceLoader sourceLoader) {\n                return Arrays.asList(coverageParserMock);\n            }\n\n            @Override\n            public Log getLog() {\n                return logMock;\n            }\n        };\n        mojo.serviceName = \"service\";\n        mojo.sourceEncoding = \"UTF-8\";\n        when(serviceMock.isSelected()).thenReturn(true);\n    }", "start_lineno": 61, "end_lineno": 77}]}
{"index": 9, "project_index": 2, "class_index": 0, "test_index": 0, "user_name": "rockagen", "repo_name": "commons-lib", "sub_repos": [], "sub_repo": "", "commit_sha": "f37141cf40be79d130db804c39ce61690541d5f1", "build_system": "mvn", "class_name": "CommUtilTest", "class_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_name": "testHex", "test_setup_file_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_prefix": "    @Test\n    public void testHex(){\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 99, "test_prefix_end_lineno": 102, "focal_method_file_path": "src/main/java/com/rockagen/commons/util/CommUtil.java", "focal_method": "    public static String hexdump(final byte[] bytes) {\n        if (bytes == null || bytes.length < 1)\n            return \"[no data]\";\n        int length = bytes.length;\n\n        int temp;\n        char[] hex = new char[length * 2];\n        for (int i = 0; i < length; i++) {\n\n            // UnsignedByte\n            temp = bytes[i] & 0xFF;\n\n            hex[i * 2] = HEXARRAY[temp >>> 4];\n            hex[i * 2 + 1] = HEXARRAY[temp & 0x0F];\n\n        }\n        return new String(hex);\n    }", "focal_method_start_lineno": 1178, "focal_method_end_lineno": 1195, "ground_truth_oracle": "Assert.assertEquals(\"30323536E889B9\", CommUtil.hexdump(\"0256\u8279\".getBytes()));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testHex(){\n    }", "original_test_prefix": "    @Test\n    public void testHex(){\n        Assert.assertEquals(\"30323536E889B9\", CommUtil.hexdump(\"0256\u8279\".getBytes()));\n    }", "test_with_params": false, "test_target": "com.rockagen.commons.util.CommUtilTest#testHex", "test_setup_list": []}
{"index": 10, "project_index": 3, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JmxAttributePollerTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_name": "testGetSetScheduler", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "test_setup_start_lineno": 77, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_prefix": "    @Test\n    public void testGetSetScheduler() throws Exception {\n        <AssertPlaceHolder>;\n\n        this.poller.setScheduler(this.mockScheduler);\n        assertSame(this.mockScheduler, this.poller.getScheduler());\n    }", "test_prefix_start_lineno": 121, "test_prefix_end_lineno": 127, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java", "focal_method": "    public Scheduler getScheduler() {\n        return scheduler;\n    }", "focal_method_start_lineno": 83, "focal_method_end_lineno": 85, "ground_truth_oracle": "assertNull(this.poller.getScheduler());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetScheduler() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetScheduler() throws Exception {\n        assertNull(this.poller.getScheduler());\n\n        this.poller.setScheduler(this.mockScheduler);\n        assertSame(this.mockScheduler, this.poller.getScheduler());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.JmxAttributePollerTest#testGetSetScheduler", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "start_lineno": 77, "end_lineno": 111}]}
{"index": 11, "project_index": 4, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "StringUtilsTest", "class_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_name": "testNullIsEmpty", "test_setup_file_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_prefix": "  @Test\n  public void testNullIsEmpty() throws Exception\n  {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 86, "test_prefix_end_lineno": 90, "focal_method_file_path": "src/main/java/org/teachingextensions/approvals/lite/util/StringUtils.java", "focal_method": "  public static boolean isEmpty(String string) {\n    return !isNonZero(string);\n  }", "focal_method_start_lineno": 74, "focal_method_end_lineno": 76, "ground_truth_oracle": "assertTrue(StringUtils.isEmpty(null));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testNullIsEmpty() throws Exception\n  {\n  }", "original_test_prefix": "  @Test\n  public void testNullIsEmpty() throws Exception\n  {\n    assertTrue(StringUtils.isEmpty(null));\n  }", "test_with_params": false, "test_target": "org.teachingextensions.approvals.lite.util.StringUtilsTest#testNullIsEmpty", "test_setup_list": []}
{"index": 12, "project_index": 4, "class_index": 1, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_name": "sum_of_cell_distances_is_distance_to_goal", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_prefix": "  @Test\n  public void sum_of_cell_distances_is_distance_to_goal()\n  {\n    int[] cells = swap(getSolution(), 7, 8);\n    cells = swap(cells, 8, 5);\n    Puzzle p = new Puzzle(cells);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 169, "test_prefix_end_lineno": 176, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java", "focal_method": "  public int getDistanceToGoal()\n  {\n    int distance = 0;\n    for (int i = 0; i < cells.length; i++)\n    {\n      distance += getDistance(i, cells[i]);\n    }\n    return distance;\n  }", "focal_method_start_lineno": 108, "focal_method_end_lineno": 116, "ground_truth_oracle": "assertEquals(4, p.getDistanceToGoal());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void sum_of_cell_distances_is_distance_to_goal()\n  {\n    int[] cells = swap(getSolution(), 7, 8);\n    cells = swap(cells, 8, 5);\n    Puzzle p = new Puzzle(cells);\n  }", "original_test_prefix": "  @Test\n  public void sum_of_cell_distances_is_distance_to_goal()\n  {\n    int[] cells = swap(getSolution(), 7, 8);\n    cells = swap(cells, 8, 5);\n    Puzzle p = new Puzzle(cells);\n    assertEquals(4, p.getDistanceToGoal());\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleTest#sum_of_cell_distances_is_distance_to_goal", "test_setup_list": []}
{"index": 13, "project_index": 5, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "CharsetfunctionsTest", "class_path": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "test_name": "testIsValidUTF8off", "test_setup_file_path": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "test_prefix": "  @Test\n  public void testIsValidUTF8off() {\n    <AssertPlaceHolder>;\n    Assert.assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{(byte) 128}), 0));\n\n    Assert.assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{100}), 0));\n  }", "test_prefix_start_lineno": 47, "test_prefix_end_lineno": 53, "focal_method_file_path": "src/main/java/org/java_websocket/util/Charsetfunctions.java", "focal_method": "  public static boolean isValidUTF8(ByteBuffer data, int off) {\n    int len = data.remaining();\n    if (len < off) {\n      return false;\n    }\n    int state = 0;\n    for (int i = off; i < len; ++i) {\n      state = utf8d[256 + (state << 4) + utf8d[(0xff & data.get(i))]];\n      if (state == 1) {\n        return false;\n      }\n    }\n    return true;\n  }", "focal_method_start_lineno": 129, "focal_method_end_lineno": 142, "ground_truth_oracle": "Assert.assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{100}), 2));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testIsValidUTF8off() {\n  }", "original_test_prefix": "  @Test\n  public void testIsValidUTF8off() {\n    Assert.assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{100}), 2));\n    Assert.assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{(byte) 128}), 0));\n\n    Assert.assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{100}), 0));\n  }", "test_with_params": false, "test_target": "org.java_websocket.util.CharsetfunctionsTest#testIsValidUTF8off", "test_setup_list": []}
{"index": 14, "project_index": 6, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "SimulatorPropertiesTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/common/SimulatorPropertiesTest.java", "test_name": "testLoad_justKey", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/common/SimulatorPropertiesTest.java", "test_setup": "@Before\n    public void before() {\n        this.simulatorHome = setupFakeEnvironment();\n        this.simulatorProperties = new SimulatorProperties();\n    }", "test_setup_start_lineno": 28, "test_setup_end_lineno": 32, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/common/SimulatorPropertiesTest.java", "test_prefix": "    @Test\n    public void testLoad_justKey() {\n        File workingDirFile = new File(simulatorHome, \"simulator.properties\");\n        appendText(\"FOO\", workingDirFile);\n\n        simulatorProperties.load(workingDirFile);\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 98, "test_prefix_end_lineno": 106, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/common/SimulatorProperties.java", "focal_method": "    public String get(String name) {\n        return get(name, null);\n    }", "focal_method_start_lineno": 267, "focal_method_end_lineno": 269, "ground_truth_oracle": "assertTrue(simulatorProperties.get(\"FOO\").isEmpty());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testLoad_justKey() {\n        File workingDirFile = new File(simulatorHome, \"simulator.properties\");\n        appendText(\"FOO\", workingDirFile);\n\n        simulatorProperties.load(workingDirFile);\n\n    }", "original_test_prefix": "    @Test\n    public void testLoad_justKey() {\n        File workingDirFile = new File(simulatorHome, \"simulator.properties\");\n        appendText(\"FOO\", workingDirFile);\n\n        simulatorProperties.load(workingDirFile);\n\n        assertTrue(simulatorProperties.get(\"FOO\").isEmpty());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.common.SimulatorPropertiesTest#testLoad_justKey", "test_setup_list": [{"test_setup": "@Before\n    public void before() {\n        this.simulatorHome = setupFakeEnvironment();\n        this.simulatorProperties = new SimulatorProperties();\n    }", "start_lineno": 28, "end_lineno": 32}]}
{"index": 15, "project_index": 7, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "ReconnectManagerTest", "class_path": "src/test/java/com/alipay/remoting/rpc/connectionmanage/ReconnectManagerTest.java", "test_name": "testReconnectionByUserSetting", "test_setup_file_path": "src/test/java/com/alipay/remoting/rpc/connectionmanage/ReconnectManagerTest.java", "test_setup": "@Before\n    public void init() {\n    }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 68, "test_prefix_file_path": "src/test/java/com/alipay/remoting/rpc/connectionmanage/ReconnectManagerTest.java", "test_prefix": "    @Test\n    public void testReconnectionByUserSetting() throws InterruptedException, RemotingException {\n        doInit(false, true);\n        client.enableReconnectSwitch();\n\n        String addr = \"127.0.0.1:2014?zone=RZONE&_CONNECTIONNUM=1\";\n        Url url = addressParser.parse(addr);\n\n        Connection connection = client.getConnection(url, 1000);\n        <AssertPlaceHolder>;\n        Assert.assertEquals(1, clientConnectProcessor.getConnectTimes());\n        connection.close();\n        Thread.sleep(2000);\n        Assert.assertEquals(1, clientDisConnectProcessor.getDisConnectTimes());\n        Assert.assertEquals(2, clientConnectProcessor.getConnectTimes());\n    }", "test_prefix_start_lineno": 96, "test_prefix_end_lineno": 111, "focal_method_file_path": "src/main/java/com/alipay/remoting/rpc/RpcClient.java", "focal_method": "    @Override\n    public Connection getConnection(Url url, int connectTimeout) throws RemotingException,\n                                                                InterruptedException {\n        ensureStarted();\n        url.setConnectTimeout(connectTimeout);\n        return this.connectionManager.getAndCreateIfAbsent(url);\n    }", "focal_method_start_lineno": 417, "focal_method_end_lineno": 423, "ground_truth_oracle": "Assert.assertEquals(0, clientDisConnectProcessor.getDisConnectTimes());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testReconnectionByUserSetting() throws InterruptedException, RemotingException {\n        doInit(false, true);\n        client.enableReconnectSwitch();\n\n        String addr = \"127.0.0.1:2014?zone=RZONE&_CONNECTIONNUM=1\";\n        Url url = addressParser.parse(addr);\n\n        Connection connection = client.getConnection(url, 1000);\n    }", "original_test_prefix": "    @Test\n    public void testReconnectionByUserSetting() throws InterruptedException, RemotingException {\n        doInit(false, true);\n        client.enableReconnectSwitch();\n\n        String addr = \"127.0.0.1:2014?zone=RZONE&_CONNECTIONNUM=1\";\n        Url url = addressParser.parse(addr);\n\n        Connection connection = client.getConnection(url, 1000);\n        Assert.assertEquals(0, clientDisConnectProcessor.getDisConnectTimes());\n        Assert.assertEquals(1, clientConnectProcessor.getConnectTimes());\n        connection.close();\n        Thread.sleep(2000);\n        Assert.assertEquals(1, clientDisConnectProcessor.getDisConnectTimes());\n        Assert.assertEquals(2, clientConnectProcessor.getConnectTimes());\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.rpc.connectionmanage.ReconnectManagerTest#testReconnectionByUserSetting", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n    }", "start_lineno": 66, "end_lineno": 68}]}
{"index": 16, "project_index": 8, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "raml-loader", "sub_repos": [], "sub_repo": "", "commit_sha": "591fd551dc7c3f89ccf9ebbc142dba68fedfd481", "build_system": "mvn", "class_name": "LoaderTest", "class_path": "src/test/java/guru/nidi/loader/basic/LoaderTest.java", "test_name": "fileNok", "test_setup_file_path": "src/test/java/guru/nidi/loader/basic/LoaderTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/guru/nidi/loader/basic/LoaderTest.java", "test_prefix": "    @Test(expected = ResourceNotFoundException.class)\n    public void fileNok() {\n        final URL resource = Thread.currentThread().getContextClassLoader().getResource(\"guru/nidi/loader\");\n        <AssertPlaceHolder>;\n        new FileLoader(new File(resource.getPath())).fetchResource(\"bla\", -1);\n    }", "test_prefix_start_lineno": 125, "test_prefix_end_lineno": 130, "focal_method_file_path": "src/main/java/guru/nidi/loader/basic/FileLoader.java", "focal_method": "    @Override\n    public InputStream fetchResource(String name, long ifModifiedSince) {\n        try {\n            final File file = new File(base, name);\n            return file.lastModified() > ifModifiedSince\n                    ? new FileInputStream(file) : null;\n        } catch (FileNotFoundException e) {\n            throw new ResourceNotFoundException(name, e);\n        }\n    }", "focal_method_start_lineno": 34, "focal_method_end_lineno": 43, "ground_truth_oracle": "assertEquals(\"file\", resource.getProtocol());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test(expected = ResourceNotFoundException.class)\n    public void fileNok() {\n        final URL resource = Thread.currentThread().getContextClassLoader().getResource(\"guru/nidi/loader\");\n    }", "original_test_prefix": "    @Test(expected = ResourceNotFoundException.class)\n    public void fileNok() {\n        final URL resource = Thread.currentThread().getContextClassLoader().getResource(\"guru/nidi/loader\");\n        assertEquals(\"file\", resource.getProtocol());\n        new FileLoader(new File(resource.getPath())).fetchResource(\"bla\", -1);\n    }", "test_with_params": false, "test_target": "guru.nidi.loader.basic.LoaderTest#fileNok", "test_setup_list": []}
{"index": 17, "project_index": 9, "class_index": 0, "test_index": 0, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "DevUtilTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_name": "testGeneratedConfigFiles", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }\n\n@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "test_setup_start_lineno": 56, "test_setup_end_lineno": 59, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_prefix": "    @Test\n    public void testGeneratedConfigFiles() throws Exception {\n        File sourceFile = new File(configDirectory, \"bootstrap.properties\");\n        createTargetFile(sourceFile.getName(), true);\n        <AssertPlaceHolder>;\n\n        sourceFile = new File(configDirectory, \"jvm.options\");\n        createTargetFile(sourceFile.getName(), true);\n        assertTrue(\"File should be detected as a generated file\", util.isGeneratedConfigFile(sourceFile, configDirectory, targetDir));\n    }", "test_prefix_start_lineno": 439, "test_prefix_end_lineno": 448, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focal_method": "    protected boolean isGeneratedConfigFile(File fileChanged, File srcDir, File targetDir) throws IOException {\n        return (fileChanged.getName().equals(\"bootstrap.properties\") || fileChanged.getName().equals(\"jvm.options\"))\n                && isGeneratedTargetFile(fileChanged, srcDir, targetDir);\n    }", "focal_method_start_lineno": 3989, "focal_method_end_lineno": 3992, "ground_truth_oracle": "assertTrue(\"File should be detected as a generated file\", util.isGeneratedConfigFile(sourceFile, configDirectory, targetDir));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGeneratedConfigFiles() throws Exception {\n        File sourceFile = new File(configDirectory, \"bootstrap.properties\");\n        createTargetFile(sourceFile.getName(), true);\n    }", "original_test_prefix": "    @Test\n    public void testGeneratedConfigFiles() throws Exception {\n        File sourceFile = new File(configDirectory, \"bootstrap.properties\");\n        createTargetFile(sourceFile.getName(), true);\n        assertTrue(\"File should be detected as a generated file\", util.isGeneratedConfigFile(sourceFile, configDirectory, targetDir));\n\n        sourceFile = new File(configDirectory, \"jvm.options\");\n        createTargetFile(sourceFile.getName(), true);\n        assertTrue(\"File should be detected as a generated file\", util.isGeneratedConfigFile(sourceFile, configDirectory, targetDir));\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.DevUtilTest#testGeneratedConfigFiles", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }", "start_lineno": 56, "end_lineno": 59}, {"test_setup": "@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "start_lineno": 61, "end_lineno": 68}]}
{"index": 18, "project_index": 10, "class_index": 0, "test_index": 0, "user_name": "fluenda", "repo_name": "ParCEFone", "sub_repos": [], "sub_repo": "", "commit_sha": "5067b3315c1957f930f19549ec4b354e7b8c336d", "build_system": "mvn", "class_name": "MacAddressTest", "class_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_name": "testAddressUnderscoreSeparator", "test_setup_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_prefix": "    @Test\n    public void testAddressUnderscoreSeparator() {\n        final MacAddress macAddress = new MacAddress(UNDERSCORE_SEPARATOR);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 61, "test_prefix_end_lineno": 65, "focal_method_file_path": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focal_method": "    @Override\n    public String toString() {\n        final StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < address.length; i++) {\n            if (i != 0) {\n                builder.append(STANDARD_SEPARATOR);\n            }\n            builder.append(String.format(\"%02x\", address[i]));\n\n        }\n        return builder.toString();\n    }", "focal_method_start_lineno": 93, "focal_method_end_lineno": 104, "ground_truth_oracle": "assertEquals(NORMALIZED_ADDRESS, macAddress.toString());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testAddressUnderscoreSeparator() {\n        final MacAddress macAddress = new MacAddress(UNDERSCORE_SEPARATOR);\n    }", "original_test_prefix": "    @Test\n    public void testAddressUnderscoreSeparator() {\n        final MacAddress macAddress = new MacAddress(UNDERSCORE_SEPARATOR);\n        assertEquals(NORMALIZED_ADDRESS, macAddress.toString());\n    }", "test_with_params": false, "test_target": "com.fluenda.parcefone.event.MacAddressTest#testAddressUnderscoreSeparator", "test_setup_list": []}
{"index": 19, "project_index": 10, "class_index": 0, "test_index": 1, "user_name": "fluenda", "repo_name": "ParCEFone", "sub_repos": [], "sub_repo": "", "commit_sha": "5067b3315c1957f930f19549ec4b354e7b8c336d", "build_system": "mvn", "class_name": "MacAddressTest", "class_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_name": "testAddressCompareToEqual", "test_setup_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_prefix": "    @Test\n    public void testAddressCompareToEqual() {\n        final MacAddress macAddress = new MacAddress(MULTICAST_ADDRESS);\n        final int comparison = macAddress.compareTo(macAddress);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 125, "test_prefix_end_lineno": 130, "focal_method_file_path": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focal_method": "    @Override\n    public int compareTo(final MacAddress macAddress) {\n        int comparison = 0;\n\n        for (int i = 0; i < ADDRESS_LENGTH; i++) {\n            comparison = address[i] - macAddress.address[i];\n            if (comparison != 0) {\n                break;\n            }\n        }\n\n        return comparison;\n    }", "focal_method_start_lineno": 140, "focal_method_end_lineno": 152, "ground_truth_oracle": "assertEquals(0, comparison);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testAddressCompareToEqual() {\n        final MacAddress macAddress = new MacAddress(MULTICAST_ADDRESS);\n        final int comparison = macAddress.compareTo(macAddress);\n    }", "original_test_prefix": "    @Test\n    public void testAddressCompareToEqual() {\n        final MacAddress macAddress = new MacAddress(MULTICAST_ADDRESS);\n        final int comparison = macAddress.compareTo(macAddress);\n        assertEquals(0, comparison);\n    }", "test_with_params": false, "test_target": "com.fluenda.parcefone.event.MacAddressTest#testAddressCompareToEqual", "test_setup_list": []}
{"index": 20, "project_index": 11, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActivityProfileTest", "class_path": "src/test/java/gov/adlnet/xapi/ActivityProfileTest.java", "test_name": "testGetActivityId", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActivityProfileTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activities/unit-testing\";\n        String profileId = \"Unit Testing 101\";\n        activityProfile = new ActivityProfile(activityId, profileId);\n        assertNotNull(activityProfile);\n        JsonObject p = new JsonObject();\n        p.addProperty(\"ActPro\", \"Unit Test\");\n        activityProfile.setProfile(p);\n\n    }", "test_setup_start_lineno": 18, "test_setup_end_lineno": 28, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActivityProfileTest.java", "test_prefix": "    @Test\n    public void testGetActivityId() {\n        String expected = \"http://example.com/activities/unit-testing\";\n        String actual = activityProfile.getActivityId();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 49, "test_prefix_end_lineno": 55, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ActivityProfile.java", "focal_method": "    public String getActivityId() {\n        return activityId;\n    }", "focal_method_start_lineno": 20, "focal_method_end_lineno": 22, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetActivityId() {\n        String expected = \"http://example.com/activities/unit-testing\";\n        String actual = activityProfile.getActivityId();\n    }", "original_test_prefix": "    @Test\n    public void testGetActivityId() {\n        String expected = \"http://example.com/activities/unit-testing\";\n        String actual = activityProfile.getActivityId();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActivityProfileTest#testGetActivityId", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activities/unit-testing\";\n        String profileId = \"Unit Testing 101\";\n        activityProfile = new ActivityProfile(activityId, profileId);\n        assertNotNull(activityProfile);\n        JsonObject p = new JsonObject();\n        p.addProperty(\"ActPro\", \"Unit Test\");\n        activityProfile.setProfile(p);\n\n    }", "start_lineno": 18, "end_lineno": 28}]}
{"index": 21, "project_index": 12, "class_index": 0, "test_index": 0, "user_name": "trung", "repo_name": "InMemoryJavaCompiler", "sub_repos": [], "sub_repo": "", "commit_sha": "d84c404975dc308ee5a418c5af8a6629c5e6c995", "build_system": "mvn", "class_name": "InMemoryJavaCompilerTest", "class_path": "src/test/java/org/mdkt/compiler/InMemoryJavaCompilerTest.java", "test_name": "compile_WhenIgnoreWarnings", "test_setup_file_path": "src/test/java/org/mdkt/compiler/InMemoryJavaCompilerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/mdkt/compiler/InMemoryJavaCompilerTest.java", "test_prefix": "    @Test\n    public void compile_WhenIgnoreWarnings() throws Exception {\n        StringBuffer sourceCode = new StringBuffer();\n\n        sourceCode.append(\"package org.mdkt;\\n\");\n        sourceCode.append(\"public class HelloClass {\\n\");\n        sourceCode.append(\"   public java.util.List<String> hello() { return new java.util.ArrayList(); }\");\n        sourceCode.append(\"}\");\n        Class<?> helloClass = InMemoryJavaCompiler.newInstance().ignoreWarnings().compile(\"org.mdkt.HelloClass\", sourceCode.toString());\n        List<?> res = (List<?>) helloClass.getMethod(\"hello\").invoke(helloClass.newInstance());\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 88, "test_prefix_end_lineno": 99, "focal_method_file_path": "src/main/java/org/mdkt/compiler/InMemoryJavaCompiler.java", "focal_method": "    public Class<?> compile(String className, String sourceCode) throws Exception {\n        return addSource(className, sourceCode).compileAll().get(className);\n    }", "focal_method_start_lineno": 125, "focal_method_end_lineno": 127, "ground_truth_oracle": "Assert.assertEquals(0, res.size());", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "    @Test\n    public void compile_WhenIgnoreWarnings() throws Exception {\n        StringBuffer sourceCode = new StringBuffer();\n\n        sourceCode.append(\"package org.mdkt;\\n\");\n        sourceCode.append(\"public class HelloClass {\\n\");\n        sourceCode.append(\"   public java.util.List<String> hello() { return new java.util.ArrayList(); }\");\n        sourceCode.append(\"}\");\n        Class<?> helloClass = InMemoryJavaCompiler.newInstance().ignoreWarnings().compile(\"org.mdkt.HelloClass\", sourceCode.toString());\n        List<?> res = (List<?>) helloClass.getMethod(\"hello\").invoke(helloClass.newInstance());\n    }", "original_test_prefix": "    @Test\n    public void compile_WhenIgnoreWarnings() throws Exception {\n        StringBuffer sourceCode = new StringBuffer();\n\n        sourceCode.append(\"package org.mdkt;\\n\");\n        sourceCode.append(\"public class HelloClass {\\n\");\n        sourceCode.append(\"   public java.util.List<String> hello() { return new java.util.ArrayList(); }\");\n        sourceCode.append(\"}\");\n        Class<?> helloClass = InMemoryJavaCompiler.newInstance().ignoreWarnings().compile(\"org.mdkt.HelloClass\", sourceCode.toString());\n        List<?> res = (List<?>) helloClass.getMethod(\"hello\").invoke(helloClass.newInstance());\n        Assert.assertEquals(0, res.size());\n    }", "test_with_params": false, "test_target": "org.mdkt.compiler.InMemoryJavaCompilerTest#compile_WhenIgnoreWarnings", "test_setup_list": []}
{"index": 22, "project_index": 13, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "tuStum", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void tuStum() {\n\n        Word stum = loc\u012bt\u0101js.analyze(\"stum\");\n        <AssertPlaceHolder>;\n\n        assertEquals(\"2\", stum.wordforms.get(0).getValue(AttributeNames.i_Person));\n        assertEquals(AttributeNames.v_Tagadne, stum.wordforms.get(0).getValue(AttributeNames.i_Laiks));\n    }", "test_prefix_start_lineno": 544, "test_prefix_end_lineno": 552, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(stum.isRecognized());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void tuStum() {\n\n        Word stum = loc\u012bt\u0101js.analyze(\"stum\");\n    }", "original_test_prefix": "    @Test\n    public void tuStum() {\n\n        Word stum = loc\u012bt\u0101js.analyze(\"stum\");\n        assertTrue(stum.isRecognized());\n\n        assertEquals(\"2\", stum.wordforms.get(0).getValue(AttributeNames.i_Person));\n        assertEquals(AttributeNames.v_Tagadne, stum.wordforms.get(0).getValue(AttributeNames.i_Laiks));\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#tuStum", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 23, "project_index": 14, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "MapUtilTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java", "test_name": "testMergeIfAbsent", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java", "test_prefix": "    @Test\n    public void testMergeIfAbsent() {\n        Map<String, String> origMap = createMap(\"eins\", \"one\", \"zwei\", \"two\");\n        Map<String, String> toMergeMap = createMap(\"zwei\", \"deux\", \"drei\", \"trois\");\n        Map<String, String> expected = createMap(\"eins\", \"one\", \"zwei\", \"two\", \"drei\", \"trois\");\n        MapUtil.mergeIfAbsent(origMap, toMergeMap);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 31, "test_prefix_end_lineno": 38, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/MapUtil.java", "focal_method": "    public static void mergeIfAbsent(Map<String, String> map, Map<String, String> toMerge) {\n        for (Map.Entry<String, String> entry : toMerge.entrySet()) {\n            putIfAbsent(map, entry.getKey(), entry.getValue());;\n        }\n    }", "focal_method_start_lineno": 41, "focal_method_end_lineno": 45, "ground_truth_oracle": "assertEquals(expected, origMap);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testMergeIfAbsent() {\n        Map<String, String> origMap = createMap(\"eins\", \"one\", \"zwei\", \"two\");\n        Map<String, String> toMergeMap = createMap(\"zwei\", \"deux\", \"drei\", \"trois\");\n        Map<String, String> expected = createMap(\"eins\", \"one\", \"zwei\", \"two\", \"drei\", \"trois\");\n        MapUtil.mergeIfAbsent(origMap, toMergeMap);\n    }", "original_test_prefix": "    @Test\n    public void testMergeIfAbsent() {\n        Map<String, String> origMap = createMap(\"eins\", \"one\", \"zwei\", \"two\");\n        Map<String, String> toMergeMap = createMap(\"zwei\", \"deux\", \"drei\", \"trois\");\n        Map<String, String> expected = createMap(\"eins\", \"one\", \"zwei\", \"two\", \"drei\", \"trois\");\n        MapUtil.mergeIfAbsent(origMap, toMergeMap);\n        assertEquals(expected, origMap);\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.MapUtilTest#testMergeIfAbsent", "test_setup_list": []}
{"index": 24, "project_index": 15, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "RecordsTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java", "test_name": "tagRec", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java", "test_prefix": "    @Test\n    void tagRec() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 50, "test_prefix_end_lineno": 53, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Records.java", "focal_method": "    public static String rec(String tag, String label) {\n        return \"<\" + tag + \">\" + rec(label);\n    }", "focal_method_start_lineno": 47, "focal_method_end_lineno": 49, "ground_truth_oracle": "assertEquals(\"<tag>label\", Records.rec(\"tag\", \"label\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void tagRec() {\n    }", "original_test_prefix": "    @Test\n    void tagRec() {\n        assertEquals(\"<tag>label\", Records.rec(\"tag\", \"label\"));\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.RecordsTest#tagRec", "test_setup_list": []}
{"index": 25, "project_index": 16, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "ReconnectManagerTest", "class_path": "src/test/java/com/alipay/remoting/rpc/connectionmanage/ReconnectManagerTest.java", "test_name": "testCancelReConnection", "test_setup_file_path": "src/test/java/com/alipay/remoting/rpc/connectionmanage/ReconnectManagerTest.java", "test_setup": "@Before\n    public void init() {\n    }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 68, "test_prefix_file_path": "src/test/java/com/alipay/remoting/rpc/connectionmanage/ReconnectManagerTest.java", "test_prefix": "    @Test\n    public void testCancelReConnection() throws InterruptedException, RemotingException {\n        doInit(false, true);\n        client.enableReconnectSwitch();\n\n        String addr = \"127.0.0.1:2014?zone=RZONE&_CONNECTIONNUM=1\";\n        Url url = addressParser.parse(addr);\n\n        client.getConnection(url, 1000);\n        <AssertPlaceHolder>;\n        Assert.assertEquals(1, clientConnectProcessor.getConnectTimes());\n\n        client.closeConnection(url);\n\n        Thread.sleep(1000);\n        Assert.assertEquals(1, clientDisConnectProcessor.getDisConnectTimes());\n        Assert.assertEquals(1, clientConnectProcessor.getConnectTimes());\n    }", "test_prefix_start_lineno": 113, "test_prefix_end_lineno": 130, "focal_method_file_path": "src/main/java/com/alipay/remoting/rpc/RpcClient.java", "focal_method": "    @Override\n    public Connection getConnection(Url url, int connectTimeout) throws RemotingException,\n                                                                InterruptedException {\n        ensureStarted();\n        url.setConnectTimeout(connectTimeout);\n        return this.connectionManager.getAndCreateIfAbsent(url);\n    }", "focal_method_start_lineno": 417, "focal_method_end_lineno": 423, "ground_truth_oracle": "Assert.assertEquals(0, clientDisConnectProcessor.getDisConnectTimes());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testCancelReConnection() throws InterruptedException, RemotingException {\n        doInit(false, true);\n        client.enableReconnectSwitch();\n\n        String addr = \"127.0.0.1:2014?zone=RZONE&_CONNECTIONNUM=1\";\n        Url url = addressParser.parse(addr);\n\n        client.getConnection(url, 1000);\n    }", "original_test_prefix": "    @Test\n    public void testCancelReConnection() throws InterruptedException, RemotingException {\n        doInit(false, true);\n        client.enableReconnectSwitch();\n\n        String addr = \"127.0.0.1:2014?zone=RZONE&_CONNECTIONNUM=1\";\n        Url url = addressParser.parse(addr);\n\n        client.getConnection(url, 1000);\n        Assert.assertEquals(0, clientDisConnectProcessor.getDisConnectTimes());\n        Assert.assertEquals(1, clientConnectProcessor.getConnectTimes());\n\n        client.closeConnection(url);\n\n        Thread.sleep(1000);\n        Assert.assertEquals(1, clientDisConnectProcessor.getDisConnectTimes());\n        Assert.assertEquals(1, clientConnectProcessor.getConnectTimes());\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.rpc.connectionmanage.ReconnectManagerTest#testCancelReConnection", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n    }", "start_lineno": 66, "end_lineno": 68}]}
{"index": 26, "project_index": 16, "class_index": 1, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "ThreadLocalArriveTimeHolderTest", "class_path": "src/test/java/com/alipay/remoting/util/ThreadLocalArriveTimeHolderTest.java", "test_name": "testMultiThread", "test_setup_file_path": "src/test/java/com/alipay/remoting/util/ThreadLocalArriveTimeHolderTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/alipay/remoting/util/ThreadLocalArriveTimeHolderTest.java", "test_prefix": "    @Test\n    public void testMultiThread() throws InterruptedException {\n        final EmbeddedChannel channel = new EmbeddedChannel();\n        final CountDownLatch countDownLatch = new CountDownLatch(1);\n        long start = System.nanoTime();\n        ThreadLocalArriveTimeHolder.arrive(channel, 1);\n        long end = System.nanoTime();\n        ThreadLocalArriveTimeHolder.arrive(channel, 1);\n        long time = ThreadLocalArriveTimeHolder.getAndClear(channel, 1);\n        <AssertPlaceHolder>;\n        Assert.assertTrue(time <= end);\n        Assert.assertEquals(-1, ThreadLocalArriveTimeHolder.getAndClear(channel, 1));\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                long start = System.nanoTime();\n                ThreadLocalArriveTimeHolder.arrive(channel, 1);\n                long end = System.nanoTime();\n                long time = ThreadLocalArriveTimeHolder.getAndClear(channel, 1);\n                Assert.assertTrue(time >= start);\n                Assert.assertTrue(time <= end);\n                Assert.assertEquals(-1, ThreadLocalArriveTimeHolder.getAndClear(channel, 1));\n                countDownLatch.countDown();\n            }\n        };\n        new Thread(runnable).start();\n        Assert.assertTrue(countDownLatch.await(2, TimeUnit.SECONDS));\n    }", "test_prefix_start_lineno": 50, "test_prefix_end_lineno": 77, "focal_method_file_path": "src/main/java/com/alipay/remoting/util/ThreadLocalArriveTimeHolder.java", "focal_method": "    public static long getAndClear(Channel channel, Integer key) {\n        Map<Integer, Long> map = getArriveTimeMap(channel);\n        Long result = map.remove(key);\n        if (result == null) {\n            return -1;\n        }\n        return result;\n    }", "focal_method_start_lineno": 41, "focal_method_end_lineno": 48, "ground_truth_oracle": "Assert.assertTrue(time >= start);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "    @Test\n    public void testMultiThread() throws InterruptedException {\n        final EmbeddedChannel channel = new EmbeddedChannel();\n        final CountDownLatch countDownLatch = new CountDownLatch(1);\n        long start = System.nanoTime();\n        ThreadLocalArriveTimeHolder.arrive(channel, 1);\n        long end = System.nanoTime();\n        ThreadLocalArriveTimeHolder.arrive(channel, 1);\n        long time = ThreadLocalArriveTimeHolder.getAndClear(channel, 1);\n    }", "original_test_prefix": "    @Test\n    public void testMultiThread() throws InterruptedException {\n        final EmbeddedChannel channel = new EmbeddedChannel();\n        final CountDownLatch countDownLatch = new CountDownLatch(1);\n        long start = System.nanoTime();\n        ThreadLocalArriveTimeHolder.arrive(channel, 1);\n        long end = System.nanoTime();\n        ThreadLocalArriveTimeHolder.arrive(channel, 1);\n        long time = ThreadLocalArriveTimeHolder.getAndClear(channel, 1);\n        Assert.assertTrue(time >= start);\n        Assert.assertTrue(time <= end);\n        Assert.assertEquals(-1, ThreadLocalArriveTimeHolder.getAndClear(channel, 1));\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                long start = System.nanoTime();\n                ThreadLocalArriveTimeHolder.arrive(channel, 1);\n                long end = System.nanoTime();\n                long time = ThreadLocalArriveTimeHolder.getAndClear(channel, 1);\n                Assert.assertTrue(time >= start);\n                Assert.assertTrue(time <= end);\n                Assert.assertEquals(-1, ThreadLocalArriveTimeHolder.getAndClear(channel, 1));\n                countDownLatch.countDown();\n            }\n        };\n        new Thread(runnable).start();\n        Assert.assertTrue(countDownLatch.await(2, TimeUnit.SECONDS));\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.util.ThreadLocalArriveTimeHolderTest#testMultiThread", "test_setup_list": []}
{"index": 27, "project_index": 17, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "SubStatementTest", "class_path": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "test_name": "testSetAttachments", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        substatement = new SubStatement();\n        substatement.setTimestamp(TIME);\n        actor = new Agent();\n        actor.setMbox(MBOX);\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        verb = new Verb(ID, display);\n        activity = new Activity(TEST_IRI);\n        substatement.setActor(actor);\n        substatement.setVerb(verb);\n        substatement.setObject(activity);\n        result = new Result();\n        result.setSuccess(false);\n        substatement.setResult(result);\n        context = new Context();\n        context.setLanguage(LANGUAGE);\n        substatement.setContext(context);\n        attachments = new ArrayList<Attachment>();\n        Attachment att = new Attachment();\n\n        HashMap<String, String> attDisplay = new HashMap<String, String>();\n        attDisplay.put(\"en-US\", \"Test Display.\");\n        att.setDisplay(attDisplay);\n\n        HashMap<String, String> description = new HashMap<String, String>();\n        description.put(\"en-US\", \"Test Description.\");\n        att.setDescription(description);\n\n        URI usageType = new URI(\"http://example.com/test/usage\");\n        att.setUsageType(usageType);\n\n        String attach = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        att.addAttachment(attach, contentType);\n\n        attachments.add(att);\n        substatement.setAttachments(attachments);\n    }", "test_setup_start_lineno": 47, "test_setup_end_lineno": 86, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "test_prefix": "    @Test\n    public void testSetAttachments() throws URISyntaxException, NoSuchAlgorithmException, IOException {\n        ArrayList<Attachment> expected = attachments;\n        expected.remove(0);\n\n        Attachment att = new Attachment();\n\n        HashMap<String, String> attDisplay = new HashMap<String, String>();\n        attDisplay.put(\"en-US\", \"Test Display.\");\n        att.setDisplay(attDisplay);\n\n        HashMap<String, String> description = new HashMap<String, String>();\n        description.put(\"en-US\", \"New Test Description.\");\n        att.setDescription(description);\n\n        URI usageType = new URI(\"http://example.com/test/usage\");\n        att.setUsageType(usageType);\n\n        String attach = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        att.addAttachment(attach, contentType);\n\n        expected.add(att);\n\n        ArrayList<Attachment> actual = substatement.getAttachments();\n        <AssertPlaceHolder>;\n        assertEquals(expected.get(0), actual.get(0));\n    }", "test_prefix_start_lineno": 123, "test_prefix_end_lineno": 150, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/SubStatement.java", "focal_method": "    public ArrayList<Attachment> getAttachments() {\n        return attachments;\n    }", "focal_method_start_lineno": 24, "focal_method_end_lineno": 26, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 16, "test_prefix_wo_placeholder": "    @Test\n    public void testSetAttachments() throws URISyntaxException, NoSuchAlgorithmException, IOException {\n        ArrayList<Attachment> expected = attachments;\n        expected.remove(0);\n\n        Attachment att = new Attachment();\n\n        HashMap<String, String> attDisplay = new HashMap<String, String>();\n        attDisplay.put(\"en-US\", \"Test Display.\");\n        att.setDisplay(attDisplay);\n\n        HashMap<String, String> description = new HashMap<String, String>();\n        description.put(\"en-US\", \"New Test Description.\");\n        att.setDescription(description);\n\n        URI usageType = new URI(\"http://example.com/test/usage\");\n        att.setUsageType(usageType);\n\n        String attach = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        att.addAttachment(attach, contentType);\n\n        expected.add(att);\n\n        ArrayList<Attachment> actual = substatement.getAttachments();\n    }", "original_test_prefix": "    @Test\n    public void testSetAttachments() throws URISyntaxException, NoSuchAlgorithmException, IOException {\n        ArrayList<Attachment> expected = attachments;\n        expected.remove(0);\n\n        Attachment att = new Attachment();\n\n        HashMap<String, String> attDisplay = new HashMap<String, String>();\n        attDisplay.put(\"en-US\", \"Test Display.\");\n        att.setDisplay(attDisplay);\n\n        HashMap<String, String> description = new HashMap<String, String>();\n        description.put(\"en-US\", \"New Test Description.\");\n        att.setDescription(description);\n\n        URI usageType = new URI(\"http://example.com/test/usage\");\n        att.setUsageType(usageType);\n\n        String attach = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        att.addAttachment(attach, contentType);\n\n        expected.add(att);\n\n        ArrayList<Attachment> actual = substatement.getAttachments();\n        assertNotNull(actual);\n        assertEquals(expected.get(0), actual.get(0));\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.SubStatementTest#testSetAttachments", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        substatement = new SubStatement();\n        substatement.setTimestamp(TIME);\n        actor = new Agent();\n        actor.setMbox(MBOX);\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        verb = new Verb(ID, display);\n        activity = new Activity(TEST_IRI);\n        substatement.setActor(actor);\n        substatement.setVerb(verb);\n        substatement.setObject(activity);\n        result = new Result();\n        result.setSuccess(false);\n        substatement.setResult(result);\n        context = new Context();\n        context.setLanguage(LANGUAGE);\n        substatement.setContext(context);\n        attachments = new ArrayList<Attachment>();\n        Attachment att = new Attachment();\n\n        HashMap<String, String> attDisplay = new HashMap<String, String>();\n        attDisplay.put(\"en-US\", \"Test Display.\");\n        att.setDisplay(attDisplay);\n\n        HashMap<String, String> description = new HashMap<String, String>();\n        description.put(\"en-US\", \"Test Description.\");\n        att.setDescription(description);\n\n        URI usageType = new URI(\"http://example.com/test/usage\");\n        att.setUsageType(usageType);\n\n        String attach = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        att.addAttachment(attach, contentType);\n\n        attachments.add(att);\n        substatement.setAttachments(attachments);\n    }", "start_lineno": 47, "end_lineno": 86}]}
{"index": 28, "project_index": 17, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "VerbsTest", "class_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_name": "testTerminated", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_prefix": "    @Test\n    public void testTerminated() {\n        Verb actual = Verbs.terminated();\n        <AssertPlaceHolder>;\n        assertEquals(\"terminated\", actual.toString());\n    }", "test_prefix_start_lineno": 174, "test_prefix_end_lineno": 179, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focal_method": "    public static Verb terminated(){\n        return createVerb(\"terminated\");\n    }", "focal_method_start_lineno": 85, "focal_method_end_lineno": 87, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testTerminated() {\n        Verb actual = Verbs.terminated();\n    }", "original_test_prefix": "    @Test\n    public void testTerminated() {\n        Verb actual = Verbs.terminated();\n        assertNotNull(actual);\n        assertEquals(\"terminated\", actual.toString());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.VerbsTest#testTerminated", "test_setup_list": []}
{"index": 29, "project_index": 17, "class_index": 2, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ResultTest", "class_path": "src/test/java/gov/adlnet/xapi/ResultTest.java", "test_name": "testSetResponse", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ResultTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        result = new Result();\n        result.setCompletion(true);\n        result.setDuration(DURATION);\n        result.setResponse(RESPONSE);\n        Score score = new Score();\n        result.setScore(score);\n        result.setSuccess(true);\n        JsonObject extensions = new JsonObject();\n        extensions.addProperty(IRI, \"Result Extension\");\n        result.setExtensions(extensions);\n    }", "test_setup_start_lineno": 22, "test_setup_end_lineno": 34, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ResultTest.java", "test_prefix": "    @Test\n    public void testSetResponse() {\n        String expected = \"New \" + RESPONSE;\n        result.setResponse(expected);\n        String actual = result.getResponse();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 97, "test_prefix_end_lineno": 104, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Result.java", "focal_method": "    public String getResponse() {\n        return response;\n    }", "focal_method_start_lineno": 38, "focal_method_end_lineno": 40, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testSetResponse() {\n        String expected = \"New \" + RESPONSE;\n        result.setResponse(expected);\n        String actual = result.getResponse();\n    }", "original_test_prefix": "    @Test\n    public void testSetResponse() {\n        String expected = \"New \" + RESPONSE;\n        result.setResponse(expected);\n        String actual = result.getResponse();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ResultTest#testSetResponse", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        result = new Result();\n        result.setCompletion(true);\n        result.setDuration(DURATION);\n        result.setResponse(RESPONSE);\n        Score score = new Score();\n        result.setScore(score);\n        result.setSuccess(true);\n        JsonObject extensions = new JsonObject();\n        extensions.addProperty(IRI, \"Result Extension\");\n        result.setExtensions(extensions);\n    }", "start_lineno": 22, "end_lineno": 34}]}
{"index": 30, "project_index": 18, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "DefaultValueTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/DefaultValueTest.java", "test_name": "testDefaultValueFromJson", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/DefaultValueTest.java", "test_setup": "@Before\n  public void before() {\n    database = new ODatabaseDocumentTx(\"memory:\" + DefaultValueTest.class.getSimpleName());\n    database.create();\n  }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 33, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/DefaultValueTest.java", "test_prefix": "  @Test\n  public void testDefaultValueFromJson() {\n    OSchema schema = database.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"ClassA\");\n\n    OProperty prop = classA.createProperty(\"date\", OType.DATE);\n    prop.setDefaultValue(ODateHelper.getDateTimeFormatInstance().format(new Date()));\n\n    ODocument doc = new ODocument().fromJSON(\"{'@class':'ClassA','other':'other'}\");\n    ODocument saved = database.save(doc);\n    <AssertPlaceHolder>;\n    assertTrue(saved.field(\"date\") instanceof Date);\n    assertNotNull(saved.field(\"other\"));\n  }", "test_prefix_start_lineno": 83, "test_prefix_end_lineno": 96, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  @Override\n  public <RET> RET field(final String iFieldName) {\n    RET value = this.rawField(iFieldName);\n\n    if (!iFieldName.startsWith(\"@\") && _lazyLoad && value instanceof ORID && (((ORID) value).isPersistent() || ((ORID) value)\n        .isNew()) && ODatabaseRecordThreadLocal.instance().isDefined()) {\n      // CREATE THE DOCUMENT OBJECT IN LAZY WAY\n      RET newValue = getDatabase().load((ORID) value);\n      if (newValue != null) {\n        unTrack((ORID) value);\n        track((OIdentifiable) newValue);\n        value = newValue;\n        if (this.isTrackingChanges()) {\n          ORecordInternal.setDirtyManager((ORecord) value, this.getDirtyManager());\n        }\n        if (!iFieldName.contains(\".\")) {\n          ODocumentEntry entry = _fields.get(iFieldName);\n          removeCollectionChangeListener(entry, entry.value);\n          entry.value = value;\n          addCollectionChangeListener(entry);\n        }\n      }\n    }\n\n    return value;\n  }", "focal_method_start_lineno": 1201, "focal_method_end_lineno": 1226, "ground_truth_oracle": "assertNotNull(saved.field(\"date\"));", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test\n  public void testDefaultValueFromJson() {\n    OSchema schema = database.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"ClassA\");\n\n    OProperty prop = classA.createProperty(\"date\", OType.DATE);\n    prop.setDefaultValue(ODateHelper.getDateTimeFormatInstance().format(new Date()));\n\n    ODocument doc = new ODocument().fromJSON(\"{'@class':'ClassA','other':'other'}\");\n    ODocument saved = database.save(doc);\n  }", "original_test_prefix": "  @Test\n  public void testDefaultValueFromJson() {\n    OSchema schema = database.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"ClassA\");\n\n    OProperty prop = classA.createProperty(\"date\", OType.DATE);\n    prop.setDefaultValue(ODateHelper.getDateTimeFormatInstance().format(new Date()));\n\n    ODocument doc = new ODocument().fromJSON(\"{'@class':'ClassA','other':'other'}\");\n    ODocument saved = database.save(doc);\n    assertNotNull(saved.field(\"date\"));\n    assertTrue(saved.field(\"date\") instanceof Date);\n    assertNotNull(saved.field(\"other\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.record.impl.DefaultValueTest#testDefaultValueFromJson", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    database = new ODatabaseDocumentTx(\"memory:\" + DefaultValueTest.class.getSimpleName());\n    database.create();\n  }", "start_lineno": 29, "end_lineno": 33}]}
{"index": 31, "project_index": 18, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "object", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "SimpleParentChildTest", "class_path": "object/src/test/java/com/orientechnologies/orient/object/db/SimpleParentChildTest.java", "test_name": "testWithSets", "test_setup_file_path": "object/src/test/java/com/orientechnologies/orient/object/db/SimpleParentChildTest.java", "test_setup": "@Before\n  public void before() {\n    database = new OObjectDatabaseTx(url);\n    database.create();\n    database.getEntityManager().registerEntityClass(SimpleChild.class);\n    database.getEntityManager().registerEntityClass(SimpleParent.class);\n    database.getEntityManager().registerEntityClass(ObjectWithSet.class);\n  }", "test_setup_start_lineno": 26, "test_setup_end_lineno": 33, "test_prefix_file_path": "object/src/test/java/com/orientechnologies/orient/object/db/SimpleParentChildTest.java", "test_prefix": "  @Test\n  public void testWithSets() {\n    ObjectWithSet parent = new ObjectWithSet();\n    ObjectWithSet child = new ObjectWithSet();\n    parent.addFriend(child);\n    child.setName(\"child1\");\n    ObjectWithSet savedParent = database.save(parent);\n    String parentId = savedParent.getId();\n\n    this.database.close();\n    this.database = new OObjectDatabaseTx(url);\n    this.database.open(\"admin\", \"admin\");\n\n    ObjectWithSet retrievedParent = this.database.load(new ORecordId(parentId));\n    ObjectWithSet retrievedChild = retrievedParent.getFriends().iterator().next();\n    retrievedChild.setName(\"child2\");\n    this.database.save(retrievedParent);\n\n    this.database.close();\n    this.database = new OObjectDatabaseTx(url);\n    this.database.open(\"admin\", \"admin\");\n\n    retrievedParent = this.database.load(new ORecordId(parentId));\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 52, "test_prefix_end_lineno": 76, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focal_method": "  <RET extends T> RET load(ORID recordId);", "focal_method_start_lineno": 653, "focal_method_end_lineno": 653, "ground_truth_oracle": "Assert.assertEquals(\"child2\", retrievedParent.getFriends().iterator().next().getName());", "ground_truth_oracle_lineno": 17, "test_prefix_wo_placeholder": "  @Test\n  public void testWithSets() {\n    ObjectWithSet parent = new ObjectWithSet();\n    ObjectWithSet child = new ObjectWithSet();\n    parent.addFriend(child);\n    child.setName(\"child1\");\n    ObjectWithSet savedParent = database.save(parent);\n    String parentId = savedParent.getId();\n\n    this.database.close();\n    this.database = new OObjectDatabaseTx(url);\n    this.database.open(\"admin\", \"admin\");\n\n    ObjectWithSet retrievedParent = this.database.load(new ORecordId(parentId));\n    ObjectWithSet retrievedChild = retrievedParent.getFriends().iterator().next();\n    retrievedChild.setName(\"child2\");\n    this.database.save(retrievedParent);\n\n    this.database.close();\n    this.database = new OObjectDatabaseTx(url);\n    this.database.open(\"admin\", \"admin\");\n\n    retrievedParent = this.database.load(new ORecordId(parentId));\n  }", "original_test_prefix": "  @Test\n  public void testWithSets() {\n    ObjectWithSet parent = new ObjectWithSet();\n    ObjectWithSet child = new ObjectWithSet();\n    parent.addFriend(child);\n    child.setName(\"child1\");\n    ObjectWithSet savedParent = database.save(parent);\n    String parentId = savedParent.getId();\n\n    this.database.close();\n    this.database = new OObjectDatabaseTx(url);\n    this.database.open(\"admin\", \"admin\");\n\n    ObjectWithSet retrievedParent = this.database.load(new ORecordId(parentId));\n    ObjectWithSet retrievedChild = retrievedParent.getFriends().iterator().next();\n    retrievedChild.setName(\"child2\");\n    this.database.save(retrievedParent);\n\n    this.database.close();\n    this.database = new OObjectDatabaseTx(url);\n    this.database.open(\"admin\", \"admin\");\n\n    retrievedParent = this.database.load(new ORecordId(parentId));\n    Assert.assertEquals(\"child2\", retrievedParent.getFriends().iterator().next().getName());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.object.db.SimpleParentChildTest#testWithSets", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    database = new OObjectDatabaseTx(url);\n    database.create();\n    database.getEntityManager().registerEntityClass(SimpleChild.class);\n    database.getEntityManager().registerEntityClass(SimpleParent.class);\n    database.getEntityManager().registerEntityClass(ObjectWithSet.class);\n  }", "start_lineno": 26, "end_lineno": 33}]}
{"index": 32, "project_index": 18, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OScriptExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "test_name": "testLazyExecutionPlanning", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OScriptExecutionTest\");\n    db.create();\n  }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 25, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "test_prefix": "  @Test\n  public void testLazyExecutionPlanning() {\n    String script = \"\";\n    script += \"LET $1 = SELECT FROM (select expand(classes) from metadata:schema) where name = 'nonExistingClass';\";\n    script += \"IF($1.size() > 0) {\";\n    script += \"   SELECT FROM nonExistingClass;\";\n    script += \"   RETURN 'FAIL';\";\n    script += \"}\";\n    script += \"RETURN 'OK';\";\n    OResultSet result = db.execute(\"SQL\", script);\n\n    OResult item = result.next();\n\n    <AssertPlaceHolder>;\n    result.close();\n  }", "test_prefix_start_lineno": 115, "test_prefix_end_lineno": 130, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focal_method": "  <T> T getProperty(String name);", "focal_method_start_lineno": 29, "focal_method_end_lineno": 29, "ground_truth_oracle": "Assert.assertEquals(\"OK\", item.getProperty(\"value\"));", "ground_truth_oracle_lineno": 9, "test_prefix_wo_placeholder": "  @Test\n  public void testLazyExecutionPlanning() {\n    String script = \"\";\n    script += \"LET $1 = SELECT FROM (select expand(classes) from metadata:schema) where name = 'nonExistingClass';\";\n    script += \"IF($1.size() > 0) {\";\n    script += \"   SELECT FROM nonExistingClass;\";\n    script += \"   RETURN 'FAIL';\";\n    script += \"}\";\n    script += \"RETURN 'OK';\";\n    OResultSet result = db.execute(\"SQL\", script);\n\n    OResult item = result.next();\n\n  }", "original_test_prefix": "  @Test\n  public void testLazyExecutionPlanning() {\n    String script = \"\";\n    script += \"LET $1 = SELECT FROM (select expand(classes) from metadata:schema) where name = 'nonExistingClass';\";\n    script += \"IF($1.size() > 0) {\";\n    script += \"   SELECT FROM nonExistingClass;\";\n    script += \"   RETURN 'FAIL';\";\n    script += \"}\";\n    script += \"RETURN 'OK';\";\n    OResultSet result = db.execute(\"SQL\", script);\n\n    OResult item = result.next();\n\n    Assert.assertEquals(\"OK\", item.getProperty(\"value\"));\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.OScriptExecutionTest#testLazyExecutionPlanning", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OScriptExecutionTest\");\n    db.create();\n  }", "start_lineno": 21, "end_lineno": 25}]}
{"index": 33, "project_index": 18, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OAlterPropertyStatementExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterPropertyStatementExecutionTest.java", "test_name": "testSetCustom", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterPropertyStatementExecutionTest.java", "test_setup": "@BeforeClass public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OAlterPropertyStatementExecutionTest\");\n    db.create();\n  }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 24, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OAlterPropertyStatementExecutionTest.java", "test_prefix": "  @Test public void testSetCustom() {\n    String className = \"testSetCustom\";\n    OClass clazz = db.getMetadata().getSchema().createClass(className);\n    OProperty prop = clazz.createProperty(\"name\", OType.STRING);\n    prop.setCustom(\"foo\", \"bar\");\n\n    OResultSet result = db.command(\"alter property \" + className + \".name custom foo='baz'\");\n    printExecutionPlan(null, result);\n    Object currentValue = prop.getCustom(\"foo\");\n\n    <AssertPlaceHolder>;\n    Assert.assertTrue(result.hasNext());\n    OResult next = result.next();\n    Assert.assertNotNull(next);\n    Assert.assertEquals(\"bar\", next.getProperty(\"oldValue\"));\n    Assert.assertEquals(\"baz\", currentValue);\n    Assert.assertEquals(currentValue, next.getProperty(\"newValue\"));\n    result.close();\n  }", "test_prefix_start_lineno": 50, "test_prefix_end_lineno": 68, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java", "focal_method": "  public String getCustom(final String iName);", "focal_method_start_lineno": 257, "focal_method_end_lineno": 257, "ground_truth_oracle": "Assert.assertNotNull(result);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test public void testSetCustom() {\n    String className = \"testSetCustom\";\n    OClass clazz = db.getMetadata().getSchema().createClass(className);\n    OProperty prop = clazz.createProperty(\"name\", OType.STRING);\n    prop.setCustom(\"foo\", \"bar\");\n\n    OResultSet result = db.command(\"alter property \" + className + \".name custom foo='baz'\");\n    printExecutionPlan(null, result);\n    Object currentValue = prop.getCustom(\"foo\");\n\n  }", "original_test_prefix": "  @Test public void testSetCustom() {\n    String className = \"testSetCustom\";\n    OClass clazz = db.getMetadata().getSchema().createClass(className);\n    OProperty prop = clazz.createProperty(\"name\", OType.STRING);\n    prop.setCustom(\"foo\", \"bar\");\n\n    OResultSet result = db.command(\"alter property \" + className + \".name custom foo='baz'\");\n    printExecutionPlan(null, result);\n    Object currentValue = prop.getCustom(\"foo\");\n\n    Assert.assertNotNull(result);\n    Assert.assertTrue(result.hasNext());\n    OResult next = result.next();\n    Assert.assertNotNull(next);\n    Assert.assertEquals(\"bar\", next.getProperty(\"oldValue\"));\n    Assert.assertEquals(\"baz\", currentValue);\n    Assert.assertEquals(currentValue, next.getProperty(\"newValue\"));\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.OAlterPropertyStatementExecutionTest#testSetCustom", "test_setup_list": [{"test_setup": "@BeforeClass public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OAlterPropertyStatementExecutionTest\");\n    db.create();\n  }", "start_lineno": 21, "end_lineno": 24}]}
{"index": 34, "project_index": 18, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ORecordSerializerBinaryTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/ORecordSerializerBinaryTest.java", "test_name": "testGetFieldFromEmbeddedList", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/ORecordSerializerBinaryTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/ORecordSerializerBinaryTest.java", "test_prefix": "  @Test\n  public void testGetFieldFromEmbeddedList() {\n    ODocument root = new ODocument();\n    ODocument embeddedListElement = new ODocument();\n    Integer setValue = 19;\n    Integer setValue2 = 21;\n    embeddedListElement.field(\"InnerTestFields\", setValue);\n\n    byte[] rawElementBytes = serializer.toStream(embeddedListElement, false);\n\n    List embeddedList = new ArrayList();\n    embeddedList.add(embeddedListElement);\n    embeddedList.add(setValue2);\n\n    root.field(\"TestEmbeddedList\", embeddedList, OType.EMBEDDEDLIST);\n\n    byte[] rootBytes = serializer.toStream(root, false);\n\n    List<Object> embeddedListFieldValue = serializer.deserializeFieldFromRoot(rootBytes, \"TestEmbeddedList\");\n    OResultBinary embeddedListElementBytes = (OResultBinary) embeddedListFieldValue.get(0);\n    Integer deserializedValue = serializer\n        .deserializeFieldFromEmbedded(embeddedListElementBytes.getBytes(), embeddedListElementBytes.getOffset(), \"InnerTestFields\",\n            rootBytes[0]);\n    <AssertPlaceHolder>;\n\n    Integer secondtestVal = (Integer) embeddedListFieldValue.get(1);\n    Assert.assertEquals(setValue2, secondtestVal);\n  }", "test_prefix_start_lineno": 216, "test_prefix_end_lineno": 243, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/ORecordSerializerBinary.java", "focal_method": "  @Override\n  public <RET> RET deserializeFieldFromEmbedded(byte[] record, int offset, String iFieldName, int serializerVersion) {\n    return deserializeField(record, offset, iFieldName, true, serializerVersion);\n  }", "focal_method_start_lineno": 212, "focal_method_end_lineno": 215, "ground_truth_oracle": "Assert.assertEquals(setValue, deserializedValue);", "ground_truth_oracle_lineno": 14, "test_prefix_wo_placeholder": "  @Test\n  public void testGetFieldFromEmbeddedList() {\n    ODocument root = new ODocument();\n    ODocument embeddedListElement = new ODocument();\n    Integer setValue = 19;\n    Integer setValue2 = 21;\n    embeddedListElement.field(\"InnerTestFields\", setValue);\n\n    byte[] rawElementBytes = serializer.toStream(embeddedListElement, false);\n\n    List embeddedList = new ArrayList();\n    embeddedList.add(embeddedListElement);\n    embeddedList.add(setValue2);\n\n    root.field(\"TestEmbeddedList\", embeddedList, OType.EMBEDDEDLIST);\n\n    byte[] rootBytes = serializer.toStream(root, false);\n\n    List<Object> embeddedListFieldValue = serializer.deserializeFieldFromRoot(rootBytes, \"TestEmbeddedList\");\n    OResultBinary embeddedListElementBytes = (OResultBinary) embeddedListFieldValue.get(0);\n    Integer deserializedValue = serializer\n        .deserializeFieldFromEmbedded(embeddedListElementBytes.getBytes(), embeddedListElementBytes.getOffset(), \"InnerTestFields\",\n            rootBytes[0]);\n  }", "original_test_prefix": "  @Test\n  public void testGetFieldFromEmbeddedList() {\n    ODocument root = new ODocument();\n    ODocument embeddedListElement = new ODocument();\n    Integer setValue = 19;\n    Integer setValue2 = 21;\n    embeddedListElement.field(\"InnerTestFields\", setValue);\n\n    byte[] rawElementBytes = serializer.toStream(embeddedListElement, false);\n\n    List embeddedList = new ArrayList();\n    embeddedList.add(embeddedListElement);\n    embeddedList.add(setValue2);\n\n    root.field(\"TestEmbeddedList\", embeddedList, OType.EMBEDDEDLIST);\n\n    byte[] rootBytes = serializer.toStream(root, false);\n\n    List<Object> embeddedListFieldValue = serializer.deserializeFieldFromRoot(rootBytes, \"TestEmbeddedList\");\n    OResultBinary embeddedListElementBytes = (OResultBinary) embeddedListFieldValue.get(0);\n    Integer deserializedValue = serializer\n        .deserializeFieldFromEmbedded(embeddedListElementBytes.getBytes(), embeddedListElementBytes.getOffset(), \"InnerTestFields\",\n            rootBytes[0]);\n    Assert.assertEquals(setValue, deserializedValue);\n\n    Integer secondtestVal = (Integer) embeddedListFieldValue.get(1);\n    Assert.assertEquals(setValue2, secondtestVal);\n  }", "test_with_params": true, "test_target": "com.orientechnologies.orient.core.serialization.serializer.binary.impl.ORecordSerializerBinaryTest#testGetFieldFromEmbeddedList[*]", "test_setup_list": []}
{"index": 35, "project_index": 18, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "lucene", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "LuceneMixIndexTest", "class_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneMixIndexTest.java", "test_name": "testMixCompositeQuery", "test_setup_file_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneMixIndexTest.java", "test_setup": "@Before\n  public void initLocal() {\n\n    InputStream stream = ClassLoader.getSystemResourceAsStream(\"testLuceneIndex.sql\");\n\n    db.command(new OCommandScript(\"sql\", getScriptFromStream(stream))).execute();\n\n    db.command(new OCommandSQL(\"create index Song.author on Song (author) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"create index Song.composite on Song (title,lyrics) FULLTEXT ENGINE LUCENE\")).execute();\n\n  }", "test_setup_start_lineno": 38, "test_setup_end_lineno": 49, "test_prefix_file_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneMixIndexTest.java", "test_prefix": "  @Test\n  public void testMixCompositeQuery() {\n\n    List<ODocument> docs = db.query(new OSQLSynchQuery<ODocument>(\n        \"select * from Song where  author = 'Hornsby' and [title,lyrics] LUCENE \\\"title:mountain\\\" \"));\n\n    <AssertPlaceHolder>;\n\n    docs = db\n        .query(new OSQLSynchQuery<ODocument>(\"select * from Song where author = 'Hornsby' and [title,lyrics] LUCENE \\\"lyrics:happy\\\" \"));\n\n    Assert.assertEquals(1, docs.size());\n\n  }", "test_prefix_start_lineno": 74, "test_prefix_end_lineno": 96, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focal_method": "  @Deprecated\n  <RET extends List<?>> RET query(final OQuery<?> iCommand, final Object... iArgs);", "focal_method_start_lineno": 830, "focal_method_end_lineno": 831, "ground_truth_oracle": "Assert.assertEquals(1, docs.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testMixCompositeQuery() {\n\n    List<ODocument> docs = db.query(new OSQLSynchQuery<ODocument>(\n        \"select * from Song where  author = 'Hornsby' and [title,lyrics] LUCENE \\\"title:mountain\\\" \"));\n\n  }", "original_test_prefix": "  @Test\n  public void testMixCompositeQuery() {\n\n    List<ODocument> docs = db.query(new OSQLSynchQuery<ODocument>(\n        \"select * from Song where  author = 'Hornsby' and [title,lyrics] LUCENE \\\"title:mountain\\\" \"));\n\n    Assert.assertEquals(1, docs.size());\n\n    docs = db\n        .query(new OSQLSynchQuery<ODocument>(\"select * from Song where author = 'Hornsby' and [title,lyrics] LUCENE \\\"lyrics:happy\\\" \"));\n\n    Assert.assertEquals(1, docs.size());\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.lucene.test.LuceneMixIndexTest#testMixCompositeQuery", "test_setup_list": [{"test_setup": "@Before\n  public void initLocal() {\n\n    InputStream stream = ClassLoader.getSystemResourceAsStream(\"testLuceneIndex.sql\");\n\n    db.command(new OCommandScript(\"sql\", getScriptFromStream(stream))).execute();\n\n    db.command(new OCommandSQL(\"create index Song.author on Song (author) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"create index Song.composite on Song (title,lyrics) FULLTEXT ENGINE LUCENE\")).execute();\n\n  }", "start_lineno": 38, "end_lineno": 49}]}
{"index": 36, "project_index": 19, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "OptionsTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/OptionsTest.java", "test_name": "toJsonMinimal", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/OptionsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/OptionsTest.java", "test_prefix": "    @Test\n    void toJsonMinimal() {\n        final String s = Options.create().engine(Engine.DOT).format(Format.PNG).toJson(false);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 66, "test_prefix_end_lineno": 70, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/service/SystemUtils.java", "focal_method": "    public static String uriPathOf(File path) {\n        return uriPathOf(path.getAbsolutePath());\n    }", "focal_method_start_lineno": 79, "focal_method_end_lineno": 81, "ground_truth_oracle": "assertEquals(\"{format:'svg',engine:'dot',basedir:'\" + uriPathOf(new File(\".\")) + \"',images:[]}\", s);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    void toJsonMinimal() {\n        final String s = Options.create().engine(Engine.DOT).format(Format.PNG).toJson(false);\n    }", "original_test_prefix": "    @Test\n    void toJsonMinimal() {\n        final String s = Options.create().engine(Engine.DOT).format(Format.PNG).toJson(false);\n        assertEquals(\"{format:'svg',engine:'dot',basedir:'\" + uriPathOf(new File(\".\")) + \"',images:[]}\", s);\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.engine.OptionsTest#toJsonMinimal", "test_setup_list": []}
{"index": 37, "project_index": 19, "class_index": 1, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "SvgSizeAnalyzerTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SvgSizeAnalyzerTest.java", "test_name": "svgWithChanges", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SvgSizeAnalyzerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/model/SvgSizeAnalyzerTest.java", "test_prefix": "    @Test\n    void svgWithChanges() {\n        final SvgSizeAnalyzer a = SvgSizeAnalyzer.svg(SVG);\n        a.setSize(1, 2);\n        a.setScale(3.5, 4.0);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 54, "test_prefix_end_lineno": 63, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/model/SvgSizeAnalyzer.java", "focal_method": "    public String getSvg() {\n        final String size = width == null\n                ? \"width=\\\"\" + getWidth() + getUnit() + \"\\\" height=\\\"\" + getHeight() + getUnit() + \"\\\"\"\n                : \"width=\\\"\" + width + \"px\\\" height=\\\"\" + height + \"px\\\"\";\n        return matcher.replaceFirst(\"<svg \" + size + matcher.group(\"between\")\n                + \"transform=\\\"\" + getTransform());\n    }", "focal_method_start_lineno": 67, "focal_method_end_lineno": 73, "ground_truth_oracle": "assertEquals(\"<svg width=\\\"1px\\\" height=\\\"2px\\\" viewBox=\\\"0.00 0.00 7272.00 3618.00\\\" \" + \"xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n\" + \"<g id=\\\"graph0\\\" class=\\\"graph\\\" transform=\\\"scale(3.5 4.0) rotate(30.0) translate(360.0 32.0)\\\">\", a.getSvg());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    void svgWithChanges() {\n        final SvgSizeAnalyzer a = SvgSizeAnalyzer.svg(SVG);\n        a.setSize(1, 2);\n        a.setScale(3.5, 4.0);\n    }", "original_test_prefix": "    @Test\n    void svgWithChanges() {\n        final SvgSizeAnalyzer a = SvgSizeAnalyzer.svg(SVG);\n        a.setSize(1, 2);\n        a.setScale(3.5, 4.0);\n        assertEquals(\"<svg width=\\\"1px\\\" height=\\\"2px\\\" viewBox=\\\"0.00 0.00 7272.00 3618.00\\\" \" + \"xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">\\n\" + \"<g id=\\\"graph0\\\" class=\\\"graph\\\" transform=\\\"scale(3.5 4.0) rotate(30.0) translate(360.0 32.0)\\\">\", a.getSvg());\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.model.SvgSizeAnalyzerTest#svgWithChanges", "test_setup_list": []}
{"index": 38, "project_index": 19, "class_index": 2, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "RankTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RankTest.java", "test_name": "combine", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RankTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RankTest.java", "test_prefix": "    @Test\n    void combine() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 49, "test_prefix_end_lineno": 54, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java", "focal_method": "    @SafeVarargs\n    static <F extends For> Attributes<F> attrs(Attributes<? extends F>... attributes) {\n        return attrs(asList(attributes));\n    }", "focal_method_start_lineno": 34, "focal_method_end_lineno": 37, "ground_truth_oracle": "assertEquals(attrs(attr(\"newrank\", true), attr(\"clusterrank\", \"global\"), attr(\"rankdir\", \"TB\"), attr(\"ranksep\", \"3.0 equally\")), attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void combine() {\n    }", "original_test_prefix": "    @Test\n    void combine() {\n        assertEquals(attrs(attr(\"newrank\", true), attr(\"clusterrank\", \"global\"), attr(\"rankdir\", \"TB\"), attr(\"ranksep\", \"3.0 equally\")), attrs(Rank.sepEqually(2).newRank(true).noCluster().dir(TOP_TO_BOTTOM).sep(3)));\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.RankTest#combine", "test_setup_list": []}
{"index": 39, "project_index": 20, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "enricher/api", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "GoTimeUtilTest", "class_path": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/GoTimeUtilTest.java", "test_name": "testConversion", "test_setup_file_path": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/GoTimeUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/GoTimeUtilTest.java", "test_prefix": "    @Test\n    public void testConversion() {\n        <AssertPlaceHolder>;\n        assertEquals(new Integer(0), durationSeconds(\"0.5s\"));\n        assertEquals(new Integer(0), durationSeconds(\"3ms\"));\n        assertEquals(new Integer(0), durationSeconds(\"3ns\"));\n        assertEquals(new Integer(1), durationSeconds(\"1002ms\"));\n        assertEquals(new Integer(123), durationSeconds(\"2m3s\"));\n        assertEquals(new Integer(3663), durationSeconds(\"1h1m3s\"));\n        assertEquals(new Integer(1810), durationSeconds(\"0.5h0.1m4s\"));\n        assertEquals(new Integer(-15), durationSeconds(\"-15s\"));\n        assertEquals(new Integer(30), durationSeconds(\"2h-119.5m\"));\n    }", "test_prefix_start_lineno": 26, "test_prefix_end_lineno": 38, "focal_method_file_path": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/GoTimeUtil.java", "focal_method": "    public static Integer durationSeconds(String duration) {\n        BigDecimal ns = durationNs(duration);\n        if (ns == null) {\n            return null;\n        }\n\n        BigDecimal sec = ns.divide(new BigDecimal(1_000_000_000));\n        if (sec.compareTo(new BigDecimal(Integer.MAX_VALUE)) > 0) {\n            throw new IllegalArgumentException(\"Integer Overflow\");\n        }\n        return sec.intValue();\n    }", "focal_method_start_lineno": 34, "focal_method_end_lineno": 45, "ground_truth_oracle": "assertEquals(new Integer(23), durationSeconds(\"23s\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testConversion() {\n    }", "original_test_prefix": "    @Test\n    public void testConversion() {\n        assertEquals(new Integer(23), durationSeconds(\"23s\"));\n        assertEquals(new Integer(0), durationSeconds(\"0.5s\"));\n        assertEquals(new Integer(0), durationSeconds(\"3ms\"));\n        assertEquals(new Integer(0), durationSeconds(\"3ns\"));\n        assertEquals(new Integer(1), durationSeconds(\"1002ms\"));\n        assertEquals(new Integer(123), durationSeconds(\"2m3s\"));\n        assertEquals(new Integer(3663), durationSeconds(\"1h1m3s\"));\n        assertEquals(new Integer(1810), durationSeconds(\"0.5h0.1m4s\"));\n        assertEquals(new Integer(-15), durationSeconds(\"-15s\"));\n        assertEquals(new Integer(30), durationSeconds(\"2h-119.5m\"));\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.enricher.api.util.GoTimeUtilTest#testConversion", "test_setup_list": []}
{"index": 40, "project_index": 21, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "HostURLFilterTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_name": "testAllAllowed", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_prefix": "    @Test\n    public void testAllAllowed() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(false, false);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n        <AssertPlaceHolder>;\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.anotherDomain.com/index.html\");\n        Assert.assertEquals(\"http://www.anotherDomain.com/index.html\", filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://sub.sourcedomain.com/index.html\");\n        Assert.assertEquals(\"http://sub.sourcedomain.com/index.html\", filterResult);\n    }", "test_prefix_start_lineno": 44, "test_prefix_end_lineno": 58, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/host/HostURLFilter.java", "focal_method": "    @Override\n    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter) {\n        if (sourceUrl == null || (!ignoreOutsideHost && !ignoreOutsideDomain)) {\n            return urlToFilter;\n        }\n\n        URL tURL;\n        try {\n            tURL = new URL(urlToFilter);\n        } catch (MalformedURLException e1) {\n            return null;\n        }\n\n        String fromHost;\n        String fromDomain = null;\n        // Using identity comparison because URL.equals performs poorly\n        if (sourceUrl == previousSourceUrl) {\n            fromHost = previousSourceHost;\n            if (ignoreOutsideDomain) {\n                fromDomain = previousSourceDomain;\n            }\n        } else {\n            fromHost = sourceUrl.getHost();\n            if (ignoreOutsideDomain) {\n                fromDomain = PaidLevelDomain.getPLD(fromHost);\n            }\n            previousSourceHost = fromHost;\n            previousSourceDomain = fromDomain;\n            previousSourceUrl = sourceUrl;\n        }\n\n        // resolve the hosts\n        String toHost = tURL.getHost();\n\n        if (ignoreOutsideHost) {\n            if (toHost == null || !toHost.equalsIgnoreCase(fromHost)) {\n                return null;\n            }\n        }\n\n        if (ignoreOutsideDomain) {\n            String toDomain = PaidLevelDomain.getPLD(toHost);\n            if (toDomain == null || !toDomain.equals(fromDomain)) {\n                return null;\n            }\n        }\n\n        return urlToFilter;\n    }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 117, "ground_truth_oracle": "Assert.assertEquals(\"http://www.sourcedomain.com/index.html\", filterResult);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testAllAllowed() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(false, false);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n    }", "original_test_prefix": "    @Test\n    public void testAllAllowed() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(false, false);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n        Assert.assertEquals(\"http://www.sourcedomain.com/index.html\", filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.anotherDomain.com/index.html\");\n        Assert.assertEquals(\"http://www.anotherDomain.com/index.html\", filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://sub.sourcedomain.com/index.html\");\n        Assert.assertEquals(\"http://sub.sourcedomain.com/index.html\", filterResult);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.HostURLFilterTest#testAllAllowed", "test_setup_list": []}
{"index": 41, "project_index": 21, "class_index": 0, "test_index": 1, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "HostURLFilterTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_name": "testAllForbidden", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_prefix": "    @Test\n    public void testAllForbidden() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(true, true);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n        <AssertPlaceHolder>;\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.anotherDomain.com/index.html\");\n        Assert.assertNull(filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://sub.sourcedomain.com/index.html\");\n        Assert.assertNull(filterResult);\n    }", "test_prefix_start_lineno": 60, "test_prefix_end_lineno": 75, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/host/HostURLFilter.java", "focal_method": "    @Override\n    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter) {\n        if (sourceUrl == null || (!ignoreOutsideHost && !ignoreOutsideDomain)) {\n            return urlToFilter;\n        }\n\n        URL tURL;\n        try {\n            tURL = new URL(urlToFilter);\n        } catch (MalformedURLException e1) {\n            return null;\n        }\n\n        String fromHost;\n        String fromDomain = null;\n        // Using identity comparison because URL.equals performs poorly\n        if (sourceUrl == previousSourceUrl) {\n            fromHost = previousSourceHost;\n            if (ignoreOutsideDomain) {\n                fromDomain = previousSourceDomain;\n            }\n        } else {\n            fromHost = sourceUrl.getHost();\n            if (ignoreOutsideDomain) {\n                fromDomain = PaidLevelDomain.getPLD(fromHost);\n            }\n            previousSourceHost = fromHost;\n            previousSourceDomain = fromDomain;\n            previousSourceUrl = sourceUrl;\n        }\n\n        // resolve the hosts\n        String toHost = tURL.getHost();\n\n        if (ignoreOutsideHost) {\n            if (toHost == null || !toHost.equalsIgnoreCase(fromHost)) {\n                return null;\n            }\n        }\n\n        if (ignoreOutsideDomain) {\n            String toDomain = PaidLevelDomain.getPLD(toHost);\n            if (toDomain == null || !toDomain.equals(fromDomain)) {\n                return null;\n            }\n        }\n\n        return urlToFilter;\n    }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 117, "ground_truth_oracle": "Assert.assertEquals(\"http://www.sourcedomain.com/index.html\", filterResult);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testAllForbidden() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(true, true);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n    }", "original_test_prefix": "    @Test\n    public void testAllForbidden() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(true, true);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n        Assert.assertEquals(\"http://www.sourcedomain.com/index.html\", filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.anotherDomain.com/index.html\");\n        Assert.assertNull(filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://sub.sourcedomain.com/index.html\");\n        Assert.assertNull(filterResult);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.HostURLFilterTest#testAllForbidden", "test_setup_list": []}
{"index": 42, "project_index": 21, "class_index": 1, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "BasicIndexingTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_name": "testFilterDocumentWithMetadata", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_setup": "@Before\n    public void setupIndexerBolt() {\n        bolt = new DummyIndexer();\n        setupIndexerBolt(bolt);\n    }", "test_setup_start_lineno": 35, "test_setup_end_lineno": 39, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_prefix": "    @Test\n    public void testFilterDocumentWithMetadata() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n        config.put(AbstractIndexerBolt.metadataFilterParamName, \"key1=value1\");\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"key1\", \"value1\");\n\n        prepareIndexerBolt(config);\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 155, "test_prefix_end_lineno": 173, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focal_method": "    public void setValue(String key, String value) {\n        checkLockException();\n\n        md.put(key, new String[] {value});\n    }", "focal_method_start_lineno": 125, "focal_method_end_lineno": 129, "ground_truth_oracle": "Assert.assertEquals( \"The document must pass if the key/value is found in the metadata\", \"http://www.digitalpebble.com\", fields.get(\"url\"));", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "    @Test\n    public void testFilterDocumentWithMetadata() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n        config.put(AbstractIndexerBolt.metadataFilterParamName, \"key1=value1\");\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"key1\", \"value1\");\n\n        prepareIndexerBolt(config);\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n    }", "original_test_prefix": "    @Test\n    public void testFilterDocumentWithMetadata() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n        config.put(AbstractIndexerBolt.metadataFilterParamName, \"key1=value1\");\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"key1\", \"value1\");\n\n        prepareIndexerBolt(config);\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n        Assert.assertEquals( \"The document must pass if the key/value is found in the metadata\", \"http://www.digitalpebble.com\", fields.get(\"url\"));\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.indexer.BasicIndexingTest#testFilterDocumentWithMetadata", "test_setup_list": [{"test_setup": "@Before\n    public void setupIndexerBolt() {\n        bolt = new DummyIndexer();\n        setupIndexerBolt(bolt);\n    }", "start_lineno": 35, "end_lineno": 39}]}
{"index": 43, "project_index": 22, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "TimestampParserTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/TimestampParserTest.java", "test_name": "testParseEpochMillis", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/TimestampParserTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/TimestampParserTest.java", "test_prefix": "    @Test\n    public void testParseEpochMillis() throws Exception {\n        String format = TimestampParser.EPOCH_MILLIS;\n        long time = System.currentTimeMillis();\n        Date parsed = new TimestampParser(format).parse(String.valueOf(time));\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 45, "test_prefix_end_lineno": 52, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/util/TimestampParser.java", "focal_method": "    public Date parse(final String timestamp) throws ProcessingException {\n        if (StringUtils.isBlank(timestamp)) {\n            return null;\n        }\n        try {\n            return parser.parse(timestamp);\n        } catch (Exception ex) {\n            throw new ProcessingException(\"Unable to parse timestamp \\\"\" + timestamp + \"\\\"\", ex);\n        }\n    }", "focal_method_start_lineno": 59, "focal_method_end_lineno": 68, "ground_truth_oracle": "assertEquals(time, parsed.getTime());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testParseEpochMillis() throws Exception {\n        String format = TimestampParser.EPOCH_MILLIS;\n        long time = System.currentTimeMillis();\n        Date parsed = new TimestampParser(format).parse(String.valueOf(time));\n\n    }", "original_test_prefix": "    @Test\n    public void testParseEpochMillis() throws Exception {\n        String format = TimestampParser.EPOCH_MILLIS;\n        long time = System.currentTimeMillis();\n        Date parsed = new TimestampParser(format).parse(String.valueOf(time));\n\n        assertEquals(time, parsed.getTime());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.util.TimestampParserTest#testParseEpochMillis", "test_setup_list": []}
{"index": 44, "project_index": 22, "class_index": 1, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "ShippableTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java", "test_name": "testPullRequest", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/ShippableTest.java", "test_prefix": "    @Test\n    public void testPullRequest() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 80, "test_prefix_end_lineno": 83, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/Shippable.java", "focal_method": "    @Override\n    public String getPullRequest() {\n        String pullRequest = getProperty(SHIPPABLE_PULL_REQUEST);\n        if (\"false\".equals(pullRequest)) {\n            return null;\n        }\n        return pullRequest;\n    }", "focal_method_start_lineno": 76, "focal_method_end_lineno": 83, "ground_truth_oracle": "assertEquals(\"10\", new Shippable(env()).getPullRequest());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testPullRequest() {\n    }", "original_test_prefix": "    @Test\n    public void testPullRequest() {\n        assertEquals(\"10\", new Shippable(env()).getPullRequest());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.ShippableTest#testPullRequest", "test_setup_list": []}
{"index": 45, "project_index": 22, "class_index": 2, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "UrlUtilsTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/UrlUtilsTest.java", "test_name": "testValidUrlToUri", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/UrlUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/UrlUtilsTest.java", "test_prefix": "    @Test\n    public void testValidUrlToUri() throws Exception {\n        URI uri = UrlUtils.toUri(new URL(\"http://google.com\"));\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 53, "test_prefix_end_lineno": 57, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/util/UrlUtils.java", "focal_method": "    public static URI toUri(final URL url) {\n        try {\n            return url.toURI();\n        } catch (URISyntaxException ex) {\n            throw new IllegalArgumentException(ex);\n        }\n    }", "focal_method_start_lineno": 44, "focal_method_end_lineno": 50, "ground_truth_oracle": "assertEquals(new URI(\"http://google.com\"), uri);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testValidUrlToUri() throws Exception {\n        URI uri = UrlUtils.toUri(new URL(\"http://google.com\"));\n    }", "original_test_prefix": "    @Test\n    public void testValidUrlToUri() throws Exception {\n        URI uri = UrlUtils.toUri(new URL(\"http://google.com\"));\n        assertEquals(new URI(\"http://google.com\"), uri);\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.util.UrlUtilsTest#testValidUrlToUri", "test_setup_list": []}
{"index": 46, "project_index": 23, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "H264UtilsTest", "class_path": "src/test/java/org/jcodec/codecs/h264/H264UtilsTest.java", "test_name": "testAvcCToAnnexB", "test_setup_file_path": "src/test/java/org/jcodec/codecs/h264/H264UtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/codecs/h264/H264UtilsTest.java", "test_prefix": "    @Test\n    public void testAvcCToAnnexB() {\n        ArrayList<ByteBuffer> spsList = new ArrayList<ByteBuffer>();\n        spsList.add(ByteBuffer.wrap(new byte[] {'s', 't', 'a', 'n'}));\n        spsList.add(ByteBuffer.wrap(new byte[] {'t', 'h', 'e'}));\n        ArrayList<ByteBuffer> ppsList = new ArrayList<ByteBuffer>();\n        ppsList.add(ByteBuffer.wrap(new byte[] {'m', 'a', 'n'}));\n        ppsList.add(ByteBuffer.wrap(new byte[] {'c', 'o', 'o', 'l'}));\n        AvcCBox avcCBox = AvcCBox.createAvcCBox(66, 0, 42, 0, spsList, ppsList);\n        byte[] res = NIOUtils.toArray(H264Utils.avcCToAnnexB(avcCBox));\n        <AssertPlaceHolder>;\n        \n    }", "test_prefix_start_lineno": 44, "test_prefix_end_lineno": 57, "focal_method_file_path": "src/main/java/org/jcodec/common/io/NIOUtils.java", "focal_method": "    public static byte[] toArray(ByteBuffer buffer) {\n        byte[] result = new byte[buffer.remaining()];\n        buffer.duplicate().get(result);\n        return result;\n    }", "focal_method_start_lineno": 146, "focal_method_end_lineno": 150, "ground_truth_oracle": "Assert.assertArrayEquals(new byte[] { 0, 0, 0, 1, 0x67, 's', 't', 'a', 'n', 0, 0, 0, 1, 0x67, 't', 'h', 'e', 0, 0, 0, 1, 0x68, 'm', 'a', 'n', 0, 0, 0, 1, 0x68, 'c', 'o', 'o', 'l' }, res);", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "    @Test\n    public void testAvcCToAnnexB() {\n        ArrayList<ByteBuffer> spsList = new ArrayList<ByteBuffer>();\n        spsList.add(ByteBuffer.wrap(new byte[] {'s', 't', 'a', 'n'}));\n        spsList.add(ByteBuffer.wrap(new byte[] {'t', 'h', 'e'}));\n        ArrayList<ByteBuffer> ppsList = new ArrayList<ByteBuffer>();\n        ppsList.add(ByteBuffer.wrap(new byte[] {'m', 'a', 'n'}));\n        ppsList.add(ByteBuffer.wrap(new byte[] {'c', 'o', 'o', 'l'}));\n        AvcCBox avcCBox = AvcCBox.createAvcCBox(66, 0, 42, 0, spsList, ppsList);\n        byte[] res = NIOUtils.toArray(H264Utils.avcCToAnnexB(avcCBox));\n    }", "original_test_prefix": "    @Test\n    public void testAvcCToAnnexB() {\n        ArrayList<ByteBuffer> spsList = new ArrayList<ByteBuffer>();\n        spsList.add(ByteBuffer.wrap(new byte[] {'s', 't', 'a', 'n'}));\n        spsList.add(ByteBuffer.wrap(new byte[] {'t', 'h', 'e'}));\n        ArrayList<ByteBuffer> ppsList = new ArrayList<ByteBuffer>();\n        ppsList.add(ByteBuffer.wrap(new byte[] {'m', 'a', 'n'}));\n        ppsList.add(ByteBuffer.wrap(new byte[] {'c', 'o', 'o', 'l'}));\n        AvcCBox avcCBox = AvcCBox.createAvcCBox(66, 0, 42, 0, spsList, ppsList);\n        byte[] res = NIOUtils.toArray(H264Utils.avcCToAnnexB(avcCBox));\n        Assert.assertArrayEquals(new byte[] { 0, 0, 0, 1, 0x67, 's', 't', 'a', 'n', 0, 0, 0, 1, 0x67, 't', 'h', 'e', 0, 0, 0, 1, 0x68, 'm', 'a', 'n', 0, 0, 0, 1, 0x68, 'c', 'o', 'o', 'l' }, res);\n        \n    }", "test_with_params": false, "test_target": "org.jcodec.codecs.h264.H264UtilsTest#testAvcCToAnnexB", "test_setup_list": []}
{"index": 47, "project_index": 24, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "MBeanAnnotationUtilTest", "class_path": "src/test/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtilTest.java", "test_name": "testGetAttributes", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtilTest.java", "test_setup": "@Before\n  public void setupTest() throws Exception {\n    this.withoutAnnotation = new Object();\n    this.testAnnotation1 = new TestAnnotation1();\n  }", "test_setup_start_lineno": 35, "test_setup_end_lineno": 39, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtilTest.java", "test_prefix": "  @Test\n  public void testGetAttributes() throws Exception {\n    Map<String, Method> atts = MBeanAnnotationUtil.getAttributes(this.testAnnotation1);\n\n    <AssertPlaceHolder>;\n    assertEquals(\"setAttribute1\", atts.get(\"x-att1-name-x\").getName());\n    assertEquals(\"setAttribute2\", atts.get(\"x-att2-name-x\").getName());\n\n    assertEquals(0, MBeanAnnotationUtil.getAttributes(this.withoutAnnotation).size());\n  }", "test_prefix_start_lineno": 49, "test_prefix_end_lineno": 58, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/annotation/MBeanAnnotationUtil.java", "focal_method": "    public static Map<String, Method> getAttributes (Object mbeanLocation) {\n        Map<String, Method> result = new TreeMap<String, Method>();\n\n        Method[] methods = mbeanLocation.getClass().getMethods();\n\n        for ( Method oneMethod : methods ) {\n            MBeanAttribute attribute = oneMethod.getAnnotation(MBeanAttribute.class);\n\n            if ( attribute != null ) {\n                //\n                // Record the name of the attribute with the method, which must be the setter.\n                //\n                result.put(attribute.name(), oneMethod);\n            }\n        }\n\n        return  result;\n    }", "focal_method_start_lineno": 37, "focal_method_end_lineno": 54, "ground_truth_oracle": "assertEquals(2, atts.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testGetAttributes() throws Exception {\n    Map<String, Method> atts = MBeanAnnotationUtil.getAttributes(this.testAnnotation1);\n\n  }", "original_test_prefix": "  @Test\n  public void testGetAttributes() throws Exception {\n    Map<String, Method> atts = MBeanAnnotationUtil.getAttributes(this.testAnnotation1);\n\n    assertEquals(2, atts.size());\n    assertEquals(\"setAttribute1\", atts.get(\"x-att1-name-x\").getName());\n    assertEquals(\"setAttribute2\", atts.get(\"x-att2-name-x\").getName());\n\n    assertEquals(0, MBeanAnnotationUtil.getAttributes(this.withoutAnnotation).size());\n  }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.annotation.MBeanAnnotationUtilTest#testGetAttributes", "test_setup_list": [{"test_setup": "@Before\n  public void setupTest() throws Exception {\n    this.withoutAnnotation = new Object();\n    this.testAnnotation1 = new TestAnnotation1();\n  }", "start_lineno": 35, "end_lineno": 39}]}
{"index": 48, "project_index": 24, "class_index": 1, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "BatchPollProcessorTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java", "test_name": "testGetSetLog", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.processor = new BatchPollProcessor();\n\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.mockAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n\n        this.polledObjects = new LinkedList<>();\n        this.polled001 = Mockito.mock(TestClass001.class);\n        this.polledObjects.add(this.polled001);\n\n        this.mockObjectQueryInfo001 = Mockito.mock(ObjectQueryInfo.class);\n        this.objectName001 = Mockito.mock(ObjectName.class);\n        this.attributeNames001 = new HashSet<>(Arrays.asList(\"x-att1-x\", \"x-att2-x\"));\n        this.attributeSetters001 = new HashMap<>();\n        this.queryAttributeMap = new HashMap<>();\n        this.resultAttributeMap = new HashMap<>();\n\n        this.attributeSetters001.put(\"x-att1-x\", TestClass001.class.getMethod(\"setStringValue\", String.class));\n        this.attributeSetters001.put(\"x-att2-x\", TestClass001.class.getMethod(\"setIntValue\", int.class));\n\n        this.queryAttributeMap.put(this.objectName001, Arrays.asList(\"x-att1-x\", \"x-att2-x\"));\n        this.resultAttributeMap.put(this.objectName001,\n                Arrays.asList(new Attribute(\"x-att1-x\", \"x-string-value-x\"), new Attribute(\"x-att2-x\", 11)));\n\n        Mockito.when(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001))\n                .thenReturn(this.mockObjectQueryInfo001);\n        Mockito.when(this.mockObjectQueryInfo001.getTarget()).thenReturn(this.polled001);\n        Mockito.when(this.mockObjectQueryInfo001.getObjectName()).thenReturn(this.objectName001);\n        Mockito.when(this.mockObjectQueryInfo001.getAttributeNames()).thenReturn(this.attributeNames001);\n        Mockito.when(this.mockObjectQueryInfo001.getAttributeSetters()).thenReturn(this.attributeSetters001);\n\n        Mockito.when(this.mockAccessConnection\n                .batchQueryAttributes(this.createAttributeMapMatcher(this.queryAttributeMap)))\n                .thenReturn(this.resultAttributeMap);\n    }", "test_setup_start_lineno": 64, "test_setup_end_lineno": 102, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java", "test_prefix": "    @Test\n    public void testGetSetLog() throws Exception {\n        <AssertPlaceHolder>;\n        assertNotSame(this.mockLogger, this.processor.getLog());\n\n        this.processor.setLog(this.mockLogger);\n        assertSame(this.mockLogger, this.processor.getLog());\n    }", "test_prefix_start_lineno": 138, "test_prefix_end_lineno": 145, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/BatchPollProcessor.java", "focal_method": "    public Logger getLog() {\n        return log;\n    }", "focal_method_start_lineno": 62, "focal_method_end_lineno": 64, "ground_truth_oracle": "assertNotNull(this.processor.getLog());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetLog() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetLog() throws Exception {\n        assertNotNull(this.processor.getLog());\n        assertNotSame(this.mockLogger, this.processor.getLog());\n\n        this.processor.setLog(this.mockLogger);\n        assertSame(this.mockLogger, this.processor.getLog());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.BatchPollProcessorTest#testGetSetLog", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.processor = new BatchPollProcessor();\n\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.mockAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n\n        this.polledObjects = new LinkedList<>();\n        this.polled001 = Mockito.mock(TestClass001.class);\n        this.polledObjects.add(this.polled001);\n\n        this.mockObjectQueryInfo001 = Mockito.mock(ObjectQueryInfo.class);\n        this.objectName001 = Mockito.mock(ObjectName.class);\n        this.attributeNames001 = new HashSet<>(Arrays.asList(\"x-att1-x\", \"x-att2-x\"));\n        this.attributeSetters001 = new HashMap<>();\n        this.queryAttributeMap = new HashMap<>();\n        this.resultAttributeMap = new HashMap<>();\n\n        this.attributeSetters001.put(\"x-att1-x\", TestClass001.class.getMethod(\"setStringValue\", String.class));\n        this.attributeSetters001.put(\"x-att2-x\", TestClass001.class.getMethod(\"setIntValue\", int.class));\n\n        this.queryAttributeMap.put(this.objectName001, Arrays.asList(\"x-att1-x\", \"x-att2-x\"));\n        this.resultAttributeMap.put(this.objectName001,\n                Arrays.asList(new Attribute(\"x-att1-x\", \"x-string-value-x\"), new Attribute(\"x-att2-x\", 11)));\n\n        Mockito.when(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001))\n                .thenReturn(this.mockObjectQueryInfo001);\n        Mockito.when(this.mockObjectQueryInfo001.getTarget()).thenReturn(this.polled001);\n        Mockito.when(this.mockObjectQueryInfo001.getObjectName()).thenReturn(this.objectName001);\n        Mockito.when(this.mockObjectQueryInfo001.getAttributeNames()).thenReturn(this.attributeNames001);\n        Mockito.when(this.mockObjectQueryInfo001.getAttributeSetters()).thenReturn(this.attributeSetters001);\n\n        Mockito.when(this.mockAccessConnection\n                .batchQueryAttributes(this.createAttributeMapMatcher(this.queryAttributeMap)))\n                .thenReturn(this.resultAttributeMap);\n    }", "start_lineno": 64, "end_lineno": 102}]}
{"index": 49, "project_index": 25, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "UuidUtilTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/UuidUtilTest.java", "test_name": "testNewUnsecureUuidString", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/UuidUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/UuidUtilTest.java", "test_prefix": "    @Test\n    public void testNewUnsecureUuidString() {\n        String uuid = newUnsecureUuidString();\n\n        <AssertPlaceHolder>;\n        assertEquals(UUID_LENGTH, uuid.length());\n    }", "test_prefix_start_lineno": 25, "test_prefix_end_lineno": 31, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/UuidUtil.java", "focal_method": "    public static String newUnsecureUuidString() {\n        return newUnsecureUUID().toString();\n    }", "focal_method_start_lineno": 62, "focal_method_end_lineno": 64, "ground_truth_oracle": "assertNotNull(uuid);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testNewUnsecureUuidString() {\n        String uuid = newUnsecureUuidString();\n\n    }", "original_test_prefix": "    @Test\n    public void testNewUnsecureUuidString() {\n        String uuid = newUnsecureUuidString();\n\n        assertNotNull(uuid);\n        assertEquals(UUID_LENGTH, uuid.length());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.UuidUtilTest#testNewUnsecureUuidString", "test_setup_list": []}
{"index": 50, "project_index": 26, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLSelectTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_name": "testFlattenOnEmbedded", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 180, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_prefix": "  @Test\n  public void testFlattenOnEmbedded() {\n    List<ODocument> qResult = db.command(new OCommandSQL(\"select flatten(address) from foo where name = 'a'\")).execute();\n\n    <AssertPlaceHolder>;\n    assertEquals(qResult.get(0).field(\"city\"), \"NY\");\n  }", "test_prefix_start_lineno": 502, "test_prefix_end_lineno": 508, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(qResult.size(), 1);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testFlattenOnEmbedded() {\n    List<ODocument> qResult = db.command(new OCommandSQL(\"select flatten(address) from foo where name = 'a'\")).execute();\n\n  }", "original_test_prefix": "  @Test\n  public void testFlattenOnEmbedded() {\n    List<ODocument> qResult = db.command(new OCommandSQL(\"select flatten(address) from foo where name = 'a'\")).execute();\n\n    assertEquals(qResult.size(), 1);\n    assertEquals(qResult.get(0).field(\"city\"), \"NY\");\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLSelectTest#testFlattenOnEmbedded", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "start_lineno": 51, "end_lineno": 180}]}
{"index": 51, "project_index": 26, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OPropertyMapIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_name": "testCreateValueByValueTwoParametersArrayParams", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }\n\n@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testCreateValueByValueTwoParametersArrayParams() {\n    final Object result = propertyIndexByValue.createValue(mapToTest, \"25\");\n\n    <AssertPlaceHolder>;\n\n    final Collection<?> collectionResult = (Collection<?>) result;\n\n    Assert.assertEquals(collectionResult.size(), 2);\n    Assert.assertTrue(collectionResult.contains(1));\n    Assert.assertTrue(collectionResult.contains(2));\n  }", "test_prefix_start_lineno": 132, "test_prefix_end_lineno": 143, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focal_method": "  @Override\n  public Object createValue(Object... params) {\n    if (!(params[0] instanceof Map))\n      return null;\n\n    final Collection<?> mapParams = extractMapParams((Map<?, ?>) params[0]);\n\n    final List<Object> result = new ArrayList<>(mapParams.size());\n    for (final Object mapParam : mapParams) {\n      Object val = createSingleValue(mapParam);\n      result.add(val);\n    }\n\n    if (getFieldsToIndex().size() == 1 && result.size() == 1) {\n      return result.get(0);\n    }\n\n    return result;\n  }", "focal_method_start_lineno": 78, "focal_method_end_lineno": 96, "ground_truth_oracle": "Assert.assertTrue(result instanceof Collection);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testCreateValueByValueTwoParametersArrayParams() {\n    final Object result = propertyIndexByValue.createValue(mapToTest, \"25\");\n\n  }", "original_test_prefix": "  @Test\n  public void testCreateValueByValueTwoParametersArrayParams() {\n    final Object result = propertyIndexByValue.createValue(mapToTest, \"25\");\n\n    Assert.assertTrue(result instanceof Collection);\n\n    final Collection<?> collectionResult = (Collection<?>) result;\n\n    Assert.assertEquals(collectionResult.size(), 2);\n    Assert.assertTrue(collectionResult.contains(1));\n    Assert.assertTrue(collectionResult.contains(2));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OPropertyMapIndexDefinitionTest#testCreateValueByValueTwoParametersArrayParams", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }", "start_lineno": 23, "end_lineno": 27}, {"test_setup": "@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "start_lineno": 29, "end_lineno": 37}]}
{"index": 52, "project_index": 26, "class_index": 1, "test_index": 1, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OPropertyMapIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_name": "testCreateSingleValueByValue", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }\n\n@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testCreateSingleValueByValue() {\n    final Object result = propertyIndexByValue.createSingleValue(\"12\");\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 245, "test_prefix_end_lineno": 249, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focal_method": "  public Object createSingleValue(final Object... param) {\n    return OType.convert(param[0], keyType.getDefaultJavaType());\n  }", "focal_method_start_lineno": 138, "focal_method_end_lineno": 140, "ground_truth_oracle": "Assert.assertEquals(result, 12);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testCreateSingleValueByValue() {\n    final Object result = propertyIndexByValue.createSingleValue(\"12\");\n  }", "original_test_prefix": "  @Test\n  public void testCreateSingleValueByValue() {\n    final Object result = propertyIndexByValue.createSingleValue(\"12\");\n    Assert.assertEquals(result, 12);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OPropertyMapIndexDefinitionTest#testCreateSingleValueByValue", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }", "start_lineno": 23, "end_lineno": 27}, {"test_setup": "@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "start_lineno": 29, "end_lineno": 37}]}
{"index": 53, "project_index": 26, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "object", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OObjectBinaryDataStorageTest", "class_path": "object/src/test/java/com/orientechnologies/orient/object/enhancement/field/OObjectBinaryDataStorageTest.java", "test_name": "testSaveAndLoad_BinaryFieldsSimpleRecordMapping", "test_setup_file_path": "object/src/test/java/com/orientechnologies/orient/object/enhancement/field/OObjectBinaryDataStorageTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "object/src/test/java/com/orientechnologies/orient/object/enhancement/field/OObjectBinaryDataStorageTest.java", "test_prefix": "  @Test\n  public void testSaveAndLoad_BinaryFieldsSimpleRecordMapping() throws IOException {\n\n    this.createDb(ODocumentFieldHandlingStrategyFactory.SIMPLE);\n\n    Driver hunt = new Driver();\n    hunt.setName(\"James Hunt\");\n    byte[] huntUglyPicture = randomBytes(1024 * 32);\n    hunt.setImageData(huntUglyPicture);\n\n    Driver savedHunt = this.databaseTx.save(hunt);\n    Driver loadedHunt = this.databaseTx.load(new ORecordId(savedHunt.getId()));\n\n    <AssertPlaceHolder>;\n    Assert.assertNotNull(loadedHunt);\n    Assert.assertArrayEquals(huntUglyPicture, hunt.getImageData());\n    Assert.assertArrayEquals(huntUglyPicture, savedHunt.getImageData());\n    Assert.assertArrayEquals(huntUglyPicture, loadedHunt.getImageData());\n  }", "test_prefix_start_lineno": 40, "test_prefix_end_lineno": 61, "focal_method_file_path": "object/src/main/java/com/orientechnologies/orient/object/db/OObjectDatabaseTx.java", "focal_method": "  public <RET> RET load(final ORID recordId) {\n    return (RET) load(recordId, null);\n  }", "focal_method_start_lineno": 401, "focal_method_end_lineno": 403, "ground_truth_oracle": "Assert.assertNotNull(savedHunt);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testSaveAndLoad_BinaryFieldsSimpleRecordMapping() throws IOException {\n\n    this.createDb(ODocumentFieldHandlingStrategyFactory.SIMPLE);\n\n    Driver hunt = new Driver();\n    hunt.setName(\"James Hunt\");\n    byte[] huntUglyPicture = randomBytes(1024 * 32);\n    hunt.setImageData(huntUglyPicture);\n\n    Driver savedHunt = this.databaseTx.save(hunt);\n    Driver loadedHunt = this.databaseTx.load(new ORecordId(savedHunt.getId()));\n\n  }", "original_test_prefix": "  @Test\n  public void testSaveAndLoad_BinaryFieldsSimpleRecordMapping() throws IOException {\n\n    this.createDb(ODocumentFieldHandlingStrategyFactory.SIMPLE);\n\n    Driver hunt = new Driver();\n    hunt.setName(\"James Hunt\");\n    byte[] huntUglyPicture = randomBytes(1024 * 32);\n    hunt.setImageData(huntUglyPicture);\n\n    Driver savedHunt = this.databaseTx.save(hunt);\n    Driver loadedHunt = this.databaseTx.load(new ORecordId(savedHunt.getId()));\n\n    Assert.assertNotNull(savedHunt);\n    Assert.assertNotNull(loadedHunt);\n    Assert.assertArrayEquals(huntUglyPicture, hunt.getImageData());\n    Assert.assertArrayEquals(huntUglyPicture, savedHunt.getImageData());\n    Assert.assertArrayEquals(huntUglyPicture, loadedHunt.getImageData());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.object.enhancement.field.OObjectBinaryDataStorageTest#testSaveAndLoad_BinaryFieldsSimpleRecordMapping", "test_setup_list": []}
{"index": 54, "project_index": 26, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODropSequenceStatementExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropSequenceStatementExecutionTest.java", "test_name": "testPlain", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropSequenceStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:ODropSequenceStatementExecutionTest\");\n    db.create();\n  }", "test_setup_start_lineno": 19, "test_setup_end_lineno": 23, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropSequenceStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testPlain() {\n    String name = \"testPlain\";\n    db.getMetadata().getSequenceLibrary().createSequence(name, OSequence.SEQUENCE_TYPE.CACHED, new OSequence.CreateParams());\n\n    <AssertPlaceHolder>;\n    OResultSet result = db.command(\"drop sequence \" + name);\n    Assert.assertTrue(result.hasNext());\n    OResult next = result.next();\n    Assert.assertEquals(\"drop sequence\", next.getProperty(\"operation\"));\n    Assert.assertFalse(result.hasNext());\n    result.close();\n\n    Assert.assertNull(db.getMetadata().getSequenceLibrary().getSequence(name));\n  }", "test_prefix_start_lineno": 30, "test_prefix_end_lineno": 44, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/sequence/OSequenceLibrary.java", "focal_method": "  OSequence getSequence(String iName);", "focal_method_start_lineno": 38, "focal_method_end_lineno": 38, "ground_truth_oracle": "Assert.assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testPlain() {\n    String name = \"testPlain\";\n    db.getMetadata().getSequenceLibrary().createSequence(name, OSequence.SEQUENCE_TYPE.CACHED, new OSequence.CreateParams());\n\n  }", "original_test_prefix": "  @Test\n  public void testPlain() {\n    String name = \"testPlain\";\n    db.getMetadata().getSequenceLibrary().createSequence(name, OSequence.SEQUENCE_TYPE.CACHED, new OSequence.CreateParams());\n\n    Assert.assertNotNull(db.getMetadata().getSequenceLibrary().getSequence(name));\n    OResultSet result = db.command(\"drop sequence \" + name);\n    Assert.assertTrue(result.hasNext());\n    OResult next = result.next();\n    Assert.assertEquals(\"drop sequence\", next.getProperty(\"operation\"));\n    Assert.assertFalse(result.hasNext());\n    result.close();\n\n    Assert.assertNull(db.getMetadata().getSequenceLibrary().getSequence(name));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.ODropSequenceStatementExecutionTest#testPlain", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:ODropSequenceStatementExecutionTest\");\n    db.create();\n  }", "start_lineno": 19, "end_lineno": 23}]}
{"index": 55, "project_index": 26, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCompositeKeyTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_name": "testCompareToLT", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_prefix": "  @Test\n  public void testCompareToLT() {\n    final OCompositeKey compositeKey = new OCompositeKey();\n    compositeKey.addKey(\"a\");\n    compositeKey.addKey(\"b\");\n\n    final OCompositeKey anotherCompositeKey = new OCompositeKey();\n\n    anotherCompositeKey.addKey(\"b\");\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 144, "test_prefix_end_lineno": 155, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focal_method": "  public int compareTo(final OCompositeKey otherKey) {\n    final Iterator<Object> inIter = keys.iterator();\n    final Iterator<Object> outIter = otherKey.keys.iterator();\n\n    while (inIter.hasNext() && outIter.hasNext()) {\n      final Object inKey = inIter.next();\n      final Object outKey = outIter.next();\n\n      if (outKey instanceof OAlwaysGreaterKey)\n        return -1;\n\n      if (outKey instanceof OAlwaysLessKey)\n        return 1;\n\n      if (inKey instanceof OAlwaysGreaterKey)\n        return 1;\n\n      if (inKey instanceof OAlwaysLessKey)\n        return -1;\n\n      final int result = comparator.compare(inKey, outKey);\n      if (result != 0)\n        return result;\n    }\n\n    return 0;\n  }", "focal_method_start_lineno": 107, "focal_method_end_lineno": 133, "ground_truth_oracle": "assertEquals(compositeKey.compareTo(anotherCompositeKey), -1);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testCompareToLT() {\n    final OCompositeKey compositeKey = new OCompositeKey();\n    compositeKey.addKey(\"a\");\n    compositeKey.addKey(\"b\");\n\n    final OCompositeKey anotherCompositeKey = new OCompositeKey();\n\n    anotherCompositeKey.addKey(\"b\");\n\n  }", "original_test_prefix": "  @Test\n  public void testCompareToLT() {\n    final OCompositeKey compositeKey = new OCompositeKey();\n    compositeKey.addKey(\"a\");\n    compositeKey.addKey(\"b\");\n\n    final OCompositeKey anotherCompositeKey = new OCompositeKey();\n\n    anotherCompositeKey.addKey(\"b\");\n\n    assertEquals(compositeKey.compareTo(anotherCompositeKey), -1);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OCompositeKeyTest#testCompareToLT", "test_setup_list": []}
{"index": 56, "project_index": 26, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "lucene", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "LuceneSpatialMiscFunctionsTest", "class_path": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java", "test_name": "testStContainsPoint", "test_setup_file_path": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java", "test_setup": "", "test_setup_start_lineno": 45, "test_setup_end_lineno": 75, "test_prefix_file_path": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java", "test_prefix": "  @Test\n  public void testStContainsPoint(){\n\n    List<ODocument> execute = db.command(new OCommandSQL(\n        \"select ST_Contains(ST_GeomFromText('POINT (55.78639 37.58378)'), ST_GeomFromText('POINT (55.78639 37.58378)'))\")).execute();\n    ODocument next = execute.iterator().next();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 68, "test_prefix_end_lineno": 76, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  @Override\n  public <RET> RET field(final String iFieldName) {\n    RET value = this.rawField(iFieldName);\n\n    if (!iFieldName.startsWith(\"@\") && _lazyLoad && value instanceof ORID && (((ORID) value).isPersistent() || ((ORID) value)\n        .isNew()) && ODatabaseRecordThreadLocal.instance().isDefined()) {\n      // CREATE THE DOCUMENT OBJECT IN LAZY WAY\n      RET newValue = getDatabase().load((ORID) value);\n      if (newValue != null) {\n        unTrack((ORID) value);\n        track((OIdentifiable) newValue);\n        value = newValue;\n        if (this.isTrackingChanges()) {\n          ORecordInternal.setDirtyManager((ORecord) value, this.getDirtyManager());\n        }\n        if (!iFieldName.contains(\".\")) {\n          ODocumentEntry entry = _fields.get(iFieldName);\n          removeCollectionChangeListener(entry, entry.value);\n          entry.value = value;\n          addCollectionChangeListener(entry);\n        }\n      }\n    }\n\n    return value;\n  }", "focal_method_start_lineno": 1201, "focal_method_end_lineno": 1226, "ground_truth_oracle": "Assert.assertEquals( true,next.field(\"ST_Contains\"));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testStContainsPoint(){\n\n    List<ODocument> execute = db.command(new OCommandSQL(\n        \"select ST_Contains(ST_GeomFromText('POINT (55.78639 37.58378)'), ST_GeomFromText('POINT (55.78639 37.58378)'))\")).execute();\n    ODocument next = execute.iterator().next();\n  }", "original_test_prefix": "  @Test\n  public void testStContainsPoint(){\n\n    List<ODocument> execute = db.command(new OCommandSQL(\n        \"select ST_Contains(ST_GeomFromText('POINT (55.78639 37.58378)'), ST_GeomFromText('POINT (55.78639 37.58378)'))\")).execute();\n    ODocument next = execute.iterator().next();\n    Assert.assertEquals( true,next.field(\"ST_Contains\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.spatial.functions.LuceneSpatialMiscFunctionsTest#testStContainsPoint", "test_setup_list": []}
{"index": 57, "project_index": 26, "class_index": 6, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "lucene", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "LuceneSpatialTxPointTest", "class_path": "lucene/src/test/java/com/orientechnologies/spatial/LuceneSpatialTxPointTest.java", "test_name": "testIndexingComplexUpdateTxPoint", "test_setup_file_path": "lucene/src/test/java/com/orientechnologies/spatial/LuceneSpatialTxPointTest.java", "test_setup": "@Before\n  public void init() {\n\n    OSchema schema = db.getMetadata().getSchema();\n    OClass v = schema.getClass(\"V\");\n    OClass oClass = schema.createClass(\"City\");\n    oClass.setSuperClass(v);\n    oClass.createProperty(\"location\", OType.EMBEDDED, schema.getClass(\"OPoint\"));\n    oClass.createProperty(\"name\", OType.STRING);\n\n    OClass place = schema.createClass(\"Place\");\n    place.setSuperClass(v);\n    place.createProperty(\"latitude\", OType.DOUBLE);\n    place.createProperty(\"longitude\", OType.DOUBLE);\n    place.createProperty(\"name\", OType.STRING);\n\n    db.command(new OCommandSQL(\"CREATE INDEX City.location ON City(location) SPATIAL ENGINE LUCENE\")).execute();\n\n  }", "test_setup_start_lineno": 41, "test_setup_end_lineno": 59, "test_prefix_file_path": "lucene/src/test/java/com/orientechnologies/spatial/LuceneSpatialTxPointTest.java", "test_prefix": "  @Test\n  public void testIndexingComplexUpdateTxPoint() {\n\n    ODocument rome = newCity(\"Rome\", 12.5, 41.9);\n    ODocument london = newCity(\"London\", -0.1275, 51.507222);\n\n    rome = db.save(rome);\n    london = db.save(london);\n\n    db.begin();\n\n    rome.field(\"location\", newPoint(12.5, 41.9));\n    london.field(\"location\", newPoint(-0.1275, 51.507222));\n    london.field(\"location\", newPoint(-0.1275, 51.507222));\n    london.field(\"location\", newPoint(12.5, 41.9));\n\n    db.save(rome);\n    db.save(london);\n\n    db.commit();\n\n    OIndex<?> index = db.getMetadata().getIndexManager().getIndex(\"City.location\");\n\n    <AssertPlaceHolder>;\n\n  }", "test_prefix_start_lineno": 137, "test_prefix_end_lineno": 162, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java", "focal_method": "  long getSize();", "focal_method_start_lineno": 115, "focal_method_end_lineno": 115, "ground_truth_oracle": "Assert.assertEquals(3, index.getSize());", "ground_truth_oracle_lineno": 13, "test_prefix_wo_placeholder": "  @Test\n  public void testIndexingComplexUpdateTxPoint() {\n\n    ODocument rome = newCity(\"Rome\", 12.5, 41.9);\n    ODocument london = newCity(\"London\", -0.1275, 51.507222);\n\n    rome = db.save(rome);\n    london = db.save(london);\n\n    db.begin();\n\n    rome.field(\"location\", newPoint(12.5, 41.9));\n    london.field(\"location\", newPoint(-0.1275, 51.507222));\n    london.field(\"location\", newPoint(-0.1275, 51.507222));\n    london.field(\"location\", newPoint(12.5, 41.9));\n\n    db.save(rome);\n    db.save(london);\n\n    db.commit();\n\n    OIndex<?> index = db.getMetadata().getIndexManager().getIndex(\"City.location\");\n\n  }", "original_test_prefix": "  @Test\n  public void testIndexingComplexUpdateTxPoint() {\n\n    ODocument rome = newCity(\"Rome\", 12.5, 41.9);\n    ODocument london = newCity(\"London\", -0.1275, 51.507222);\n\n    rome = db.save(rome);\n    london = db.save(london);\n\n    db.begin();\n\n    rome.field(\"location\", newPoint(12.5, 41.9));\n    london.field(\"location\", newPoint(-0.1275, 51.507222));\n    london.field(\"location\", newPoint(-0.1275, 51.507222));\n    london.field(\"location\", newPoint(12.5, 41.9));\n\n    db.save(rome);\n    db.save(london);\n\n    db.commit();\n\n    OIndex<?> index = db.getMetadata().getIndexManager().getIndex(\"City.location\");\n\n    Assert.assertEquals(3, index.getSize());\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.spatial.LuceneSpatialTxPointTest#testIndexingComplexUpdateTxPoint", "test_setup_list": [{"test_setup": "@Before\n  public void init() {\n\n    OSchema schema = db.getMetadata().getSchema();\n    OClass v = schema.getClass(\"V\");\n    OClass oClass = schema.createClass(\"City\");\n    oClass.setSuperClass(v);\n    oClass.createProperty(\"location\", OType.EMBEDDED, schema.getClass(\"OPoint\"));\n    oClass.createProperty(\"name\", OType.STRING);\n\n    OClass place = schema.createClass(\"Place\");\n    place.setSuperClass(v);\n    place.createProperty(\"latitude\", OType.DOUBLE);\n    place.createProperty(\"longitude\", OType.DOUBLE);\n    place.createProperty(\"name\", OType.STRING);\n\n    db.command(new OCommandSQL(\"CREATE INDEX City.location ON City(location) SPATIAL ENGINE LUCENE\")).execute();\n\n  }", "start_lineno": 41, "end_lineno": 59}]}
{"index": 58, "project_index": 26, "class_index": 7, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCompositeIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_name": "testIndexReload", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeMethod() {\n    compositeIndex = new OCompositeIndexDefinition(\"testClass\");\n\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER));\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fTwo\", OType.STRING));\n  }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testIndexReload() {\n    final ODocument docToStore = compositeIndex.toStream();\n\n    final OCompositeIndexDefinition result = new OCompositeIndexDefinition();\n    result.fromStream(docToStore);\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 606, "test_prefix_end_lineno": 614, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/type/ODocumentWrapperNoClass.java", "focal_method": "  @Override\n  public void fromStream(ODocument iDocument) {\n    super.fromStream(iDocument);\n    fromStream();\n  }", "focal_method_start_lineno": 41, "focal_method_end_lineno": 45, "ground_truth_oracle": "Assert.assertEquals(result, compositeIndex);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void testIndexReload() {\n    final ODocument docToStore = compositeIndex.toStream();\n\n    final OCompositeIndexDefinition result = new OCompositeIndexDefinition();\n    result.fromStream(docToStore);\n\n  }", "original_test_prefix": "  @Test\n  public void testIndexReload() {\n    final ODocument docToStore = compositeIndex.toStream();\n\n    final OCompositeIndexDefinition result = new OCompositeIndexDefinition();\n    result.fromStream(docToStore);\n\n    Assert.assertEquals(result, compositeIndex);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OCompositeIndexDefinitionTest#testIndexReload", "test_setup_list": [{"test_setup": "@Before\n  public void beforeMethod() {\n    compositeIndex = new OCompositeIndexDefinition(\"testClass\");\n\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER));\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fTwo\", OType.STRING));\n  }", "start_lineno": 21, "end_lineno": 27}]}
{"index": 59, "project_index": 27, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "MPEGESTest", "class_path": "src/test/java/org/jcodec/codecs/mpeg12/MPEGESTest.java", "test_name": "testES", "test_setup_file_path": "src/test/java/org/jcodec/codecs/mpeg12/MPEGESTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/codecs/mpeg12/MPEGESTest.java", "test_prefix": "    @Test\n    public void testES() throws IOException {\n\n        byte[] mpeg = MPEGTestConst.mpeg();\n\n        byte[] frame1 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegHeader, MPEGTestConst._mpegFrame});\n        byte[] frame2 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegFrame});\n        MPEGES mpeges = new MPEGES(Channels.newChannel(new ByteArrayInputStream(mpeg)), 32);\n        ByteBuffer buf = ByteBuffer.allocate(1024);\n        Packet f1 = mpeges.frame(buf);\n        <AssertPlaceHolder>;\n\n        Packet f2 = mpeges.frame(buf);\n        assertArrayEquals(frame1, NIOUtils.toArray(f2.getData()));\n\n        Packet f3 = mpeges.frame(buf);\n        assertArrayEquals(frame2, NIOUtils.toArray(f3.getData()));\n    }", "test_prefix_start_lineno": 15, "test_prefix_end_lineno": 32, "focal_method_file_path": "src/main/java/org/jcodec/common/io/NIOUtils.java", "focal_method": "    public static byte[] toArray(ByteBuffer buffer) {\n        byte[] result = new byte[buffer.remaining()];\n        buffer.duplicate().get(result);\n        return result;\n    }", "focal_method_start_lineno": 146, "focal_method_end_lineno": 150, "ground_truth_oracle": "assertArrayEquals(frame1, NIOUtils.toArray(f1.getData()));", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void testES() throws IOException {\n\n        byte[] mpeg = MPEGTestConst.mpeg();\n\n        byte[] frame1 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegHeader, MPEGTestConst._mpegFrame});\n        byte[] frame2 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegFrame});\n        MPEGES mpeges = new MPEGES(Channels.newChannel(new ByteArrayInputStream(mpeg)), 32);\n        ByteBuffer buf = ByteBuffer.allocate(1024);\n        Packet f1 = mpeges.frame(buf);\n    }", "original_test_prefix": "    @Test\n    public void testES() throws IOException {\n\n        byte[] mpeg = MPEGTestConst.mpeg();\n\n        byte[] frame1 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegHeader, MPEGTestConst._mpegFrame});\n        byte[] frame2 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegFrame});\n        MPEGES mpeges = new MPEGES(Channels.newChannel(new ByteArrayInputStream(mpeg)), 32);\n        ByteBuffer buf = ByteBuffer.allocate(1024);\n        Packet f1 = mpeges.frame(buf);\n        assertArrayEquals(frame1, NIOUtils.toArray(f1.getData()));\n\n        Packet f2 = mpeges.frame(buf);\n        assertArrayEquals(frame1, NIOUtils.toArray(f2.getData()));\n\n        Packet f3 = mpeges.frame(buf);\n        assertArrayEquals(frame2, NIOUtils.toArray(f3.getData()));\n    }", "test_with_params": false, "test_target": "org.jcodec.codecs.mpeg12.MPEGESTest#testES", "test_setup_list": []}
{"index": 60, "project_index": 28, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AsCollectionCopyTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AsCollectionCopyTest.java", "test_name": "testAsCollectionCopy", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AsCollectionCopyTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AsCollectionCopyTest.java", "test_prefix": "    @Test\n    public void testAsCollectionCopy() {\n        final List<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\"));\n\n        final ACollection<String> copied = ACollectionHelper.asACollectionCopy(list);\n        <AssertPlaceHolder>;\n        assertEquals(true, copied.nonEmpty());\n        assertEquals(false, copied.isEmpty());\n\n        assertEquals(AList.create(\"a\", \"b\"), copied.toList());\n        assertEquals(AHashSet.create (\"a\", \"b\"), copied.toSet());\n\n        list.clear();\n\n        assertEquals(2, copied.size());\n        assertEquals(true, copied.nonEmpty());\n        assertEquals(false, copied.isEmpty());\n\n        assertEquals(AList.create(\"a\", \"b\"), copied.toList());\n        assertEquals(AHashSet.create (\"a\", \"b\"), copied.toSet());\n\n        final ACollection<String> copiedEmpty = ACollectionHelper.asACollectionCopy(Arrays.<String>asList());\n        assertEquals(0, copiedEmpty.size());\n        assertEquals(true, copiedEmpty.isEmpty());\n        assertEquals(false, copiedEmpty.nonEmpty());\n\n        assertEquals(AList.<String>nil(), copiedEmpty.toList());\n        assertEquals(AHashSet.<String>empty (), copiedEmpty.toSet());\n    }", "test_prefix_start_lineno": 37, "test_prefix_end_lineno": 65, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/ACollection.java", "focal_method": "    int size();", "focal_method_start_lineno": 29, "focal_method_end_lineno": 29, "ground_truth_oracle": "assertEquals(2, copied.size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testAsCollectionCopy() {\n        final List<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\"));\n\n        final ACollection<String> copied = ACollectionHelper.asACollectionCopy(list);\n    }", "original_test_prefix": "    @Test\n    public void testAsCollectionCopy() {\n        final List<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\"));\n\n        final ACollection<String> copied = ACollectionHelper.asACollectionCopy(list);\n        assertEquals(2, copied.size());\n        assertEquals(true, copied.nonEmpty());\n        assertEquals(false, copied.isEmpty());\n\n        assertEquals(AList.create(\"a\", \"b\"), copied.toList());\n        assertEquals(AHashSet.create (\"a\", \"b\"), copied.toSet());\n\n        list.clear();\n\n        assertEquals(2, copied.size());\n        assertEquals(true, copied.nonEmpty());\n        assertEquals(false, copied.isEmpty());\n\n        assertEquals(AList.create(\"a\", \"b\"), copied.toList());\n        assertEquals(AHashSet.create (\"a\", \"b\"), copied.toSet());\n\n        final ACollection<String> copiedEmpty = ACollectionHelper.asACollectionCopy(Arrays.<String>asList());\n        assertEquals(0, copiedEmpty.size());\n        assertEquals(true, copiedEmpty.isEmpty());\n        assertEquals(false, copiedEmpty.nonEmpty());\n\n        assertEquals(AList.<String>nil(), copiedEmpty.toList());\n        assertEquals(AHashSet.<String>empty (), copiedEmpty.toSet());\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.AsCollectionCopyTest#testAsCollectionCopy", "test_setup_list": []}
{"index": 61, "project_index": 29, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "ProtocolTest", "class_path": "src/test/java/org/java_websocket/protocols/ProtocolTest.java", "test_name": "testToString", "test_setup_file_path": "src/test/java/org/java_websocket/protocols/ProtocolTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/protocols/ProtocolTest.java", "test_prefix": "  @Test\n  public void testToString() throws Exception {\n    Protocol protocol0 = new Protocol(\"\");\n    <AssertPlaceHolder>;\n    Protocol protocol1 = new Protocol(\"protocol\");\n    assertEquals(\"protocol\", protocol1.getProvidedProtocol());\n  }", "test_prefix_start_lineno": 84, "test_prefix_end_lineno": 90, "focal_method_file_path": "src/main/java/org/java_websocket/protocols/Protocol.java", "focal_method": "  @Override\n  public String getProvidedProtocol() {\n    return this.providedProtocol;\n  }", "focal_method_start_lineno": 72, "focal_method_end_lineno": 75, "ground_truth_oracle": "assertEquals(\"\", protocol0.getProvidedProtocol());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testToString() throws Exception {\n    Protocol protocol0 = new Protocol(\"\");\n  }", "original_test_prefix": "  @Test\n  public void testToString() throws Exception {\n    Protocol protocol0 = new Protocol(\"\");\n    assertEquals(\"\", protocol0.getProvidedProtocol());\n    Protocol protocol1 = new Protocol(\"protocol\");\n    assertEquals(\"protocol\", protocol1.getProvidedProtocol());\n  }", "test_with_params": false, "test_target": "org.java_websocket.protocols.ProtocolTest#testToString", "test_setup_list": []}
{"index": 62, "project_index": 29, "class_index": 1, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "WebSocketServerTest", "class_path": "src/test/java/org/java_websocket/server/WebSocketServerTest.java", "test_name": "testGetDrafts", "test_setup_file_path": "src/test/java/org/java_websocket/server/WebSocketServerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/server/WebSocketServerTest.java", "test_prefix": "  @Test\n  public void testGetDrafts() {\n    List<Draft> draftCollection = Collections.<Draft>singletonList(new Draft_6455());\n    Collection<WebSocket> webSocketCollection = new HashSet<WebSocket>();\n    InetSocketAddress inetAddress = new InetSocketAddress(1337);\n    MyWebSocketServer server = new MyWebSocketServer(inetAddress, 1, draftCollection,\n        webSocketCollection);\n    <AssertPlaceHolder>;\n    assertEquals(draftCollection.get(0), server.getDraft().get(0));\n  }", "test_prefix_start_lineno": 121, "test_prefix_end_lineno": 130, "focal_method_file_path": "src/main/java/org/java_websocket/drafts/Draft_6455.java", "focal_method": "  public Draft_6455() {\n    this(Collections.<IExtension>emptyList());\n  }", "focal_method_start_lineno": 167, "focal_method_end_lineno": 169, "ground_truth_oracle": "assertEquals(1, server.getDraft().size());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testGetDrafts() {\n    List<Draft> draftCollection = Collections.<Draft>singletonList(new Draft_6455());\n    Collection<WebSocket> webSocketCollection = new HashSet<WebSocket>();\n    InetSocketAddress inetAddress = new InetSocketAddress(1337);\n    MyWebSocketServer server = new MyWebSocketServer(inetAddress, 1, draftCollection,\n        webSocketCollection);\n  }", "original_test_prefix": "  @Test\n  public void testGetDrafts() {\n    List<Draft> draftCollection = Collections.<Draft>singletonList(new Draft_6455());\n    Collection<WebSocket> webSocketCollection = new HashSet<WebSocket>();\n    InetSocketAddress inetAddress = new InetSocketAddress(1337);\n    MyWebSocketServer server = new MyWebSocketServer(inetAddress, 1, draftCollection,\n        webSocketCollection);\n    assertEquals(1, server.getDraft().size());\n    assertEquals(draftCollection.get(0), server.getDraft().get(0));\n  }", "test_with_params": false, "test_target": "org.java_websocket.server.WebSocketServerTest#testGetDrafts", "test_setup_list": []}
{"index": 63, "project_index": 30, "class_index": 0, "test_index": 0, "user_name": "fluenda", "repo_name": "ParCEFone", "sub_repos": [], "sub_repo": "", "commit_sha": "5067b3315c1957f930f19549ec4b354e7b8c336d", "build_system": "mvn", "class_name": "MacAddressTest", "class_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_name": "testAddressNormalizedSeparator", "test_setup_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_prefix": "    @Test\n    public void testAddressNormalizedSeparator() {\n        final MacAddress macAddress = new MacAddress(NORMALIZED_ADDRESS);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 49, "test_prefix_end_lineno": 53, "focal_method_file_path": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focal_method": "    @Override\n    public String toString() {\n        final StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < address.length; i++) {\n            if (i != 0) {\n                builder.append(STANDARD_SEPARATOR);\n            }\n            builder.append(String.format(\"%02x\", address[i]));\n\n        }\n        return builder.toString();\n    }", "focal_method_start_lineno": 93, "focal_method_end_lineno": 104, "ground_truth_oracle": "assertEquals(NORMALIZED_ADDRESS, macAddress.toString());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testAddressNormalizedSeparator() {\n        final MacAddress macAddress = new MacAddress(NORMALIZED_ADDRESS);\n    }", "original_test_prefix": "    @Test\n    public void testAddressNormalizedSeparator() {\n        final MacAddress macAddress = new MacAddress(NORMALIZED_ADDRESS);\n        assertEquals(NORMALIZED_ADDRESS, macAddress.toString());\n    }", "test_with_params": false, "test_target": "com.fluenda.parcefone.event.MacAddressTest#testAddressNormalizedSeparator", "test_setup_list": []}
{"index": 64, "project_index": 30, "class_index": 1, "test_index": 0, "user_name": "fluenda", "repo_name": "ParCEFone", "sub_repos": [], "sub_repo": "", "commit_sha": "5067b3315c1957f930f19549ec4b354e7b8c336d", "build_system": "mvn", "class_name": "CEFParserTest", "class_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_name": "validStringMessageWithoutTZWithLocaleAndValidationTest", "test_setup_file_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_prefix": "    @Test\n    public void validStringMessageWithoutTZWithLocaleAndValidationTest() throws Exception {\n        String sample1 = \"CEF:0|FireEye|CMS|7.2.1.244420|DM|domain-match|1|rt=juil. 09 2015 00:27:43 cn3Label=cncPort cn3=53 cn2Label=sid cn2=80494706 shost=dev001srv02.example.com proto=udp cs5Label=cncHost cs5=mfdclk001.org dvchost=DEVFEYE1 spt=61395 dvc=10.100.25.16 smac=00:00:0c:07:ac:00 cn1Label=vlan cn1=0 externalId=851777 cs4Label=link cs4=https://DEVCMS01.example.com/event_stream/events_for_bot?ev_id\\\\=851777 dmac=00:1d:a2:af:32:a1 cs1Label=sname cs1=Trojan.Generic.DNS \";\n        CEFParser parser = new CEFParser();\n\n        <AssertPlaceHolder>;\n        Assert.assertTrue(parser.parse(sample1, true, Locale.FRANCE).getHeader().containsKey(\"deviceVendor\"));\n        Assert.assertEquals(new SimpleDateFormat(\"MMM dd yyyy HH:mm:ss\").parse(\"Jul 09 2015 00:27:43\"), parser.parse(sample1, true, Locale.FRANCE).getExtension(true).get(\"rt\"));\n        Assert.assertEquals(InetAddress.getByName(\"10.100.25.16\"), parser.parse(sample1, true, Locale.FRANCE).getExtension(true).get(\"dvc\"));\n        Assert.assertNull(parser.parse(sample1, true, Locale.FRANCE).getExtension(true).get(\"act\"));\n    }", "test_prefix_start_lineno": 209, "test_prefix_end_lineno": 220, "focal_method_file_path": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java", "focal_method": "    public CommonEvent parse(String cefString, final boolean validate, Locale locale)  {\n        return this.parse(cefString, validate, false, locale);\n    }", "focal_method_start_lineno": 146, "focal_method_end_lineno": 148, "ground_truth_oracle": "Assert.assertNotNull(parser.parse(sample1, true, Locale.FRANCE));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void validStringMessageWithoutTZWithLocaleAndValidationTest() throws Exception {\n        String sample1 = \"CEF:0|FireEye|CMS|7.2.1.244420|DM|domain-match|1|rt=juil. 09 2015 00:27:43 cn3Label=cncPort cn3=53 cn2Label=sid cn2=80494706 shost=dev001srv02.example.com proto=udp cs5Label=cncHost cs5=mfdclk001.org dvchost=DEVFEYE1 spt=61395 dvc=10.100.25.16 smac=00:00:0c:07:ac:00 cn1Label=vlan cn1=0 externalId=851777 cs4Label=link cs4=https://DEVCMS01.example.com/event_stream/events_for_bot?ev_id\\\\=851777 dmac=00:1d:a2:af:32:a1 cs1Label=sname cs1=Trojan.Generic.DNS \";\n        CEFParser parser = new CEFParser();\n\n    }", "original_test_prefix": "    @Test\n    public void validStringMessageWithoutTZWithLocaleAndValidationTest() throws Exception {\n        String sample1 = \"CEF:0|FireEye|CMS|7.2.1.244420|DM|domain-match|1|rt=juil. 09 2015 00:27:43 cn3Label=cncPort cn3=53 cn2Label=sid cn2=80494706 shost=dev001srv02.example.com proto=udp cs5Label=cncHost cs5=mfdclk001.org dvchost=DEVFEYE1 spt=61395 dvc=10.100.25.16 smac=00:00:0c:07:ac:00 cn1Label=vlan cn1=0 externalId=851777 cs4Label=link cs4=https://DEVCMS01.example.com/event_stream/events_for_bot?ev_id\\\\=851777 dmac=00:1d:a2:af:32:a1 cs1Label=sname cs1=Trojan.Generic.DNS \";\n        CEFParser parser = new CEFParser();\n\n        Assert.assertNotNull(parser.parse(sample1, true, Locale.FRANCE));\n        Assert.assertTrue(parser.parse(sample1, true, Locale.FRANCE).getHeader().containsKey(\"deviceVendor\"));\n        Assert.assertEquals(new SimpleDateFormat(\"MMM dd yyyy HH:mm:ss\").parse(\"Jul 09 2015 00:27:43\"), parser.parse(sample1, true, Locale.FRANCE).getExtension(true).get(\"rt\"));\n        Assert.assertEquals(InetAddress.getByName(\"10.100.25.16\"), parser.parse(sample1, true, Locale.FRANCE).getExtension(true).get(\"dvc\"));\n        Assert.assertNull(parser.parse(sample1, true, Locale.FRANCE).getExtension(true).get(\"act\"));\n    }", "test_with_params": false, "test_target": "com.fluenda.parcefone.parser.CEFParserTest#validStringMessageWithoutTZWithLocaleAndValidationTest", "test_setup_list": []}
{"index": 65, "project_index": 31, "class_index": 0, "test_index": 0, "user_name": "open-korean-text", "repo_name": "open-korean-text", "sub_repos": [], "sub_repo": "", "commit_sha": "95bf003beb3b357fcb16f94d4f595613cf7c5276", "build_system": "mvn", "class_name": "OpenKoreanProcessorJavaTest", "class_path": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "test_name": "testRemoveWordsFromDictionary", "test_setup_file_path": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "test_prefix": "  @Test\n  public void testRemoveWordsFromDictionary() {\n    String text = \"\ud3c9\ucc3d\uc62c\ub9bc\ud53d\uc5d0\";\n\n    ArrayList<String> nouns = new ArrayList<>();\n    nouns.add(\"\ud3c9\ucc3d\uc62c\ub9bc\ud53d\");\n    OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Noun, nouns);\n\n    Seq<KoreanTokenizer.KoreanToken> tokens = OpenKoreanTextProcessorJava.tokenize(text);\n    <AssertPlaceHolder>;\n    assertEquals(OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens).get(0).getPos(), KoreanPosJava.Noun);\n\n    OpenKoreanTextProcessorJava.removeWordFromDictionary(KoreanPosJava.Noun, nouns);\n\n    tokens = OpenKoreanTextProcessorJava.tokenize(text);\n    assertEquals(\"[\ud3c9\ucc3d, \uc62c\ub9bc\ud53d, \uc5d0]\", OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n    assertEquals(OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens).get(0).getPos(), KoreanPosJava.Noun);\n  }", "test_prefix_start_lineno": 113, "test_prefix_end_lineno": 133, "focal_method_file_path": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java", "focal_method": "  public static void addWordsToDictionary(KoreanPosJava pos, List<String> words) {\n    OpenKoreanTextProcessor.addWordsToDictionary(KoreanPos.withName(pos.toString()), JavaConverters.asScalaBufferConverter(words).asScala());\n  }", "focal_method_start_lineno": 76, "focal_method_end_lineno": 78, "ground_truth_oracle": "assertEquals(\"[\ud3c9\ucc3d\uc62c\ub9bc\ud53d, \uc5d0]\", OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testRemoveWordsFromDictionary() {\n    String text = \"\ud3c9\ucc3d\uc62c\ub9bc\ud53d\uc5d0\";\n\n    ArrayList<String> nouns = new ArrayList<>();\n    nouns.add(\"\ud3c9\ucc3d\uc62c\ub9bc\ud53d\");\n    OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Noun, nouns);\n\n    Seq<KoreanTokenizer.KoreanToken> tokens = OpenKoreanTextProcessorJava.tokenize(text);\n  }", "original_test_prefix": "  @Test\n  public void testRemoveWordsFromDictionary() {\n    String text = \"\ud3c9\ucc3d\uc62c\ub9bc\ud53d\uc5d0\";\n\n    ArrayList<String> nouns = new ArrayList<>();\n    nouns.add(\"\ud3c9\ucc3d\uc62c\ub9bc\ud53d\");\n    OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Noun, nouns);\n\n    Seq<KoreanTokenizer.KoreanToken> tokens = OpenKoreanTextProcessorJava.tokenize(text);\n    assertEquals(\"[\ud3c9\ucc3d\uc62c\ub9bc\ud53d, \uc5d0]\", OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n    assertEquals(OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens).get(0).getPos(), KoreanPosJava.Noun);\n\n    OpenKoreanTextProcessorJava.removeWordFromDictionary(KoreanPosJava.Noun, nouns);\n\n    tokens = OpenKoreanTextProcessorJava.tokenize(text);\n    assertEquals(\"[\ud3c9\ucc3d, \uc62c\ub9bc\ud53d, \uc5d0]\", OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n    assertEquals(OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens).get(0).getPos(), KoreanPosJava.Noun);\n  }", "test_with_params": false, "test_target": "org.openkoreantext.processor.OpenKoreanProcessorJavaTest#testRemoveWordsFromDictionary", "test_setup_list": []}
{"index": 66, "project_index": 32, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "SubStatementTest", "class_path": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "test_name": "testSetVerb", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        substatement = new SubStatement();\n        substatement.setTimestamp(TIME);\n        actor = new Agent();\n        actor.setMbox(MBOX);\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        verb = new Verb(ID, display);\n        activity = new Activity(TEST_IRI);\n        substatement.setActor(actor);\n        substatement.setVerb(verb);\n        substatement.setObject(activity);\n        result = new Result();\n        result.setSuccess(false);\n        substatement.setResult(result);\n        context = new Context();\n        context.setLanguage(LANGUAGE);\n        substatement.setContext(context);\n        attachments = new ArrayList<Attachment>();\n        Attachment att = new Attachment();\n\n        HashMap<String, String> attDisplay = new HashMap<String, String>();\n        attDisplay.put(\"en-US\", \"Test Display.\");\n        att.setDisplay(attDisplay);\n\n        HashMap<String, String> description = new HashMap<String, String>();\n        description.put(\"en-US\", \"Test Description.\");\n        att.setDescription(description);\n\n        URI usageType = new URI(\"http://example.com/test/usage\");\n        att.setUsageType(usageType);\n\n        String attach = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        att.addAttachment(attach, contentType);\n\n        attachments.add(att);\n        substatement.setAttachments(attachments);\n    }", "test_setup_start_lineno": 47, "test_setup_end_lineno": 86, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "test_prefix": "    @Test\n    public void testSetVerb() {\n        Verb expected = new Verb(ID);\n        substatement.setVerb(expected);\n        Verb actual = substatement.getVerb();\n        <AssertPlaceHolder>;\n        assertEquals(expected.getId(), actual.getId());\n    }", "test_prefix_start_lineno": 179, "test_prefix_end_lineno": 186, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/SubStatement.java", "focal_method": "    public Verb getVerb() {\n        return verb;\n    }", "focal_method_start_lineno": 40, "focal_method_end_lineno": 42, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testSetVerb() {\n        Verb expected = new Verb(ID);\n        substatement.setVerb(expected);\n        Verb actual = substatement.getVerb();\n    }", "original_test_prefix": "    @Test\n    public void testSetVerb() {\n        Verb expected = new Verb(ID);\n        substatement.setVerb(expected);\n        Verb actual = substatement.getVerb();\n        assertNotNull(actual);\n        assertEquals(expected.getId(), actual.getId());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.SubStatementTest#testSetVerb", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        substatement = new SubStatement();\n        substatement.setTimestamp(TIME);\n        actor = new Agent();\n        actor.setMbox(MBOX);\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        verb = new Verb(ID, display);\n        activity = new Activity(TEST_IRI);\n        substatement.setActor(actor);\n        substatement.setVerb(verb);\n        substatement.setObject(activity);\n        result = new Result();\n        result.setSuccess(false);\n        substatement.setResult(result);\n        context = new Context();\n        context.setLanguage(LANGUAGE);\n        substatement.setContext(context);\n        attachments = new ArrayList<Attachment>();\n        Attachment att = new Attachment();\n\n        HashMap<String, String> attDisplay = new HashMap<String, String>();\n        attDisplay.put(\"en-US\", \"Test Display.\");\n        att.setDisplay(attDisplay);\n\n        HashMap<String, String> description = new HashMap<String, String>();\n        description.put(\"en-US\", \"Test Description.\");\n        att.setDescription(description);\n\n        URI usageType = new URI(\"http://example.com/test/usage\");\n        att.setUsageType(usageType);\n\n        String attach = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        att.addAttachment(attach, contentType);\n\n        attachments.add(att);\n        substatement.setAttachments(attachments);\n    }", "start_lineno": 47, "end_lineno": 86}]}
{"index": 67, "project_index": 32, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActivityDefinitionTest", "class_path": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "test_name": "testGetCorrectResponsesPattern", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String key = \"en-US\";\n        String name = \"Unit Testing\";\n        String description = \"Unit testing activity definitions.\";\n        HashMap<String, String> nameMap = new HashMap<String, String>();\n        HashMap<String, String> descriptionMap = new HashMap<String, String>();\n        nameMap.put(key, name);\n        descriptionMap.put(key, description);\n        activityDefinition = new ActivityDefinition(nameMap, descriptionMap);\n        assertNotNull(activityDefinition);\n        String moreInfo = \"More unit testing information.\";\n        activityDefinition.setMoreInfo(moreInfo);\n        String type = \"http://example.com/activities/unittest\";\n        activityDefinition.setType(type);\n        HashMap<String, JsonElement> extensions = new HashMap<String, JsonElement>();\n        key = \"http://example.com/testJSONprimitive\";\n        extensions.put(key, new JsonPrimitive(44));\n        JsonObject jo = new JsonObject();\n        jo.addProperty(\"http://example.com/unitTest\", \"unit test\");\n        key = \"http://example.com/testJSONobject\";\n        extensions.put(key, jo);\n        activityDefinition.setExtensions(extensions);\n        String interactionType = \"performance\";\n        activityDefinition.setInteractionType(interactionType);\n        ArrayList<String> correctResponsesPattern = new ArrayList<String>();\n        correctResponsesPattern.add(\"true\");\n        correctResponsesPattern.add(\"foo\");\n        activityDefinition.setCorrectResponsesPattern(correctResponsesPattern);\n        ArrayList<InteractionComponent> choices = new ArrayList<InteractionComponent>();\n        InteractionComponent e = new InteractionComponent();\n        String id = \"true\";\n        e.setId(id);\n        HashMap<String, String> desc = new HashMap<String, String>();\n        desc.put(\"en-US\", \"test example.\");\n        e.setDescription(desc);\n        choices.add(e);\n        activityDefinition.setChoices(choices);\n        ArrayList<InteractionComponent> scale = new ArrayList<InteractionComponent>();\n        scale.add(e);\n        activityDefinition.setScale(scale);\n        ArrayList<InteractionComponent> source = new ArrayList<InteractionComponent>();\n        source.add(e);\n        activityDefinition.setSource(source);\n        ArrayList<InteractionComponent> target = new ArrayList<InteractionComponent>();\n        target.add(e);\n        activityDefinition.setTarget(target);\n        ArrayList<InteractionComponent> steps = new ArrayList<InteractionComponent>();\n        steps.add(e);\n        activityDefinition.setSteps(steps);\n    }", "test_setup_start_lineno": 24, "test_setup_end_lineno": 74, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "test_prefix": "    @Test\n    public void testGetCorrectResponsesPattern() {\n        ArrayList<String> expected = new ArrayList<String>();\n        expected.add(\"true\");\n        expected.add(\"foo\");\n        ArrayList<String> actual = activityDefinition.getCorrectResponsesPattern();\n        <AssertPlaceHolder>;\n        assertEquals(expected.get(0), actual.get(0));\n    }", "test_prefix_start_lineno": 227, "test_prefix_end_lineno": 235, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java", "focal_method": "    public ArrayList<String> getCorrectResponsesPattern() {\n        return correctResponsesPattern;\n    }", "focal_method_start_lineno": 151, "focal_method_end_lineno": 153, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testGetCorrectResponsesPattern() {\n        ArrayList<String> expected = new ArrayList<String>();\n        expected.add(\"true\");\n        expected.add(\"foo\");\n        ArrayList<String> actual = activityDefinition.getCorrectResponsesPattern();\n    }", "original_test_prefix": "    @Test\n    public void testGetCorrectResponsesPattern() {\n        ArrayList<String> expected = new ArrayList<String>();\n        expected.add(\"true\");\n        expected.add(\"foo\");\n        ArrayList<String> actual = activityDefinition.getCorrectResponsesPattern();\n        assertNotNull(actual);\n        assertEquals(expected.get(0), actual.get(0));\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActivityDefinitionTest#testGetCorrectResponsesPattern", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String key = \"en-US\";\n        String name = \"Unit Testing\";\n        String description = \"Unit testing activity definitions.\";\n        HashMap<String, String> nameMap = new HashMap<String, String>();\n        HashMap<String, String> descriptionMap = new HashMap<String, String>();\n        nameMap.put(key, name);\n        descriptionMap.put(key, description);\n        activityDefinition = new ActivityDefinition(nameMap, descriptionMap);\n        assertNotNull(activityDefinition);\n        String moreInfo = \"More unit testing information.\";\n        activityDefinition.setMoreInfo(moreInfo);\n        String type = \"http://example.com/activities/unittest\";\n        activityDefinition.setType(type);\n        HashMap<String, JsonElement> extensions = new HashMap<String, JsonElement>();\n        key = \"http://example.com/testJSONprimitive\";\n        extensions.put(key, new JsonPrimitive(44));\n        JsonObject jo = new JsonObject();\n        jo.addProperty(\"http://example.com/unitTest\", \"unit test\");\n        key = \"http://example.com/testJSONobject\";\n        extensions.put(key, jo);\n        activityDefinition.setExtensions(extensions);\n        String interactionType = \"performance\";\n        activityDefinition.setInteractionType(interactionType);\n        ArrayList<String> correctResponsesPattern = new ArrayList<String>();\n        correctResponsesPattern.add(\"true\");\n        correctResponsesPattern.add(\"foo\");\n        activityDefinition.setCorrectResponsesPattern(correctResponsesPattern);\n        ArrayList<InteractionComponent> choices = new ArrayList<InteractionComponent>();\n        InteractionComponent e = new InteractionComponent();\n        String id = \"true\";\n        e.setId(id);\n        HashMap<String, String> desc = new HashMap<String, String>();\n        desc.put(\"en-US\", \"test example.\");\n        e.setDescription(desc);\n        choices.add(e);\n        activityDefinition.setChoices(choices);\n        ArrayList<InteractionComponent> scale = new ArrayList<InteractionComponent>();\n        scale.add(e);\n        activityDefinition.setScale(scale);\n        ArrayList<InteractionComponent> source = new ArrayList<InteractionComponent>();\n        source.add(e);\n        activityDefinition.setSource(source);\n        ArrayList<InteractionComponent> target = new ArrayList<InteractionComponent>();\n        target.add(e);\n        activityDefinition.setTarget(target);\n        ArrayList<InteractionComponent> steps = new ArrayList<InteractionComponent>();\n        steps.add(e);\n        activityDefinition.setSteps(steps);\n    }", "start_lineno": 24, "end_lineno": 74}]}
{"index": 68, "project_index": 33, "class_index": 0, "test_index": 0, "user_name": "javadev", "repo_name": "moneytostr-russian", "sub_repos": [], "sub_repo": "", "commit_sha": "d39c8729e15292d4f3d38ddbae68977f170f482b", "build_system": "mvn", "class_name": "MoneyToStrTest", "class_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_name": "checkUAHRUS", "test_setup_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "test_setup_start_lineno": 106, "test_setup_end_lineno": 174, "test_prefix_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_prefix": "    @Test\n    public void checkUAHRUS() {\n        <AssertPlaceHolder>;\n        assertEquals(\n                \"\u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\"\n                        + \"\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0433\u0440\u0438\u0432\u0435\u043d\u044c 12 \u043a\u043e\u043f\u0435\u0435\u043a\",\n                moneyToStrUAHRUS.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0447\u0435\u0442\u044b\u0440\u0435 ??? \u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\"\n                        + \"\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0433\u0440\u0438\u0432\u0435\u043d\u044c 12 \u043a\u043e\u043f\u0435\u0435\u043a\",\n                moneyToStrUAHRUS.convert(V_234978637287197540L, V_12L));\n    }", "test_prefix_start_lineno": 244, "test_prefix_end_lineno": 255, "focal_method_file_path": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focal_method": "    public String convert(Double theMoney) {\n        if (theMoney == null) {\n            throw new IllegalArgumentException(\"theMoney is null\");\n        }\n        Long intPart = theMoney.longValue();\n        Long fractPart = Math.round((theMoney - intPart) * NUM100);\n        if (currency == Currency.PER1000) {\n            fractPart = Math.round((theMoney - intPart) * NUM1000);\n        }\n        return convert(intPart, fractPart);\n    }", "focal_method_start_lineno": 442, "focal_method_end_lineno": 452, "ground_truth_oracle": "assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0433\u0440\u0438\u0432\u0435\u043d\u044c 00 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStrUAHRUS.convert(V_300D));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void checkUAHRUS() {\n    }", "original_test_prefix": "    @Test\n    public void checkUAHRUS() {\n        assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0433\u0440\u0438\u0432\u0435\u043d\u044c 00 \u043a\u043e\u043f\u0435\u0435\u043a\", moneyToStrUAHRUS.convert(V_300D));\n        assertEquals(\n                \"\u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\"\n                        + \"\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0433\u0440\u0438\u0432\u0435\u043d\u044c 12 \u043a\u043e\u043f\u0435\u0435\u043a\",\n                moneyToStrUAHRUS.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0447\u0435\u0442\u044b\u0440\u0435 ??? \u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\"\n                        + \"\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0433\u0440\u0438\u0432\u0435\u043d\u044c 12 \u043a\u043e\u043f\u0435\u0435\u043a\",\n                moneyToStrUAHRUS.convert(V_234978637287197540L, V_12L));\n    }", "test_with_params": false, "test_target": "com.github.moneytostr.MoneyToStrTest#checkUAHRUS", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "start_lineno": 106, "end_lineno": 174}]}
{"index": 69, "project_index": 33, "class_index": 0, "test_index": 1, "user_name": "javadev", "repo_name": "moneytostr-russian", "sub_repos": [], "sub_repo": "", "commit_sha": "d39c8729e15292d4f3d38ddbae68977f170f482b", "build_system": "mvn", "class_name": "MoneyToStrTest", "class_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_name": "checkUSDUKR", "test_setup_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "test_setup_start_lineno": 106, "test_setup_end_lineno": 174, "test_prefix_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_prefix": "    @Test\n    public void checkUSDUKR() {\n        <AssertPlaceHolder>;\n        assertEquals(\n                \"\u0434\u0435\u0432\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0432\u0456\u0441\u0456\u043c \u0442\u0440\u0438\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0448\u0456\u0441\u0442\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u044f\u0440\u0434\u0456\u0432 \u0434\u0432\u0456\u0441\u0442\u0456 \u0432\u0456\u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0441\u0442\u043e\"\n                        + \" \u0434\u0435\u0432\u2019\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0456\u043c \u0442\u0438\u0441\u044f\u0447 \u043f\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0434\u043e\u043b\u0430\u0440\u0456\u0432 12 \u0446\u0435\u043d\u0442\u0456\u0432\",\n                moneyToStrUSD.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0456\u0441\u0442\u0456 \u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0447\u043e\u0442\u0438\u0440\u0438 ??? \u0434\u0435\u0432\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0432\u0456\u0441\u0456\u043c \u0442\u0440\u0438\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0448\u0456\u0441\u0442\u0441\u043e\u0442 \"\n                        + \"\u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u044f\u0440\u0434\u0456\u0432 \u0434\u0432\u0456\u0441\u0442\u0456 \u0432\u0456\u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0441\u0442\u043e \"\n                        + \"\u0434\u0435\u0432\u2019\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0456\u043c \u0442\u0438\u0441\u044f\u0447 \"\n                        + \"\u043f\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0434\u043e\u043b\u0430\u0440\u0456\u0432 12 \u0446\u0435\u043d\u0442\u0456\u0432\",\n                moneyToStrUSD.convert(V_234978637287197540L, V_12L));\n    }", "test_prefix_start_lineno": 326, "test_prefix_end_lineno": 339, "focal_method_file_path": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focal_method": "    public String convert(Double theMoney) {\n        if (theMoney == null) {\n            throw new IllegalArgumentException(\"theMoney is null\");\n        }\n        Long intPart = theMoney.longValue();\n        Long fractPart = Math.round((theMoney - intPart) * NUM100);\n        if (currency == Currency.PER1000) {\n            fractPart = Math.round((theMoney - intPart) * NUM1000);\n        }\n        return convert(intPart, fractPart);\n    }", "focal_method_start_lineno": 442, "focal_method_end_lineno": 452, "ground_truth_oracle": "assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0434\u043e\u043b\u0430\u0440\u0456\u0432 00 \u0446\u0435\u043d\u0442\u0456\u0432\", moneyToStrUSD.convert(V_300D));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void checkUSDUKR() {\n    }", "original_test_prefix": "    @Test\n    public void checkUSDUKR() {\n        assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0434\u043e\u043b\u0430\u0440\u0456\u0432 00 \u0446\u0435\u043d\u0442\u0456\u0432\", moneyToStrUSD.convert(V_300D));\n        assertEquals(\n                \"\u0434\u0435\u0432\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0432\u0456\u0441\u0456\u043c \u0442\u0440\u0438\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0448\u0456\u0441\u0442\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u044f\u0440\u0434\u0456\u0432 \u0434\u0432\u0456\u0441\u0442\u0456 \u0432\u0456\u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0441\u0442\u043e\"\n                        + \" \u0434\u0435\u0432\u2019\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0456\u043c \u0442\u0438\u0441\u044f\u0447 \u043f\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0434\u043e\u043b\u0430\u0440\u0456\u0432 12 \u0446\u0435\u043d\u0442\u0456\u0432\",\n                moneyToStrUSD.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0456\u0441\u0442\u0456 \u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0447\u043e\u0442\u0438\u0440\u0438 ??? \u0434\u0435\u0432\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0432\u0456\u0441\u0456\u043c \u0442\u0440\u0438\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0448\u0456\u0441\u0442\u0441\u043e\u0442 \"\n                        + \"\u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u044f\u0440\u0434\u0456\u0432 \u0434\u0432\u0456\u0441\u0442\u0456 \u0432\u0456\u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0441\u0442\u043e \"\n                        + \"\u0434\u0435\u0432\u2019\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0456\u043c \u0442\u0438\u0441\u044f\u0447 \"\n                        + \"\u043f\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0434\u043e\u043b\u0430\u0440\u0456\u0432 12 \u0446\u0435\u043d\u0442\u0456\u0432\",\n                moneyToStrUSD.convert(V_234978637287197540L, V_12L));\n    }", "test_with_params": false, "test_target": "com.github.moneytostr.MoneyToStrTest#checkUSDUKR", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "start_lineno": 106, "end_lineno": 174}]}
{"index": 70, "project_index": 34, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JmxAttributePollerTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_name": "testGetSetBatchPollProcessor", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "test_setup_start_lineno": 77, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_prefix": "    @Test\n    public void testGetSetBatchPollProcessor() throws Exception {\n        <AssertPlaceHolder>;\n        assertNotSame(this.mockBatchPollProcessor, this.poller.getBatchPollProcessor());\n\n        this.poller.setBatchPollProcessor(this.mockBatchPollProcessor);\n        assertSame(this.mockBatchPollProcessor, this.poller.getBatchPollProcessor());\n    }", "test_prefix_start_lineno": 152, "test_prefix_end_lineno": 159, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java", "focal_method": "    public BatchPollProcessor getBatchPollProcessor() {\n        return batchPollProcessor;\n    }", "focal_method_start_lineno": 111, "focal_method_end_lineno": 113, "ground_truth_oracle": "assertNotNull(this.poller.getBatchPollProcessor());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetBatchPollProcessor() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetBatchPollProcessor() throws Exception {\n        assertNotNull(this.poller.getBatchPollProcessor());\n        assertNotSame(this.mockBatchPollProcessor, this.poller.getBatchPollProcessor());\n\n        this.poller.setBatchPollProcessor(this.mockBatchPollProcessor);\n        assertSame(this.mockBatchPollProcessor, this.poller.getBatchPollProcessor());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.JmxAttributePollerTest#testGetSetBatchPollProcessor", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "start_lineno": 77, "end_lineno": 111}]}
{"index": 71, "project_index": 35, "class_index": 0, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "core", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "MimeTest", "class_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/MimeTest.java", "test_name": "testOverwritenMimeType", "test_setup_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/MimeTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/MimeTest.java", "test_prefix": "    @Test\n    public void testOverwritenMimeType() throws Exception {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 53, "test_prefix_end_lineno": 56, "focal_method_file_path": "core/src/main/java/org/nanohttpd/protocols/http/NanoHTTPD.java", "focal_method": "    public static String getMimeTypeForFile(String uri) {\n        int dot = uri.lastIndexOf('.');\n        String mime = null;\n        if (dot >= 0) {\n            mime = mimeTypes().get(uri.substring(dot + 1).toLowerCase());\n        }\n        return mime == null ? \"application/octet-stream\" : mime;\n    }", "focal_method_start_lineno": 292, "focal_method_end_lineno": 299, "ground_truth_oracle": "Assert.assertEquals(\"video/wrongOverwrite\", NanoHTTPD.getMimeTypeForFile(\"xxxx.ts\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testOverwritenMimeType() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testOverwritenMimeType() throws Exception {\n        Assert.assertEquals(\"video/wrongOverwrite\", NanoHTTPD.getMimeTypeForFile(\"xxxx.ts\"));\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.protocols.http.MimeTest#testOverwritenMimeType", "test_setup_list": []}
{"index": 72, "project_index": 36, "class_index": 0, "test_index": 0, "user_name": "redraiment", "repo_name": "jactiverecord", "sub_repos": [], "sub_repo": "", "commit_sha": "d051709c93204658e7f2cc96c9898201c7337269", "build_system": "mvn", "class_name": "TSqlBuilderTest", "class_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_name": "testSort", "test_setup_file_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_setup": "@BeforeClass\n  public static void setUpClass() {\n    sql = new TSqlBuilder();\n  }", "test_setup_start_lineno": 10, "test_setup_end_lineno": 13, "test_prefix_file_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_prefix": "  @Test\n  public void testSort() {\n    sql.select().from(\"users\").orderBy(\"age\");\n    <AssertPlaceHolder>;\n    sql.select().from(\"users\").orderBy(\"age asc\");\n    assertEquals(\"select * from users order by age asc\", sql.toString());\n    sql.select().from(\"users\").orderBy(\"age desc\");\n    assertEquals(\"select * from users order by age desc\", sql.toString());\n    sql.select().from(\"users\").orderBy(\"age\", \"name\");\n    assertEquals(\"select * from users order by age, name\", sql.toString());\n  }", "test_prefix_start_lineno": 44, "test_prefix_end_lineno": 54, "focal_method_file_path": "src/main/java/me/zzp/ar/sql/SqlBuilder.java", "focal_method": "  @Override\n  public String toString();", "focal_method_start_lineno": 34, "focal_method_end_lineno": 35, "ground_truth_oracle": "assertEquals(\"select * from users order by age\", sql.toString());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testSort() {\n    sql.select().from(\"users\").orderBy(\"age\");\n  }", "original_test_prefix": "  @Test\n  public void testSort() {\n    sql.select().from(\"users\").orderBy(\"age\");\n    assertEquals(\"select * from users order by age\", sql.toString());\n    sql.select().from(\"users\").orderBy(\"age asc\");\n    assertEquals(\"select * from users order by age asc\", sql.toString());\n    sql.select().from(\"users\").orderBy(\"age desc\");\n    assertEquals(\"select * from users order by age desc\", sql.toString());\n    sql.select().from(\"users\").orderBy(\"age\", \"name\");\n    assertEquals(\"select * from users order by age, name\", sql.toString());\n  }", "test_with_params": false, "test_target": "me.zzp.ar.sql.TSqlBuilderTest#testSort", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void setUpClass() {\n    sql = new TSqlBuilder();\n  }", "start_lineno": 10, "end_lineno": 13}]}
{"index": 73, "project_index": 37, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "RpcAddressParserTest", "class_path": "src/test/java/com/alipay/remoting/rpc/addressargs/RpcAddressParserTest.java", "test_name": "testParserWithProtocol", "test_setup_file_path": "src/test/java/com/alipay/remoting/rpc/addressargs/RpcAddressParserTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/alipay/remoting/rpc/addressargs/RpcAddressParserTest.java", "test_prefix": "    @Test\n    public void testParserWithProtocol() throws RemotingException {\n        String url = \"127.0.0.1:1111?_TIMEOUT=3000&_SERIALIZETYPE=hessian2&_PROTOCOL=1\";\n        RpcAddressParser parser = new RpcAddressParser();\n        Url btUrl = parser.parse(url);\n\n        <AssertPlaceHolder>;\n        Assert.assertEquals(1111, btUrl.getPort());\n        Assert.assertEquals(\"1\", btUrl.getProperty(RpcConfigs.URL_PROTOCOL));\n\n        url = \"127.0.0.1:1111?protocol=1\";\n        Assert.assertEquals(\"127.0.0.1\", btUrl.getIp());\n        Assert.assertEquals(1111, btUrl.getPort());\n        Assert.assertEquals(\"1\", btUrl.getProperty(RpcConfigs.URL_PROTOCOL));\n    }", "test_prefix_start_lineno": 54, "test_prefix_end_lineno": 68, "focal_method_file_path": "src/main/java/com/alipay/remoting/Url.java", "focal_method": "    public String getIp() {\n        return ip;\n    }", "focal_method_start_lineno": 168, "focal_method_end_lineno": 170, "ground_truth_oracle": "Assert.assertEquals(\"127.0.0.1\", btUrl.getIp());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testParserWithProtocol() throws RemotingException {\n        String url = \"127.0.0.1:1111?_TIMEOUT=3000&_SERIALIZETYPE=hessian2&_PROTOCOL=1\";\n        RpcAddressParser parser = new RpcAddressParser();\n        Url btUrl = parser.parse(url);\n\n    }", "original_test_prefix": "    @Test\n    public void testParserWithProtocol() throws RemotingException {\n        String url = \"127.0.0.1:1111?_TIMEOUT=3000&_SERIALIZETYPE=hessian2&_PROTOCOL=1\";\n        RpcAddressParser parser = new RpcAddressParser();\n        Url btUrl = parser.parse(url);\n\n        Assert.assertEquals(\"127.0.0.1\", btUrl.getIp());\n        Assert.assertEquals(1111, btUrl.getPort());\n        Assert.assertEquals(\"1\", btUrl.getProperty(RpcConfigs.URL_PROTOCOL));\n\n        url = \"127.0.0.1:1111?protocol=1\";\n        Assert.assertEquals(\"127.0.0.1\", btUrl.getIp());\n        Assert.assertEquals(1111, btUrl.getPort());\n        Assert.assertEquals(\"1\", btUrl.getProperty(RpcConfigs.URL_PROTOCOL));\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.rpc.addressargs.RpcAddressParserTest#testParserWithProtocol", "test_setup_list": []}
{"index": 74, "project_index": 38, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "SpringBootUtilTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_name": "testNonExistentYamlToPropertiesParsing", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_prefix": "    @Test\n    public void testNonExistentYamlToPropertiesParsing() {\n\n        Properties props = YamlUtil.getPropertiesFromYamlResource(SpringBootUtilTest.class.getResource(\"/this-file-does-not-exist\"));\n        <AssertPlaceHolder>;\n        assertEquals(0, props.size());\n\n    }", "test_prefix_start_lineno": 54, "test_prefix_end_lineno": 61, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/YamlUtil.java", "focal_method": "    protected static Properties getPropertiesFromYamlResource(URL resource) {\n        return getPropertiesFromYamlResource(null, resource);\n    }", "focal_method_start_lineno": 34, "focal_method_end_lineno": 36, "ground_truth_oracle": "assertNotNull(props);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testNonExistentYamlToPropertiesParsing() {\n\n        Properties props = YamlUtil.getPropertiesFromYamlResource(SpringBootUtilTest.class.getResource(\"/this-file-does-not-exist\"));\n    }", "original_test_prefix": "    @Test\n    public void testNonExistentYamlToPropertiesParsing() {\n\n        Properties props = YamlUtil.getPropertiesFromYamlResource(SpringBootUtilTest.class.getResource(\"/this-file-does-not-exist\"));\n        assertNotNull(props);\n        assertEquals(0, props.size());\n\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.SpringBootUtilTest#testNonExistentYamlToPropertiesParsing", "test_setup_list": []}
{"index": 75, "project_index": 39, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "RpcConnectionManagerTest", "class_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_name": "testRemoveConnWithSpecifiedPoolkey", "test_setup_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 91, "test_prefix_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_prefix": "    @Test\n    public void testRemoveConnWithSpecifiedPoolkey() {\n        Connection conn1 = getAConn();\n        conn1.addPoolKey(\"hehe\");\n        Connection conn2 = getAConn();\n        conn2.addPoolKey(\"hehe\");\n        cm.add(conn1);\n        cm.add(conn2);\n        <AssertPlaceHolder>;\n        cm.remove(conn1, poolKey);\n        Assert.assertEquals(1, cm.count(poolKey));\n    }", "test_prefix_start_lineno": 184, "test_prefix_end_lineno": 195, "focal_method_file_path": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focal_method": "    @Override\n    public int count(String poolKey) {\n        if (StringUtils.isBlank(poolKey)) {\n            return 0;\n        }\n        ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey));\n        if (null != pool) {\n            return pool.size();\n        } else {\n            return 0;\n        }\n    }", "focal_method_start_lineno": 370, "focal_method_end_lineno": 381, "ground_truth_oracle": "Assert.assertEquals(2, cm.count(poolKey));", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void testRemoveConnWithSpecifiedPoolkey() {\n        Connection conn1 = getAConn();\n        conn1.addPoolKey(\"hehe\");\n        Connection conn2 = getAConn();\n        conn2.addPoolKey(\"hehe\");\n        cm.add(conn1);\n        cm.add(conn2);\n    }", "original_test_prefix": "    @Test\n    public void testRemoveConnWithSpecifiedPoolkey() {\n        Connection conn1 = getAConn();\n        conn1.addPoolKey(\"hehe\");\n        Connection conn2 = getAConn();\n        conn2.addPoolKey(\"hehe\");\n        cm.add(conn1);\n        cm.add(conn2);\n        Assert.assertEquals(2, cm.count(poolKey));\n        cm.remove(conn1, poolKey);\n        Assert.assertEquals(1, cm.count(poolKey));\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.inner.connection.RpcConnectionManagerTest#testRemoveConnWithSpecifiedPoolkey", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "start_lineno": 81, "end_lineno": 91}]}
{"index": 76, "project_index": 40, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "WizardUtilsTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/wizard/WizardUtilsTest.java", "test_name": "testGetFileFromUrl_fromJarFile", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/wizard/WizardUtilsTest.java", "test_setup": "@Before\n    public void before() throws Exception {\n        parent = new File(\"parent\").getAbsoluteFile();\n        ensureExistingDirectory(parent);\n    }", "test_setup_start_lineno": 34, "test_setup_end_lineno": 38, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/wizard/WizardUtilsTest.java", "test_prefix": "    @Test\n    public void testGetFileFromUrl_fromJarFile() throws Exception {\n        URL url = new URL(\"file:/target/classes/simulator.jar\");\n\n        File file = WizardUtils.getFileFromUrl(url, \"WizardUtils\");\n\n        <AssertPlaceHolder>;\n        assertEquals(\"/target/classes\", file.getPath());\n    }", "test_prefix_start_lineno": 140, "test_prefix_end_lineno": 148, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/wizard/WizardUtils.java", "focal_method": "    static File getFileFromUrl(URL url, String className) {\n        // convert to external form\n        String extURL = url.toExternalForm();\n\n        // prune for various cases\n        if (extURL.endsWith(\".jar\")) {\n            // from getCodeSource\n            extURL = extURL.substring(0, extURL.lastIndexOf('/'));\n        } else {\n            // from getResource\n            String suffix = \"/\" + className.replace(\".\", \"/\") + \".class\";\n            extURL = extURL.replace(suffix, \"\");\n            if (extURL.startsWith(\"jar:\") && extURL.endsWith(\".jar!\")) {\n                extURL = extURL.substring(FILE_EXTENSION_LENGTH, extURL.lastIndexOf('/'));\n            }\n        }\n\n        // convert back to URL\n        try {\n            url = new URL(extURL);\n        } catch (MalformedURLException e) {\n            // leave url unchanged; probably does not happen\n            EmptyStatement.ignore(e);\n        }\n\n        // convert URL to File\n        try {\n            return new File(url.toURI());\n        } catch (Exception ignored) {\n            return new File(url.getPath());\n        }\n    }", "focal_method_start_lineno": 128, "focal_method_end_lineno": 159, "ground_truth_oracle": "assertNotNull(file);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetFileFromUrl_fromJarFile() throws Exception {\n        URL url = new URL(\"file:/target/classes/simulator.jar\");\n\n        File file = WizardUtils.getFileFromUrl(url, \"WizardUtils\");\n\n    }", "original_test_prefix": "    @Test\n    public void testGetFileFromUrl_fromJarFile() throws Exception {\n        URL url = new URL(\"file:/target/classes/simulator.jar\");\n\n        File file = WizardUtils.getFileFromUrl(url, \"WizardUtils\");\n\n        assertNotNull(file);\n        assertEquals(\"/target/classes\", file.getPath());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.wizard.WizardUtilsTest#testGetFileFromUrl_fromJarFile", "test_setup_list": [{"test_setup": "@Before\n    public void before() throws Exception {\n        parent = new File(\"parent\").getAbsoluteFile();\n        ensureExistingDirectory(parent);\n    }", "start_lineno": 34, "end_lineno": 38}]}
{"index": 77, "project_index": 41, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "etl", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OETLCSVExtractorTest", "class_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_name": "testDoubleWithingQuotes", "test_setup_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_setup": "", "test_setup_start_lineno": 47, "test_setup_end_lineno": 57, "test_prefix_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_prefix": "  @Test\n  public void testDoubleWithingQuotes() {\n    Double minDouble = 540282346638528870000000000000000000000.0d;\n\n    String cfgJson = \"{source: { content: { value: 'secondNumber\\n\\\"540282346638528870000000000000000000000.0\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n    <AssertPlaceHolder>;\n    ODocument doc = res.get(0);\n    assertEquals(minDouble, (Double) doc.field(\"secondNumber\"));\n  }", "test_prefix_start_lineno": 190, "test_prefix_end_lineno": 202, "focal_method_file_path": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focal_method": "  public void execute() {\n    configure();\n    begin();\n    runExtractorAndPipeline();\n    end();\n  }", "focal_method_start_lineno": 172, "focal_method_end_lineno": 177, "ground_truth_oracle": "assertFalse(res.isEmpty());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testDoubleWithingQuotes() {\n    Double minDouble = 540282346638528870000000000000000000000.0d;\n\n    String cfgJson = \"{source: { content: { value: 'secondNumber\\n\\\"540282346638528870000000000000000000000.0\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n  }", "original_test_prefix": "  @Test\n  public void testDoubleWithingQuotes() {\n    Double minDouble = 540282346638528870000000000000000000000.0d;\n\n    String cfgJson = \"{source: { content: { value: 'secondNumber\\n\\\"540282346638528870000000000000000000000.0\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(minDouble, (Double) doc.field(\"secondNumber\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.etl.extractor.OETLCSVExtractorTest#testDoubleWithingQuotes", "test_setup_list": []}
{"index": 78, "project_index": 41, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OPropertyMapIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_name": "testProcessChangeEventRemoveKeyWithConversion", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }\n\n@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testProcessChangeEventRemoveKeyWithConversion() {\n    final Map<Object, Integer> keysToAdd = new HashMap<Object, Integer>();\n    final Map<Object, Integer> keysToRemove = new HashMap<Object, Integer>();\n    final OMultiValueChangeEvent<String, String> multiValueChangeEvent = new OMultiValueChangeEvent<String, String>(\n        OMultiValueChangeEvent.OChangeType.REMOVE, \"12\", \"value1\");\n\n    propertyIndexByIntegerKey.processChangeEvent(multiValueChangeEvent, keysToAdd, keysToRemove);\n\n    final Map<Object, Integer> addedKeys = new HashMap<Object, Integer>();\n\n    final Map<Object, Integer> removedKeys = new HashMap<Object, Integer>();\n    removedKeys.put(12, 1);\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(keysToRemove, removedKeys);\n  }", "test_prefix_start_lineno": 362, "test_prefix_end_lineno": 378, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focal_method": "  public void processChangeEvent(final OMultiValueChangeEvent<?, ?> changeEvent, final Map<Object, Integer> keysToAdd,\n      final Map<Object, Integer> keysToRemove) {\n    final boolean result;\n    if (indexBy.equals(INDEX_BY.KEY))\n      result = processKeyChangeEvent(changeEvent, keysToAdd, keysToRemove);\n    else\n      result = processValueChangeEvent(changeEvent, keysToAdd, keysToRemove);\n\n    if (!result)\n      throw new IllegalArgumentException(\"Invalid change type :\" + changeEvent.getChangeType());\n  }", "focal_method_start_lineno": 142, "focal_method_end_lineno": 152, "ground_truth_oracle": "Assert.assertEquals(keysToAdd, addedKeys);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testProcessChangeEventRemoveKeyWithConversion() {\n    final Map<Object, Integer> keysToAdd = new HashMap<Object, Integer>();\n    final Map<Object, Integer> keysToRemove = new HashMap<Object, Integer>();\n    final OMultiValueChangeEvent<String, String> multiValueChangeEvent = new OMultiValueChangeEvent<String, String>(\n        OMultiValueChangeEvent.OChangeType.REMOVE, \"12\", \"value1\");\n\n    propertyIndexByIntegerKey.processChangeEvent(multiValueChangeEvent, keysToAdd, keysToRemove);\n\n    final Map<Object, Integer> addedKeys = new HashMap<Object, Integer>();\n\n    final Map<Object, Integer> removedKeys = new HashMap<Object, Integer>();\n    removedKeys.put(12, 1);\n\n  }", "original_test_prefix": "  @Test\n  public void testProcessChangeEventRemoveKeyWithConversion() {\n    final Map<Object, Integer> keysToAdd = new HashMap<Object, Integer>();\n    final Map<Object, Integer> keysToRemove = new HashMap<Object, Integer>();\n    final OMultiValueChangeEvent<String, String> multiValueChangeEvent = new OMultiValueChangeEvent<String, String>(\n        OMultiValueChangeEvent.OChangeType.REMOVE, \"12\", \"value1\");\n\n    propertyIndexByIntegerKey.processChangeEvent(multiValueChangeEvent, keysToAdd, keysToRemove);\n\n    final Map<Object, Integer> addedKeys = new HashMap<Object, Integer>();\n\n    final Map<Object, Integer> removedKeys = new HashMap<Object, Integer>();\n    removedKeys.put(12, 1);\n\n    Assert.assertEquals(keysToAdd, addedKeys);\n    Assert.assertEquals(keysToRemove, removedKeys);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OPropertyMapIndexDefinitionTest#testProcessChangeEventRemoveKeyWithConversion", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }", "start_lineno": 23, "end_lineno": 27}, {"test_setup": "@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "start_lineno": 29, "end_lineno": 37}]}
{"index": 79, "project_index": 41, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODocumentSchemalessBinarySerializationTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java", "test_name": "testEmbeddedListOfEmbeddedMap", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java", "test_setup": "@Before\n  public void createSerializer() {\n    //we want new instance before method only for network serializers\n    if (serializerVersion == ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions())\n      serializer = new ORecordSerializerNetwork();\n    else if (serializerVersion == ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions() + 1)\n      serializer = new ORecordSerializerNetworkV37();\n  }", "test_setup_start_lineno": 67, "test_setup_end_lineno": 74, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java", "test_prefix": "  @Test\n  public void testEmbeddedListOfEmbeddedMap() {\n    ODatabaseRecordThreadLocal.instance().remove();\n\n    ODocument document = new ODocument();\n    List<Map<String, String>> coll = new ArrayList<Map<String, String>>();\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"first\", \"something\");\n    map.put(\"second\", \"somethingElse\");\n    Map<String, String> map2 = new HashMap<String, String>();\n    map2.put(\"first\", \"something\");\n    map2.put(\"second\", \"somethingElse\");\n    coll.add(map);\n    coll.add(map2);\n    document.field(\"list\", coll);\n    byte[] res = serializer.toStream(document, false);\n    ODocument extr = (ODocument) serializer.fromStream(res, new ODocument(), new String[] {});\n    <AssertPlaceHolder>;\n    assertEquals(extr.<Object>field(\"list\"), document.field(\"list\"));\n  }", "test_prefix_start_lineno": 575, "test_prefix_end_lineno": 594, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  public int fields() {\n    checkForLoading();\n    checkForFields();\n    return _fieldSize;\n  }", "focal_method_start_lineno": 2098, "focal_method_end_lineno": 2102, "ground_truth_oracle": "assertEquals(extr.fields(), document.fields());", "ground_truth_oracle_lineno": 14, "test_prefix_wo_placeholder": "  @Test\n  public void testEmbeddedListOfEmbeddedMap() {\n    ODatabaseRecordThreadLocal.instance().remove();\n\n    ODocument document = new ODocument();\n    List<Map<String, String>> coll = new ArrayList<Map<String, String>>();\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"first\", \"something\");\n    map.put(\"second\", \"somethingElse\");\n    Map<String, String> map2 = new HashMap<String, String>();\n    map2.put(\"first\", \"something\");\n    map2.put(\"second\", \"somethingElse\");\n    coll.add(map);\n    coll.add(map2);\n    document.field(\"list\", coll);\n    byte[] res = serializer.toStream(document, false);\n    ODocument extr = (ODocument) serializer.fromStream(res, new ODocument(), new String[] {});\n  }", "original_test_prefix": "  @Test\n  public void testEmbeddedListOfEmbeddedMap() {\n    ODatabaseRecordThreadLocal.instance().remove();\n\n    ODocument document = new ODocument();\n    List<Map<String, String>> coll = new ArrayList<Map<String, String>>();\n    Map<String, String> map = new HashMap<String, String>();\n    map.put(\"first\", \"something\");\n    map.put(\"second\", \"somethingElse\");\n    Map<String, String> map2 = new HashMap<String, String>();\n    map2.put(\"first\", \"something\");\n    map2.put(\"second\", \"somethingElse\");\n    coll.add(map);\n    coll.add(map2);\n    document.field(\"list\", coll);\n    byte[] res = serializer.toStream(document, false);\n    ODocument extr = (ODocument) serializer.fromStream(res, new ODocument(), new String[] {});\n    assertEquals(extr.fields(), document.fields());\n    assertEquals(extr.<Object>field(\"list\"), document.field(\"list\"));\n  }", "test_with_params": true, "test_target": "com.orientechnologies.orient.core.record.impl.ODocumentSchemalessBinarySerializationTest#testEmbeddedListOfEmbeddedMap[*]", "test_setup_list": [{"test_setup": "@Before\n  public void createSerializer() {\n    //we want new instance before method only for network serializers\n    if (serializerVersion == ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions())\n      serializer = new ORecordSerializerNetwork();\n    else if (serializerVersion == ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions() + 1)\n      serializer = new ORecordSerializerNetworkV37();\n  }", "start_lineno": 67, "end_lineno": 74}]}
{"index": 80, "project_index": 41, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODropClusterStatementExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropClusterStatementExecutionTest.java", "test_name": "testDropClusterIfExists", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropClusterStatementExecutionTest.java", "test_setup": "@BeforeClass public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:ODropClusterStatementExecutionTest\");\n    db.create();\n    OClass v = db.getMetadata().getSchema().getClass(\"V\");\n    if (v == null) {\n      db.getMetadata().getSchema().createClass(\"V\");\n    }\n  }", "test_setup_start_lineno": 17, "test_setup_end_lineno": 24, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/ODropClusterStatementExecutionTest.java", "test_prefix": "  @Test public void testDropClusterIfExists() {\n    String cluster = \"testDropClusterIfExists\";\n    ((ODatabaseDocumentTx) db).getStorage().addCluster(cluster);\n\n    <AssertPlaceHolder>;\n    OResultSet result = db.command(\"drop cluster \" + cluster+\" IF EXISTS\");\n    Assert.assertTrue(result.hasNext());\n    OResult next = result.next();\n    Assert.assertEquals(\"drop cluster\", next.getProperty(\"operation\"));\n    Assert.assertFalse(result.hasNext());\n    result.close();\n\n    Assert.assertTrue(db.getClusterIdByName(cluster) < 0);\n    \n    result = db.command(\"drop cluster \" + cluster+\" IF EXISTS\");\n    Assert.assertFalse(result.hasNext());\n    result.close();\n\n  }", "test_prefix_start_lineno": 46, "test_prefix_end_lineno": 64, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focal_method": "  int getClusterIdByName(String iClusterName);", "focal_method_start_lineno": 250, "focal_method_end_lineno": 250, "ground_truth_oracle": "Assert.assertTrue(db.getClusterIdByName(cluster) > 0);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test public void testDropClusterIfExists() {\n    String cluster = \"testDropClusterIfExists\";\n    ((ODatabaseDocumentTx) db).getStorage().addCluster(cluster);\n\n  }", "original_test_prefix": "  @Test public void testDropClusterIfExists() {\n    String cluster = \"testDropClusterIfExists\";\n    ((ODatabaseDocumentTx) db).getStorage().addCluster(cluster);\n\n    Assert.assertTrue(db.getClusterIdByName(cluster) > 0);\n    OResultSet result = db.command(\"drop cluster \" + cluster+\" IF EXISTS\");\n    Assert.assertTrue(result.hasNext());\n    OResult next = result.next();\n    Assert.assertEquals(\"drop cluster\", next.getProperty(\"operation\"));\n    Assert.assertFalse(result.hasNext());\n    result.close();\n\n    Assert.assertTrue(db.getClusterIdByName(cluster) < 0);\n    \n    result = db.command(\"drop cluster \" + cluster+\" IF EXISTS\");\n    Assert.assertFalse(result.hasNext());\n    result.close();\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.ODropClusterStatementExecutionTest#testDropClusterIfExists", "test_setup_list": [{"test_setup": "@BeforeClass public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:ODropClusterStatementExecutionTest\");\n    db.create();\n    OClass v = db.getMetadata().getSchema().getClass(\"V\");\n    if (v == null) {\n      db.getMetadata().getSchema().createClass(\"V\");\n    }\n  }", "start_lineno": 17, "end_lineno": 24}]}
{"index": 81, "project_index": 41, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "client", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OBatchOperationsTest", "class_path": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsTest.java", "test_name": "testBatchOperationsNoTx", "test_setup_file_path": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsTest.java", "test_prefix": "  @Test\n  public  void testBatchOperationsNoTx() throws IOException {\n    List<ORecordOperation> operations = new ArrayList<>();\n    operations.add(new ORecordOperation(new ODocument(), ORecordOperation.CREATED));\n\n    MockChannel channel = new MockChannel();\n    OBatchOperationsRequest request = new OBatchOperationsRequest(-1,operations);\n\n    request.write(channel, null);\n\n    channel.close();\n\n    request = new OBatchOperationsRequest();\n\n    request.read(channel,0, ORecordSerializerNetworkFactory.INSTANCE.current());\n\n    <AssertPlaceHolder>;\n    assertEquals(request.getTxId(), -1);\n  }", "test_prefix_start_lineno": 20, "test_prefix_end_lineno": 39, "focal_method_file_path": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OBatchOperationsRequest.java", "focal_method": "  public List<ORecordOperationRequest> getOperations() {\n    return operations;\n  }", "focal_method_start_lineno": 123, "focal_method_end_lineno": 125, "ground_truth_oracle": "assertEquals(request.getOperations().size(), 1);", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "  @Test\n  public  void testBatchOperationsNoTx() throws IOException {\n    List<ORecordOperation> operations = new ArrayList<>();\n    operations.add(new ORecordOperation(new ODocument(), ORecordOperation.CREATED));\n\n    MockChannel channel = new MockChannel();\n    OBatchOperationsRequest request = new OBatchOperationsRequest(-1,operations);\n\n    request.write(channel, null);\n\n    channel.close();\n\n    request = new OBatchOperationsRequest();\n\n    request.read(channel,0, ORecordSerializerNetworkFactory.INSTANCE.current());\n\n  }", "original_test_prefix": "  @Test\n  public  void testBatchOperationsNoTx() throws IOException {\n    List<ORecordOperation> operations = new ArrayList<>();\n    operations.add(new ORecordOperation(new ODocument(), ORecordOperation.CREATED));\n\n    MockChannel channel = new MockChannel();\n    OBatchOperationsRequest request = new OBatchOperationsRequest(-1,operations);\n\n    request.write(channel, null);\n\n    channel.close();\n\n    request = new OBatchOperationsRequest();\n\n    request.read(channel,0, ORecordSerializerNetworkFactory.INSTANCE.current());\n\n    assertEquals(request.getOperations().size(), 1);\n    assertEquals(request.getTxId(), -1);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.client.remote.message.OBatchOperationsTest#testBatchOperationsNoTx", "test_setup_list": []}
{"index": 82, "project_index": 41, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OSQLFunctionAbsoluteValueTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java", "test_name": "testEmpty", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java", "test_setup": "@Before\n  public void setup() {\n    function = new OSQLFunctionAbsoluteValue();\n  }", "test_setup_start_lineno": 26, "test_setup_end_lineno": 29, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java", "test_prefix": "  @Test\n  public void testEmpty() {\n    Object result = function.getResult();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 31, "test_prefix_end_lineno": 35, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java", "focal_method": "  @Override\n  public Object getResult() {\n    return result;\n  }", "focal_method_start_lineno": 81, "focal_method_end_lineno": 84, "ground_truth_oracle": "assertNull(result);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testEmpty() {\n    Object result = function.getResult();\n  }", "original_test_prefix": "  @Test\n  public void testEmpty() {\n    Object result = function.getResult();\n    assertNull(result);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.functions.math.OSQLFunctionAbsoluteValueTest#testEmpty", "test_setup_list": [{"test_setup": "@Before\n  public void setup() {\n    function = new OSQLFunctionAbsoluteValue();\n  }", "start_lineno": 26, "end_lineno": 29}]}
{"index": 83, "project_index": 41, "class_index": 6, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "client", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OLiveQueryMessagesTests", "class_path": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OLiveQueryMessagesTests.java", "test_name": "testLiveQueryPushRequest", "test_setup_file_path": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OLiveQueryMessagesTests.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "client/src/test/java/com/orientechnologies/orient/client/remote/message/OLiveQueryMessagesTests.java", "test_prefix": "  @Test\n  public void testLiveQueryPushRequest() throws IOException {\n\n    List<OLiveQueryResult> events = new ArrayList<>();\n    OResultInternal res = new OResultInternal();\n    res.setProperty(\"one\", \"one\");\n    res.setProperty(\"two\", 10);\n    events.add(new OLiveQueryResult(OLiveQueryResult.CREATE_EVENT, res, null));\n    events.add(new OLiveQueryResult(OLiveQueryResult.UPDATE_EVENT, new OResultInternal(), new OResultInternal()));\n    events.add(new OLiveQueryResult(OLiveQueryResult.DELETE_EVENT, new OResultInternal(), null));\n\n    OLiveQueryPushRequest pushRequest = new OLiveQueryPushRequest(10, OLiveQueryPushRequest.END, events);\n    MockChannel channel = new MockChannel();\n    pushRequest.write(channel);\n    channel.close();\n    OLiveQueryPushRequest pushRequestRead = new OLiveQueryPushRequest();\n    pushRequestRead.read(channel);\n\n    <AssertPlaceHolder>;\n    assertEquals(pushRequestRead.getStatus(), OLiveQueryPushRequest.END);\n    assertEquals(pushRequestRead.getEvents().size(), 3);\n    assertEquals(pushRequestRead.getEvents().get(0).getCurrentValue().getProperty(\"one\"), \"one\");\n    assertEquals((int) pushRequestRead.getEvents().get(0).getCurrentValue().getProperty(\"two\"), 10);\n\n  }", "test_prefix_start_lineno": 63, "test_prefix_end_lineno": 87, "focal_method_file_path": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OLiveQueryPushRequest.java", "focal_method": "  public int getMonitorId() {\n    return monitorId;\n  }", "focal_method_start_lineno": 109, "focal_method_end_lineno": 111, "ground_truth_oracle": "assertEquals(pushRequestRead.getMonitorId(), 10);", "ground_truth_oracle_lineno": 13, "test_prefix_wo_placeholder": "  @Test\n  public void testLiveQueryPushRequest() throws IOException {\n\n    List<OLiveQueryResult> events = new ArrayList<>();\n    OResultInternal res = new OResultInternal();\n    res.setProperty(\"one\", \"one\");\n    res.setProperty(\"two\", 10);\n    events.add(new OLiveQueryResult(OLiveQueryResult.CREATE_EVENT, res, null));\n    events.add(new OLiveQueryResult(OLiveQueryResult.UPDATE_EVENT, new OResultInternal(), new OResultInternal()));\n    events.add(new OLiveQueryResult(OLiveQueryResult.DELETE_EVENT, new OResultInternal(), null));\n\n    OLiveQueryPushRequest pushRequest = new OLiveQueryPushRequest(10, OLiveQueryPushRequest.END, events);\n    MockChannel channel = new MockChannel();\n    pushRequest.write(channel);\n    channel.close();\n    OLiveQueryPushRequest pushRequestRead = new OLiveQueryPushRequest();\n    pushRequestRead.read(channel);\n\n  }", "original_test_prefix": "  @Test\n  public void testLiveQueryPushRequest() throws IOException {\n\n    List<OLiveQueryResult> events = new ArrayList<>();\n    OResultInternal res = new OResultInternal();\n    res.setProperty(\"one\", \"one\");\n    res.setProperty(\"two\", 10);\n    events.add(new OLiveQueryResult(OLiveQueryResult.CREATE_EVENT, res, null));\n    events.add(new OLiveQueryResult(OLiveQueryResult.UPDATE_EVENT, new OResultInternal(), new OResultInternal()));\n    events.add(new OLiveQueryResult(OLiveQueryResult.DELETE_EVENT, new OResultInternal(), null));\n\n    OLiveQueryPushRequest pushRequest = new OLiveQueryPushRequest(10, OLiveQueryPushRequest.END, events);\n    MockChannel channel = new MockChannel();\n    pushRequest.write(channel);\n    channel.close();\n    OLiveQueryPushRequest pushRequestRead = new OLiveQueryPushRequest();\n    pushRequestRead.read(channel);\n\n    assertEquals(pushRequestRead.getMonitorId(), 10);\n    assertEquals(pushRequestRead.getStatus(), OLiveQueryPushRequest.END);\n    assertEquals(pushRequestRead.getEvents().size(), 3);\n    assertEquals(pushRequestRead.getEvents().get(0).getCurrentValue().getProperty(\"one\"), \"one\");\n    assertEquals((int) pushRequestRead.getEvents().get(0).getCurrentValue().getProperty(\"two\"), 10);\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.client.remote.message.OLiveQueryMessagesTests#testLiveQueryPushRequest", "test_setup_list": []}
{"index": 84, "project_index": 41, "class_index": 7, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "object", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "TestObjectWithDeletedLink", "class_path": "object/src/test/java/com/orientechnologies/orient/object/enhancement/TestObjectWithDeletedLink.java", "test_name": "testDeletedLink", "test_setup_file_path": "object/src/test/java/com/orientechnologies/orient/object/enhancement/TestObjectWithDeletedLink.java", "test_setup": "@Before\n  public void before() {\n    db = new OObjectDatabaseTx(\"memory:\" + TestObjectWithDeletedLink.class.getSimpleName());\n    db.create();\n    db.getEntityManager().registerEntityClass(SimpleSelfRef.class);\n  }", "test_setup_start_lineno": 14, "test_setup_end_lineno": 19, "test_prefix_file_path": "object/src/test/java/com/orientechnologies/orient/object/enhancement/TestObjectWithDeletedLink.java", "test_prefix": "  @Test\n  public void testDeletedLink() {\n    db.activateOnCurrentThread();\n\n    SimpleSelfRef ob1 = new SimpleSelfRef();\n    ob1.setName(\"hobby one \");\n    SimpleSelfRef ob2 = new SimpleSelfRef();\n    ob2.setName(\"2\");\n    ob1.setFriend(ob2);\n\n    ob1 = db.save(ob1);\n\n    ob1 = db.reload(ob1, \"\", true);\n    ob2 = ob1.getFriend();\n    <AssertPlaceHolder>;\n    db.delete(ob2);\n\n    ob1 = db.reload(ob1, \"\", true);\n    Assert.assertNull(ob1.getFriend());\n  }", "test_prefix_start_lineno": 27, "test_prefix_end_lineno": 46, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focal_method": "  <RET extends T> RET reload(final T iObject, String iFetchPlan, boolean iIgnoreCache);", "focal_method_start_lineno": 631, "focal_method_end_lineno": 631, "ground_truth_oracle": "Assert.assertNotNull(ob1.getFriend());", "ground_truth_oracle_lineno": 9, "test_prefix_wo_placeholder": "  @Test\n  public void testDeletedLink() {\n    db.activateOnCurrentThread();\n\n    SimpleSelfRef ob1 = new SimpleSelfRef();\n    ob1.setName(\"hobby one \");\n    SimpleSelfRef ob2 = new SimpleSelfRef();\n    ob2.setName(\"2\");\n    ob1.setFriend(ob2);\n\n    ob1 = db.save(ob1);\n\n    ob1 = db.reload(ob1, \"\", true);\n    ob2 = ob1.getFriend();\n  }", "original_test_prefix": "  @Test\n  public void testDeletedLink() {\n    db.activateOnCurrentThread();\n\n    SimpleSelfRef ob1 = new SimpleSelfRef();\n    ob1.setName(\"hobby one \");\n    SimpleSelfRef ob2 = new SimpleSelfRef();\n    ob2.setName(\"2\");\n    ob1.setFriend(ob2);\n\n    ob1 = db.save(ob1);\n\n    ob1 = db.reload(ob1, \"\", true);\n    ob2 = ob1.getFriend();\n    Assert.assertNotNull(ob1.getFriend());\n    db.delete(ob2);\n\n    ob1 = db.reload(ob1, \"\", true);\n    Assert.assertNull(ob1.getFriend());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.object.enhancement.TestObjectWithDeletedLink#testDeletedLink", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    db = new OObjectDatabaseTx(\"memory:\" + TestObjectWithDeletedLink.class.getSimpleName());\n    db.create();\n    db.getEntityManager().registerEntityClass(SimpleSelfRef.class);\n  }", "start_lineno": 14, "end_lineno": 19}]}
{"index": 85, "project_index": 41, "class_index": 8, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OConnectionExecutorTransactionTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/OConnectionExecutorTransactionTest.java", "test_name": "testExecutionBeginTransaction", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/OConnectionExecutorTransactionTest.java", "test_setup": "@Before\n  public void before() {\n    MockitoAnnotations.initMocks(this);\n    orientDb = new OrientDB(\"embedded:./\", OrientDBConfig.defaultConfig());\n    orientDb.create(OConnectionExecutorTransactionTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = (ODatabaseDocumentInternal) orientDb\n        .open(OConnectionExecutorTransactionTest.class.getSimpleName(), \"admin\", \"admin\");\n    database.createClass(\"test\");\n    ONetworkProtocolData protocolData = new ONetworkProtocolData();\n    protocolData.setSerializer(ORecordSerializerNetworkFactory.INSTANCE.current());\n    Mockito.when(connection.getDatabase()).thenReturn(database);\n    Mockito.when(connection.getData()).thenReturn(protocolData);\n  }", "test_setup_start_lineno": 45, "test_setup_end_lineno": 57, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/OConnectionExecutorTransactionTest.java", "test_prefix": "  @Test\n  public void testExecutionBeginTransaction() {\n\n    OConnectionBinaryExecutor executor = new OConnectionBinaryExecutor(connection, server);\n\n    List<ORecordOperation> operations = new ArrayList<>();\n    ODocument rec = new ODocument();\n    ORecordInternal.setIdentity(rec, new ORecordId(3, -2));\n    operations.add(new ORecordOperation(rec, ORecordOperation.CREATED));\n    <AssertPlaceHolder>;\n\n    OBeginTransactionRequest request = new OBeginTransactionRequest(10, true, true, operations, new HashMap<>());\n    OBinaryResponse response = request.execute(executor);\n    assertTrue(database.getTransaction().isActive());\n    assertTrue(response instanceof OBeginTransactionResponse);\n\n  }", "test_prefix_start_lineno": 66, "test_prefix_end_lineno": 83, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/storage/OBasicTransaction.java", "focal_method": "  boolean isActive();", "focal_method_start_lineno": 49, "focal_method_end_lineno": 49, "ground_truth_oracle": "assertFalse(database.getTransaction().isActive());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testExecutionBeginTransaction() {\n\n    OConnectionBinaryExecutor executor = new OConnectionBinaryExecutor(connection, server);\n\n    List<ORecordOperation> operations = new ArrayList<>();\n    ODocument rec = new ODocument();\n    ORecordInternal.setIdentity(rec, new ORecordId(3, -2));\n    operations.add(new ORecordOperation(rec, ORecordOperation.CREATED));\n  }", "original_test_prefix": "  @Test\n  public void testExecutionBeginTransaction() {\n\n    OConnectionBinaryExecutor executor = new OConnectionBinaryExecutor(connection, server);\n\n    List<ORecordOperation> operations = new ArrayList<>();\n    ODocument rec = new ODocument();\n    ORecordInternal.setIdentity(rec, new ORecordId(3, -2));\n    operations.add(new ORecordOperation(rec, ORecordOperation.CREATED));\n    assertFalse(database.getTransaction().isActive());\n\n    OBeginTransactionRequest request = new OBeginTransactionRequest(10, true, true, operations, new HashMap<>());\n    OBinaryResponse response = request.execute(executor);\n    assertTrue(database.getTransaction().isActive());\n    assertTrue(response instanceof OBeginTransactionResponse);\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.OConnectionExecutorTransactionTest#testExecutionBeginTransaction", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    MockitoAnnotations.initMocks(this);\n    orientDb = new OrientDB(\"embedded:./\", OrientDBConfig.defaultConfig());\n    orientDb.create(OConnectionExecutorTransactionTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = (ODatabaseDocumentInternal) orientDb\n        .open(OConnectionExecutorTransactionTest.class.getSimpleName(), \"admin\", \"admin\");\n    database.createClass(\"test\");\n    ONetworkProtocolData protocolData = new ONetworkProtocolData();\n    protocolData.setSerializer(ORecordSerializerNetworkFactory.INSTANCE.current());\n    Mockito.when(connection.getDatabase()).thenReturn(database);\n    Mockito.when(connection.getData()).thenReturn(protocolData);\n  }", "start_lineno": 45, "end_lineno": 57}]}
{"index": 86, "project_index": 41, "class_index": 9, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "RemoteSimpleSchemaTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/metadata/RemoteSimpleSchemaTest.java", "test_name": "testNotCaseSensitiveDrop", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/metadata/RemoteSimpleSchemaTest.java", "test_setup": "@Before\n  public void before() throws Exception {\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteSimpleSchemaTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(RemoteSimpleSchemaTest.class.getSimpleName(), \"admin\", \"admin\");\n\n  }", "test_setup_start_lineno": 26, "test_setup_end_lineno": 37, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/metadata/RemoteSimpleSchemaTest.java", "test_prefix": "  @Test\n  public void testNotCaseSensitiveDrop() {\n    database.createClass(\"test\");\n    <AssertPlaceHolder>;\n    database.getMetadata().getSchema().dropClass(\"TEST\");\n    assertFalse(database.getMetadata().getSchema().existsClass(\"test\"));\n  }", "test_prefix_start_lineno": 48, "test_prefix_end_lineno": 54, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java", "focal_method": "  boolean existsClass(String iClassName);", "focal_method_start_lineno": 56, "focal_method_end_lineno": 56, "ground_truth_oracle": "assertTrue(database.getMetadata().getSchema().existsClass(\"test\"));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testNotCaseSensitiveDrop() {\n    database.createClass(\"test\");\n  }", "original_test_prefix": "  @Test\n  public void testNotCaseSensitiveDrop() {\n    database.createClass(\"test\");\n    assertTrue(database.getMetadata().getSchema().existsClass(\"test\"));\n    database.getMetadata().getSchema().dropClass(\"TEST\");\n    assertFalse(database.getMetadata().getSchema().existsClass(\"test\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.metadata.RemoteSimpleSchemaTest#testNotCaseSensitiveDrop", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws Exception {\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteSimpleSchemaTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(RemoteSimpleSchemaTest.class.getSimpleName(), \"admin\", \"admin\");\n\n  }", "start_lineno": 26, "end_lineno": 37}]}
{"index": 87, "project_index": 42, "class_index": 0, "test_index": 0, "user_name": "myabc", "repo_name": "markdownj", "sub_repos": ["core"], "sub_repo": "core", "commit_sha": "f8ed00caeb69fc602aa2209812d953c26c2a4263", "build_system": "mvn", "class_name": "TestTextEditor", "class_path": "core/src/test/java/org/markdownj/test/TestTextEditor.java", "test_name": "testDetabify", "test_setup_file_path": "core/src/test/java/org/markdownj/test/TestTextEditor.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/org/markdownj/test/TestTextEditor.java", "test_prefix": "    @Test\n    public void testDetabify() {\n        <AssertPlaceHolder>;\n        assertEquals(\"    \", new TextEditor(\" \\t\").detabify().toString());\n        assertEquals(\"    \", new TextEditor(\"  \\t\").detabify().toString());\n        assertEquals(\"    \", new TextEditor(\"   \\t\").detabify().toString());\n        assertEquals(\"        \", new TextEditor(\"    \\t\").detabify().toString());\n\n        assertEquals(\"     \", new TextEditor(\"\\t \").detabify().toString());\n        assertEquals(\"        \", new TextEditor(\"\\t \\t\").detabify().toString());\n    }", "test_prefix_start_lineno": 9, "test_prefix_end_lineno": 19, "focal_method_file_path": "core/src/main/java/org/markdownj/TextEditor.java", "focal_method": "    @Override\n    public String toString() {\n        return text.toString();\n    }", "focal_method_start_lineno": 65, "focal_method_end_lineno": 68, "ground_truth_oracle": "assertEquals(\"    \", new TextEditor(\"\t\").detabify().toString());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testDetabify() {\n    }", "original_test_prefix": "    @Test\n    public void testDetabify() {\n        assertEquals(\" \", new TextEditor(\"\\t\").detabify().toString());\n        assertEquals(\"    \", new TextEditor(\" \\t\").detabify().toString());\n        assertEquals(\"    \", new TextEditor(\"  \\t\").detabify().toString());\n        assertEquals(\"    \", new TextEditor(\"   \\t\").detabify().toString());\n        assertEquals(\"        \", new TextEditor(\"    \\t\").detabify().toString());\n\n        assertEquals(\"     \", new TextEditor(\"\\t \").detabify().toString());\n        assertEquals(\"        \", new TextEditor(\"\\t \\t\").detabify().toString());\n    }", "test_with_params": false, "test_target": "org.markdownj.test.TestTextEditor#testDetabify", "test_setup_list": []}
{"index": 88, "project_index": 43, "class_index": 0, "test_index": 0, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "JavaCompilerOptionsTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java", "test_name": "testRelease", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java", "test_prefix": "    @Test\n    public void testRelease() throws Exception {\n        JavaCompilerOptions jco = new JavaCompilerOptions();\n        jco.setRelease(\"10\");\n\n        List<String> result = jco.getOptions();\n        <AssertPlaceHolder>;\n        assertTrue(result.get(0).equals(\"-nowarn\"));\n        assertTrue(result.get(1).equals(\"--release\"));\n        assertTrue(result.get(2).equals(\"10\"));\n    }", "test_prefix_start_lineno": 79, "test_prefix_end_lineno": 89, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptions.java", "focal_method": "    public List<String> getOptions() {\n        List<String> options = new ArrayList<String>();\n        if (!showWarnings) {\n            options.add(\"-nowarn\");\n        }\n        addStringOption(options, \"-source\", source);\n        addStringOption(options, \"-target\", target);\n        addStringOption(options, \"--release\", release);\n        return options;\n    }", "focal_method_start_lineno": 51, "focal_method_end_lineno": 60, "ground_truth_oracle": "assertEquals(3, result.size());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testRelease() throws Exception {\n        JavaCompilerOptions jco = new JavaCompilerOptions();\n        jco.setRelease(\"10\");\n\n        List<String> result = jco.getOptions();\n    }", "original_test_prefix": "    @Test\n    public void testRelease() throws Exception {\n        JavaCompilerOptions jco = new JavaCompilerOptions();\n        jco.setRelease(\"10\");\n\n        List<String> result = jco.getOptions();\n        assertEquals(3, result.size());\n        assertTrue(result.get(0).equals(\"-nowarn\"));\n        assertTrue(result.get(1).equals(\"--release\"));\n        assertTrue(result.get(2).equals(\"10\"));\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.JavaCompilerOptionsTest#testRelease", "test_setup_list": []}
{"index": 89, "project_index": 43, "class_index": 0, "test_index": 1, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "JavaCompilerOptionsTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java", "test_name": "testTarget", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptionsTest.java", "test_prefix": "    @Test\n    public void testTarget() throws Exception {\n        JavaCompilerOptions jco = new JavaCompilerOptions();\n        jco.setTarget(\"10\");\n\n        List<String> result = jco.getOptions();\n        <AssertPlaceHolder>;\n        assertTrue(result.get(0).equals(\"-nowarn\"));\n        assertTrue(result.get(1).equals(\"-target\"));\n        assertTrue(result.get(2).equals(\"10\"));\n    }", "test_prefix_start_lineno": 67, "test_prefix_end_lineno": 77, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/JavaCompilerOptions.java", "focal_method": "    public List<String> getOptions() {\n        List<String> options = new ArrayList<String>();\n        if (!showWarnings) {\n            options.add(\"-nowarn\");\n        }\n        addStringOption(options, \"-source\", source);\n        addStringOption(options, \"-target\", target);\n        addStringOption(options, \"--release\", release);\n        return options;\n    }", "focal_method_start_lineno": 51, "focal_method_end_lineno": 60, "ground_truth_oracle": "assertEquals(3, result.size());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testTarget() throws Exception {\n        JavaCompilerOptions jco = new JavaCompilerOptions();\n        jco.setTarget(\"10\");\n\n        List<String> result = jco.getOptions();\n    }", "original_test_prefix": "    @Test\n    public void testTarget() throws Exception {\n        JavaCompilerOptions jco = new JavaCompilerOptions();\n        jco.setTarget(\"10\");\n\n        List<String> result = jco.getOptions();\n        assertEquals(3, result.size());\n        assertTrue(result.get(0).equals(\"-nowarn\"));\n        assertTrue(result.get(1).equals(\"-target\"));\n        assertTrue(result.get(2).equals(\"10\"));\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.JavaCompilerOptionsTest#testTarget", "test_setup_list": []}
{"index": 90, "project_index": 44, "class_index": 0, "test_index": 0, "user_name": "cucumber-ltd", "repo_name": "cucumber-pro-plugin-jvm", "sub_repos": [], "sub_repo": "", "commit_sha": "a09ee0b1682d3cd8b68c240820e647d4515e931f", "build_system": "mvn", "class_name": "YamlConfigLoaderTest", "class_path": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java", "test_name": "roundtrips", "test_setup_file_path": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java", "test_prefix": "    @Test\n    public void roundtrips() {\n        String yaml = \"\" +\n                \"cucumberpro:\\n\" +\n                \"  cucumberprofile: cucumber-jvm-unspecified-profile\\n\" +\n                \"  envmask: SECRET|KEY|TOKEN|PASSWORD\\n\" +\n                \"  logging: debug\\n\" +\n                \"  url: https://jam.cucumber.io/\\n\" +\n                \"  connection:\\n\" +\n                \"    ignoreerror: true\\n\" +\n                \"    timeout: 5000\\n\" +\n                \"  git:\\n\" +\n                \"    hostkey:\\n\" +\n                \"    hostname: git.cucumber.pro\\n\" +\n                \"    publish: false\\n\" +\n                \"    sshport: 22\\n\" +\n                \"    source:\\n\" +\n                \"      fetch: true\\n\" +\n                \"      remote: origin\\n\" +\n                \"  project:\\n\" +\n                \"    name:\\n\" +\n                \"  results:\\n\" +\n                \"    publish:\\n\" +\n                \"    token:\\n\";\n\n        Config config = new Config();\n        ConfigLoader configLoader = new YamlConfigLoader(new StringReader(yaml));\n        configLoader.load(config);\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 48, "test_prefix_end_lineno": 78, "focal_method_file_path": "src/main/java/io/cucumber/pro/config/Config.java", "focal_method": "    public String toYaml(String rootKey) {\n        try {\n            StringBuilder out = new StringBuilder();\n            this.print(0, rootKey, out);\n            return out.toString();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "focal_method_start_lineno": 100, "focal_method_end_lineno": 108, "ground_truth_oracle": "assertEquals(yaml, config.toYaml(\"cucumberpro\"));", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void roundtrips() {\n        String yaml = \"\" +\n                \"cucumberpro:\\n\" +\n                \"  cucumberprofile: cucumber-jvm-unspecified-profile\\n\" +\n                \"  envmask: SECRET|KEY|TOKEN|PASSWORD\\n\" +\n                \"  logging: debug\\n\" +\n                \"  url: https://jam.cucumber.io/\\n\" +\n                \"  connection:\\n\" +\n                \"    ignoreerror: true\\n\" +\n                \"    timeout: 5000\\n\" +\n                \"  git:\\n\" +\n                \"    hostkey:\\n\" +\n                \"    hostname: git.cucumber.pro\\n\" +\n                \"    publish: false\\n\" +\n                \"    sshport: 22\\n\" +\n                \"    source:\\n\" +\n                \"      fetch: true\\n\" +\n                \"      remote: origin\\n\" +\n                \"  project:\\n\" +\n                \"    name:\\n\" +\n                \"  results:\\n\" +\n                \"    publish:\\n\" +\n                \"    token:\\n\";\n\n        Config config = new Config();\n        ConfigLoader configLoader = new YamlConfigLoader(new StringReader(yaml));\n        configLoader.load(config);\n\n    }", "original_test_prefix": "    @Test\n    public void roundtrips() {\n        String yaml = \"\" +\n                \"cucumberpro:\\n\" +\n                \"  cucumberprofile: cucumber-jvm-unspecified-profile\\n\" +\n                \"  envmask: SECRET|KEY|TOKEN|PASSWORD\\n\" +\n                \"  logging: debug\\n\" +\n                \"  url: https://jam.cucumber.io/\\n\" +\n                \"  connection:\\n\" +\n                \"    ignoreerror: true\\n\" +\n                \"    timeout: 5000\\n\" +\n                \"  git:\\n\" +\n                \"    hostkey:\\n\" +\n                \"    hostname: git.cucumber.pro\\n\" +\n                \"    publish: false\\n\" +\n                \"    sshport: 22\\n\" +\n                \"    source:\\n\" +\n                \"      fetch: true\\n\" +\n                \"      remote: origin\\n\" +\n                \"  project:\\n\" +\n                \"    name:\\n\" +\n                \"  results:\\n\" +\n                \"    publish:\\n\" +\n                \"    token:\\n\";\n\n        Config config = new Config();\n        ConfigLoader configLoader = new YamlConfigLoader(new StringReader(yaml));\n        configLoader.load(config);\n\n        assertEquals(yaml, config.toYaml(\"cucumberpro\"));\n    }", "test_with_params": false, "test_target": "io.cucumber.pro.config.loaders.YamlConfigLoaderTest#roundtrips", "test_setup_list": []}
{"index": 91, "project_index": 45, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleStateTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_name": "equal_even_with_different_history", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_prefix": "  @Test\n  public void equal_even_with_different_history()\n  {\n    Stack<PuzzleState.Direction> history = new Stack<>();\n    history.add(PuzzleState.Direction.Right);\n    PuzzleState a = new PuzzleState(getPuzzle(3), history);\n    PuzzleState b = new PuzzleState(getPuzzle(3));\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 148, "test_prefix_end_lineno": 156, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focal_method": "  public PuzzleState(Puzzle puzzle)\n  {\n    this(puzzle, new Stack<Direction>());\n  }", "focal_method_start_lineno": 16, "focal_method_end_lineno": 19, "ground_truth_oracle": "assertEquals(a, b);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void equal_even_with_different_history()\n  {\n    Stack<PuzzleState.Direction> history = new Stack<>();\n    history.add(PuzzleState.Direction.Right);\n    PuzzleState a = new PuzzleState(getPuzzle(3), history);\n    PuzzleState b = new PuzzleState(getPuzzle(3));\n  }", "original_test_prefix": "  @Test\n  public void equal_even_with_different_history()\n  {\n    Stack<PuzzleState.Direction> history = new Stack<>();\n    history.add(PuzzleState.Direction.Right);\n    PuzzleState a = new PuzzleState(getPuzzle(3), history);\n    PuzzleState b = new PuzzleState(getPuzzle(3));\n    assertEquals(a, b);\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleStateTest#equal_even_with_different_history", "test_setup_list": []}
{"index": 92, "project_index": 46, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "CABACTest", "class_path": "src/test/java/org/jcodec/codecs/h264/CABACTest.java", "test_name": "testReadIntraChromaPredMode", "test_setup_file_path": "src/test/java/org/jcodec/codecs/h264/CABACTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/codecs/h264/CABACTest.java", "test_prefix": "    @Test\n    public void testReadIntraChromaPredMode() {\n        MockMDecoder m = new MockMDecoder(new int[] { 0 }, new int[] { 64 });\n        <AssertPlaceHolder>;\n\n        MockMEncoder e = new MockMEncoder(new int[] { 0 }, new int[] { 64 });\n        new CABAC(1).writeIntraChromaPredMode(e, 0, null, null, false, false, 0);\n\n        m = new MockMDecoder(new int[] { 1, 1, 1 }, new int[] { 64, 67, 67 });\n        Assert.assertEquals(3, new CABAC(1).readIntraChromaPredMode(m, 0, null, null, false, false));\n\n        e = new MockMEncoder(new int[] { 1, 1, 1 }, new int[] { 64, 67, 67 });\n        new CABAC(1).writeIntraChromaPredMode(e, 0, null, null, false, false, 3);\n    }", "test_prefix_start_lineno": 49, "test_prefix_end_lineno": 62, "focal_method_file_path": "src/main/java/org/jcodec/codecs/h264/io/CABAC.java", "focal_method": "    public int readIntraChromaPredMode(MDecoder decoder, int mbX, MBType left, MBType top, boolean leftAvailable,\n            boolean topAvailable) {\n        int ctx = 64;\n        ctx += !leftAvailable || left == null || !left.isIntra() || chromaPredModeLeft == 0 ? 0 : 1;\n        ctx += !topAvailable || top == null || !top.isIntra() || chromaPredModeTop[mbX] == 0 ? 0 : 1;\n        int mode;\n        if (decoder.decodeBin(ctx) == 0)\n            mode = 0;\n        else if (decoder.decodeBin(67) == 0)\n            mode = 1;\n        else if (decoder.decodeBin(67) == 0)\n            mode = 2;\n        else\n            mode = 3;\n        chromaPredModeLeft = chromaPredModeTop[mbX] = mode;\n\n        return mode;\n    }", "focal_method_start_lineno": 417, "focal_method_end_lineno": 434, "ground_truth_oracle": "Assert.assertEquals(0, new CABAC(1).readIntraChromaPredMode(m, 0, null, null, false, false));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testReadIntraChromaPredMode() {\n        MockMDecoder m = new MockMDecoder(new int[] { 0 }, new int[] { 64 });\n    }", "original_test_prefix": "    @Test\n    public void testReadIntraChromaPredMode() {\n        MockMDecoder m = new MockMDecoder(new int[] { 0 }, new int[] { 64 });\n        Assert.assertEquals(0, new CABAC(1).readIntraChromaPredMode(m, 0, null, null, false, false));\n\n        MockMEncoder e = new MockMEncoder(new int[] { 0 }, new int[] { 64 });\n        new CABAC(1).writeIntraChromaPredMode(e, 0, null, null, false, false, 0);\n\n        m = new MockMDecoder(new int[] { 1, 1, 1 }, new int[] { 64, 67, 67 });\n        Assert.assertEquals(3, new CABAC(1).readIntraChromaPredMode(m, 0, null, null, false, false));\n\n        e = new MockMEncoder(new int[] { 1, 1, 1 }, new int[] { 64, 67, 67 });\n        new CABAC(1).writeIntraChromaPredMode(e, 0, null, null, false, false, 3);\n    }", "test_with_params": false, "test_target": "org.jcodec.codecs.h264.CABACTest#testReadIntraChromaPredMode", "test_setup_list": []}
{"index": 93, "project_index": 47, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActivityDefinitionTest", "class_path": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "test_name": "testSetType", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String key = \"en-US\";\n        String name = \"Unit Testing\";\n        String description = \"Unit testing activity definitions.\";\n        HashMap<String, String> nameMap = new HashMap<String, String>();\n        HashMap<String, String> descriptionMap = new HashMap<String, String>();\n        nameMap.put(key, name);\n        descriptionMap.put(key, description);\n        activityDefinition = new ActivityDefinition(nameMap, descriptionMap);\n        assertNotNull(activityDefinition);\n        String moreInfo = \"More unit testing information.\";\n        activityDefinition.setMoreInfo(moreInfo);\n        String type = \"http://example.com/activities/unittest\";\n        activityDefinition.setType(type);\n        HashMap<String, JsonElement> extensions = new HashMap<String, JsonElement>();\n        key = \"http://example.com/testJSONprimitive\";\n        extensions.put(key, new JsonPrimitive(44));\n        JsonObject jo = new JsonObject();\n        jo.addProperty(\"http://example.com/unitTest\", \"unit test\");\n        key = \"http://example.com/testJSONobject\";\n        extensions.put(key, jo);\n        activityDefinition.setExtensions(extensions);\n        String interactionType = \"performance\";\n        activityDefinition.setInteractionType(interactionType);\n        ArrayList<String> correctResponsesPattern = new ArrayList<String>();\n        correctResponsesPattern.add(\"true\");\n        correctResponsesPattern.add(\"foo\");\n        activityDefinition.setCorrectResponsesPattern(correctResponsesPattern);\n        ArrayList<InteractionComponent> choices = new ArrayList<InteractionComponent>();\n        InteractionComponent e = new InteractionComponent();\n        String id = \"true\";\n        e.setId(id);\n        HashMap<String, String> desc = new HashMap<String, String>();\n        desc.put(\"en-US\", \"test example.\");\n        e.setDescription(desc);\n        choices.add(e);\n        activityDefinition.setChoices(choices);\n        ArrayList<InteractionComponent> scale = new ArrayList<InteractionComponent>();\n        scale.add(e);\n        activityDefinition.setScale(scale);\n        ArrayList<InteractionComponent> source = new ArrayList<InteractionComponent>();\n        source.add(e);\n        activityDefinition.setSource(source);\n        ArrayList<InteractionComponent> target = new ArrayList<InteractionComponent>();\n        target.add(e);\n        activityDefinition.setTarget(target);\n        ArrayList<InteractionComponent> steps = new ArrayList<InteractionComponent>();\n        steps.add(e);\n        activityDefinition.setSteps(steps);\n    }", "test_setup_start_lineno": 24, "test_setup_end_lineno": 74, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "test_prefix": "    @Test\n    public void testSetType() {\n        String expected = \"http://example.com/activities/unittest\";\n        activityDefinition.setType(expected);\n        String actual = activityDefinition.getType();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 162, "test_prefix_end_lineno": 169, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java", "focal_method": "    public String getType() {\n        return type;\n    }", "focal_method_start_lineno": 119, "focal_method_end_lineno": 121, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testSetType() {\n        String expected = \"http://example.com/activities/unittest\";\n        activityDefinition.setType(expected);\n        String actual = activityDefinition.getType();\n    }", "original_test_prefix": "    @Test\n    public void testSetType() {\n        String expected = \"http://example.com/activities/unittest\";\n        activityDefinition.setType(expected);\n        String actual = activityDefinition.getType();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActivityDefinitionTest#testSetType", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String key = \"en-US\";\n        String name = \"Unit Testing\";\n        String description = \"Unit testing activity definitions.\";\n        HashMap<String, String> nameMap = new HashMap<String, String>();\n        HashMap<String, String> descriptionMap = new HashMap<String, String>();\n        nameMap.put(key, name);\n        descriptionMap.put(key, description);\n        activityDefinition = new ActivityDefinition(nameMap, descriptionMap);\n        assertNotNull(activityDefinition);\n        String moreInfo = \"More unit testing information.\";\n        activityDefinition.setMoreInfo(moreInfo);\n        String type = \"http://example.com/activities/unittest\";\n        activityDefinition.setType(type);\n        HashMap<String, JsonElement> extensions = new HashMap<String, JsonElement>();\n        key = \"http://example.com/testJSONprimitive\";\n        extensions.put(key, new JsonPrimitive(44));\n        JsonObject jo = new JsonObject();\n        jo.addProperty(\"http://example.com/unitTest\", \"unit test\");\n        key = \"http://example.com/testJSONobject\";\n        extensions.put(key, jo);\n        activityDefinition.setExtensions(extensions);\n        String interactionType = \"performance\";\n        activityDefinition.setInteractionType(interactionType);\n        ArrayList<String> correctResponsesPattern = new ArrayList<String>();\n        correctResponsesPattern.add(\"true\");\n        correctResponsesPattern.add(\"foo\");\n        activityDefinition.setCorrectResponsesPattern(correctResponsesPattern);\n        ArrayList<InteractionComponent> choices = new ArrayList<InteractionComponent>();\n        InteractionComponent e = new InteractionComponent();\n        String id = \"true\";\n        e.setId(id);\n        HashMap<String, String> desc = new HashMap<String, String>();\n        desc.put(\"en-US\", \"test example.\");\n        e.setDescription(desc);\n        choices.add(e);\n        activityDefinition.setChoices(choices);\n        ArrayList<InteractionComponent> scale = new ArrayList<InteractionComponent>();\n        scale.add(e);\n        activityDefinition.setScale(scale);\n        ArrayList<InteractionComponent> source = new ArrayList<InteractionComponent>();\n        source.add(e);\n        activityDefinition.setSource(source);\n        ArrayList<InteractionComponent> target = new ArrayList<InteractionComponent>();\n        target.add(e);\n        activityDefinition.setTarget(target);\n        ArrayList<InteractionComponent> steps = new ArrayList<InteractionComponent>();\n        steps.add(e);\n        activityDefinition.setSteps(steps);\n    }", "start_lineno": 24, "end_lineno": 74}]}
{"index": 94, "project_index": 47, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "VerbsTest", "class_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_name": "testCompleted", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_prefix": "    @Test\n    public void testCompleted() {\n        Verb actual = Verbs.completed();\n        <AssertPlaceHolder>;\n        assertEquals(\"completed\", actual.toString());\n    }", "test_prefix_start_lineno": 48, "test_prefix_end_lineno": 53, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focal_method": "    public static Verb completed(){\n        return createVerb(\"completed\");\n    }", "focal_method_start_lineno": 31, "focal_method_end_lineno": 33, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testCompleted() {\n        Verb actual = Verbs.completed();\n    }", "original_test_prefix": "    @Test\n    public void testCompleted() {\n        Verb actual = Verbs.completed();\n        assertNotNull(actual);\n        assertEquals(\"completed\", actual.toString());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.VerbsTest#testCompleted", "test_setup_list": []}
{"index": 95, "project_index": 48, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JMXJvmIdConnectionFactoryTest", "class_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_name": "testCreateConnectionFailedToGetUrl", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "test_setup_start_lineno": 54, "test_setup_end_lineno": 78, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_prefix": "    @Test\n    public void testCreateConnectionFailedToGetUrl() throws Exception {\n        this.initFactory();\n\n        Mockito.when(this.mockAttacher.attach(\"x-jvmid-x\")).thenReturn(this.mockVirtualMachine);\n        Mockito.when(this.mockVirtualMachine.getAgentProperties()).thenReturn(this.mockAgentProperties);\n        Mockito.when(this.mockVirtualMachine.getSystemProperties()).thenReturn(this.mockSystemProperties);\n\n        Mockito.when(\n                this.mockAgentProperties\n                        .getProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY))\n                .thenReturn(null);\n\n        MBeanAccessConnection result = this.factory.createConnection();\n        <AssertPlaceHolder>;\n        Mockito.verify(this.mockLogger).warn(\"failed to find the local connection url for jvm: jvmId={}\", \"x-jvmid-x\");\n    }", "test_prefix_start_lineno": 162, "test_prefix_end_lineno": 178, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focal_method": "    @Override\n    public MBeanAccessConnection createConnection() throws IOException {\n        JMXMBeanConnection result = null;\n\n        try {\n            VirtualMachine vm = this.attacher.attach(jvmId);\n            String url = vm.getAgentProperties().getProperty(COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY);\n\n            if ( url == null ) {\n                String javaHome = vm.getSystemProperties().getProperty(\"java.home\");\n                String agent = javaHome + File.separator + \"lib\" + File.separator + \"management-agent.jar\";\n                vm.loadAgent(agent);\n\n                url = vm.getAgentProperties().getProperty(COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY);\n            }\n\n            if ( url != null ) {\n                JMXServiceURL jmxUrl = this.jmxServiceUrlFactory.createJMXServiceUrl(url);\n                JMXConnector connector = this.jmxConnectorFactoryDelegate.connect(jmxUrl);\n                result = this.jmxmBeanConnectionFactory.create(connector);\n            } else {\n                log.warn(\"failed to find the local connection url for jvm: jvmId={}\", this.jvmId);\n            }\n        } catch ( AgentInitializationException | AgentLoadException | AttachNotSupportedException exc ) {\n            log.warn(\"failed to connect to jvm: jvmId={}\", this.jvmId, exc);\n        }\n\n        return result;\n    }", "focal_method_start_lineno": 104, "focal_method_end_lineno": 132, "ground_truth_oracle": "assertNull(result);", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void testCreateConnectionFailedToGetUrl() throws Exception {\n        this.initFactory();\n\n        Mockito.when(this.mockAttacher.attach(\"x-jvmid-x\")).thenReturn(this.mockVirtualMachine);\n        Mockito.when(this.mockVirtualMachine.getAgentProperties()).thenReturn(this.mockAgentProperties);\n        Mockito.when(this.mockVirtualMachine.getSystemProperties()).thenReturn(this.mockSystemProperties);\n\n        Mockito.when(\n                this.mockAgentProperties\n                        .getProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY))\n                .thenReturn(null);\n\n        MBeanAccessConnection result = this.factory.createConnection();\n    }", "original_test_prefix": "    @Test\n    public void testCreateConnectionFailedToGetUrl() throws Exception {\n        this.initFactory();\n\n        Mockito.when(this.mockAttacher.attach(\"x-jvmid-x\")).thenReturn(this.mockVirtualMachine);\n        Mockito.when(this.mockVirtualMachine.getAgentProperties()).thenReturn(this.mockAgentProperties);\n        Mockito.when(this.mockVirtualMachine.getSystemProperties()).thenReturn(this.mockSystemProperties);\n\n        Mockito.when(\n                this.mockAgentProperties\n                        .getProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY))\n                .thenReturn(null);\n\n        MBeanAccessConnection result = this.factory.createConnection();\n        assertNull(result);\n        Mockito.verify(this.mockLogger).warn(\"failed to find the local connection url for jvm: jvmId={}\", \"x-jvmid-x\");\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.connection.impl.JMXJvmIdConnectionFactoryTest#testCreateConnectionFailedToGetUrl", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "start_lineno": 54, "end_lineno": 78}]}
{"index": 96, "project_index": 48, "class_index": 1, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "ObjectQueryPreparerTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java", "test_name": "testPrepareObjectQueryWithParameterReplacement", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.preparer = new ObjectQueryPreparer();\n\n        this.mockLog = Mockito.mock(Logger.class);\n        this.mockParameterReplacer = Mockito.mock(ParameterReplacer.class);\n\n        this.testTarget001 = new TestClass001();\n        this.testTarget002 = new TestClass002();\n        this.testTarget003 = new TestClass003();\n    }", "test_setup_start_lineno": 61, "test_setup_end_lineno": 71, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java", "test_prefix": "    @Test\n    public void testPrepareObjectQueryWithParameterReplacement() throws Exception {\n        ObjectQueryInfo result;\n\n        this.initPreparer();\n\n        Mockito.when(this.mockParameterReplacer.replaceObjectNameParameters(TEST_ONAME_STR002, this.testTarget002))\n                .thenReturn(TEST_ONAME_STR002B);\n\n        result = this.preparer.prepareObjectQuery(this.testTarget002);\n\n        <AssertPlaceHolder>;\n        assertEquals(new ObjectName(this.TEST_ONAME_STR002B), result.getObjectName());\n\n        Map<String, Method> setters = result.getAttributeSetters();\n        assertEquals(2, setters.size());\n        assertEquals(TestClass002.class.getMethod(\"setAttribute1\", String.class), setters.get(TEST_ATT_NAME001));\n        assertEquals(TestClass002.class.getMethod(\"setAttribute2\", String.class), setters.get(TEST_ATT_NAME002));\n    }", "test_prefix_start_lineno": 126, "test_prefix_end_lineno": 144, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryInfo.java", "focal_method": "    public Object getTarget() {\n        return target;\n    }", "focal_method_start_lineno": 38, "focal_method_end_lineno": 40, "ground_truth_oracle": "assertSame(this.testTarget002, result.getTarget());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testPrepareObjectQueryWithParameterReplacement() throws Exception {\n        ObjectQueryInfo result;\n\n        this.initPreparer();\n\n        Mockito.when(this.mockParameterReplacer.replaceObjectNameParameters(TEST_ONAME_STR002, this.testTarget002))\n                .thenReturn(TEST_ONAME_STR002B);\n\n        result = this.preparer.prepareObjectQuery(this.testTarget002);\n\n    }", "original_test_prefix": "    @Test\n    public void testPrepareObjectQueryWithParameterReplacement() throws Exception {\n        ObjectQueryInfo result;\n\n        this.initPreparer();\n\n        Mockito.when(this.mockParameterReplacer.replaceObjectNameParameters(TEST_ONAME_STR002, this.testTarget002))\n                .thenReturn(TEST_ONAME_STR002B);\n\n        result = this.preparer.prepareObjectQuery(this.testTarget002);\n\n        assertSame(this.testTarget002, result.getTarget());\n        assertEquals(new ObjectName(this.TEST_ONAME_STR002B), result.getObjectName());\n\n        Map<String, Method> setters = result.getAttributeSetters();\n        assertEquals(2, setters.size());\n        assertEquals(TestClass002.class.getMethod(\"setAttribute1\", String.class), setters.get(TEST_ATT_NAME001));\n        assertEquals(TestClass002.class.getMethod(\"setAttribute2\", String.class), setters.get(TEST_ATT_NAME002));\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.ObjectQueryPreparerTest#testPrepareObjectQueryWithParameterReplacement", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.preparer = new ObjectQueryPreparer();\n\n        this.mockLog = Mockito.mock(Logger.class);\n        this.mockParameterReplacer = Mockito.mock(ParameterReplacer.class);\n\n        this.testTarget001 = new TestClass001();\n        this.testTarget002 = new TestClass002();\n        this.testTarget003 = new TestClass003();\n    }", "start_lineno": 61, "end_lineno": 71}]}
{"index": 97, "project_index": 49, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AJsonSerHelperTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_name": "testArray1", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_prefix": "    @Test\n    public void testArray1() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.startArray();\n        ser.writeBooleanLiteral(true);\n        ser.endArray();\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 200, "test_prefix_end_lineno": 211, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java", "focal_method": "    public void endArray () throws IOException {\n        checkInArray ();\n        state.pop ();\n        out.write (\"]\");\n        afterValueWritten ();\n    }", "focal_method_start_lineno": 67, "focal_method_end_lineno": 72, "ground_truth_oracle": "assertEquals(\"[true]\", result);", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void testArray1() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.startArray();\n        ser.writeBooleanLiteral(true);\n        ser.endArray();\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n    }", "original_test_prefix": "    @Test\n    public void testArray1() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.startArray();\n        ser.writeBooleanLiteral(true);\n        ser.endArray();\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n        assertEquals(\"[true]\", result);\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.io.AJsonSerHelperTest#testArray1", "test_setup_list": []}
{"index": 98, "project_index": 50, "class_index": 0, "test_index": 0, "user_name": "xmlet", "repo_name": "XsdParser", "sub_repos": [], "sub_repo": "", "commit_sha": "8dce9914aac46eea527f6c773a753175e93ad709", "build_system": "mvn", "class_name": "IssuesTest", "class_path": "src/test/java/org/xmlet/xsdparser/IssuesTest.java", "test_name": "testIssue23", "test_setup_file_path": "src/test/java/org/xmlet/xsdparser/IssuesTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/xmlet/xsdparser/IssuesTest.java", "test_prefix": "    @Test\n    public void testIssue23(){\n        XsdParser parser = new XsdParser(getFilePath(\"issue_23.xsd\"));\n\n        List<XsdSchema> schemas = parser.getResultXsdSchemas().collect(Collectors.toList());\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 134, "test_prefix_end_lineno": 141, "focal_method_file_path": "src/main/java/org/xmlet/xsdparser/core/XsdParserCore.java", "focal_method": "    public Stream<XsdSchema> getResultXsdSchemas(){\n        return parseElements\n                .values()\n                .stream()\n                .flatMap(List::stream)\n                .filter(element -> element.getElement() instanceof XsdSchema)\n                .map(element -> (XsdSchema) element.getElement());\n    }", "focal_method_start_lineno": 413, "focal_method_end_lineno": 420, "ground_truth_oracle": "Assert.assertTrue(true);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testIssue23(){\n        XsdParser parser = new XsdParser(getFilePath(\"issue_23.xsd\"));\n\n        List<XsdSchema> schemas = parser.getResultXsdSchemas().collect(Collectors.toList());\n\n    }", "original_test_prefix": "    @Test\n    public void testIssue23(){\n        XsdParser parser = new XsdParser(getFilePath(\"issue_23.xsd\"));\n\n        List<XsdSchema> schemas = parser.getResultXsdSchemas().collect(Collectors.toList());\n\n        Assert.assertTrue(true);\n    }", "test_with_params": false, "test_target": "org.xmlet.xsdparser.IssuesTest#testIssue23", "test_setup_list": []}
{"index": 99, "project_index": 51, "class_index": 0, "test_index": 0, "user_name": "gvlasov", "repo_name": "collections-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "82f20efc8e53ea876896b779e35ed33633ec2e23", "build_system": "mvn", "class_name": "IterableToStreamTest", "class_path": "src/test/java/org/tenidwa/collections/utils/IterableToStreamTest.java", "test_name": "iteratorToStream", "test_setup_file_path": "src/test/java/org/tenidwa/collections/utils/IterableToStreamTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/tenidwa/collections/utils/IterableToStreamTest.java", "test_prefix": "    @Test\n    public void iteratorToStream() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 19, "test_prefix_end_lineno": 27, "focal_method_file_path": "src/main/java/org/tenidwa/collections/utils/IterableToStream.java", "focal_method": "    public static <T> Stream<T> stream(Iterator<T> iterator) {\n        return StreamSupport.stream(\n            Spliterators.spliteratorUnknownSize(\n                iterator,\n                Spliterator.ORDERED\n            ),\n            false\n        );\n    }", "focal_method_start_lineno": 19, "focal_method_end_lineno": 27, "ground_truth_oracle": "Assert.assertEquals( Arrays.asList(1, 2, 3, 4, 5, 6), IterableToStream.stream( ImmutableList.of(1, 2, 3, 4, 5, 6).iterator() ).collect(java.util.stream.Collectors.toList()) );", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void iteratorToStream() {\n    }", "original_test_prefix": "    @Test\n    public void iteratorToStream() {\n        Assert.assertEquals( Arrays.asList(1, 2, 3, 4, 5, 6), IterableToStream.stream( ImmutableList.of(1, 2, 3, 4, 5, 6).iterator() ).collect(java.util.stream.Collectors.toList()) );\n    }", "test_with_params": false, "test_target": "org.tenidwa.collections.utils.IterableToStreamTest#iteratorToStream", "test_setup_list": []}
{"index": 100, "project_index": 52, "class_index": 0, "test_index": 0, "user_name": "fluenda", "repo_name": "ParCEFone", "sub_repos": [], "sub_repo": "", "commit_sha": "5067b3315c1957f930f19549ec4b354e7b8c336d", "build_system": "mvn", "class_name": "MacAddressTest", "class_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_name": "testAddressMulticast", "test_setup_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_prefix": "    @Test\n    public void testAddressMulticast() {\n        final MacAddress macAddress = new MacAddress(MULTICAST_ADDRESS);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 101, "test_prefix_end_lineno": 105, "focal_method_file_path": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focal_method": "    public boolean isMulticast() {\n        return (address[0] & MUTLTICAST_FLAG) == MUTLTICAST_FLAG;\n    }", "focal_method_start_lineno": 75, "focal_method_end_lineno": 77, "ground_truth_oracle": "assertTrue(macAddress.isMulticast());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testAddressMulticast() {\n        final MacAddress macAddress = new MacAddress(MULTICAST_ADDRESS);\n    }", "original_test_prefix": "    @Test\n    public void testAddressMulticast() {\n        final MacAddress macAddress = new MacAddress(MULTICAST_ADDRESS);\n        assertTrue(macAddress.isMulticast());\n    }", "test_with_params": false, "test_target": "com.fluenda.parcefone.event.MacAddressTest#testAddressMulticast", "test_setup_list": []}
{"index": 101, "project_index": 53, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "ACollectionHelperTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_name": "testCollect", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_prefix": "    @Test\n    public void testCollect() throws Exception {\n        APartialFunctionNoThrow<Integer, Double> squareRoot = new APartialFunctionNoThrow<Integer, Double> () {\n            @Override public boolean isDefinedAt (Integer param) {\n                return param != 0;\n            }\n\n            @Override public Double apply (Integer param) {\n                return Math.sqrt (param);\n            }\n        };\n        final List<Double> result = ACollectionHelper.collect (Arrays.asList (0, 1, 2, 3, 4), squareRoot);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 254, "test_prefix_end_lineno": 267, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focal_method": "    public static <T, X, E extends Throwable> List<X> collect (List<T> coll, APartialFunction<? super T, ? extends X, E> pf) throws E {\n        final List<X> result = createEmptyListOfType (coll, true);\n\n        for (T o: coll) {\n            if (pf.isDefinedAt (o)) {\n                result.add (pf.apply (o));\n            }\n        }\n\n        return result;\n    }", "focal_method_start_lineno": 303, "focal_method_end_lineno": 313, "ground_truth_oracle": "assertEquals (4, result.size ());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testCollect() throws Exception {\n        APartialFunctionNoThrow<Integer, Double> squareRoot = new APartialFunctionNoThrow<Integer, Double> () {\n            @Override public boolean isDefinedAt (Integer param) {\n                return param != 0;\n            }\n\n            @Override public Double apply (Integer param) {\n                return Math.sqrt (param);\n            }\n        };\n        final List<Double> result = ACollectionHelper.collect (Arrays.asList (0, 1, 2, 3, 4), squareRoot);\n    }", "original_test_prefix": "    @Test\n    public void testCollect() throws Exception {\n        APartialFunctionNoThrow<Integer, Double> squareRoot = new APartialFunctionNoThrow<Integer, Double> () {\n            @Override public boolean isDefinedAt (Integer param) {\n                return param != 0;\n            }\n\n            @Override public Double apply (Integer param) {\n                return Math.sqrt (param);\n            }\n        };\n        final List<Double> result = ACollectionHelper.collect (Arrays.asList (0, 1, 2, 3, 4), squareRoot);\n        assertEquals (4, result.size ());\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.ACollectionHelperTest#testCollect", "test_setup_list": []}
{"index": 102, "project_index": 53, "class_index": 1, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AJsonSerHelperTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_name": "testNumber", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_prefix": "    @Test\n    public void testNumber() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(12345, 0);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 16, "test_prefix_end_lineno": 25, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java", "focal_method": "    public void writeNumberLiteral (long value, int numFracDigits) throws IOException {\n        checkAcceptsValueAndPrefixComma ();\n\n        if (value < 0) {\n            out.write ('-');\n            value = -value;\n        }\n\n        if (numFracDigits == 0) {\n            out.write (String.valueOf (value));\n        }\n        else {\n            final long intPart = value / TEN_POW[numFracDigits];\n            final String fracPart = String.valueOf (1_000_000_000 + value % TEN_POW[numFracDigits]).substring (10 - numFracDigits, 10);\n\n            out.write (String.valueOf (intPart));\n            out.write (\".\");\n            out.write (fracPart);\n        }\n\n        afterValueWritten ();\n    }", "focal_method_start_lineno": 110, "focal_method_end_lineno": 131, "ground_truth_oracle": "assertEquals(\"12345\", result);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testNumber() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(12345, 0);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n    }", "original_test_prefix": "    @Test\n    public void testNumber() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(12345, 0);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n        assertEquals(\"12345\", result);\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.io.AJsonSerHelperTest#testNumber", "test_setup_list": []}
{"index": 103, "project_index": 54, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OPropertyMapIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_name": "testCreateValueByKeyTwoParameters", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }\n\n@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testCreateValueByKeyTwoParameters() {\n    final Object result = propertyIndexByKey.createValue(Arrays.asList(mapToTest, \"25\"));\n\n    <AssertPlaceHolder>;\n\n    final Collection<?> collectionResult = (Collection<?>) result;\n\n    Assert.assertEquals(collectionResult.size(), 2);\n    Assert.assertTrue(collectionResult.contains(\"st1\"));\n    Assert.assertTrue(collectionResult.contains(\"st2\"));\n  }", "test_prefix_start_lineno": 63, "test_prefix_end_lineno": 74, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focal_method": "  @Override\n  public Object createValue(List<?> params) {\n    if (!(params.get(0) instanceof Map))\n      return null;\n\n    final Collection<?> mapParams = extractMapParams((Map<?, ?>) params.get(0));\n    final List<Object> result = new ArrayList<Object>(mapParams.size());\n    for (final Object mapParam : mapParams) {\n      result.add(createSingleValue(mapParam));\n    }\n\n    return result;\n  }", "focal_method_start_lineno": 64, "focal_method_end_lineno": 76, "ground_truth_oracle": "Assert.assertTrue(result instanceof Collection);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testCreateValueByKeyTwoParameters() {\n    final Object result = propertyIndexByKey.createValue(Arrays.asList(mapToTest, \"25\"));\n\n  }", "original_test_prefix": "  @Test\n  public void testCreateValueByKeyTwoParameters() {\n    final Object result = propertyIndexByKey.createValue(Arrays.asList(mapToTest, \"25\"));\n\n    Assert.assertTrue(result instanceof Collection);\n\n    final Collection<?> collectionResult = (Collection<?>) result;\n\n    Assert.assertEquals(collectionResult.size(), 2);\n    Assert.assertTrue(collectionResult.contains(\"st1\"));\n    Assert.assertTrue(collectionResult.contains(\"st2\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OPropertyMapIndexDefinitionTest#testCreateValueByKeyTwoParameters", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }", "start_lineno": 23, "end_lineno": 27}, {"test_setup": "@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "start_lineno": 29, "end_lineno": 37}]}
{"index": 104, "project_index": 54, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionNewTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_name": "testIndexedEdgeArrows", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 32, "test_setup_end_lineno": 66, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_prefix": "  @Test\n  public void testIndexedEdgeArrows() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:IndexedVertex, as: one, where: (uid = 0)}\");\n    query.append(\"-IndexedEdge->{class:IndexedVertex, as: two, where: (uid = 1)}\");\n    query.append(\"return one, two\");\n\n    OResultSet result = db.query(query.toString());\n    <AssertPlaceHolder>;\n    OResult doc = result.next();\n    Assert.assertFalse(result.hasNext());\n    result.close();\n  }", "test_prefix_start_lineno": 1377, "test_prefix_end_lineno": 1390, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  @Override\n  boolean hasNext();", "focal_method_start_lineno": 20, "focal_method_end_lineno": 21, "ground_truth_oracle": "Assert.assertTrue(result.hasNext());", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test\n  public void testIndexedEdgeArrows() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:IndexedVertex, as: one, where: (uid = 0)}\");\n    query.append(\"-IndexedEdge->{class:IndexedVertex, as: two, where: (uid = 1)}\");\n    query.append(\"return one, two\");\n\n    OResultSet result = db.query(query.toString());\n  }", "original_test_prefix": "  @Test\n  public void testIndexedEdgeArrows() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:IndexedVertex, as: one, where: (uid = 0)}\");\n    query.append(\"-IndexedEdge->{class:IndexedVertex, as: two, where: (uid = 1)}\");\n    query.append(\"return one, two\");\n\n    OResultSet result = db.query(query.toString());\n    Assert.assertTrue(result.hasNext());\n    OResult doc = result.next();\n    Assert.assertFalse(result.hasNext());\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionNewTest#testIndexedEdgeArrows", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 32, "end_lineno": 66}]}
{"index": 105, "project_index": 54, "class_index": 1, "test_index": 1, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionNewTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_name": "testFriendsWithName", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 32, "test_setup_end_lineno": 66, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_prefix": "  @Test\n  public void testFriendsWithName() throws Exception {\n    OResultSet qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1' and 1 + 1 = 2)}.out('Friend'){as:friend, where:(name = 'n2' and 1 + 1 = 2)} return friend)\");\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(\"n2\", qResult.next().getProperty(\"name\"));\n    Assert.assertFalse(qResult.hasNext());\n    qResult.close();\n  }", "test_prefix_start_lineno": 584, "test_prefix_end_lineno": 593, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  @Override\n  boolean hasNext();", "focal_method_start_lineno": 20, "focal_method_end_lineno": 21, "ground_truth_oracle": "Assert.assertTrue(qResult.hasNext());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testFriendsWithName() throws Exception {\n    OResultSet qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1' and 1 + 1 = 2)}.out('Friend'){as:friend, where:(name = 'n2' and 1 + 1 = 2)} return friend)\");\n\n  }", "original_test_prefix": "  @Test\n  public void testFriendsWithName() throws Exception {\n    OResultSet qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1' and 1 + 1 = 2)}.out('Friend'){as:friend, where:(name = 'n2' and 1 + 1 = 2)} return friend)\");\n\n    Assert.assertTrue(qResult.hasNext());\n    Assert.assertEquals(\"n2\", qResult.next().getProperty(\"name\"));\n    Assert.assertFalse(qResult.hasNext());\n    qResult.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionNewTest#testFriendsWithName", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 32, "end_lineno": 66}]}
{"index": 106, "project_index": 54, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "DoubleSerializerTest", "class_path": "core/src/test/java/com/orientechnologies/common/serialization/types/DoubleSerializerTest.java", "test_name": "testSerializeWALChanges", "test_setup_file_path": "core/src/test/java/com/orientechnologies/common/serialization/types/DoubleSerializerTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    doubleSerializer = new ODoubleSerializer();\n  }", "test_setup_start_lineno": 38, "test_setup_end_lineno": 41, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/common/serialization/types/DoubleSerializerTest.java", "test_prefix": "  @Test\n  public void testSerializeWALChanges() {\n    final int serializationOffset = 5;\n    final ByteBuffer buffer = ByteBuffer.allocateDirect(FIELD_SIZE + serializationOffset).order(ByteOrder.nativeOrder());\n    final byte[] data = new byte[FIELD_SIZE];\n    doubleSerializer.serializeNativeObject(OBJECT, data, 0);\n\n    final OWALChanges walChanges = new OWALChangesTree();\n    walChanges.setBinaryValue(buffer, data, serializationOffset);\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer, walChanges, serializationOffset), OBJECT);\n  }", "test_prefix_start_lineno": 92, "test_prefix_end_lineno": 104, "focal_method_file_path": "core/src/main/java/com/orientechnologies/common/serialization/types/ODoubleSerializer.java", "focal_method": "  @Override\n  public int getObjectSizeInByteBuffer(ByteBuffer buffer, OWALChanges walChanges, int offset) {\n    return DOUBLE_SIZE;\n  }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 138, "ground_truth_oracle": "Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer, walChanges, serializationOffset), FIELD_SIZE);", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test\n  public void testSerializeWALChanges() {\n    final int serializationOffset = 5;\n    final ByteBuffer buffer = ByteBuffer.allocateDirect(FIELD_SIZE + serializationOffset).order(ByteOrder.nativeOrder());\n    final byte[] data = new byte[FIELD_SIZE];\n    doubleSerializer.serializeNativeObject(OBJECT, data, 0);\n\n    final OWALChanges walChanges = new OWALChangesTree();\n    walChanges.setBinaryValue(buffer, data, serializationOffset);\n\n  }", "original_test_prefix": "  @Test\n  public void testSerializeWALChanges() {\n    final int serializationOffset = 5;\n    final ByteBuffer buffer = ByteBuffer.allocateDirect(FIELD_SIZE + serializationOffset).order(ByteOrder.nativeOrder());\n    final byte[] data = new byte[FIELD_SIZE];\n    doubleSerializer.serializeNativeObject(OBJECT, data, 0);\n\n    final OWALChanges walChanges = new OWALChangesTree();\n    walChanges.setBinaryValue(buffer, data, serializationOffset);\n\n    Assert.assertEquals(doubleSerializer.getObjectSizeInByteBuffer(buffer, walChanges, serializationOffset), FIELD_SIZE);\n    Assert.assertEquals(doubleSerializer.deserializeFromByteBufferObject(buffer, walChanges, serializationOffset), OBJECT);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.common.serialization.types.DoubleSerializerTest#testSerializeWALChanges", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    doubleSerializer = new ODoubleSerializer();\n  }", "start_lineno": 38, "end_lineno": 41}]}
{"index": 107, "project_index": 54, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_name": "testArrayNumber", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 63, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testArrayNumber() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:TriangleV, as: friend1, where: (uid = 0)}\");\n    query.append(\"return friend1.out('TriangleE')[0] as foo\");\n\n    List<?> result = db.command(new OCommandSQL(query.toString())).execute();\n    <AssertPlaceHolder>;\n    ODocument doc = (ODocument) result.get(0);\n    Object foo = doc.field(\"foo\");\n    assertNotNull(foo);\n    assertTrue(foo instanceof OVertex);\n  }", "test_prefix_start_lineno": 1080, "test_prefix_end_lineno": 1093, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(1, result.size());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testArrayNumber() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:TriangleV, as: friend1, where: (uid = 0)}\");\n    query.append(\"return friend1.out('TriangleE')[0] as foo\");\n\n    List<?> result = db.command(new OCommandSQL(query.toString())).execute();\n  }", "original_test_prefix": "  @Test\n  public void testArrayNumber() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:TriangleV, as: friend1, where: (uid = 0)}\");\n    query.append(\"return friend1.out('TriangleE')[0] as foo\");\n\n    List<?> result = db.command(new OCommandSQL(query.toString())).execute();\n    assertEquals(1, result.size());\n    ODocument doc = (ODocument) result.get(0);\n    Object foo = doc.field(\"foo\");\n    assertNotNull(foo);\n    assertTrue(foo instanceof OVertex);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionTest#testArrayNumber", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 29, "end_lineno": 63}]}
{"index": 108, "project_index": 54, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCreatePropertyStatementExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreatePropertyStatementExecutionTest.java", "test_name": "testCreateMandatoryPropertyWithEmbeddedType", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreatePropertyStatementExecutionTest.java", "test_setup": "@BeforeClass public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OCreatePropertyStatementExecutionTest\");\n    db.create();\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 26, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreatePropertyStatementExecutionTest.java", "test_prefix": "  @Test public void testCreateMandatoryPropertyWithEmbeddedType() throws Exception {\n    db.command(\"CREATE Class testCreateMandatoryPropertyWithEmbeddedType\").close();\n    db.command(\n        \"CREATE Property testCreateMandatoryPropertyWithEmbeddedType.officers EMBEDDEDLIST STRING (MANDATORY)\").close();\n\n    OClass companyClass = db.getMetadata().getSchema().getClass(\"testCreateMandatoryPropertyWithEmbeddedType\");\n    OProperty nameProperty = companyClass.getProperty(PROP_OFFICERS);\n\n    <AssertPlaceHolder>;\n    assertEquals(nameProperty.getFullName(), \"testCreateMandatoryPropertyWithEmbeddedType.officers\");\n    assertEquals(nameProperty.getType(), OType.EMBEDDEDLIST);\n    assertEquals(nameProperty.getLinkedType(), OType.STRING);\n    assertTrue(nameProperty.isMandatory());\n    assertFalse(nameProperty.isNotNull());\n    assertFalse(nameProperty.isReadonly());\n  }", "test_prefix_start_lineno": 158, "test_prefix_end_lineno": 173, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java", "focal_method": "  public String getName();", "focal_method_start_lineno": 41, "focal_method_end_lineno": 41, "ground_truth_oracle": "assertEquals(nameProperty.getName(), PROP_OFFICERS);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test public void testCreateMandatoryPropertyWithEmbeddedType() throws Exception {\n    db.command(\"CREATE Class testCreateMandatoryPropertyWithEmbeddedType\").close();\n    db.command(\n        \"CREATE Property testCreateMandatoryPropertyWithEmbeddedType.officers EMBEDDEDLIST STRING (MANDATORY)\").close();\n\n    OClass companyClass = db.getMetadata().getSchema().getClass(\"testCreateMandatoryPropertyWithEmbeddedType\");\n    OProperty nameProperty = companyClass.getProperty(PROP_OFFICERS);\n\n  }", "original_test_prefix": "  @Test public void testCreateMandatoryPropertyWithEmbeddedType() throws Exception {\n    db.command(\"CREATE Class testCreateMandatoryPropertyWithEmbeddedType\").close();\n    db.command(\n        \"CREATE Property testCreateMandatoryPropertyWithEmbeddedType.officers EMBEDDEDLIST STRING (MANDATORY)\").close();\n\n    OClass companyClass = db.getMetadata().getSchema().getClass(\"testCreateMandatoryPropertyWithEmbeddedType\");\n    OProperty nameProperty = companyClass.getProperty(PROP_OFFICERS);\n\n    assertEquals(nameProperty.getName(), PROP_OFFICERS);\n    assertEquals(nameProperty.getFullName(), \"testCreateMandatoryPropertyWithEmbeddedType.officers\");\n    assertEquals(nameProperty.getType(), OType.EMBEDDEDLIST);\n    assertEquals(nameProperty.getLinkedType(), OType.STRING);\n    assertTrue(nameProperty.isMandatory());\n    assertFalse(nameProperty.isNotNull());\n    assertFalse(nameProperty.isReadonly());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.OCreatePropertyStatementExecutionTest#testCreateMandatoryPropertyWithEmbeddedType", "test_setup_list": [{"test_setup": "@BeforeClass public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OCreatePropertyStatementExecutionTest\");\n    db.create();\n  }", "start_lineno": 23, "end_lineno": 26}]}
{"index": 109, "project_index": 54, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCompositeIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_name": "testGetTypes", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeMethod() {\n    compositeIndex = new OCompositeIndexDefinition(\"testClass\");\n\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER));\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fTwo\", OType.STRING));\n  }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testGetTypes() {\n    final OType[] result = compositeIndex.getTypes();\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(result[0], OType.INTEGER);\n    Assert.assertEquals(result[1], OType.STRING);\n  }", "test_prefix_start_lineno": 575, "test_prefix_end_lineno": 582, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinition.java", "focal_method": "  public OType[] getTypes() {\n    final List<OType> types = new LinkedList<OType>();\n    for (final OIndexDefinition indexDefinition : indexDefinitions)\n      Collections.addAll(types, indexDefinition.getTypes());\n\n    return types.toArray(new OType[types.size()]);\n  }", "focal_method_start_lineno": 340, "focal_method_end_lineno": 346, "ground_truth_oracle": "Assert.assertEquals(result.length, 2);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testGetTypes() {\n    final OType[] result = compositeIndex.getTypes();\n\n  }", "original_test_prefix": "  @Test\n  public void testGetTypes() {\n    final OType[] result = compositeIndex.getTypes();\n\n    Assert.assertEquals(result.length, 2);\n    Assert.assertEquals(result[0], OType.INTEGER);\n    Assert.assertEquals(result[1], OType.STRING);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OCompositeIndexDefinitionTest#testGetTypes", "test_setup_list": [{"test_setup": "@Before\n  public void beforeMethod() {\n    compositeIndex = new OCompositeIndexDefinition(\"testClass\");\n\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER));\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fTwo\", OType.STRING));\n  }", "start_lineno": 21, "end_lineno": 27}]}
{"index": 110, "project_index": 54, "class_index": 6, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "AlterPropertyTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/AlterPropertyTest.java", "test_name": "testPropertyRenaming", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/AlterPropertyTest.java", "test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + AlterPropertyTest.class.getSimpleName());\n    db.create();\n  }", "test_setup_start_lineno": 20, "test_setup_end_lineno": 24, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/AlterPropertyTest.java", "test_prefix": "  @Test\n  public void testPropertyRenaming() {\n    OSchema schema = db.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"TestPropertyRenaming\");\n    OProperty property = classA.createProperty(\"propertyOld\", OType.STRING);\n    <AssertPlaceHolder>;\n    assertNull(classA.getProperty(\"propertyNew\"));\n    property.setName(\"propertyNew\");\n    assertNull(classA.getProperty(\"propertyOld\"));\n    assertEquals(property, classA.getProperty(\"propertyNew\"));\n  }", "test_prefix_start_lineno": 31, "test_prefix_end_lineno": 41, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OClass.java", "focal_method": "  OProperty getProperty(String iPropertyName);", "focal_method_start_lineno": 113, "focal_method_end_lineno": 113, "ground_truth_oracle": "assertEquals(property, classA.getProperty(\"propertyOld\"));", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void testPropertyRenaming() {\n    OSchema schema = db.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"TestPropertyRenaming\");\n    OProperty property = classA.createProperty(\"propertyOld\", OType.STRING);\n  }", "original_test_prefix": "  @Test\n  public void testPropertyRenaming() {\n    OSchema schema = db.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"TestPropertyRenaming\");\n    OProperty property = classA.createProperty(\"propertyOld\", OType.STRING);\n    assertEquals(property, classA.getProperty(\"propertyOld\"));\n    assertNull(classA.getProperty(\"propertyNew\"));\n    property.setName(\"propertyNew\");\n    assertNull(classA.getProperty(\"propertyOld\"));\n    assertEquals(property, classA.getProperty(\"propertyNew\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.metadata.schema.AlterPropertyTest#testPropertyRenaming", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + AlterPropertyTest.class.getSimpleName());\n    db.create();\n  }", "start_lineno": 20, "end_lineno": 24}]}
{"index": 111, "project_index": 55, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ContentActivitiesTest", "class_path": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java", "test_name": "testGetCategory", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        category = new ArrayList<Activity>();\n        category.add(new Activity(ID));\n\n        grouping = new ArrayList<Activity>();\n        grouping.add(new Activity(ID));\n\n        other = new ArrayList<Activity>();\n        other.add(new Activity(ID));\n\n        parent = new ArrayList<Activity>();\n        parent.add(new Activity(ID));\n\n        contextActivities = new ContextActivities();\n        contextActivities.setCategory(category);\n        contextActivities.setGrouping(grouping);\n        contextActivities.setOther(other);\n        contextActivities.setParent(parent);\n    }", "test_setup_start_lineno": 28, "test_setup_end_lineno": 47, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java", "test_prefix": "    @Test\n    public void testGetCategory() {\n        ArrayList<Activity> expected = category;\n        ArrayList<Activity> actual = contextActivities.getCategory();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n        assertEquals(ID, actual.get(0).getId());\n    }", "test_prefix_start_lineno": 100, "test_prefix_end_lineno": 107, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ContextActivities.java", "focal_method": "    public ArrayList<Activity> getCategory() {\n        return category;\n    }", "focal_method_start_lineno": 28, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetCategory() {\n        ArrayList<Activity> expected = category;\n        ArrayList<Activity> actual = contextActivities.getCategory();\n    }", "original_test_prefix": "    @Test\n    public void testGetCategory() {\n        ArrayList<Activity> expected = category;\n        ArrayList<Activity> actual = contextActivities.getCategory();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n        assertEquals(ID, actual.get(0).getId());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ContentActivitiesTest#testGetCategory", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        category = new ArrayList<Activity>();\n        category.add(new Activity(ID));\n\n        grouping = new ArrayList<Activity>();\n        grouping.add(new Activity(ID));\n\n        other = new ArrayList<Activity>();\n        other.add(new Activity(ID));\n\n        parent = new ArrayList<Activity>();\n        parent.add(new Activity(ID));\n\n        contextActivities = new ContextActivities();\n        contextActivities.setCategory(category);\n        contextActivities.setGrouping(grouping);\n        contextActivities.setOther(other);\n        contextActivities.setParent(parent);\n    }", "start_lineno": 28, "end_lineno": 47}]}
{"index": 112, "project_index": 55, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "AboutTest", "class_path": "src/test/java/gov/adlnet/xapi/AboutTest.java", "test_name": "testSetExtensions", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/AboutTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        about = new About();\n        ArrayList<String> versionInput = new ArrayList<String>();\n        String expected = \"1.0\";\n        versionInput.add(expected);\n        about.setVersion(versionInput);\n        JsonObject extension = new JsonObject();\n        extension.addProperty(\"about\", \"About Extension\");\n        about.setExtensions(extension);\n    }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 31, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/AboutTest.java", "test_prefix": "    @Test\n    public void testSetExtensions() {\n        JsonObject expected = new JsonObject();\n        expected.addProperty(\"id\", UUID.randomUUID().toString());\n        about.setExtensions(expected);\n        JsonObject actual = about.getExtensions();\n        <AssertPlaceHolder>;\n        assertEquals(expected.get(\"id\"), actual.get(\"id\"));\n    }", "test_prefix_start_lineno": 68, "test_prefix_end_lineno": 76, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/About.java", "focal_method": "    public JsonObject getExtensions() {\n        return extensions;\n    }", "focal_method_start_lineno": 17, "focal_method_end_lineno": 19, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testSetExtensions() {\n        JsonObject expected = new JsonObject();\n        expected.addProperty(\"id\", UUID.randomUUID().toString());\n        about.setExtensions(expected);\n        JsonObject actual = about.getExtensions();\n    }", "original_test_prefix": "    @Test\n    public void testSetExtensions() {\n        JsonObject expected = new JsonObject();\n        expected.addProperty(\"id\", UUID.randomUUID().toString());\n        about.setExtensions(expected);\n        JsonObject actual = about.getExtensions();\n        assertNotNull(actual);\n        assertEquals(expected.get(\"id\"), actual.get(\"id\"));\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.AboutTest#testSetExtensions", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        about = new About();\n        ArrayList<String> versionInput = new ArrayList<String>();\n        String expected = \"1.0\";\n        versionInput.add(expected);\n        about.setVersion(versionInput);\n        JsonObject extension = new JsonObject();\n        extension.addProperty(\"about\", \"About Extension\");\n        about.setExtensions(extension);\n    }", "start_lineno": 21, "end_lineno": 31}]}
{"index": 113, "project_index": 55, "class_index": 2, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "SubStatementTest", "class_path": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "test_name": "testGetContext", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        substatement = new SubStatement();\n        substatement.setTimestamp(TIME);\n        actor = new Agent();\n        actor.setMbox(MBOX);\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        verb = new Verb(ID, display);\n        activity = new Activity(TEST_IRI);\n        substatement.setActor(actor);\n        substatement.setVerb(verb);\n        substatement.setObject(activity);\n        result = new Result();\n        result.setSuccess(false);\n        substatement.setResult(result);\n        context = new Context();\n        context.setLanguage(LANGUAGE);\n        substatement.setContext(context);\n        attachments = new ArrayList<Attachment>();\n        Attachment att = new Attachment();\n\n        HashMap<String, String> attDisplay = new HashMap<String, String>();\n        attDisplay.put(\"en-US\", \"Test Display.\");\n        att.setDisplay(attDisplay);\n\n        HashMap<String, String> description = new HashMap<String, String>();\n        description.put(\"en-US\", \"Test Description.\");\n        att.setDescription(description);\n\n        URI usageType = new URI(\"http://example.com/test/usage\");\n        att.setUsageType(usageType);\n\n        String attach = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        att.addAttachment(attach, contentType);\n\n        attachments.add(att);\n        substatement.setAttachments(attachments);\n    }", "test_setup_start_lineno": 47, "test_setup_end_lineno": 86, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/SubStatementTest.java", "test_prefix": "    @Test\n    public void testGetContext() {\n        Context expected = context;\n        Context actual = substatement.getContext();\n        <AssertPlaceHolder>;\n        assertEquals(expected.getLanguage(), actual.getLanguage());\n    }", "test_prefix_start_lineno": 152, "test_prefix_end_lineno": 158, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/SubStatement.java", "focal_method": "    public Context getContext() {\n        return context;\n    }", "focal_method_start_lineno": 32, "focal_method_end_lineno": 34, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetContext() {\n        Context expected = context;\n        Context actual = substatement.getContext();\n    }", "original_test_prefix": "    @Test\n    public void testGetContext() {\n        Context expected = context;\n        Context actual = substatement.getContext();\n        assertNotNull(actual);\n        assertEquals(expected.getLanguage(), actual.getLanguage());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.SubStatementTest#testGetContext", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        substatement = new SubStatement();\n        substatement.setTimestamp(TIME);\n        actor = new Agent();\n        actor.setMbox(MBOX);\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        verb = new Verb(ID, display);\n        activity = new Activity(TEST_IRI);\n        substatement.setActor(actor);\n        substatement.setVerb(verb);\n        substatement.setObject(activity);\n        result = new Result();\n        result.setSuccess(false);\n        substatement.setResult(result);\n        context = new Context();\n        context.setLanguage(LANGUAGE);\n        substatement.setContext(context);\n        attachments = new ArrayList<Attachment>();\n        Attachment att = new Attachment();\n\n        HashMap<String, String> attDisplay = new HashMap<String, String>();\n        attDisplay.put(\"en-US\", \"Test Display.\");\n        att.setDisplay(attDisplay);\n\n        HashMap<String, String> description = new HashMap<String, String>();\n        description.put(\"en-US\", \"Test Description.\");\n        att.setDescription(description);\n\n        URI usageType = new URI(\"http://example.com/test/usage\");\n        att.setUsageType(usageType);\n\n        String attach = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        att.addAttachment(attach, contentType);\n\n        attachments.add(att);\n        substatement.setAttachments(attachments);\n    }", "start_lineno": 47, "end_lineno": 86}]}
{"index": 114, "project_index": 55, "class_index": 3, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "AttachmentTest", "class_path": "src/test/java/gov/adlnet/xapi/AttachmentTest.java", "test_name": "testGetUsageType", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/AttachmentTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String att = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        attachment = new Attachment();\n        expectedArray = attachment.addAttachment(att, contentType);\n    }", "test_setup_start_lineno": 24, "test_setup_end_lineno": 30, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/AttachmentTest.java", "test_prefix": "    @Test\n    public void testGetUsageType() throws URISyntaxException {\n        URI expected = new URI(\"http://testUsageType.com\");\n        attachment.setUsageType(expected);\n        URI actual = attachment.getUsageType();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 46, "test_prefix_end_lineno": 53, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Attachment.java", "focal_method": "    public URI getUsageType() {\n        return usageType;\n    }", "focal_method_start_lineno": 61, "focal_method_end_lineno": 63, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testGetUsageType() throws URISyntaxException {\n        URI expected = new URI(\"http://testUsageType.com\");\n        attachment.setUsageType(expected);\n        URI actual = attachment.getUsageType();\n    }", "original_test_prefix": "    @Test\n    public void testGetUsageType() throws URISyntaxException {\n        URI expected = new URI(\"http://testUsageType.com\");\n        attachment.setUsageType(expected);\n        URI actual = attachment.getUsageType();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.AttachmentTest#testGetUsageType", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String att = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        attachment = new Attachment();\n        expectedArray = attachment.addAttachment(att, contentType);\n    }", "start_lineno": 24, "end_lineno": 30}]}
{"index": 115, "project_index": 55, "class_index": 4, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "StatementTest", "class_path": "src/test/java/gov/adlnet/xapi/StatementTest.java", "test_name": "testSetVersion", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/StatementTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        agent = new Agent();\n        agent.setMbox(MBOX);\n        Verb v = new Verb(\"http://example.com/tested\");\n        Activity act = new Activity(TEST_IRI + UUID.randomUUID().toString());\n        statement = new Statement(agent, v, act);\n        statement.setId(ID);\n        \n        Attachment attachment = new Attachment();\n        Attachment expected = new Attachment();\n        String att = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        expected.addAttachment(att, contentType);\n        attachment.setUsageType(new URI(\"http://test.com\"));\n\n        ArrayList<Attachment> expectedList = new ArrayList<Attachment>();\n        expectedList.add(attachment);\n        statement.setAttachments(expectedList);\n        \n        Context context = new Context();\n        context.setLanguage(\"en-US\");\n        statement.setContext(context);\n\n        Result result = new Result();\n        result.setSuccess(true);\n        statement.setResult(result);\n        \n        String time = String.valueOf(System.currentTimeMillis());\n        statement.setStored(time);\n        statement.setTimestamp(time);\n        statement.setAuthority(agent);\n        statement.setVersion(\"1.0\");\n    }", "test_setup_start_lineno": 36, "test_setup_end_lineno": 69, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/StatementTest.java", "test_prefix": "    @Test\n    public void testSetVersion() {\n        String expected = \"1.0\";\n        statement.setVersion(expected);\n        String actual = statement.getVersion();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 154, "test_prefix_end_lineno": 161, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Statement.java", "focal_method": "    public String getVersion() {\n        return version;\n    }", "focal_method_start_lineno": 50, "focal_method_end_lineno": 52, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testSetVersion() {\n        String expected = \"1.0\";\n        statement.setVersion(expected);\n        String actual = statement.getVersion();\n    }", "original_test_prefix": "    @Test\n    public void testSetVersion() {\n        String expected = \"1.0\";\n        statement.setVersion(expected);\n        String actual = statement.getVersion();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.StatementTest#testSetVersion", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        agent = new Agent();\n        agent.setMbox(MBOX);\n        Verb v = new Verb(\"http://example.com/tested\");\n        Activity act = new Activity(TEST_IRI + UUID.randomUUID().toString());\n        statement = new Statement(agent, v, act);\n        statement.setId(ID);\n        \n        Attachment attachment = new Attachment();\n        Attachment expected = new Attachment();\n        String att = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        expected.addAttachment(att, contentType);\n        attachment.setUsageType(new URI(\"http://test.com\"));\n\n        ArrayList<Attachment> expectedList = new ArrayList<Attachment>();\n        expectedList.add(attachment);\n        statement.setAttachments(expectedList);\n        \n        Context context = new Context();\n        context.setLanguage(\"en-US\");\n        statement.setContext(context);\n\n        Result result = new Result();\n        result.setSuccess(true);\n        statement.setResult(result);\n        \n        String time = String.valueOf(System.currentTimeMillis());\n        statement.setStored(time);\n        statement.setTimestamp(time);\n        statement.setAuthority(agent);\n        statement.setVersion(\"1.0\");\n    }", "start_lineno": 36, "end_lineno": 69}]}
{"index": 116, "project_index": 56, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "ThorntailUtilTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/ThorntailUtilTest.java", "test_name": "testReadThorntailPort", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/ThorntailUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/ThorntailUtilTest.java", "test_prefix": "    @Test\n    public void testReadThorntailPort() {\n        Properties props = YamlUtil.getPropertiesFromYamlResource(SpringBootUtilTest.class.getResource(\"/util/project-default.yml\"));\n        <AssertPlaceHolder>;\n        assertEquals(\"8082\", props.getProperty(\"thorntail.http.port\"));\n\n    }", "test_prefix_start_lineno": 26, "test_prefix_end_lineno": 32, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/YamlUtil.java", "focal_method": "    protected static Properties getPropertiesFromYamlResource(URL resource) {\n        return getPropertiesFromYamlResource(null, resource);\n    }", "focal_method_start_lineno": 34, "focal_method_end_lineno": 36, "ground_truth_oracle": "assertNotNull(props);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testReadThorntailPort() {\n        Properties props = YamlUtil.getPropertiesFromYamlResource(SpringBootUtilTest.class.getResource(\"/util/project-default.yml\"));\n    }", "original_test_prefix": "    @Test\n    public void testReadThorntailPort() {\n        Properties props = YamlUtil.getPropertiesFromYamlResource(SpringBootUtilTest.class.getResource(\"/util/project-default.yml\"));\n        assertNotNull(props);\n        assertEquals(\"8082\", props.getProperty(\"thorntail.http.port\"));\n\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.ThorntailUtilTest#testReadThorntailPort", "test_setup_list": []}
{"index": 117, "project_index": 57, "class_index": 0, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "core", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "LoadKeyStoreTest", "class_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/LoadKeyStoreTest.java", "test_name": "loadKeyStoreFromResourcesWrongPassword", "test_setup_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/LoadKeyStoreTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/LoadKeyStoreTest.java", "test_prefix": "    @Test\n    public void loadKeyStoreFromResourcesWrongPassword() throws Exception {\n        String keyStorePath = \"/keystore.jks\";\n        InputStream resourceAsStream = this.getClass().getResourceAsStream(keyStorePath);\n        <AssertPlaceHolder>;\n\n        thrown.expect(IOException.class);\n        NanoHTTPD.makeSSLSocketFactory(keyStorePath, \"wrongpassword\".toCharArray());\n    }", "test_prefix_start_lineno": 64, "test_prefix_end_lineno": 72, "focal_method_file_path": "core/src/main/java/org/nanohttpd/protocols/http/NanoHTTPD.java", "focal_method": "    public static SSLServerSocketFactory makeSSLSocketFactory(String keyAndTrustStoreClasspathPath, char[] passphrase) throws IOException {\n        try {\n            KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n            InputStream keystoreStream = NanoHTTPD.class.getResourceAsStream(keyAndTrustStoreClasspathPath);\n\n            if (keystoreStream == null) {\n                throw new IOException(\"Unable to load keystore from classpath: \" + keyAndTrustStoreClasspathPath);\n            }\n\n            keystore.load(keystoreStream, passphrase);\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n            keyManagerFactory.init(keystore, passphrase);\n            return makeSSLSocketFactory(keystore, keyManagerFactory);\n        } catch (Exception e) {\n            throw new IOException(e.getMessage());\n        }\n    }", "focal_method_start_lineno": 267, "focal_method_end_lineno": 283, "ground_truth_oracle": "assertNotNull(resourceAsStream);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void loadKeyStoreFromResourcesWrongPassword() throws Exception {\n        String keyStorePath = \"/keystore.jks\";\n        InputStream resourceAsStream = this.getClass().getResourceAsStream(keyStorePath);\n    }", "original_test_prefix": "    @Test\n    public void loadKeyStoreFromResourcesWrongPassword() throws Exception {\n        String keyStorePath = \"/keystore.jks\";\n        InputStream resourceAsStream = this.getClass().getResourceAsStream(keyStorePath);\n        assertNotNull(resourceAsStream);\n\n        thrown.expect(IOException.class);\n        NanoHTTPD.makeSSLSocketFactory(keyStorePath, \"wrongpassword\".toCharArray());\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.protocols.http.LoadKeyStoreTest#loadKeyStoreFromResourcesWrongPassword", "test_setup_list": []}
{"index": 118, "project_index": 58, "class_index": 0, "test_index": 0, "user_name": "Yubico", "repo_name": "yubico-java-client", "sub_repos": ["v2client", "jaas", "demo-server"], "sub_repo": "v2client", "commit_sha": "e21fb672e290a118f7420daaf81ccb96d319d52c", "build_system": "mvn", "class_name": "YubicoClientTest", "class_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_name": "testTwoQueries", "test_setup_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 69, "test_prefix_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_prefix": "    @Test\n    public void testTwoQueries() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        VerificationResponse response = client.verify(otp);\n        <AssertPlaceHolder>;\n        VerificationResponse response2 = client.verify(otp);\n        assertEquals(ResponseStatus.REPLAYED_OTP, response2.getStatus());\n    }", "test_prefix_start_lineno": 129, "test_prefix_end_lineno": 136, "focal_method_file_path": "v2client/src/main/java/com/yubico/client/v2/VerificationResponse.java", "focal_method": "    ResponseStatus getStatus();", "focal_method_start_lineno": 69, "focal_method_end_lineno": 69, "ground_truth_oracle": "assertEquals(ResponseStatus.REPLAYED_OTP, response.getStatus());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testTwoQueries() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        VerificationResponse response = client.verify(otp);\n    }", "original_test_prefix": "    @Test\n    public void testTwoQueries() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        VerificationResponse response = client.verify(otp);\n        assertEquals(ResponseStatus.REPLAYED_OTP, response.getStatus());\n        VerificationResponse response2 = client.verify(otp);\n        assertEquals(ResponseStatus.REPLAYED_OTP, response2.getStatus());\n    }", "test_with_params": false, "test_target": "com.yubico.client.v2.YubicoClientTest#testTwoQueries", "test_setup_list": [{"test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "start_lineno": 66, "end_lineno": 69}]}
{"index": 119, "project_index": 59, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "HostURLFilterTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_name": "testWithinHostOnly", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_prefix": "    @Test\n    public void testWithinHostOnly() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(true, false);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n        <AssertPlaceHolder>;\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.anotherDomain.com/index.html\");\n        Assert.assertNull(filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://sub.sourcedomain.com/index.html\");\n        Assert.assertNull(filterResult);\n    }", "test_prefix_start_lineno": 77, "test_prefix_end_lineno": 92, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/host/HostURLFilter.java", "focal_method": "    @Override\n    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter) {\n        if (sourceUrl == null || (!ignoreOutsideHost && !ignoreOutsideDomain)) {\n            return urlToFilter;\n        }\n\n        URL tURL;\n        try {\n            tURL = new URL(urlToFilter);\n        } catch (MalformedURLException e1) {\n            return null;\n        }\n\n        String fromHost;\n        String fromDomain = null;\n        // Using identity comparison because URL.equals performs poorly\n        if (sourceUrl == previousSourceUrl) {\n            fromHost = previousSourceHost;\n            if (ignoreOutsideDomain) {\n                fromDomain = previousSourceDomain;\n            }\n        } else {\n            fromHost = sourceUrl.getHost();\n            if (ignoreOutsideDomain) {\n                fromDomain = PaidLevelDomain.getPLD(fromHost);\n            }\n            previousSourceHost = fromHost;\n            previousSourceDomain = fromDomain;\n            previousSourceUrl = sourceUrl;\n        }\n\n        // resolve the hosts\n        String toHost = tURL.getHost();\n\n        if (ignoreOutsideHost) {\n            if (toHost == null || !toHost.equalsIgnoreCase(fromHost)) {\n                return null;\n            }\n        }\n\n        if (ignoreOutsideDomain) {\n            String toDomain = PaidLevelDomain.getPLD(toHost);\n            if (toDomain == null || !toDomain.equals(fromDomain)) {\n                return null;\n            }\n        }\n\n        return urlToFilter;\n    }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 117, "ground_truth_oracle": "Assert.assertEquals(\"http://www.sourcedomain.com/index.html\", filterResult);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testWithinHostOnly() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(true, false);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n    }", "original_test_prefix": "    @Test\n    public void testWithinHostOnly() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(true, false);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n        Assert.assertEquals(\"http://www.sourcedomain.com/index.html\", filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.anotherDomain.com/index.html\");\n        Assert.assertNull(filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://sub.sourcedomain.com/index.html\");\n        Assert.assertNull(filterResult);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.HostURLFilterTest#testWithinHostOnly", "test_setup_list": []}
{"index": 120, "project_index": 60, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "SeekHeadFactoryTest", "class_path": "src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest.java", "test_name": "testEdgeCasesWithFakeZ", "test_setup_file_path": "src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest.java", "test_prefix": "    @Test\n    public void testEdgeCasesWithFakeZ() throws Exception {\n        SeekHeadFactory a = new SeekHeadFactory(-1);\n        a.a.add(createFakeZ(Info.id,   0xFF));\n        a.a.add(createFakeZ(Tracks.id, 0xFF05));\n        a.a.add(createFakeZ(Tags.id,   0xFEFFC0));\n        a.a.add(createFakeZ(Cues.id,   0xFF));\n        int computeSize = a.computeSeekHeadSize();\n        System.out.println(\"SeekHeadSize: \"+computeSize);\n        <AssertPlaceHolder>;\n        \n    }", "test_prefix_start_lineno": 187, "test_prefix_end_lineno": 198, "focal_method_file_path": "src/main/java/org/jcodec/containers/mkv/SeekHeadFactory.java", "focal_method": "    int estimateSize() {\n        int s = SeekHead.id.length + 1;\n        s += estimeteSeekSize(a.get(0).id.length, 1);\n        for (int i = 1; i < a.size(); i++) {\n            s += estimeteSeekSize(a.get(i).id.length, a.get(i).seekPointerSize);\n        }\n        return s;\n    }", "focal_method_start_lineno": 111, "focal_method_end_lineno": 118, "ground_truth_oracle": "assertEquals(a.estimateSize(), computeSize);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "    @Test\n    public void testEdgeCasesWithFakeZ() throws Exception {\n        SeekHeadFactory a = new SeekHeadFactory(-1);\n        a.a.add(createFakeZ(Info.id,   0xFF));\n        a.a.add(createFakeZ(Tracks.id, 0xFF05));\n        a.a.add(createFakeZ(Tags.id,   0xFEFFC0));\n        a.a.add(createFakeZ(Cues.id,   0xFF));\n        int computeSize = a.computeSeekHeadSize();\n        System.out.println(\"SeekHeadSize: \"+computeSize);\n    }", "original_test_prefix": "    @Test\n    public void testEdgeCasesWithFakeZ() throws Exception {\n        SeekHeadFactory a = new SeekHeadFactory(-1);\n        a.a.add(createFakeZ(Info.id,   0xFF));\n        a.a.add(createFakeZ(Tracks.id, 0xFF05));\n        a.a.add(createFakeZ(Tags.id,   0xFEFFC0));\n        a.a.add(createFakeZ(Cues.id,   0xFF));\n        int computeSize = a.computeSeekHeadSize();\n        System.out.println(\"SeekHeadSize: \"+computeSize);\n        assertEquals(a.estimateSize(), computeSize);\n        \n    }", "test_with_params": false, "test_target": "org.jcodec.containers.mkv.SeekHeadFactoryTest#testEdgeCasesWithFakeZ", "test_setup_list": []}
{"index": 121, "project_index": 60, "class_index": 0, "test_index": 1, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "SeekHeadFactoryTest", "class_path": "src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest.java", "test_name": "testEstimeteSeekSize", "test_setup_file_path": "src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/containers/mkv/SeekHeadFactoryTest.java", "test_prefix": "    @Test\n    public void testEstimeteSeekSize() throws Exception {\n        <AssertPlaceHolder>;\n        assertEquals(15, estimeteSeekSize(4, 2));\n        assertEquals(16, estimeteSeekSize(4, 3));\n    }", "test_prefix_start_lineno": 168, "test_prefix_end_lineno": 173, "focal_method_file_path": "src/main/java/org/jcodec/containers/mkv/SeekHeadFactory.java", "focal_method": "    public static int estimeteSeekSize(int idLength, int offsetSizeInBytes) {\n        int seekIdSize = SeekID.id.length + EbmlUtil.ebmlLength(idLength) + idLength;\n        int seekPositionSize = SeekPosition.id.length + EbmlUtil.ebmlLength(offsetSizeInBytes) + offsetSizeInBytes;\n        int seekSize = Seek.id.length + EbmlUtil.ebmlLength(seekIdSize + seekPositionSize) + seekIdSize\n                + seekPositionSize;\n        return seekSize;\n    }", "focal_method_start_lineno": 120, "focal_method_end_lineno": 126, "ground_truth_oracle": "assertEquals(14, estimeteSeekSize(4, 1));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testEstimeteSeekSize() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testEstimeteSeekSize() throws Exception {\n        assertEquals(14, estimeteSeekSize(4, 1));\n        assertEquals(15, estimeteSeekSize(4, 2));\n        assertEquals(16, estimeteSeekSize(4, 3));\n    }", "test_with_params": false, "test_target": "org.jcodec.containers.mkv.SeekHeadFactoryTest#testEstimeteSeekSize", "test_setup_list": []}
{"index": 122, "project_index": 60, "class_index": 1, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "SegmentReaderTest", "class_path": "src/test/java/org/jcodec/codecs/mpeg12/SegmentReaderTest.java", "test_name": "testToNextMarkerPartialVar1", "test_setup_file_path": "src/test/java/org/jcodec/codecs/mpeg12/SegmentReaderTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/codecs/mpeg12/SegmentReaderTest.java", "test_prefix": "    @Test\n    public void testToNextMarkerPartialVar1() throws IOException {\n        byte[] bytes = new byte[] { 0, 0, 1, 42, 43, 44, 45, 46, 0, 0, 1, 43 };\n\n        ReadableByteChannel ch = Channels.newChannel(new ByteArrayInputStream(bytes));\n        SegmentReader reader = new SegmentReader(ch, 1);\n        reader.setBufferIncrement(1);\n        ByteBuffer buf1 = reader.readToNextMarkerNewBuffer();\n        ByteBuffer buf2 = reader.readToNextMarkerNewBuffer();\n        ByteBuffer buf3 = reader.readToNextMarkerNewBuffer();\n        <AssertPlaceHolder>;\n        Assert.assertEquals(ByteBuffer.wrap(bytes, 8, 4), buf2);\n        Assert.assertNull(buf3);\n    }", "test_prefix_start_lineno": 102, "test_prefix_end_lineno": 115, "focal_method_file_path": "src/main/java/org/jcodec/codecs/mpeg12/SegmentReader.java", "focal_method": "    public ByteBuffer readToNextMarkerNewBuffer() throws IOException {\n        if (done)\n            return null;\n        List<ByteBuffer> buffers = new ArrayList<ByteBuffer>();\n        readToNextMarkerBuffers(buffers);\n\n        return NIOUtils.combineBuffers(buffers);\n    }", "focal_method_start_lineno": 118, "focal_method_end_lineno": 125, "ground_truth_oracle": "Assert.assertEquals(ByteBuffer.wrap(bytes, 0, 8), buf1);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "    @Test\n    public void testToNextMarkerPartialVar1() throws IOException {\n        byte[] bytes = new byte[] { 0, 0, 1, 42, 43, 44, 45, 46, 0, 0, 1, 43 };\n\n        ReadableByteChannel ch = Channels.newChannel(new ByteArrayInputStream(bytes));\n        SegmentReader reader = new SegmentReader(ch, 1);\n        reader.setBufferIncrement(1);\n        ByteBuffer buf1 = reader.readToNextMarkerNewBuffer();\n        ByteBuffer buf2 = reader.readToNextMarkerNewBuffer();\n        ByteBuffer buf3 = reader.readToNextMarkerNewBuffer();\n    }", "original_test_prefix": "    @Test\n    public void testToNextMarkerPartialVar1() throws IOException {\n        byte[] bytes = new byte[] { 0, 0, 1, 42, 43, 44, 45, 46, 0, 0, 1, 43 };\n\n        ReadableByteChannel ch = Channels.newChannel(new ByteArrayInputStream(bytes));\n        SegmentReader reader = new SegmentReader(ch, 1);\n        reader.setBufferIncrement(1);\n        ByteBuffer buf1 = reader.readToNextMarkerNewBuffer();\n        ByteBuffer buf2 = reader.readToNextMarkerNewBuffer();\n        ByteBuffer buf3 = reader.readToNextMarkerNewBuffer();\n        Assert.assertEquals(ByteBuffer.wrap(bytes, 0, 8), buf1);\n        Assert.assertEquals(ByteBuffer.wrap(bytes, 8, 4), buf2);\n        Assert.assertNull(buf3);\n    }", "test_with_params": false, "test_target": "org.jcodec.codecs.mpeg12.SegmentReaderTest#testToNextMarkerPartialVar1", "test_setup_list": []}
{"index": 123, "project_index": 61, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "DirectorySourceLoaderTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/source/DirectorySourceLoaderTest.java", "test_name": "testMissingSourceFileFromDirectory", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/source/DirectorySourceLoaderTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/source/DirectorySourceLoaderTest.java", "test_prefix": "    @Test\n    public void testMissingSourceFileFromDirectory() throws Exception {\n        DirectorySourceLoader sourceLoader = new DirectorySourceLoader(folder.getRoot(), folder.getRoot(), \"UTF-8\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 55, "test_prefix_end_lineno": 59, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/source/AbstractSourceLoader.java", "focal_method": "    @Override\n    public Source load(final String sourceFile) throws IOException {\n        InputStream stream = locate(sourceFile);\n        if (stream != null) {\n            try (Md5DigestInputStream ds = new Md5DigestInputStream(stream);\n                    InputStreamReader reader = new InputStreamReader(ds, getSourceEncoding())) {\n                String source = IOUtil.toString(reader);\n                return new Source(getFileName(sourceFile), source, ds.getDigestHex());\n            } catch (NoSuchAlgorithmException ex) {\n                throw new IOException(\"MD5 algorithm not available\", ex);\n            }\n        } else {\n            return null;\n        }\n    }", "focal_method_start_lineno": 50, "focal_method_end_lineno": 64, "ground_truth_oracle": "assertNull(sourceLoader.load(\"Foo.java\"));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testMissingSourceFileFromDirectory() throws Exception {\n        DirectorySourceLoader sourceLoader = new DirectorySourceLoader(folder.getRoot(), folder.getRoot(), \"UTF-8\");\n    }", "original_test_prefix": "    @Test\n    public void testMissingSourceFileFromDirectory() throws Exception {\n        DirectorySourceLoader sourceLoader = new DirectorySourceLoader(folder.getRoot(), folder.getRoot(), \"UTF-8\");\n        assertNull(sourceLoader.load(\"Foo.java\"));\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.source.DirectorySourceLoaderTest#testMissingSourceFileFromDirectory", "test_setup_list": []}
{"index": 124, "project_index": 62, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "SimulatorAddressTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java", "test_name": "testGetAddressIndex_fromAgent", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java", "test_prefix": "    @Test\n    public void testGetAddressIndex_fromAgent() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 38, "test_prefix_end_lineno": 41, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java", "focal_method": "    public int getAddressIndex() {\n        switch (addressLevel) {\n            case AGENT:\n                return agentIndex;\n            case WORKER:\n                return workerIndex;\n            default:\n                throw new IllegalArgumentException(\"Coordinator has no addressIndex!\");\n        }\n    }", "focal_method_start_lineno": 108, "focal_method_end_lineno": 117, "ground_truth_oracle": "assertEquals(5, agentAddress(5).getAddressIndex());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetAddressIndex_fromAgent() {\n    }", "original_test_prefix": "    @Test\n    public void testGetAddressIndex_fromAgent() {\n        assertEquals(5, agentAddress(5).getAddressIndex());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.protocol.core.SimulatorAddressTest#testGetAddressIndex_fromAgent", "test_setup_list": []}
{"index": 125, "project_index": 63, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OIOUtilsTest", "class_path": "core/src/test/java/com/orientechnologies/common/io/OIOUtilsTest.java", "test_name": "shoudGetRightTimeFromString", "test_setup_file_path": "core/src/test/java/com/orientechnologies/common/io/OIOUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/common/io/OIOUtilsTest.java", "test_prefix": "  @Test\n  public void shoudGetRightTimeFromString() throws ParseException {\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(Calendar.HOUR_OF_DAY, 5);\n    calendar.set(Calendar.MINUTE, 10);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    Date d = OIOUtils.getTodayWithTime(\"05:10:00\");\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 31, "test_prefix_end_lineno": 40, "focal_method_file_path": "core/src/main/java/com/orientechnologies/common/io/OIOUtils.java", "focal_method": "  public static Date getTodayWithTime(final String iTime) throws ParseException {\n    final SimpleDateFormat df = new SimpleDateFormat(\"HH:mm:ss\");\n    Calendar calParsed = Calendar.getInstance();\n    calParsed.setTime(df.parse(iTime));\n    Calendar cal = Calendar.getInstance();\n    cal.set(Calendar.HOUR_OF_DAY, calParsed.get(Calendar.HOUR_OF_DAY));\n    cal.set(Calendar.MINUTE, calParsed.get(Calendar.MINUTE));\n    cal.set(Calendar.SECOND, calParsed.get(Calendar.SECOND));\n    cal.set(Calendar.MILLISECOND, 0);\n    return cal.getTime();\n  }", "focal_method_start_lineno": 126, "focal_method_end_lineno": 136, "ground_truth_oracle": "assertEquals(calendar.getTime(), d);", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test\n  public void shoudGetRightTimeFromString() throws ParseException {\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(Calendar.HOUR_OF_DAY, 5);\n    calendar.set(Calendar.MINUTE, 10);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    Date d = OIOUtils.getTodayWithTime(\"05:10:00\");\n  }", "original_test_prefix": "  @Test\n  public void shoudGetRightTimeFromString() throws ParseException {\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(Calendar.HOUR_OF_DAY, 5);\n    calendar.set(Calendar.MINUTE, 10);\n    calendar.set(Calendar.SECOND, 0);\n    calendar.set(Calendar.MILLISECOND, 0);\n    Date d = OIOUtils.getTodayWithTime(\"05:10:00\");\n    assertEquals(calendar.getTime(), d);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.common.io.OIOUtilsTest#shoudGetRightTimeFromString", "test_setup_list": []}
{"index": 126, "project_index": 63, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_name": "testSimpleLimit", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 63, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testSimpleLimit() throws Exception {\n    List<ODocument> qResult = db.command(\n        new OCommandSQL(\"match {class:Person, as: person, where: (name = 'n1' or name = 'n2')} return person limit 1\")).execute();\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 263, "test_prefix_end_lineno": 269, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(1, qResult.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testSimpleLimit() throws Exception {\n    List<ODocument> qResult = db.command(\n        new OCommandSQL(\"match {class:Person, as: person, where: (name = 'n1' or name = 'n2')} return person limit 1\")).execute();\n\n  }", "original_test_prefix": "  @Test\n  public void testSimpleLimit() throws Exception {\n    List<ODocument> qResult = db.command(\n        new OCommandSQL(\"match {class:Person, as: person, where: (name = 'n1' or name = 'n2')} return person limit 1\")).execute();\n\n    assertEquals(1, qResult.size());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionTest#testSimpleLimit", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 29, "end_lineno": 63}]}
{"index": 127, "project_index": 63, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "lucene", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "LuceneSortTest", "class_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneSortTest.java", "test_name": "shouldIndexVeryLongDescriptionWithSingleField", "test_setup_file_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneSortTest.java", "test_setup": "@Before\n  public void setUp() throws Exception {\n    OSchema schema = db.getMetadata().getSchema();\n\n    OClass cls = schema.createClass(\"Person\");\n    cls.createProperty(\"name\", OType.STRING);\n    cls.createProperty(\"surname\", OType.STRING);\n    cls.createProperty(\"description\", OType.STRING);\n\n  }", "test_setup_start_lineno": 26, "test_setup_end_lineno": 35, "test_prefix_file_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneSortTest.java", "test_prefix": "  @Test\n  public void shouldIndexVeryLongDescriptionWithSingleField() throws Exception {\n\n    db.save(new ODocument(\"Person\").field(\"description\", DESCRIPTION));\n\n    db.command(new OCommandSQL(\n        \"create index Person.description on Person(description) FULLTEXT ENGINE LUCENE METADATA { \\\"description_index_sorted\\\" : false }\"))\n        .execute();\n\n    long count = db.query(\"SELECT FROM Person WHERE SEARCH_CLASS(\\\"verylong\\\") = true \").stream().count();\n\n    <AssertPlaceHolder>;\n\n  }", "test_prefix_start_lineno": 52, "test_prefix_end_lineno": 65, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  default Stream<OResult> stream() {\n    return StreamSupport.stream(this, false).onClose(() -> this.close());\n  }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 71, "ground_truth_oracle": "Assert.assertEquals(1, count);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void shouldIndexVeryLongDescriptionWithSingleField() throws Exception {\n\n    db.save(new ODocument(\"Person\").field(\"description\", DESCRIPTION));\n\n    db.command(new OCommandSQL(\n        \"create index Person.description on Person(description) FULLTEXT ENGINE LUCENE METADATA { \\\"description_index_sorted\\\" : false }\"))\n        .execute();\n\n    long count = db.query(\"SELECT FROM Person WHERE SEARCH_CLASS(\\\"verylong\\\") = true \").stream().count();\n\n  }", "original_test_prefix": "  @Test\n  public void shouldIndexVeryLongDescriptionWithSingleField() throws Exception {\n\n    db.save(new ODocument(\"Person\").field(\"description\", DESCRIPTION));\n\n    db.command(new OCommandSQL(\n        \"create index Person.description on Person(description) FULLTEXT ENGINE LUCENE METADATA { \\\"description_index_sorted\\\" : false }\"))\n        .execute();\n\n    long count = db.query(\"SELECT FROM Person WHERE SEARCH_CLASS(\\\"verylong\\\") = true \").stream().count();\n\n    Assert.assertEquals(1, count);\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.lucene.test.LuceneSortTest#shouldIndexVeryLongDescriptionWithSingleField", "test_setup_list": [{"test_setup": "@Before\n  public void setUp() throws Exception {\n    OSchema schema = db.getMetadata().getSchema();\n\n    OClass cls = schema.createClass(\"Person\");\n    cls.createProperty(\"name\", OType.STRING);\n    cls.createProperty(\"surname\", OType.STRING);\n    cls.createProperty(\"description\", OType.STRING);\n\n  }", "start_lineno": 26, "end_lineno": 35}]}
{"index": 128, "project_index": 63, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "AlterPropertyTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/AlterPropertyTest.java", "test_name": "testRemoveLinkedClass", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/AlterPropertyTest.java", "test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + AlterPropertyTest.class.getSimpleName());\n    db.create();\n  }", "test_setup_start_lineno": 20, "test_setup_end_lineno": 24, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/AlterPropertyTest.java", "test_prefix": "  @Test\n  public void testRemoveLinkedClass() {\n    OSchema schema = db.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"TestRemoveLinkedClass\");\n    OClass classLinked = schema.createClass(\"LinkedClass\");\n    OProperty prop = classA.createProperty(\"propertyLink\", OType.LINK, classLinked);\n    <AssertPlaceHolder>;\n    prop.setLinkedClass(null);\n    assertNull(prop.getLinkedClass());\n  }", "test_prefix_start_lineno": 88, "test_prefix_end_lineno": 97, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java", "focal_method": "  public OClass getLinkedClass();", "focal_method_start_lineno": 59, "focal_method_end_lineno": 59, "ground_truth_oracle": "assertNotNull(prop.getLinkedClass());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testRemoveLinkedClass() {\n    OSchema schema = db.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"TestRemoveLinkedClass\");\n    OClass classLinked = schema.createClass(\"LinkedClass\");\n    OProperty prop = classA.createProperty(\"propertyLink\", OType.LINK, classLinked);\n  }", "original_test_prefix": "  @Test\n  public void testRemoveLinkedClass() {\n    OSchema schema = db.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"TestRemoveLinkedClass\");\n    OClass classLinked = schema.createClass(\"LinkedClass\");\n    OProperty prop = classA.createProperty(\"propertyLink\", OType.LINK, classLinked);\n    assertNotNull(prop.getLinkedClass());\n    prop.setLinkedClass(null);\n    assertNull(prop.getLinkedClass());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.metadata.schema.AlterPropertyTest#testRemoveLinkedClass", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + AlterPropertyTest.class.getSimpleName());\n    db.create();\n  }", "start_lineno": 20, "end_lineno": 24}]}
{"index": 129, "project_index": 63, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "CompactedLinkSerializerTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/CompactedLinkSerializerTest.java", "test_name": "testSerializeThreeBytesInByteBuffer", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/CompactedLinkSerializerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/CompactedLinkSerializerTest.java", "test_prefix": "  @Test\n  public void testSerializeThreeBytesInByteBuffer() {\n    final OCompactedLinkSerializer linkSerializer = new OCompactedLinkSerializer();\n\n    final ORecordId rid = new ORecordId(123, 65628);\n    final int size = linkSerializer.getObjectSize(rid);\n\n    ByteBuffer buffer = ByteBuffer.allocate(size + 1);\n    buffer.position(1);\n    linkSerializer.serializeInByteBufferObject(rid, buffer);\n\n    buffer.position(1);\n    <AssertPlaceHolder>;\n\n    buffer.position(1);\n    final OIdentifiable restoredRid = linkSerializer.deserializeFromByteBufferObject(buffer);\n    Assert.assertEquals(rid, restoredRid);\n  }", "test_prefix_start_lineno": 140, "test_prefix_end_lineno": 157, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/binary/impl/OCompactedLinkSerializer.java", "focal_method": "  @Override\n  public int getObjectSizeInByteBuffer(ByteBuffer buffer) {\n    return buffer.get(buffer.position() + OShortSerializer.SHORT_SIZE) + OByteSerializer.BYTE_SIZE + OShortSerializer.SHORT_SIZE;\n  }", "focal_method_start_lineno": 176, "focal_method_end_lineno": 179, "ground_truth_oracle": "Assert.assertEquals(size, linkSerializer.getObjectSizeInByteBuffer(buffer));", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testSerializeThreeBytesInByteBuffer() {\n    final OCompactedLinkSerializer linkSerializer = new OCompactedLinkSerializer();\n\n    final ORecordId rid = new ORecordId(123, 65628);\n    final int size = linkSerializer.getObjectSize(rid);\n\n    ByteBuffer buffer = ByteBuffer.allocate(size + 1);\n    buffer.position(1);\n    linkSerializer.serializeInByteBufferObject(rid, buffer);\n\n    buffer.position(1);\n  }", "original_test_prefix": "  @Test\n  public void testSerializeThreeBytesInByteBuffer() {\n    final OCompactedLinkSerializer linkSerializer = new OCompactedLinkSerializer();\n\n    final ORecordId rid = new ORecordId(123, 65628);\n    final int size = linkSerializer.getObjectSize(rid);\n\n    ByteBuffer buffer = ByteBuffer.allocate(size + 1);\n    buffer.position(1);\n    linkSerializer.serializeInByteBufferObject(rid, buffer);\n\n    buffer.position(1);\n    Assert.assertEquals(size, linkSerializer.getObjectSizeInByteBuffer(buffer));\n\n    buffer.position(1);\n    final OIdentifiable restoredRid = linkSerializer.deserializeFromByteBufferObject(buffer);\n    Assert.assertEquals(rid, restoredRid);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.serialization.serializer.binary.impl.CompactedLinkSerializerTest#testSerializeThreeBytesInByteBuffer", "test_setup_list": []}
{"index": 130, "project_index": 63, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLSelectTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_name": "testAggregations", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 180, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_prefix": "  @Test\n  public void testAggregations() {\n    OSQLSynchQuery sql = new OSQLSynchQuery(\n        \"select data.size as collection_content, data.size() as collection_size, min(data.size) as collection_min, max(data.size) as collection_max, sum(data.size) as collection_sum, avg(data.size) as collection_avg from OCommandExecutorSQLSelectTest_aggregations\");\n    List<ODocument> results = db.query(sql);\n    <AssertPlaceHolder>;\n    ODocument doc = results.get(0);\n\n    assertThat(doc.<Integer>field(\"collection_size\")).isEqualTo(5);\n    assertThat(doc.<Integer>field(\"collection_sum\")).isEqualTo(130);\n    assertThat(doc.<Integer>field(\"collection_avg\")).isEqualTo(26);\n    assertThat(doc.<Integer>field(\"collection_min\")).isEqualTo(0);\n    assertThat(doc.<Integer>field(\"collection_max\")).isEqualTo(50);\n\n  }", "test_prefix_start_lineno": 846, "test_prefix_end_lineno": 866, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focal_method": "  @Override\n  public <RET extends List<?>> RET query(OQuery<?> iCommand, Object... iArgs) {\n    checkOpenness();\n    return internal.query(iCommand, iArgs);\n  }", "focal_method_start_lineno": 754, "focal_method_end_lineno": 758, "ground_truth_oracle": "assertEquals(1, results.size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testAggregations() {\n    OSQLSynchQuery sql = new OSQLSynchQuery(\n        \"select data.size as collection_content, data.size() as collection_size, min(data.size) as collection_min, max(data.size) as collection_max, sum(data.size) as collection_sum, avg(data.size) as collection_avg from OCommandExecutorSQLSelectTest_aggregations\");\n    List<ODocument> results = db.query(sql);\n  }", "original_test_prefix": "  @Test\n  public void testAggregations() {\n    OSQLSynchQuery sql = new OSQLSynchQuery(\n        \"select data.size as collection_content, data.size() as collection_size, min(data.size) as collection_min, max(data.size) as collection_max, sum(data.size) as collection_sum, avg(data.size) as collection_avg from OCommandExecutorSQLSelectTest_aggregations\");\n    List<ODocument> results = db.query(sql);\n    assertEquals(1, results.size());\n    ODocument doc = results.get(0);\n\n    assertThat(doc.<Integer>field(\"collection_size\")).isEqualTo(5);\n    assertThat(doc.<Integer>field(\"collection_sum\")).isEqualTo(130);\n    assertThat(doc.<Integer>field(\"collection_avg\")).isEqualTo(26);\n    assertThat(doc.<Integer>field(\"collection_min\")).isEqualTo(0);\n    assertThat(doc.<Integer>field(\"collection_max\")).isEqualTo(50);\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLSelectTest#testAggregations", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "start_lineno": 51, "end_lineno": 180}]}
{"index": 131, "project_index": 64, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "DefaultExtensionTest", "class_path": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java", "test_name": "testGetProvidedExtensionAsClient", "test_setup_file_path": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java", "test_prefix": "  @Test\n  public void testGetProvidedExtensionAsClient() throws Exception {\n    DefaultExtension defaultExtension = new DefaultExtension();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 112, "test_prefix_end_lineno": 116, "focal_method_file_path": "src/main/java/org/java_websocket/extensions/DefaultExtension.java", "focal_method": "  @Override\n  public String getProvidedExtensionAsClient() {\n    return \"\";\n  }", "focal_method_start_lineno": 70, "focal_method_end_lineno": 73, "ground_truth_oracle": "assertEquals(\"\", defaultExtension.getProvidedExtensionAsClient());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testGetProvidedExtensionAsClient() throws Exception {\n    DefaultExtension defaultExtension = new DefaultExtension();\n  }", "original_test_prefix": "  @Test\n  public void testGetProvidedExtensionAsClient() throws Exception {\n    DefaultExtension defaultExtension = new DefaultExtension();\n    assertEquals(\"\", defaultExtension.getProvidedExtensionAsClient());\n  }", "test_with_params": false, "test_target": "org.java_websocket.extensions.DefaultExtensionTest#testGetProvidedExtensionAsClient", "test_setup_list": []}
{"index": 132, "project_index": 64, "class_index": 0, "test_index": 1, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "DefaultExtensionTest", "class_path": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java", "test_name": "testHashCode", "test_setup_file_path": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/extensions/DefaultExtensionTest.java", "test_prefix": "  @Test\n  public void testHashCode() throws Exception {\n    DefaultExtension defaultExtension0 = new DefaultExtension();\n    DefaultExtension defaultExtension1 = new DefaultExtension();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 137, "test_prefix_end_lineno": 142, "focal_method_file_path": "src/main/java/org/java_websocket/extensions/DefaultExtension.java", "focal_method": "  @Override\n  public int hashCode() {\n    return getClass().hashCode();\n  }", "focal_method_start_lineno": 94, "focal_method_end_lineno": 97, "ground_truth_oracle": "assertEquals(defaultExtension0.hashCode(), defaultExtension1.hashCode());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testHashCode() throws Exception {\n    DefaultExtension defaultExtension0 = new DefaultExtension();\n    DefaultExtension defaultExtension1 = new DefaultExtension();\n  }", "original_test_prefix": "  @Test\n  public void testHashCode() throws Exception {\n    DefaultExtension defaultExtension0 = new DefaultExtension();\n    DefaultExtension defaultExtension1 = new DefaultExtension();\n    assertEquals(defaultExtension0.hashCode(), defaultExtension1.hashCode());\n  }", "test_with_params": false, "test_target": "org.java_websocket.extensions.DefaultExtensionTest#testHashCode", "test_setup_list": []}
{"index": 133, "project_index": 65, "class_index": 0, "test_index": 0, "user_name": "fluenda", "repo_name": "ParCEFone", "sub_repos": [], "sub_repo": "", "commit_sha": "5067b3315c1957f930f19549ec4b354e7b8c336d", "build_system": "mvn", "class_name": "CEFParserTest", "class_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_name": "validByteArrayMessageWithoutValidationTest", "test_setup_file_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_prefix": "    @Test\n    public void validByteArrayMessageWithoutValidationTest() throws Exception {\n        String sample1 = \"CEF:0|FireEye|CMS|7.2.1.244420|DM|domain-match|1|rt=Feb 09 2015 00:27:43 UTC cn3Label=cncPort cn3=53 cn2Label=sid cn2=80494706 shost=dev001srv02.example.com proto=udp cs5Label=cncHost cs5=mfdclk001.org dvchost=DEVFEYE1 spt=61395 dvc=10.100.25.16 smac=00:00:0c:07:ac:00 cn1Label=vlan cn1=0 externalId=851777 cs4Label=link cs4=https://DEVCMS01.example.com/event_stream/events_for_bot?ev_id\\\\=851777 dmac=00:1d:a2:af:32:a1 cs1Label=sname cs1=Trojan.Generic.DNS \";\n        CEFParser parser = new CEFParser();\n\n        byte[] sample1Array = sample1.getBytes(Charset.forName(\"UTF-8\"));\n\n        <AssertPlaceHolder>;\n        Assert.assertTrue(parser.parse(sample1Array).getHeader().containsKey(\"deviceVendor\"));\n        Assert.assertEquals(InetAddress.getByName(\"10.100.25.16\"), parser.parse(sample1Array).getExtension(true).get(\"dvc\"));\n        Assert.assertNull(parser.parse(sample1Array).getExtension(true).get(\"act\"));\n    }", "test_prefix_start_lineno": 153, "test_prefix_end_lineno": 165, "focal_method_file_path": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java", "focal_method": "    public CommonEvent parse(byte [] cefByteArray)  {\n        String cefString;\n        cefString = new String(cefByteArray, Charset.forName(\"UTF-8\"));\n        return this.parse(cefString, false);\n    }", "focal_method_start_lineno": 70, "focal_method_end_lineno": 74, "ground_truth_oracle": "Assert.assertNotNull(parser.parse(sample1Array));", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void validByteArrayMessageWithoutValidationTest() throws Exception {\n        String sample1 = \"CEF:0|FireEye|CMS|7.2.1.244420|DM|domain-match|1|rt=Feb 09 2015 00:27:43 UTC cn3Label=cncPort cn3=53 cn2Label=sid cn2=80494706 shost=dev001srv02.example.com proto=udp cs5Label=cncHost cs5=mfdclk001.org dvchost=DEVFEYE1 spt=61395 dvc=10.100.25.16 smac=00:00:0c:07:ac:00 cn1Label=vlan cn1=0 externalId=851777 cs4Label=link cs4=https://DEVCMS01.example.com/event_stream/events_for_bot?ev_id\\\\=851777 dmac=00:1d:a2:af:32:a1 cs1Label=sname cs1=Trojan.Generic.DNS \";\n        CEFParser parser = new CEFParser();\n\n        byte[] sample1Array = sample1.getBytes(Charset.forName(\"UTF-8\"));\n\n    }", "original_test_prefix": "    @Test\n    public void validByteArrayMessageWithoutValidationTest() throws Exception {\n        String sample1 = \"CEF:0|FireEye|CMS|7.2.1.244420|DM|domain-match|1|rt=Feb 09 2015 00:27:43 UTC cn3Label=cncPort cn3=53 cn2Label=sid cn2=80494706 shost=dev001srv02.example.com proto=udp cs5Label=cncHost cs5=mfdclk001.org dvchost=DEVFEYE1 spt=61395 dvc=10.100.25.16 smac=00:00:0c:07:ac:00 cn1Label=vlan cn1=0 externalId=851777 cs4Label=link cs4=https://DEVCMS01.example.com/event_stream/events_for_bot?ev_id\\\\=851777 dmac=00:1d:a2:af:32:a1 cs1Label=sname cs1=Trojan.Generic.DNS \";\n        CEFParser parser = new CEFParser();\n\n        byte[] sample1Array = sample1.getBytes(Charset.forName(\"UTF-8\"));\n\n        Assert.assertNotNull(parser.parse(sample1Array));\n        Assert.assertTrue(parser.parse(sample1Array).getHeader().containsKey(\"deviceVendor\"));\n        Assert.assertEquals(InetAddress.getByName(\"10.100.25.16\"), parser.parse(sample1Array).getExtension(true).get(\"dvc\"));\n        Assert.assertNull(parser.parse(sample1Array).getExtension(true).get(\"act\"));\n    }", "test_with_params": false, "test_target": "com.fluenda.parcefone.parser.CEFParserTest#validByteArrayMessageWithoutValidationTest", "test_setup_list": []}
{"index": 134, "project_index": 65, "class_index": 0, "test_index": 1, "user_name": "fluenda", "repo_name": "ParCEFone", "sub_repos": [], "sub_repo": "", "commit_sha": "5067b3315c1957f930f19549ec4b354e7b8c336d", "build_system": "mvn", "class_name": "CEFParserTest", "class_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_name": "invalidMessageTypesTest", "test_setup_file_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_prefix": "    @Test\n    public void invalidMessageTypesTest() throws Exception {\n        String sample1 = \"CEF:0|security|threatmanager|1.0|100|detected a \\\\\\\\ in packet|10|src=10.0.0.1 rt=Wrong Date Format dst=1.1.1.1\";\n\n        CEFParser parser = new CEFParser();\n\n        CommonEvent event = parser.parse(sample1, true);\n        <AssertPlaceHolder>;\n\n    }", "test_prefix_start_lineno": 307, "test_prefix_end_lineno": 316, "focal_method_file_path": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java", "focal_method": "    public CommonEvent parse(String cefString, final boolean validate)  {\n        return this.parse(cefString, validate, Locale.ENGLISH);\n    }", "focal_method_start_lineno": 134, "focal_method_end_lineno": 136, "ground_truth_oracle": "Assert.assertNull(event);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void invalidMessageTypesTest() throws Exception {\n        String sample1 = \"CEF:0|security|threatmanager|1.0|100|detected a \\\\\\\\ in packet|10|src=10.0.0.1 rt=Wrong Date Format dst=1.1.1.1\";\n\n        CEFParser parser = new CEFParser();\n\n        CommonEvent event = parser.parse(sample1, true);\n    }", "original_test_prefix": "    @Test\n    public void invalidMessageTypesTest() throws Exception {\n        String sample1 = \"CEF:0|security|threatmanager|1.0|100|detected a \\\\\\\\ in packet|10|src=10.0.0.1 rt=Wrong Date Format dst=1.1.1.1\";\n\n        CEFParser parser = new CEFParser();\n\n        CommonEvent event = parser.parse(sample1, true);\n        Assert.assertNull(event);\n\n    }", "test_with_params": false, "test_target": "com.fluenda.parcefone.parser.CEFParserTest#invalidMessageTypesTest", "test_setup_list": []}
{"index": 135, "project_index": 66, "class_index": 0, "test_index": 0, "user_name": "cucumber-ltd", "repo_name": "cucumber-pro-plugin-jvm", "sub_repos": [], "sub_repo": "", "commit_sha": "a09ee0b1682d3cd8b68c240820e647d4515e931f", "build_system": "mvn", "class_name": "SystemLoggerTest", "class_path": "src/test/java/io/cucumber/pro/SystemLoggerTest.java", "test_name": "ignores_log_level_case", "test_setup_file_path": "src/test/java/io/cucumber/pro/SystemLoggerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/cucumber/pro/SystemLoggerTest.java", "test_prefix": "    @Test\n    public void ignores_log_level_case() {\n        Config config = createConfig();\n        config.set(Keys.CUCUMBERPRO_LOGGING, \"deBug\");\n        Logger.SystemLogger logger = new Logger.SystemLogger(config);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 22, "test_prefix_end_lineno": 28, "focal_method_file_path": "src/main/java/io/cucumber/pro/config/Config.java", "focal_method": "    public void set(String key, String value) {\n        setIn(normalize(key), RealValue.fromString(value));\n    }", "focal_method_start_lineno": 37, "focal_method_end_lineno": 39, "ground_truth_oracle": "assertEquals(Logger.Level.DEBUG, logger.level);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void ignores_log_level_case() {\n        Config config = createConfig();\n        config.set(Keys.CUCUMBERPRO_LOGGING, \"deBug\");\n        Logger.SystemLogger logger = new Logger.SystemLogger(config);\n    }", "original_test_prefix": "    @Test\n    public void ignores_log_level_case() {\n        Config config = createConfig();\n        config.set(Keys.CUCUMBERPRO_LOGGING, \"deBug\");\n        Logger.SystemLogger logger = new Logger.SystemLogger(config);\n        assertEquals(Logger.Level.DEBUG, logger.level);\n    }", "test_with_params": false, "test_target": "io.cucumber.pro.SystemLoggerTest#ignores_log_level_case", "test_setup_list": []}
{"index": 136, "project_index": 66, "class_index": 0, "test_index": 1, "user_name": "cucumber-ltd", "repo_name": "cucumber-pro-plugin-jvm", "sub_repos": [], "sub_repo": "", "commit_sha": "a09ee0b1682d3cd8b68c240820e647d4515e931f", "build_system": "mvn", "class_name": "SystemLoggerTest", "class_path": "src/test/java/io/cucumber/pro/SystemLoggerTest.java", "test_name": "is_info_level_by_default", "test_setup_file_path": "src/test/java/io/cucumber/pro/SystemLoggerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/cucumber/pro/SystemLoggerTest.java", "test_prefix": "    @Test\n    public void is_info_level_by_default() {\n        Config config = createConfig();\n        Logger.SystemLogger logger = new Logger.SystemLogger(config);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 15, "test_prefix_end_lineno": 20, "focal_method_file_path": "src/main/java/io/cucumber/pro/Keys.java", "focal_method": "    public static Config createConfig() {\n        Config config = new Config();\n        config.set(CUCUMBERPRO_CONNECTION_TIMEOUT, 5000);\n        config.set(CUCUMBERPRO_ENVMASK, \"SECRET|KEY|TOKEN|PASSWORD\");\n        config.setNull(CUCUMBERPRO_LOGFILE);\n        config.set(CUCUMBERPRO_LOGGING, \"INFO\");\n        config.setNull(CUCUMBERPRO_PROFILE);\n        config.setNull(CUCUMBERPRO_PROJECTNAME);\n        config.setNull(CUCUMBERPRO_TOKEN);\n        config.set(CUCUMBERPRO_URL, \"https://jam.cucumber.io/\");\n\n        return config;\n    }", "focal_method_start_lineno": 15, "focal_method_end_lineno": 27, "ground_truth_oracle": "assertEquals(Logger.Level.INFO, logger.level);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void is_info_level_by_default() {\n        Config config = createConfig();\n        Logger.SystemLogger logger = new Logger.SystemLogger(config);\n    }", "original_test_prefix": "    @Test\n    public void is_info_level_by_default() {\n        Config config = createConfig();\n        Logger.SystemLogger logger = new Logger.SystemLogger(config);\n        assertEquals(Logger.Level.INFO, logger.level);\n    }", "test_with_params": false, "test_target": "io.cucumber.pro.SystemLoggerTest#is_info_level_by_default", "test_setup_list": []}
{"index": 137, "project_index": 67, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "VerbsTest", "class_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_name": "testAnswered", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_prefix": "    @Test\n    public void testAnswered() {\n        Verb actual = Verbs.answered();\n        <AssertPlaceHolder>;\n        assertEquals(\"answered\", actual.toString());\n    }", "test_prefix_start_lineno": 13, "test_prefix_end_lineno": 18, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focal_method": "    public static Verb answered(){\n        return createVerb(\"answered\");\n    }    ", "focal_method_start_lineno": 16, "focal_method_end_lineno": 18, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testAnswered() {\n        Verb actual = Verbs.answered();\n    }", "original_test_prefix": "    @Test\n    public void testAnswered() {\n        Verb actual = Verbs.answered();\n        assertNotNull(actual);\n        assertEquals(\"answered\", actual.toString());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.VerbsTest#testAnswered", "test_setup_list": []}
{"index": 138, "project_index": 67, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "StatementResultTest", "class_path": "src/test/java/gov/adlnet/xapi/StatementResultTest.java", "test_name": "testSetStatements", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/StatementResultTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        statementResult = new StatementResult();\n        statements = new ArrayList<Statement>();\n        Statement e = new Statement();\n        statements.add(e );\n        statementResult.setStatements(statements);\n        statementResult.setMore(MORE);\n    }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 29, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/StatementResultTest.java", "test_prefix": "    @Test\n    public void testSetStatements() {\n        ArrayList<Statement> expected = statements;\n        Statement s = new Statement();\n        expected.add(s);\n        statementResult.setStatements(expected);        \n        ArrayList<Statement> actual = statementResult.getStatements();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 46, "test_prefix_end_lineno": 55, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/StatementResult.java", "focal_method": "    public ArrayList<Statement> getStatements() {\n        return statements;\n    }", "focal_method_start_lineno": 9, "focal_method_end_lineno": 11, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testSetStatements() {\n        ArrayList<Statement> expected = statements;\n        Statement s = new Statement();\n        expected.add(s);\n        statementResult.setStatements(expected);        \n        ArrayList<Statement> actual = statementResult.getStatements();\n    }", "original_test_prefix": "    @Test\n    public void testSetStatements() {\n        ArrayList<Statement> expected = statements;\n        Statement s = new Statement();\n        expected.add(s);\n        statementResult.setStatements(expected);        \n        ArrayList<Statement> actual = statementResult.getStatements();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.StatementResultTest#testSetStatements", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        statementResult = new StatementResult();\n        statements = new ArrayList<Statement>();\n        Statement e = new Statement();\n        statements.add(e );\n        statementResult.setStatements(statements);\n        statementResult.setMore(MORE);\n    }", "start_lineno": 21, "end_lineno": 29}]}
{"index": 139, "project_index": 68, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "PlatformTest", "class_path": "src/test/java/org/jcodec/platform/PlatformTest.java", "test_name": "testInvokeStatic2", "test_setup_file_path": "src/test/java/org/jcodec/platform/PlatformTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/platform/PlatformTest.java", "test_prefix": "    @Test\n    public void testInvokeStatic2() {\n        int parseBuf = Platform.invokeStaticMethod(PlatformTest.class, \"parseBuf\", new Object[]{ByteBuffer.wrap(\"42\".getBytes())});\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 43, "test_prefix_end_lineno": 47, "focal_method_file_path": "src/main/java/org/jcodec/platform/Platform.java", "focal_method": "    public static <T> T invokeStaticMethod(Class<?> cls, String methodName, Object[] params) {\n        try {\n            for (Method method : cls.getDeclaredMethods()) {\n                if (method.getName().equals(methodName)) {\n                    return (T) method.invoke(null, params);\n                }\n            }\n            throw new NoSuchMethodException(cls + \".\" + methodName);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "focal_method_start_lineno": 163, "focal_method_end_lineno": 174, "ground_truth_oracle": "assertEquals(42, parseBuf);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testInvokeStatic2() {\n        int parseBuf = Platform.invokeStaticMethod(PlatformTest.class, \"parseBuf\", new Object[]{ByteBuffer.wrap(\"42\".getBytes())});\n    }", "original_test_prefix": "    @Test\n    public void testInvokeStatic2() {\n        int parseBuf = Platform.invokeStaticMethod(PlatformTest.class, \"parseBuf\", new Object[]{ByteBuffer.wrap(\"42\".getBytes())});\n        assertEquals(42, parseBuf);\n    }", "test_with_params": false, "test_target": "org.jcodec.platform.PlatformTest#testInvokeStatic2", "test_setup_list": []}
{"index": 140, "project_index": 69, "class_index": 0, "test_index": 0, "user_name": "Yubico", "repo_name": "yubico-java-client", "sub_repos": ["v2client", "jaas", "demo-server"], "sub_repo": "v2client", "commit_sha": "e21fb672e290a118f7420daaf81ccb96d319d52c", "build_system": "mvn", "class_name": "YubicoClientTest", "class_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_name": "testSignature", "test_setup_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 69, "test_prefix_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_prefix": "    @Test\n    public void testSignature() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        client.setKey(this.apiKey);\n        VerificationResponse response = client.verify(otp);\n        <AssertPlaceHolder>;\n        assertEquals(otp, response.getOtp());\n        assertEquals(ResponseStatus.REPLAYED_OTP, response.getStatus());\n    }", "test_prefix_start_lineno": 93, "test_prefix_end_lineno": 101, "focal_method_file_path": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focal_method": "    public abstract VerificationResponse verify(String otp) throws YubicoVerificationException, YubicoValidationFailure;", "focal_method_start_lineno": 70, "focal_method_end_lineno": 70, "ground_truth_oracle": "assertNotNull(response);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testSignature() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        client.setKey(this.apiKey);\n        VerificationResponse response = client.verify(otp);\n    }", "original_test_prefix": "    @Test\n    public void testSignature() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        client.setKey(this.apiKey);\n        VerificationResponse response = client.verify(otp);\n        assertNotNull(response);\n        assertEquals(otp, response.getOtp());\n        assertEquals(ResponseStatus.REPLAYED_OTP, response.getStatus());\n    }", "test_with_params": false, "test_target": "com.yubico.client.v2.YubicoClientTest#testSignature", "test_setup_list": [{"test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "start_lineno": 66, "end_lineno": 69}]}
{"index": 141, "project_index": 70, "class_index": 0, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "nanolets", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "TestNanolets", "class_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_name": "uriToString", "test_setup_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 96, "test_prefix_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_prefix": "    @Test\n    public void uriToString() throws Exception {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 293, "test_prefix_end_lineno": 298, "focal_method_file_path": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java", "focal_method": "        @Override\n        public String toString() {\n            return new StringBuilder(\"UrlResource{uri='\").append((uri == null ? \"/\" : uri))//\n                    .append(\"', urlParts=\").append(uriParams)//\n                    .append('}')//\n                    .toString();\n        }", "focal_method_start_lineno": 411, "focal_method_end_lineno": 417, "ground_truth_oracle": "Assert.assertEquals( \"UrlResource{uri='photos/:customer_id/:photo_id', urlParts=[customer_id, photo_id]}\", new UriResource(\"/photos/:customer_id/:photo_id\", 100, GeneralHandler.class).toString());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void uriToString() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void uriToString() throws Exception {\n        Assert.assertEquals( \"UrlResource{uri='photos/:customer_id/:photo_id', urlParts=[customer_id, photo_id]}\", new UriResource(\"/photos/:customer_id/:photo_id\", 100, GeneralHandler.class).toString());\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.router.TestNanolets#uriToString", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "start_lineno": 81, "end_lineno": 96}]}
{"index": 142, "project_index": 71, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "external/warc", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "WARCRecordFormatTest", "class_path": "external/warc/src/test/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormatTest.java", "test_name": "testGetDigestSha1RobotsTxt", "test_setup_file_path": "external/warc/src/test/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormatTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "external/warc/src/test/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormatTest.java", "test_prefix": "    @Test\n    public void testGetDigestSha1RobotsTxt() {\n\n        String robotsTxt = \"User-agent: *\\r\\nDisallow:\";\n        byte[] content = robotsTxt.getBytes(StandardCharsets.UTF_8);\n        String sha1str = \"sha1:DHBVNHAJABWFHIYUHNCKYYIB3OBPFX3Y\";\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 42, "test_prefix_end_lineno": 49, "focal_method_file_path": "external/warc/src/main/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormat.java", "focal_method": "    public static String getDigestSha1(byte[] bytes) {\n        return \"sha1:\" + base32.encodeAsString(DigestUtils.sha1(bytes));\n    }", "focal_method_start_lineno": 77, "focal_method_end_lineno": 79, "ground_truth_oracle": "assertEquals(\"Wrong sha1 digest\", sha1str, WARCRecordFormat.getDigestSha1(content));", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testGetDigestSha1RobotsTxt() {\n\n        String robotsTxt = \"User-agent: *\\r\\nDisallow:\";\n        byte[] content = robotsTxt.getBytes(StandardCharsets.UTF_8);\n        String sha1str = \"sha1:DHBVNHAJABWFHIYUHNCKYYIB3OBPFX3Y\";\n    }", "original_test_prefix": "    @Test\n    public void testGetDigestSha1RobotsTxt() {\n\n        String robotsTxt = \"User-agent: *\\r\\nDisallow:\";\n        byte[] content = robotsTxt.getBytes(StandardCharsets.UTF_8);\n        String sha1str = \"sha1:DHBVNHAJABWFHIYUHNCKYYIB3OBPFX3Y\";\n        assertEquals(\"Wrong sha1 digest\", sha1str, WARCRecordFormat.getDigestSha1(content));\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.warc.WARCRecordFormatTest#testGetDigestSha1RobotsTxt", "test_setup_list": []}
{"index": 143, "project_index": 71, "class_index": 1, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "BasicURLNormalizerTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_name": "testInvalidURI", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_prefix": "    @Test\n    public void testInvalidURI() throws MalformedURLException {\n        URLFilter urlFilter = createFilter(true, true);\n\n        String nonURI = \"http://www.quanjing.com/search.aspx?q=top-651451||1|60|1|2||||&Fr=4\";\n        URL testSourceUrl = new URL(nonURI);\n        String expectedResult =\n                \"http://www.quanjing.com/search.aspx?q=top-651451%7C%7C1%7C60%7C1%7C2%7C%7C%7C%7C&Fr=4\";\n        String normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), nonURI);\n        <AssertPlaceHolder>;\n\n        nonURI =\n                \"http://vins.lemonde.fr?utm_source=LeMonde_partenaire_hp&utm_medium=EMPLACEMENT PARTENAIRE&utm_term=&utm_content=&utm_campaign=LeMonde_partenaire_hp\";\n        testSourceUrl = new URL(nonURI);\n        expectedResult =\n                \"http://vins.lemonde.fr?utm_source=LeMonde_partenaire_hp&utm_medium=EMPLACEMENT%20PARTENAIRE&utm_term=&utm_content=&utm_campaign=LeMonde_partenaire_hp\";\n        normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), nonURI);\n        assertEquals(\"Failed to filter query string\", expectedResult, normalizedUrl);\n\n        String nonNormURL =\n                \"http://docs.oracle.com/javase/7/docs/api/java/net/../net/./URI.html#normalize()\";\n        testSourceUrl = new URL(nonNormURL);\n        expectedResult = \"http://docs.oracle.com/javase/7/docs/api/java/net/URI.html\";\n        normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), nonNormURL);\n        assertEquals(\"Failed to filter query string\", expectedResult, normalizedUrl);\n    }", "test_prefix_start_lineno": 235, "test_prefix_end_lineno": 263, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focal_method": "    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter);", "focal_method_start_lineno": 35, "focal_method_end_lineno": 35, "ground_truth_oracle": "assertEquals(\"Failed to filter query string\", expectedResult, normalizedUrl);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testInvalidURI() throws MalformedURLException {\n        URLFilter urlFilter = createFilter(true, true);\n\n        String nonURI = \"http://www.quanjing.com/search.aspx?q=top-651451||1|60|1|2||||&Fr=4\";\n        URL testSourceUrl = new URL(nonURI);\n        String expectedResult =\n                \"http://www.quanjing.com/search.aspx?q=top-651451%7C%7C1%7C60%7C1%7C2%7C%7C%7C%7C&Fr=4\";\n        String normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), nonURI);\n    }", "original_test_prefix": "    @Test\n    public void testInvalidURI() throws MalformedURLException {\n        URLFilter urlFilter = createFilter(true, true);\n\n        String nonURI = \"http://www.quanjing.com/search.aspx?q=top-651451||1|60|1|2||||&Fr=4\";\n        URL testSourceUrl = new URL(nonURI);\n        String expectedResult =\n                \"http://www.quanjing.com/search.aspx?q=top-651451%7C%7C1%7C60%7C1%7C2%7C%7C%7C%7C&Fr=4\";\n        String normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), nonURI);\n        assertEquals(\"Failed to filter query string\", expectedResult, normalizedUrl);\n\n        nonURI =\n                \"http://vins.lemonde.fr?utm_source=LeMonde_partenaire_hp&utm_medium=EMPLACEMENT PARTENAIRE&utm_term=&utm_content=&utm_campaign=LeMonde_partenaire_hp\";\n        testSourceUrl = new URL(nonURI);\n        expectedResult =\n                \"http://vins.lemonde.fr?utm_source=LeMonde_partenaire_hp&utm_medium=EMPLACEMENT%20PARTENAIRE&utm_term=&utm_content=&utm_campaign=LeMonde_partenaire_hp\";\n        normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), nonURI);\n        assertEquals(\"Failed to filter query string\", expectedResult, normalizedUrl);\n\n        String nonNormURL =\n                \"http://docs.oracle.com/javase/7/docs/api/java/net/../net/./URI.html#normalize()\";\n        testSourceUrl = new URL(nonNormURL);\n        expectedResult = \"http://docs.oracle.com/javase/7/docs/api/java/net/URI.html\";\n        normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), nonNormURL);\n        assertEquals(\"Failed to filter query string\", expectedResult, normalizedUrl);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.BasicURLNormalizerTest#testInvalidURI", "test_setup_list": []}
{"index": 144, "project_index": 72, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "CircleTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java", "test_name": "testGetName", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java", "test_prefix": "    @Test\n    public void testGetName() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 60, "test_prefix_end_lineno": 63, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/Circle.java", "focal_method": "    @Override\n    public String getName() {\n        return CIRCLE_NAME;\n    }", "focal_method_start_lineno": 54, "focal_method_end_lineno": 57, "ground_truth_oracle": "assertEquals(\"circleci\", new Circle(env()).getName());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetName() {\n    }", "original_test_prefix": "    @Test\n    public void testGetName() {\n        assertEquals(\"circleci\", new Circle(env()).getName());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.CircleTest#testGetName", "test_setup_list": []}
{"index": 145, "project_index": 73, "class_index": 0, "test_index": 0, "user_name": "basis-technology-corp", "repo_name": "tcl-regex-java", "sub_repos": [], "sub_repo": "", "commit_sha": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62", "build_system": "mvn", "class_name": "MatcherTest", "class_path": "src/test/java/apitests/MatcherTest.java", "test_name": "reset", "test_setup_file_path": "src/test/java/apitests/MatcherTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/apitests/MatcherTest.java", "test_prefix": "    @Test\n    public void reset() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"a\");\n        ReMatcher matcher = pattern.matcher(\"a\");\n        <AssertPlaceHolder>;\n        ReMatcher reset = matcher.reset(\"b\");\n        assertSame(reset, matcher);\n        assertFalse(matcher.find());\n\n        matcher = pattern.matcher(\"1234a\");\n        matcher.region(3, 5);\n        assertTrue(matcher.find());\n        assertEquals(4, matcher.start());\n\n        matcher.reset(\"a23\");\n        assertTrue(matcher.find());\n        assertEquals(0, matcher.start());\n    }", "test_prefix_start_lineno": 48, "test_prefix_end_lineno": 65, "focal_method_file_path": "src/main/java/com/basistech/tclre/ReMatcher.java", "focal_method": "    boolean find();", "focal_method_start_lineno": 61, "focal_method_end_lineno": 61, "ground_truth_oracle": "assertTrue(matcher.find());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void reset() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"a\");\n        ReMatcher matcher = pattern.matcher(\"a\");\n    }", "original_test_prefix": "    @Test\n    public void reset() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"a\");\n        ReMatcher matcher = pattern.matcher(\"a\");\n        assertTrue(matcher.find());\n        ReMatcher reset = matcher.reset(\"b\");\n        assertSame(reset, matcher);\n        assertFalse(matcher.find());\n\n        matcher = pattern.matcher(\"1234a\");\n        matcher.region(3, 5);\n        assertTrue(matcher.find());\n        assertEquals(4, matcher.start());\n\n        matcher.reset(\"a23\");\n        assertTrue(matcher.find());\n        assertEquals(0, matcher.start());\n    }", "test_with_params": false, "test_target": "apitests.MatcherTest#reset", "test_setup_list": []}
{"index": 146, "project_index": 74, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "PropertyBindingSupport_bind0_NumericalTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "test_name": "bind_Double", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "test_prefix": "    @Test\n    public void bind_Double() {\n        <AssertPlaceHolder>;\n        assertNull(testObject.doubleObjectField);\n\n        assertTrue(bind0(testObject, \"doubleObjectField\", \"23420000000000.2342\"));\n        assertEquals(new Double(23420000000000.2342d), testObject.doubleObjectField);\n    }", "test_prefix_start_lineno": 176, "test_prefix_end_lineno": 183, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java", "focal_method": "    static boolean bind0(Object object, String property, String value) {\n        value = value.trim();\n\n        String[] path = property.split(\"\\\\.\");\n\n        object = findTargetObject(object, property, path);\n        if (object == null) {\n            return false;\n        }\n\n        Field field = findField(object.getClass(), path[path.length - 1]);\n        if (field == null || isProbeField(field)) {\n            return false;\n        }\n\n        try {\n            setField(field, object, value);\n            return true;\n        } catch (Exception e) {\n            throw new BindException(format(\"Failed to bind value [%s] to property [%s.%s] of type [%s]\",\n                    value, object.getClass().getName(), property, field.getType()), e);\n        }\n    }", "focal_method_start_lineno": 100, "focal_method_end_lineno": 122, "ground_truth_oracle": "assertTrue(bind0(testObject, \"doubleObjectField\", \"null\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void bind_Double() {\n    }", "original_test_prefix": "    @Test\n    public void bind_Double() {\n        assertTrue(bind0(testObject, \"doubleObjectField\", \"null\"));\n        assertNull(testObject.doubleObjectField);\n\n        assertTrue(bind0(testObject, \"doubleObjectField\", \"23420000000000.2342\"));\n        assertEquals(new Double(23420000000000.2342d), testObject.doubleObjectField);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.PropertyBindingSupport_bind0_NumericalTest#bind_Double", "test_setup_list": []}
{"index": 147, "project_index": 75, "class_index": 0, "test_index": 0, "user_name": "myabc", "repo_name": "markdownj", "sub_repos": ["core"], "sub_repo": "core", "commit_sha": "f8ed00caeb69fc602aa2209812d953c26c2a4263", "build_system": "mvn", "class_name": "MarkupFileTester", "class_path": "core/src/test/java/org/markdownj/test/MarkupFileTester.java", "test_name": "runTest", "test_setup_file_path": "core/src/test/java/org/markdownj/test/MarkupFileTester.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/org/markdownj/test/MarkupFileTester.java", "test_prefix": "    @Test\n    public void runTest() {\n        MarkdownProcessor markup = new MarkdownProcessor();\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 162, "test_prefix_end_lineno": 166, "focal_method_file_path": "core/src/main/java/org/markdownj/MarkdownProcessor.java", "focal_method": "    public String markdown(String txt) {\n        if (txt == null) {\n            txt = \"\";\n        }\n        TextEditor text = new TextEditor(txt);\n\n        // Standardize line endings:\n        text.replaceAll(\"\\\\r\\\\n\", \"\\n\");     // DOS to Unix\n        text.replaceAll(\"\\\\r\", \"\\n\");        // Mac to Unix\n        text.replaceAll(\"^[ \\\\t]+$\", \"\");\n\n        // Make sure $text ends with a couple of newlines:\n        text.append(\"\\n\\n\");\n\n        text.detabify();\n        text.deleteAll(\"^[ ]+$\");\n        hashHTMLBlocks(text);\n        stripLinkDefinitions(text);\n        text = runBlockGamut(text);\n        unEscapeSpecialChars(text);\n\n        text.append(\"\\n\");\n        return text.toString();\n    }", "focal_method_start_lineno": 75, "focal_method_end_lineno": 98, "ground_truth_oracle": "assertEquals(pair.toString(), pair.getResult().trim(), markup.markdown(pair.getTest()).trim());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void runTest() {\n        MarkdownProcessor markup = new MarkdownProcessor();\n    }", "original_test_prefix": "    @Test\n    public void runTest() {\n        MarkdownProcessor markup = new MarkdownProcessor();\n        assertEquals(pair.toString(), pair.getResult().trim(), markup.markdown(pair.getTest()).trim());\n    }", "test_with_params": false, "test_target": "org.markdownj.test.MarkupFileTester", "test_setup_list": []}
{"index": 148, "project_index": 76, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "ShapeTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ShapeTest.java", "test_name": "polygon", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ShapeTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ShapeTest.java", "test_prefix": "    @Test\n    void polygon() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 36, "test_prefix_end_lineno": 40, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java", "focal_method": "    default Attributes<? super F> applyTo(Attributes<? super F> attrs) {\n        if (!(attrs instanceof MapAttributes)) {\n            throw new UnsupportedOperationException(\"attributes must be a MapAttributes\");\n        }\n        @SuppressWarnings(\"unchecked\") final MapAttributes<? super F> as = (MapAttributes<? super F>) attrs;\n        return applyTo(as);\n    }", "focal_method_start_lineno": 49, "focal_method_end_lineno": 55, "ground_truth_oracle": "assertEquals(attrs(attr(\"sides\", 4), attr(\"shape\", \"polygon\"), attr(\"skew\", 2.5), attr(\"distortion\", .66)), Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void polygon() {\n    }", "original_test_prefix": "    @Test\n    void polygon() {\n        assertEquals(attrs(attr(\"sides\", 4), attr(\"shape\", \"polygon\"), attr(\"skew\", 2.5), attr(\"distortion\", .66)), Shape.polygon(4).skew(2.5).distortion(.66).applyTo(attrs()));\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.ShapeTest#polygon", "test_setup_list": []}
{"index": 149, "project_index": 77, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "FizzBuzzTDDTest", "class_path": "src/test/java/org/teachingkidsprogramming/recipes/completed/FizzBuzzTDDTest.java", "test_name": "test1Returns1", "test_setup_file_path": "src/test/java/org/teachingkidsprogramming/recipes/completed/FizzBuzzTDDTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingkidsprogramming/recipes/completed/FizzBuzzTDDTest.java", "test_prefix": "  @Test\n  public void test1Returns1()\n  {\n    String result = FizzBuzzTDD.convert(1);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 10, "test_prefix_end_lineno": 15, "focal_method_file_path": "src/main/java/org/teachingkidsprogramming/recipes/completed/section09final/FizzBuzzTDD.java", "focal_method": "  public static String convert(int i)\n  {\n    if (0 == i % 15) { return \"FizzBuzz\"; }\n    if (0 == i % 5) { return \"Buzz\"; }\n    if (0 == i % 3) { return \"Fizz\"; }\n    return \"\" + i;\n  }", "focal_method_start_lineno": 9, "focal_method_end_lineno": 15, "ground_truth_oracle": "assertEquals(\"1\", result);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void test1Returns1()\n  {\n    String result = FizzBuzzTDD.convert(1);\n  }", "original_test_prefix": "  @Test\n  public void test1Returns1()\n  {\n    String result = FizzBuzzTDD.convert(1);\n    assertEquals(\"1\", result);\n  }", "test_with_params": false, "test_target": "org.teachingkidsprogramming.recipes.completed.FizzBuzzTDDTest#test1Returns1", "test_setup_list": []}
{"index": 150, "project_index": 78, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLSelectTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_name": "testProjection", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 180, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_prefix": "  @Test\n  public void testProjection() {\n    long idxUsagesBefore = indexUsages(db);\n\n    List<ODocument> qResult = db.command(new OCommandSQL(\"select a from foo where name = 'a' or bar = 1\")).execute();\n\n    <AssertPlaceHolder>;\n    assertEquals(indexUsages(db), idxUsagesBefore + 2);\n  }", "test_prefix_start_lineno": 368, "test_prefix_end_lineno": 376, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(qResult.size(), 1);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testProjection() {\n    long idxUsagesBefore = indexUsages(db);\n\n    List<ODocument> qResult = db.command(new OCommandSQL(\"select a from foo where name = 'a' or bar = 1\")).execute();\n\n  }", "original_test_prefix": "  @Test\n  public void testProjection() {\n    long idxUsagesBefore = indexUsages(db);\n\n    List<ODocument> qResult = db.command(new OCommandSQL(\"select a from foo where name = 'a' or bar = 1\")).execute();\n\n    assertEquals(qResult.size(), 1);\n    assertEquals(indexUsages(db), idxUsagesBefore + 2);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLSelectTest#testProjection", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "start_lineno": 51, "end_lineno": 180}]}
{"index": 151, "project_index": 78, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ORecordBytesTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ORecordBytesTest.java", "test_name": "testReadFromInputStreamWithWaitSizeTooBigLimit", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ORecordBytesTest.java", "test_setup": "@Before\n  public void setUp() throws Exception {\n    inputStream = new ByteArrayInputStream(new byte[] { 1, 2, 3, 4, 5 });\n    emptyStream = new ByteArrayInputStream(new byte[] {});\n    testedInstance = new ORecordBytes();\n  }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 71, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ORecordBytesTest.java", "test_prefix": "  @Test\n  public void testReadFromInputStreamWithWaitSizeTooBigLimit() throws Exception {\n    final byte[] data = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n    final InputStream is = new NotFullyAvailableAtTheTimeInputStream(data, 5);\n\n    final int result = testedInstance.fromInputStream(is, 15);\n    <AssertPlaceHolder>;\n    Assert.assertEquals((Integer) getFieldValue(testedInstance, \"_size\"), Integer.valueOf(data.length));\n\n    final byte[] source = (byte[]) getFieldValue(testedInstance, \"_source\");\n    assertArrayEquals(source, data);\n  }", "test_prefix_start_lineno": 140, "test_prefix_end_lineno": 151, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/OBlob.java", "focal_method": "  int fromInputStream(final InputStream in, final int maxSize) throws IOException;", "focal_method_start_lineno": 17, "focal_method_end_lineno": 17, "ground_truth_oracle": "Assert.assertEquals(result, data.length);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void testReadFromInputStreamWithWaitSizeTooBigLimit() throws Exception {\n    final byte[] data = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n    final InputStream is = new NotFullyAvailableAtTheTimeInputStream(data, 5);\n\n    final int result = testedInstance.fromInputStream(is, 15);\n  }", "original_test_prefix": "  @Test\n  public void testReadFromInputStreamWithWaitSizeTooBigLimit() throws Exception {\n    final byte[] data = new byte[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n    final InputStream is = new NotFullyAvailableAtTheTimeInputStream(data, 5);\n\n    final int result = testedInstance.fromInputStream(is, 15);\n    Assert.assertEquals(result, data.length);\n    Assert.assertEquals((Integer) getFieldValue(testedInstance, \"_size\"), Integer.valueOf(data.length));\n\n    final byte[] source = (byte[]) getFieldValue(testedInstance, \"_source\");\n    assertArrayEquals(source, data);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.record.impl.ORecordBytesTest#testReadFromInputStreamWithWaitSizeTooBigLimit", "test_setup_list": [{"test_setup": "@Before\n  public void setUp() throws Exception {\n    inputStream = new ByteArrayInputStream(new byte[] { 1, 2, 3, 4, 5 });\n    emptyStream = new ByteArrayInputStream(new byte[] {});\n    testedInstance = new ORecordBytes();\n  }", "start_lineno": 66, "end_lineno": 71}]}
{"index": 152, "project_index": 78, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "CASObjectArrayTest", "class_path": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java", "test_name": "testSetTwoItems", "test_setup_file_path": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java", "test_prefix": "  @Test\n  public void testSetTwoItems() {\n    final CASObjectArray<Integer> array = new CASObjectArray<>();\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(1, array.add(2));\n\n    array.set(0, 21, -1);\n    array.set(1, 22, -1);\n\n    Assert.assertEquals(21, array.get(0).intValue());\n    Assert.assertEquals(22, array.get(1).intValue());\n  }", "test_prefix_start_lineno": 75, "test_prefix_end_lineno": 87, "focal_method_file_path": "core/src/main/java/com/orientechnologies/common/concur/collection/CASObjectArray.java", "focal_method": "  public int add(T value) {\n    Objects.requireNonNull(value);\n\n    while (true) {\n      final int newIndex = size.get();\n      final int containerIndex = 31 - Integer.numberOfLeadingZeros(newIndex + 1);\n      final int containerSize = 1 << containerIndex;\n      final int indexInsideContainer = newIndex + 1 - containerSize;\n\n      AtomicReferenceArray<T> container = containers.get(containerIndex);\n      if (container == null) {\n        container = new AtomicReferenceArray<>(containerSize);\n        if (!containers.compareAndSet(containerIndex, null, container)) {\n          container = containers.get(containerIndex);\n        }\n      }\n\n      if (container.compareAndSet(indexInsideContainer, null, value)) {\n        size.incrementAndGet();\n        return newIndex;\n      }\n    }\n\n  }", "focal_method_start_lineno": 11, "focal_method_end_lineno": 34, "ground_truth_oracle": "Assert.assertEquals(0, array.add(1));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testSetTwoItems() {\n    final CASObjectArray<Integer> array = new CASObjectArray<>();\n\n  }", "original_test_prefix": "  @Test\n  public void testSetTwoItems() {\n    final CASObjectArray<Integer> array = new CASObjectArray<>();\n\n    Assert.assertEquals(0, array.add(1));\n    Assert.assertEquals(1, array.add(2));\n\n    array.set(0, 21, -1);\n    array.set(1, 22, -1);\n\n    Assert.assertEquals(21, array.get(0).intValue());\n    Assert.assertEquals(22, array.get(1).intValue());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.common.concur.collection.CASObjectArrayTest#testSetTwoItems", "test_setup_list": []}
{"index": 153, "project_index": 78, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionNewTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_name": "testArrayRange2", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 32, "test_setup_end_lineno": 66, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_prefix": "  @Test\n  public void testArrayRange2() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:TriangleV, as: friend1, where: (uid = 0)}\");\n    query.append(\"return friend1.out('TriangleE')[0..2] as foo\");\n\n    OResultSet result = db.query(query.toString());\n    <AssertPlaceHolder>;\n    OResult doc = result.next();\n    Assert.assertFalse(result.hasNext());\n\n    Object foo = doc.getProperty(\"foo\");\n    Assert.assertNotNull(foo);\n    Assert.assertTrue(foo instanceof List);\n    Assert.assertEquals(2, ((List) foo).size());\n    result.close();\n  }", "test_prefix_start_lineno": 1302, "test_prefix_end_lineno": 1319, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  @Override\n  boolean hasNext();", "focal_method_start_lineno": 20, "focal_method_end_lineno": 21, "ground_truth_oracle": "Assert.assertTrue(result.hasNext());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testArrayRange2() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:TriangleV, as: friend1, where: (uid = 0)}\");\n    query.append(\"return friend1.out('TriangleE')[0..2] as foo\");\n\n    OResultSet result = db.query(query.toString());\n  }", "original_test_prefix": "  @Test\n  public void testArrayRange2() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:TriangleV, as: friend1, where: (uid = 0)}\");\n    query.append(\"return friend1.out('TriangleE')[0..2] as foo\");\n\n    OResultSet result = db.query(query.toString());\n    Assert.assertTrue(result.hasNext());\n    OResult doc = result.next();\n    Assert.assertFalse(result.hasNext());\n\n    Object foo = doc.getProperty(\"foo\");\n    Assert.assertNotNull(foo);\n    Assert.assertTrue(foo instanceof List);\n    Assert.assertEquals(2, ((List) foo).size());\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionNewTest#testArrayRange2", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 32, "end_lineno": 66}]}
{"index": 154, "project_index": 78, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMultiKeyTest", "class_path": "core/src/test/java/com/orientechnologies/common/util/OMultiKeyTest.java", "test_name": "testOneKeyMap", "test_setup_file_path": "core/src/test/java/com/orientechnologies/common/util/OMultiKeyTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/common/util/OMultiKeyTest.java", "test_prefix": "  @Test\n  public void testOneKeyMap() {\n    final Map<OMultiKey, Object> multiKeyMap = new HashMap<OMultiKey, Object>();\n\n    final OMultiKey multiKey = new OMultiKey(Collections.singletonList(\"a\"));\n    multiKeyMap.put(multiKey, new Object());\n\n    final OMultiKey anotherMultiKey = new OMultiKey(Collections.singletonList(\"a\"));\n    final Object mapResult = multiKeyMap.get(anotherMultiKey);\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 60, "test_prefix_end_lineno": 71, "focal_method_file_path": "core/src/main/java/com/orientechnologies/common/util/OMultiKey.java", "focal_method": "    public OMultiKey(final Collection<?> keys) {\n        this.keys = new ArrayList<Object>(keys);\n        hash = generateHashCode(keys);\n    }", "focal_method_start_lineno": 36, "focal_method_end_lineno": 39, "ground_truth_oracle": "assertNotNull(mapResult);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testOneKeyMap() {\n    final Map<OMultiKey, Object> multiKeyMap = new HashMap<OMultiKey, Object>();\n\n    final OMultiKey multiKey = new OMultiKey(Collections.singletonList(\"a\"));\n    multiKeyMap.put(multiKey, new Object());\n\n    final OMultiKey anotherMultiKey = new OMultiKey(Collections.singletonList(\"a\"));\n    final Object mapResult = multiKeyMap.get(anotherMultiKey);\n\n  }", "original_test_prefix": "  @Test\n  public void testOneKeyMap() {\n    final Map<OMultiKey, Object> multiKeyMap = new HashMap<OMultiKey, Object>();\n\n    final OMultiKey multiKey = new OMultiKey(Collections.singletonList(\"a\"));\n    multiKeyMap.put(multiKey, new Object());\n\n    final OMultiKey anotherMultiKey = new OMultiKey(Collections.singletonList(\"a\"));\n    final Object mapResult = multiKeyMap.get(anotherMultiKey);\n\n    assertNotNull(mapResult);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.common.util.OMultiKeyTest#testOneKeyMap", "test_setup_list": []}
{"index": 155, "project_index": 79, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "enricher/api", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "InitContainerHandlerTest", "class_path": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java", "test_name": "simple", "test_setup_file_path": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java", "test_setup": "@Before\n    public void setUp() {\n        handler = new InitContainerHandler(log);\n    }", "test_setup_start_lineno": 50, "test_setup_end_lineno": 53, "test_prefix_file_path": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java", "test_prefix": "    @Test\n    public void simple() {\n        PodTemplateSpecBuilder builder = getPodTemplateBuilder();\n        <AssertPlaceHolder>;\n        Container initContainer = createInitContainer(\"blub\", \"foo/blub\");\n        handler.appendInitContainer(builder, initContainer);\n        assertTrue(handler.hasInitContainer(builder, \"blub\"));\n        verifyBuilder(builder, Arrays.asList(initContainer));\n    }", "test_prefix_start_lineno": 55, "test_prefix_end_lineno": 63, "focal_method_file_path": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/InitContainerHandler.java", "focal_method": "    public boolean hasInitContainer(PodTemplateSpecBuilder builder, String name) {\n        return getInitContainer(builder, name) != null;\n    }", "focal_method_start_lineno": 38, "focal_method_end_lineno": 40, "ground_truth_oracle": "assertFalse(handler.hasInitContainer(builder, \"blub\"));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void simple() {\n        PodTemplateSpecBuilder builder = getPodTemplateBuilder();\n    }", "original_test_prefix": "    @Test\n    public void simple() {\n        PodTemplateSpecBuilder builder = getPodTemplateBuilder();\n        assertFalse(handler.hasInitContainer(builder, \"blub\"));\n        Container initContainer = createInitContainer(\"blub\", \"foo/blub\");\n        handler.appendInitContainer(builder, initContainer);\n        assertTrue(handler.hasInitContainer(builder, \"blub\"));\n        verifyBuilder(builder, Arrays.asList(initContainer));\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.enricher.api.util.InitContainerHandlerTest#simple", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        handler = new InitContainerHandler(log);\n    }", "start_lineno": 50, "end_lineno": 53}]}
{"index": 156, "project_index": 79, "class_index": 1, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "ProcessorConfigTest", "class_path": "core/src/test/java/io/fabric8/maven/core/config/ProcessorConfigTest.java", "test_name": "order", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/config/ProcessorConfigTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/config/ProcessorConfigTest.java", "test_prefix": "    @Test\n    public void order() {\n        List<TestNamed> data = Arrays.asList(\n            new TestNamed(\"t1\"),\n            new TestNamed(\"t2\"),\n            new TestNamed(\"t3\"),\n            new TestNamed(\"t4\"));\n\n        List<String> inc = Arrays.asList(\"t4\", \"t2\");\n\n        ProcessorConfig pConfig = new ProcessorConfig(inc, null, null);\n        List<TestNamed> result = pConfig.prepareProcessors(data, \"test\");\n        <AssertPlaceHolder>;\n        assertEquals(\"t4\", result.get(0).getName());\n        assertEquals(\"t2\", result.get(1).getName());\n    }", "test_prefix_start_lineno": 96, "test_prefix_end_lineno": 111, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java", "focal_method": "    public <T extends Named> List<T> prepareProcessors(List<T> namedList, String type) {\n        List<T> ret = new ArrayList<>();\n        Map<String, T> lookup = new HashMap<>();\n        for (T named : namedList) {\n            lookup.put(named.getName(), named);\n        }\n        for (String inc : includes) {\n            if (use(inc)) {\n                T named = lookup.get(inc);\n                if (named == null) {\n                    List<String> keys = new ArrayList<>(lookup.keySet());\n                    Collections.sort(keys);\n                    throw new IllegalArgumentException(\n                        \"No \" + type + \" with name '\" + inc +\n                        \"' found to include. \" +\n                        \"Please check spelling in your profile / config and your project dependencies. Included \" + type + \"s: \" +\n                        StringUtils.join(keys,\", \"));\n                }\n                ret.add(named);\n            }\n        }\n        return ret;\n    }", "focal_method_start_lineno": 104, "focal_method_end_lineno": 126, "ground_truth_oracle": "assertEquals(2,result.size());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void order() {\n        List<TestNamed> data = Arrays.asList(\n            new TestNamed(\"t1\"),\n            new TestNamed(\"t2\"),\n            new TestNamed(\"t3\"),\n            new TestNamed(\"t4\"));\n\n        List<String> inc = Arrays.asList(\"t4\", \"t2\");\n\n        ProcessorConfig pConfig = new ProcessorConfig(inc, null, null);\n        List<TestNamed> result = pConfig.prepareProcessors(data, \"test\");\n    }", "original_test_prefix": "    @Test\n    public void order() {\n        List<TestNamed> data = Arrays.asList(\n            new TestNamed(\"t1\"),\n            new TestNamed(\"t2\"),\n            new TestNamed(\"t3\"),\n            new TestNamed(\"t4\"));\n\n        List<String> inc = Arrays.asList(\"t4\", \"t2\");\n\n        ProcessorConfig pConfig = new ProcessorConfig(inc, null, null);\n        List<TestNamed> result = pConfig.prepareProcessors(data, \"test\");\n        assertEquals(2,result.size());\n        assertEquals(\"t4\", result.get(0).getName());\n        assertEquals(\"t2\", result.get(1).getName());\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.config.ProcessorConfigTest#order", "test_setup_list": []}
{"index": 157, "project_index": 80, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "GlobalSwitchTest", "class_path": "src/test/java/com/alipay/remoting/inner/utiltest/GlobalSwitchTest.java", "test_name": "testSystemSettings_takesEffect_before_defaultvalue", "test_setup_file_path": "src/test/java/com/alipay/remoting/inner/utiltest/GlobalSwitchTest.java", "test_setup": "@BeforeClass\n    public static void initClass() {\n    }\n\n@Before\n    public void init() {\n    }", "test_setup_start_lineno": 38, "test_setup_end_lineno": 40, "test_prefix_file_path": "src/test/java/com/alipay/remoting/inner/utiltest/GlobalSwitchTest.java", "test_prefix": "    @Test\n    public void testSystemSettings_takesEffect_before_defaultvalue() {\n        System.setProperty(Configs.CONN_RECONNECT_SWITCH, \"true\");\n        System.setProperty(Configs.CONN_MONITOR_SWITCH, \"true\");\n        client1 = new RpcClient();\n        client2 = new RpcClient();\n\n        <AssertPlaceHolder>;\n        Assert.assertTrue(client1.isReconnectSwitchOn());\n        Assert.assertTrue(client2.isConnectionMonitorSwitchOn());\n        Assert.assertTrue(client2.isReconnectSwitchOn());\n    }", "test_prefix_start_lineno": 67, "test_prefix_end_lineno": 78, "focal_method_file_path": "src/main/java/com/alipay/remoting/rpc/RpcClient.java", "focal_method": "    @Override\n    @Deprecated\n    public boolean isConnectionMonitorSwitchOn() {\n        return option(BoltClientOption.CONN_MONITOR_SWITCH);\n    }", "focal_method_start_lineno": 558, "focal_method_end_lineno": 562, "ground_truth_oracle": "Assert.assertTrue(client1.isConnectionMonitorSwitchOn());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testSystemSettings_takesEffect_before_defaultvalue() {\n        System.setProperty(Configs.CONN_RECONNECT_SWITCH, \"true\");\n        System.setProperty(Configs.CONN_MONITOR_SWITCH, \"true\");\n        client1 = new RpcClient();\n        client2 = new RpcClient();\n\n    }", "original_test_prefix": "    @Test\n    public void testSystemSettings_takesEffect_before_defaultvalue() {\n        System.setProperty(Configs.CONN_RECONNECT_SWITCH, \"true\");\n        System.setProperty(Configs.CONN_MONITOR_SWITCH, \"true\");\n        client1 = new RpcClient();\n        client2 = new RpcClient();\n\n        Assert.assertTrue(client1.isConnectionMonitorSwitchOn());\n        Assert.assertTrue(client1.isReconnectSwitchOn());\n        Assert.assertTrue(client2.isConnectionMonitorSwitchOn());\n        Assert.assertTrue(client2.isReconnectSwitchOn());\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.inner.utiltest.GlobalSwitchTest#testSystemSettings_takesEffect_before_defaultvalue", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void initClass() {\n    }", "start_lineno": 38, "end_lineno": 40}, {"test_setup": "@Before\n    public void init() {\n    }", "start_lineno": 42, "end_lineno": 44}]}
{"index": 158, "project_index": 81, "class_index": 0, "test_index": 0, "user_name": "myabc", "repo_name": "markdownj", "sub_repos": ["core"], "sub_repo": "core", "commit_sha": "f8ed00caeb69fc602aa2209812d953c26c2a4263", "build_system": "mvn", "class_name": "EdgeCases", "class_path": "core/src/test/java/org/markdownj/test/EdgeCases.java", "test_name": "testNull", "test_setup_file_path": "core/src/test/java/org/markdownj/test/EdgeCases.java", "test_setup": "@Before\n    public void createProcessor() {\n        m = new MarkdownProcessor();\n    }", "test_setup_start_lineno": 47, "test_setup_end_lineno": 50, "test_prefix_file_path": "core/src/test/java/org/markdownj/test/EdgeCases.java", "test_prefix": "    @Test\n    public void testNull() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 62, "test_prefix_end_lineno": 65, "focal_method_file_path": "core/src/main/java/org/markdownj/MarkdownProcessor.java", "focal_method": "    public String markdown(String txt) {\n        if (txt == null) {\n            txt = \"\";\n        }\n        TextEditor text = new TextEditor(txt);\n\n        // Standardize line endings:\n        text.replaceAll(\"\\\\r\\\\n\", \"\\n\");     // DOS to Unix\n        text.replaceAll(\"\\\\r\", \"\\n\");        // Mac to Unix\n        text.replaceAll(\"^[ \\\\t]+$\", \"\");\n\n        // Make sure $text ends with a couple of newlines:\n        text.append(\"\\n\\n\");\n\n        text.detabify();\n        text.deleteAll(\"^[ ]+$\");\n        hashHTMLBlocks(text);\n        stripLinkDefinitions(text);\n        text = runBlockGamut(text);\n        unEscapeSpecialChars(text);\n\n        text.append(\"\\n\");\n        return text.toString();\n    }", "focal_method_start_lineno": 75, "focal_method_end_lineno": 98, "ground_truth_oracle": "assertEquals(\"\\n\", m.markdown(null));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testNull() {\n    }", "original_test_prefix": "    @Test\n    public void testNull() {\n        assertEquals(\"\\n\", m.markdown(null));\n    }", "test_with_params": false, "test_target": "org.markdownj.test.EdgeCases#testNull", "test_setup_list": [{"test_setup": "@Before\n    public void createProcessor() {\n        m = new MarkdownProcessor();\n    }", "start_lineno": 47, "end_lineno": 50}]}
{"index": 159, "project_index": 82, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ScoreTest", "class_path": "src/test/java/gov/adlnet/xapi/ScoreTest.java", "test_name": "testGetMin", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ScoreTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        score = new Score();\n        score.setMax(MAX);\n        score.setMin(MIN);\n        score.setRaw(RAW);\n        score.setScaled(SCALED);\n    }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 30, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ScoreTest.java", "test_prefix": "    @Test\n    public void testGetMin() {\n        float expected = MIN;\n        float actual = score.getMin();\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 67, "test_prefix_end_lineno": 72, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Score.java", "focal_method": "    public float getMin() {\n        return min;\n    }", "focal_method_start_lineno": 24, "focal_method_end_lineno": 26, "ground_truth_oracle": "assertEquals(expected, actual, 0);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetMin() {\n        float expected = MIN;\n        float actual = score.getMin();\n    }", "original_test_prefix": "    @Test\n    public void testGetMin() {\n        float expected = MIN;\n        float actual = score.getMin();\n        assertEquals(expected, actual, 0);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ScoreTest#testGetMin", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        score = new Score();\n        score.setMax(MAX);\n        score.setMin(MIN);\n        score.setRaw(RAW);\n        score.setScaled(SCALED);\n    }", "start_lineno": 23, "end_lineno": 30}]}
{"index": 160, "project_index": 82, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "VerbTest", "class_path": "src/test/java/gov/adlnet/xapi/VerbTest.java", "test_name": "testVerb", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/VerbTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        display.put(\"es\", ES_VERB);\n        verb = new Verb(ID, display);\n    }", "test_setup_start_lineno": 24, "test_setup_end_lineno": 30, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/VerbTest.java", "test_prefix": "    @Test\n    public void testVerb() {\n        Verb verb = new Verb();\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 37, "test_prefix_end_lineno": 41, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Verb.java", "focal_method": "   public Verb() {}", "focal_method_start_lineno": 11, "focal_method_end_lineno": 11, "ground_truth_oracle": "assertNotNull(verb);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testVerb() {\n        Verb verb = new Verb();\n    }", "original_test_prefix": "    @Test\n    public void testVerb() {\n        Verb verb = new Verb();\n        assertNotNull(verb);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.VerbTest#testVerb", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        display.put(\"es\", ES_VERB);\n        verb = new Verb(ID, display);\n    }", "start_lineno": 24, "end_lineno": 30}]}
{"index": 161, "project_index": 83, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "HttpClientFactoryTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactoryTest.java", "test_name": "testNonProxiedHostRequest", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactoryTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactoryTest.java", "test_prefix": "    @Test\n    public void testNonProxiedHostRequest() throws Exception {\n        targetServer.stubFor(get(urlMatching(\".*\")).willReturn(aResponse().withBody(\"Hello World!\")));\n\n        proxyServer.stubFor(get(urlMatching(\".*\")).willReturn(aResponse().withBody(\"Hello Proxy!\")));\n\n        Proxy proxy = new Proxy();\n        proxy.setHost(\"localhost\");\n        proxy.setPort(PROXY_PORT);\n        proxy.setProtocol(\"http\");\n        proxy.setNonProxyHosts(\"localhost|example.com\");\n\n        HttpClient client = new HttpClientFactory(TARGET_URL).proxy(proxy).create();\n        String body = EntityUtils.toString(client.execute(new HttpGet(TARGET_URL)).getEntity());\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 104, "test_prefix_end_lineno": 120, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/httpclient/HttpClientFactory.java", "focal_method": "    public HttpClient create() {\n        return hcb.setDefaultRequestConfig(rcb.build()).build();\n    }", "focal_method_start_lineno": 73, "focal_method_end_lineno": 75, "ground_truth_oracle": "Assert.assertEquals(\"Hello World!\", body);", "ground_truth_oracle_lineno": 9, "test_prefix_wo_placeholder": "    @Test\n    public void testNonProxiedHostRequest() throws Exception {\n        targetServer.stubFor(get(urlMatching(\".*\")).willReturn(aResponse().withBody(\"Hello World!\")));\n\n        proxyServer.stubFor(get(urlMatching(\".*\")).willReturn(aResponse().withBody(\"Hello Proxy!\")));\n\n        Proxy proxy = new Proxy();\n        proxy.setHost(\"localhost\");\n        proxy.setPort(PROXY_PORT);\n        proxy.setProtocol(\"http\");\n        proxy.setNonProxyHosts(\"localhost|example.com\");\n\n        HttpClient client = new HttpClientFactory(TARGET_URL).proxy(proxy).create();\n        String body = EntityUtils.toString(client.execute(new HttpGet(TARGET_URL)).getEntity());\n\n    }", "original_test_prefix": "    @Test\n    public void testNonProxiedHostRequest() throws Exception {\n        targetServer.stubFor(get(urlMatching(\".*\")).willReturn(aResponse().withBody(\"Hello World!\")));\n\n        proxyServer.stubFor(get(urlMatching(\".*\")).willReturn(aResponse().withBody(\"Hello Proxy!\")));\n\n        Proxy proxy = new Proxy();\n        proxy.setHost(\"localhost\");\n        proxy.setPort(PROXY_PORT);\n        proxy.setProtocol(\"http\");\n        proxy.setNonProxyHosts(\"localhost|example.com\");\n\n        HttpClient client = new HttpClientFactory(TARGET_URL).proxy(proxy).create();\n        String body = EntityUtils.toString(client.execute(new HttpGet(TARGET_URL)).getEntity());\n\n        Assert.assertEquals(\"Hello World!\", body);\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.httpclient.HttpClientFactoryTest#testNonProxiedHostRequest", "test_setup_list": []}
{"index": 162, "project_index": 83, "class_index": 1, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "CircleTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java", "test_name": "testGetEnvironment", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/CircleTest.java", "test_prefix": "    @Test\n    public void testGetEnvironment() {\n        Properties properties = new Circle(env()).getEnvironment();\n        <AssertPlaceHolder>;\n        assertEquals(\"build123\", properties.getProperty(\"circleci_build_num\"));\n        assertEquals(\"master\", properties.getProperty(\"branch\"));\n        assertEquals(\"a3562fgcd2\", properties.getProperty(\"commit_sha\"));\n    }", "test_prefix_start_lineno": 75, "test_prefix_end_lineno": 82, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/Circle.java", "focal_method": "    @Override\n    public Properties getEnvironment() {\n        Properties environment = new Properties();\n        addProperty(environment, \"circleci_build_num\", getProperty(CIRCLE_BUILD_NUMBER));\n        addProperty(environment, \"branch\", getProperty(CIRCLE_BRANCH));\n        addProperty(environment, \"commit_sha\", getProperty(CIRCLE_COMMIT));\n        return environment;\n    }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 76, "ground_truth_oracle": "assertEquals(3, properties.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testGetEnvironment() {\n        Properties properties = new Circle(env()).getEnvironment();\n    }", "original_test_prefix": "    @Test\n    public void testGetEnvironment() {\n        Properties properties = new Circle(env()).getEnvironment();\n        assertEquals(3, properties.size());\n        assertEquals(\"build123\", properties.getProperty(\"circleci_build_num\"));\n        assertEquals(\"master\", properties.getProperty(\"branch\"));\n        assertEquals(\"a3562fgcd2\", properties.getProperty(\"commit_sha\"));\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.CircleTest#testGetEnvironment", "test_setup_list": []}
{"index": 163, "project_index": 83, "class_index": 2, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "WerckerTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/WerckerTest.java", "test_name": "testGetBuildUrl", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/WerckerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/WerckerTest.java", "test_prefix": "    @Test\n    public void testGetBuildUrl() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 69, "test_prefix_end_lineno": 72, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/Wercker.java", "focal_method": "    @Override\n    public String getBuildUrl() {\n        return getProperty(WERCKER_BUILD_URL);\n    }", "focal_method_start_lineno": 63, "focal_method_end_lineno": 66, "ground_truth_oracle": "assertEquals(\"https://app.wercker.com/build/123456789\", new Wercker(env()).getBuildUrl());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetBuildUrl() {\n    }", "original_test_prefix": "    @Test\n    public void testGetBuildUrl() {\n        assertEquals(\"https://app.wercker.com/build/123456789\", new Wercker(env()).getBuildUrl());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.WerckerTest#testGetBuildUrl", "test_setup_list": []}
{"index": 164, "project_index": 84, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "ACollectionHelperTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_name": "testExists", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_prefix": "    @Test\n    public void testExists() {\n        final APredicateNoThrow<String> len1 = new APredicateNoThrow<String>() {\n            @Override  public boolean apply(String o) {\n                return o.length() == 1;\n            }\n        };\n\n        <AssertPlaceHolder>;\n        assertEquals(true, ACollectionHelper.exists (Arrays.asList (\"a\"), len1));\n        assertEquals(false, ACollectionHelper.exists (Arrays.asList (\"ab\"), len1));\n        assertEquals(true, ACollectionHelper.exists (Arrays.asList (\"ab\", \"c\", \"def\"), len1));\n    }", "test_prefix_start_lineno": 75, "test_prefix_end_lineno": 87, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focal_method": "    public static <T, E extends Throwable> boolean exists(Iterable<T> coll, APredicate<? super T, E> pred) throws E {\n        for(T o: coll) {\n            if(pred.apply(o)) {\n                return true;\n            }\n        }\n        return false;\n    }", "focal_method_start_lineno": 117, "focal_method_end_lineno": 124, "ground_truth_oracle": "assertEquals(false, ACollectionHelper.exists (Arrays.<String>asList (), len1));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testExists() {\n        final APredicateNoThrow<String> len1 = new APredicateNoThrow<String>() {\n            @Override  public boolean apply(String o) {\n                return o.length() == 1;\n            }\n        };\n\n    }", "original_test_prefix": "    @Test\n    public void testExists() {\n        final APredicateNoThrow<String> len1 = new APredicateNoThrow<String>() {\n            @Override  public boolean apply(String o) {\n                return o.length() == 1;\n            }\n        };\n\n        assertEquals(false, ACollectionHelper.exists (Arrays.<String>asList (), len1));\n        assertEquals(true, ACollectionHelper.exists (Arrays.asList (\"a\"), len1));\n        assertEquals(false, ACollectionHelper.exists (Arrays.asList (\"ab\"), len1));\n        assertEquals(true, ACollectionHelper.exists (Arrays.asList (\"ab\", \"c\", \"def\"), len1));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.ACollectionHelperTest#testExists", "test_setup_list": []}
{"index": 165, "project_index": 85, "class_index": 0, "test_index": 0, "user_name": "spring-cloud", "repo_name": "spring-cloud-security", "sub_repos": ["spring-cloud-security", "spring-cloud-starter-security", "spring-cloud-starter-oauth2"], "sub_repo": "spring-cloud-security", "commit_sha": "d5dac0e77e1d9ef17a75fd6b34dfc62685da50e7", "build_system": "mvn", "class_name": "OAuth2FeignRequestInterceptorTests", "class_path": "spring-cloud-security/src/test/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptorTests.java", "test_name": "applyAuthorizationHeader", "test_setup_file_path": "spring-cloud-security/src/test/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptorTests.java", "test_setup": "@Before\n    public void setUp() {\n        oAuth2FeignRequestInterceptor = new OAuth2FeignRequestInterceptor(\n                new MockOAuth2ClientContext(\"Fancy\"),\n                new BaseOAuth2ProtectedResourceDetails());\n        requestTemplate = new RequestTemplate().method(HttpMethod.GET);\n    }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 57, "test_prefix_file_path": "spring-cloud-security/src/test/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptorTests.java", "test_prefix": "\t@Test\n\tpublic void applyAuthorizationHeader() {\n\t\toAuth2FeignRequestInterceptor.apply(requestTemplate);\n\t\tMap<String, Collection<String>> headers = requestTemplate.headers();\n\t\t<AssertPlaceHolder>;\n\t\tAssert.assertThat(\"Authorization must have a extract of Fancy\",\n\t\t\theaders.get(\"Authorization\"), contains(\"Bearer Fancy\"));\n\t}", "test_prefix_start_lineno": 59, "test_prefix_end_lineno": 67, "focal_method_file_path": "spring-cloud-security/src/main/java/org/springframework/cloud/security/oauth2/client/feign/OAuth2FeignRequestInterceptor.java", "focal_method": "    @Override\n    public void apply(RequestTemplate template) {\n        template.header(header); // Clears out the header, no \"clear\" method available.\n        template.header(header, extract(tokenType));\n    }", "focal_method_start_lineno": 105, "focal_method_end_lineno": 109, "ground_truth_oracle": "Assert.assertTrue(\"RequestTemplate must have a Authorization header\", headers.containsKey(\"Authorization\"));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void applyAuthorizationHeader() {\n        oAuth2FeignRequestInterceptor.apply(requestTemplate);\n        Map<String, Collection<String>> headers = requestTemplate.headers();\n    }", "original_test_prefix": "    @Test\n    public void applyAuthorizationHeader() {\n        oAuth2FeignRequestInterceptor.apply(requestTemplate);\n        Map<String, Collection<String>> headers = requestTemplate.headers();\n        Assert.assertTrue(\"RequestTemplate must have a Authorization header\", headers.containsKey(\"Authorization\"));\n        Assert.assertThat(\"Authorization must have a extract of Fancy\",\n                headers.get(\"Authorization\"), contains(\"Bearer Fancy\"));\n    }", "test_with_params": false, "test_target": "org.springframework.cloud.security.oauth2.client.feign.OAuth2FeignRequestInterceptorTests#applyAuthorizationHeader", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        oAuth2FeignRequestInterceptor = new OAuth2FeignRequestInterceptor(\n                new MockOAuth2ClientContext(\"Fancy\"),\n                new BaseOAuth2ProtectedResourceDetails());\n        requestTemplate = new RequestTemplate().method(HttpMethod.GET);\n    }", "start_lineno": 51, "end_lineno": 57}]}
{"index": 166, "project_index": 86, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleStateTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_name": "not_equal_to_state_with_different_puzzle", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_prefix": "  @Test\n  public void not_equal_to_state_with_different_puzzle()\n  {\n    PuzzleState a = new PuzzleState(getSolvedPuzzle());\n    PuzzleState b = new PuzzleState(getPuzzle(2));\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 108, "test_prefix_end_lineno": 114, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focal_method": "  public PuzzleState(Puzzle puzzle)\n  {\n    this(puzzle, new Stack<Direction>());\n  }", "focal_method_start_lineno": 16, "focal_method_end_lineno": 19, "ground_truth_oracle": "assertNotEquals(a, b);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void not_equal_to_state_with_different_puzzle()\n  {\n    PuzzleState a = new PuzzleState(getSolvedPuzzle());\n    PuzzleState b = new PuzzleState(getPuzzle(2));\n  }", "original_test_prefix": "  @Test\n  public void not_equal_to_state_with_different_puzzle()\n  {\n    PuzzleState a = new PuzzleState(getSolvedPuzzle());\n    PuzzleState b = new PuzzleState(getPuzzle(2));\n    assertNotEquals(a, b);\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleStateTest#not_equal_to_state_with_different_puzzle", "test_setup_list": []}
{"index": 167, "project_index": 87, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "AttributeInjectorTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/AttributeInjectorTest.java", "test_name": "testGetSetLog", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/AttributeInjectorTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.injector = new AttributeInjector();\n\n        this.target = new TestTarget();\n        this.attributeList = new LinkedList<>();\n        this.attributeSetters = new HashMap<>();\n\n        this.objectName = new ObjectName(\"x-domain-x:x-key-x=x-value-x\");\n\n        this.attributeList.add(new Attribute(\"x-att-str-name-x\", \"x-att-str-value-x\"));\n        this.attributeList.add(new Attribute(\"x-att-int-name-x\", 7));\n        this.attributeList.add(new Attribute(\"x-att-Integer-name-x\", 11));\n\n        this.attributeSetters.put(\"x-att-str-name-x\", TestTarget.class.getMethod(\"setStringValue\", String.class));\n        this.attributeSetters.put(\"x-att-int-name-x\", TestTarget.class.getMethod(\"setIntValue\", int.class));\n        this.attributeSetters.put(\"x-att-Integer-name-x\", TestTarget.class.getMethod(\"setIntegerValue\", Integer.class));\n        this.attributeSetters.put(\"x-throw-x\", TestTarget.class.getMethod(\"throwWhenCalled\", String.class));\n        this.attributeSetters.put(\"x-inaccessible-x\", TestTarget.class.getDeclaredMethod(\"inaccessible\", String.class));\n\n        this.injector.setLog(this.mockLogger);\n    }", "test_setup_start_lineno": 50, "test_setup_end_lineno": 73, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/AttributeInjectorTest.java", "test_prefix": "    @Test\n    public void testGetSetLog() throws Exception {\n        this.injector = new AttributeInjector();\n\n        <AssertPlaceHolder>;\n        assertNotSame(this.mockLogger, this.injector.getLog());\n\n        this.injector.setLog(this.mockLogger);\n        assertSame(this.mockLogger, this.injector.getLog());\n    }", "test_prefix_start_lineno": 75, "test_prefix_end_lineno": 84, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/AttributeInjector.java", "focal_method": "    public Logger getLog() {\n        return log;\n    }", "focal_method_start_lineno": 39, "focal_method_end_lineno": 41, "ground_truth_oracle": "assertNotNull(this.injector.getLog());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetLog() throws Exception {\n        this.injector = new AttributeInjector();\n\n    }", "original_test_prefix": "    @Test\n    public void testGetSetLog() throws Exception {\n        this.injector = new AttributeInjector();\n\n        assertNotNull(this.injector.getLog());\n        assertNotSame(this.mockLogger, this.injector.getLog());\n\n        this.injector.setLog(this.mockLogger);\n        assertSame(this.mockLogger, this.injector.getLog());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.AttributeInjectorTest#testGetSetLog", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.injector = new AttributeInjector();\n\n        this.target = new TestTarget();\n        this.attributeList = new LinkedList<>();\n        this.attributeSetters = new HashMap<>();\n\n        this.objectName = new ObjectName(\"x-domain-x:x-key-x=x-value-x\");\n\n        this.attributeList.add(new Attribute(\"x-att-str-name-x\", \"x-att-str-value-x\"));\n        this.attributeList.add(new Attribute(\"x-att-int-name-x\", 7));\n        this.attributeList.add(new Attribute(\"x-att-Integer-name-x\", 11));\n\n        this.attributeSetters.put(\"x-att-str-name-x\", TestTarget.class.getMethod(\"setStringValue\", String.class));\n        this.attributeSetters.put(\"x-att-int-name-x\", TestTarget.class.getMethod(\"setIntValue\", int.class));\n        this.attributeSetters.put(\"x-att-Integer-name-x\", TestTarget.class.getMethod(\"setIntegerValue\", Integer.class));\n        this.attributeSetters.put(\"x-throw-x\", TestTarget.class.getMethod(\"throwWhenCalled\", String.class));\n        this.attributeSetters.put(\"x-inaccessible-x\", TestTarget.class.getDeclaredMethod(\"inaccessible\", String.class));\n\n        this.injector.setLog(this.mockLogger);\n    }", "start_lineno": 50, "end_lineno": 73}]}
{"index": 168, "project_index": 88, "class_index": 0, "test_index": 0, "user_name": "redraiment", "repo_name": "jactiverecord", "sub_repos": [], "sub_repo": "", "commit_sha": "d051709c93204658e7f2cc96c9898201c7337269", "build_system": "mvn", "class_name": "TSqlBuilderTest", "class_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_name": "testWhere", "test_setup_file_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_setup": "@BeforeClass\n  public static void setUpClass() {\n    sql = new TSqlBuilder();\n  }", "test_setup_start_lineno": 10, "test_setup_end_lineno": 13, "test_prefix_file_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_prefix": "  @Test\n  public void testWhere() {\n    sql.select().from(\"users\").where(\"age > 17\");\n    <AssertPlaceHolder>;\n    sql.select().from(\"users\").where(\"age >= 18 and age <= 25\");\n    assertEquals(\"select * from users where age >= 18 and age <= 25\", sql.toString());\n  }", "test_prefix_start_lineno": 26, "test_prefix_end_lineno": 32, "focal_method_file_path": "src/main/java/me/zzp/ar/sql/SqlBuilder.java", "focal_method": "  @Override\n  public String toString();", "focal_method_start_lineno": 34, "focal_method_end_lineno": 35, "ground_truth_oracle": "assertEquals(\"select * from users where age > 17\", sql.toString());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testWhere() {\n    sql.select().from(\"users\").where(\"age > 17\");\n  }", "original_test_prefix": "  @Test\n  public void testWhere() {\n    sql.select().from(\"users\").where(\"age > 17\");\n    assertEquals(\"select * from users where age > 17\", sql.toString());\n    sql.select().from(\"users\").where(\"age >= 18 and age <= 25\");\n    assertEquals(\"select * from users where age >= 18 and age <= 25\", sql.toString());\n  }", "test_with_params": false, "test_target": "me.zzp.ar.sql.TSqlBuilderTest#testWhere", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void setUpClass() {\n    sql = new TSqlBuilder();\n  }", "start_lineno": 10, "end_lineno": 13}]}
{"index": 169, "project_index": 88, "class_index": 0, "test_index": 1, "user_name": "redraiment", "repo_name": "jactiverecord", "sub_repos": [], "sub_repo": "", "commit_sha": "d051709c93204658e7f2cc96c9898201c7337269", "build_system": "mvn", "class_name": "TSqlBuilderTest", "class_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_name": "testSelectSomeFrom", "test_setup_file_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_setup": "@BeforeClass\n  public static void setUpClass() {\n    sql = new TSqlBuilder();\n  }", "test_setup_start_lineno": 10, "test_setup_end_lineno": 13, "test_prefix_file_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_prefix": "  @Test\n  public void testSelectSomeFrom() {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 21, "test_prefix_end_lineno": 24, "focal_method_file_path": "src/main/java/me/zzp/ar/sql/SqlBuilder.java", "focal_method": "  @Override\n  public String toString();", "focal_method_start_lineno": 34, "focal_method_end_lineno": 35, "ground_truth_oracle": "assertEquals(\"select name, age from users\", sql.select(\"name\", \"age\").from(\"users\").toString());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testSelectSomeFrom() {\n  }", "original_test_prefix": "  @Test\n  public void testSelectSomeFrom() {\n    assertEquals(\"select name, age from users\", sql.select(\"name\", \"age\").from(\"users\").toString());\n  }", "test_with_params": false, "test_target": "me.zzp.ar.sql.TSqlBuilderTest#testSelectSomeFrom", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void setUpClass() {\n    sql = new TSqlBuilder();\n  }", "start_lineno": 10, "end_lineno": 13}]}
{"index": 170, "project_index": 89, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "WorkerQueryTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java", "test_name": "noFilters", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java", "test_setup": "@Before\n    public void before() {\n        list = new LinkedList<WorkerData>();\n        agent1 = agentAddress(1);\n        agent2 = agentAddress(2);\n    }", "test_setup_start_lineno": 25, "test_setup_end_lineno": 30, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java", "test_prefix": "    @Test\n    public void noFilters() {\n        list.add(new WorkerData(newParameters(agent1, 1, \"member\", \"maven=3.7\")));\n        list.add(new WorkerData(newParameters(agent1, 2, \"member\", \"maven=3.7\")));\n        list.add(new WorkerData(newParameters(agent1, 3, \"member\", \"maven=3.7\")));\n\n        List<WorkerData> result = new WorkerQuery().execute(list);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 32, "test_prefix_end_lineno": 40, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java", "focal_method": "    public List<WorkerData> execute(List<WorkerData> input) {\n        switch (targetType) {\n            case ALL:\n                return select(input, null);\n            case MEMBER:\n                return select(input, true);\n            case CLIENT:\n                return select(input, false);\n            case PREFER_CLIENT:\n                List<WorkerData> result = select(input, false);\n                return !result.isEmpty() ? result : select(input, true);\n            default:\n                throw new IllegalStateException(\"Unrecognized targetType: \" + targetType);\n        }\n    }", "focal_method_start_lineno": 112, "focal_method_end_lineno": 126, "ground_truth_oracle": "assertEquals(list, result);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void noFilters() {\n        list.add(new WorkerData(newParameters(agent1, 1, \"member\", \"maven=3.7\")));\n        list.add(new WorkerData(newParameters(agent1, 2, \"member\", \"maven=3.7\")));\n        list.add(new WorkerData(newParameters(agent1, 3, \"member\", \"maven=3.7\")));\n\n        List<WorkerData> result = new WorkerQuery().execute(list);\n    }", "original_test_prefix": "    @Test\n    public void noFilters() {\n        list.add(new WorkerData(newParameters(agent1, 1, \"member\", \"maven=3.7\")));\n        list.add(new WorkerData(newParameters(agent1, 2, \"member\", \"maven=3.7\")));\n        list.add(new WorkerData(newParameters(agent1, 3, \"member\", \"maven=3.7\")));\n\n        List<WorkerData> result = new WorkerQuery().execute(list);\n        assertEquals(list, result);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.coordinator.registry.WorkerQueryTest#noFilters", "test_setup_list": [{"test_setup": "@Before\n    public void before() {\n        list = new LinkedList<WorkerData>();\n        agent1 = agentAddress(1);\n        agent2 = agentAddress(2);\n    }", "start_lineno": 25, "end_lineno": 30}]}
{"index": 171, "project_index": 90, "class_index": 0, "test_index": 0, "user_name": "Yubico", "repo_name": "yubico-java-client", "sub_repos": ["v2client", "jaas", "demo-server"], "sub_repo": "v2client", "commit_sha": "e21fb672e290a118f7420daaf81ccb96d319d52c", "build_system": "mvn", "class_name": "YubicoClientTest", "class_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_name": "testUnPrintableOTP", "test_setup_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 69, "test_prefix_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_prefix": "    @Test\n    public void testUnPrintableOTP() {\n        String otp = new String(new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06});\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 111, "test_prefix_end_lineno": 115, "focal_method_file_path": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focal_method": "    public static boolean isValidOTPFormat(String otp) {\n        if (otp == null){\n            return false;\n        }        \n        int len = otp.length();\n        for (char c : otp.toCharArray()) {\n            if (c < 0x20 || c > 0x7E) {\n                return false;\n            }\n        }\n        return OTP_MIN_LEN <= len && len <= OTP_MAX_LEN;\n    }", "focal_method_start_lineno": 222, "focal_method_end_lineno": 233, "ground_truth_oracle": "assertFalse(YubicoClient.isValidOTPFormat(otp));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testUnPrintableOTP() {\n        String otp = new String(new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06});\n    }", "original_test_prefix": "    @Test\n    public void testUnPrintableOTP() {\n        String otp = new String(new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06});\n        assertFalse(YubicoClient.isValidOTPFormat(otp));\n    }", "test_with_params": false, "test_target": "com.yubico.client.v2.YubicoClientTest#testUnPrintableOTP", "test_setup_list": [{"test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "start_lineno": 66, "end_lineno": 69}]}
{"index": 172, "project_index": 91, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "crap", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void crap() {\n        Word crap = loc\u012bt\u0101js.analyze(\"crap\");\n        <AssertPlaceHolder>;\n        loc\u012bt\u0101js.enableGuessing = true;\n        loc\u012bt\u0101js.enableAllGuesses = true;\n        loc\u012bt\u0101js.guessInflexibleNouns = true;\n        crap = loc\u012bt\u0101js.analyze(\"crap\");\n        assertTrue(crap.isRecognized());\n        assertEquals(AttributeNames.v_Ending, crap.wordforms.get(0).getValue(AttributeNames.i_Guess));\n    }", "test_prefix_start_lineno": 358, "test_prefix_end_lineno": 368, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertFalse(crap.isRecognized());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void crap() {\n        Word crap = loc\u012bt\u0101js.analyze(\"crap\");\n    }", "original_test_prefix": "    @Test\n    public void crap() {\n        Word crap = loc\u012bt\u0101js.analyze(\"crap\");\n        assertFalse(crap.isRecognized());\n        loc\u012bt\u0101js.enableGuessing = true;\n        loc\u012bt\u0101js.enableAllGuesses = true;\n        loc\u012bt\u0101js.guessInflexibleNouns = true;\n        crap = loc\u012bt\u0101js.analyze(\"crap\");\n        assertTrue(crap.isRecognized());\n        assertEquals(AttributeNames.v_Ending, crap.wordforms.get(0).getValue(AttributeNames.i_Guess));\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#crap", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 173, "project_index": 92, "class_index": 0, "test_index": 0, "user_name": "cucumber-ltd", "repo_name": "cucumber-pro-plugin-jvm", "sub_repos": [], "sub_repo": "", "commit_sha": "a09ee0b1682d3cd8b68c240820e647d4515e931f", "build_system": "mvn", "class_name": "EnvFilterTest", "class_path": "src/test/java/io/cucumber/pro/environment/EnvFilterTest.java", "test_name": "allows_overriding_mask", "test_setup_file_path": "src/test/java/io/cucumber/pro/environment/EnvFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/cucumber/pro/environment/EnvFilterTest.java", "test_prefix": "    @Test\n    public void allows_overriding_mask() {\n        Map<String, String> env = new HashMap<String, String>() {{\n            put(\"CUCUMBERPRO_ENVMASK\", \"KEY|TOKEN\");\n            put(\"my_secret__token\", \"abcd\");\n            put(\"MY_SECRET_TOKEN\", \"abcd\");\n            put(\"A_KEY_TO_A_DOOR\", \"clef\");\n            put(\"FOO\", \"BAR\");\n            put(\"ALPHA\", \"BETA\");\n            put(\"DOO\", \"dar\");\n            put(\"PASSWORD_A\", \"drowssap\");\n        }};\n\n        Config config = createConfig();\n        new EnvironmentVariablesConfigLoader(env).load(config);\n        EnvFilter envFilter = new EnvFilter(config);\n\n        Map<String, String> expectedEnv = new HashMap<String, String>() {{\n            put(\"CUCUMBERPRO_ENVMASK\", \"KEY|TOKEN\");\n            put(\"FOO\", \"BAR\");\n            put(\"ALPHA\", \"BETA\");\n            put(\"DOO\", \"dar\");\n            put(\"PASSWORD_A\", \"drowssap\");\n        }};\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 39, "test_prefix_end_lineno": 64, "focal_method_file_path": "src/main/java/io/cucumber/pro/environment/EnvFilter.java", "focal_method": "    public Map<String, String> filter(Map<String, String> env) {\n        Map<String, String> result = new HashMap<>();\n        for (Map.Entry<String, String> entry : env.entrySet()) {\n            if (!maskPattern.matcher(entry.getKey()).matches())\n                result.put(entry.getKey(), entry.getValue());\n        }\n        return result;\n    }", "focal_method_start_lineno": 18, "focal_method_end_lineno": 25, "ground_truth_oracle": "assertEquals(expectedEnv, envFilter.filter(env));", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void allows_overriding_mask() {\n        Map<String, String> env = new HashMap<String, String>() {{\n            put(\"CUCUMBERPRO_ENVMASK\", \"KEY|TOKEN\");\n            put(\"my_secret__token\", \"abcd\");\n            put(\"MY_SECRET_TOKEN\", \"abcd\");\n            put(\"A_KEY_TO_A_DOOR\", \"clef\");\n            put(\"FOO\", \"BAR\");\n            put(\"ALPHA\", \"BETA\");\n            put(\"DOO\", \"dar\");\n            put(\"PASSWORD_A\", \"drowssap\");\n        }};\n\n        Config config = createConfig();\n        new EnvironmentVariablesConfigLoader(env).load(config);\n        EnvFilter envFilter = new EnvFilter(config);\n\n        Map<String, String> expectedEnv = new HashMap<String, String>() {{\n            put(\"CUCUMBERPRO_ENVMASK\", \"KEY|TOKEN\");\n            put(\"FOO\", \"BAR\");\n            put(\"ALPHA\", \"BETA\");\n            put(\"DOO\", \"dar\");\n            put(\"PASSWORD_A\", \"drowssap\");\n        }};\n    }", "original_test_prefix": "    @Test\n    public void allows_overriding_mask() {\n        Map<String, String> env = new HashMap<String, String>() {{\n            put(\"CUCUMBERPRO_ENVMASK\", \"KEY|TOKEN\");\n            put(\"my_secret__token\", \"abcd\");\n            put(\"MY_SECRET_TOKEN\", \"abcd\");\n            put(\"A_KEY_TO_A_DOOR\", \"clef\");\n            put(\"FOO\", \"BAR\");\n            put(\"ALPHA\", \"BETA\");\n            put(\"DOO\", \"dar\");\n            put(\"PASSWORD_A\", \"drowssap\");\n        }};\n\n        Config config = createConfig();\n        new EnvironmentVariablesConfigLoader(env).load(config);\n        EnvFilter envFilter = new EnvFilter(config);\n\n        Map<String, String> expectedEnv = new HashMap<String, String>() {{\n            put(\"CUCUMBERPRO_ENVMASK\", \"KEY|TOKEN\");\n            put(\"FOO\", \"BAR\");\n            put(\"ALPHA\", \"BETA\");\n            put(\"DOO\", \"dar\");\n            put(\"PASSWORD_A\", \"drowssap\");\n        }};\n        assertEquals(expectedEnv, envFilter.filter(env));\n    }", "test_with_params": false, "test_target": "io.cucumber.pro.environment.EnvFilterTest#allows_overriding_mask", "test_setup_list": []}
{"index": 174, "project_index": 93, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "BasicIndexingTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_name": "testFilterMetadata", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_setup": "@Before\n    public void setupIndexerBolt() {\n        bolt = new DummyIndexer();\n        setupIndexerBolt(bolt);\n    }", "test_setup_start_lineno": 35, "test_setup_end_lineno": 39, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_prefix": "    @Test\n    public void testFilterMetadata() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n\n        final List vector = new ArrayList();\n        vector.add(\"parse.title=title\");\n        vector.add(\"parse.keywords=keywords\");\n\n        config.put(AbstractIndexerBolt.metadata2fieldParamName, vector);\n\n        prepareIndexerBolt(config);\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"parse.title\", \"This is the title\");\n        metadata.setValue(\"parse.keywords\", \"keyword1, keyword2, keyword3\");\n        metadata.setValue(\"parse.description\", \"This is the description\");\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 192, "test_prefix_end_lineno": 217, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focal_method": "    public void setValue(String key, String value) {\n        checkLockException();\n\n        md.put(key, new String[] {value});\n    }", "focal_method_start_lineno": 125, "focal_method_end_lineno": 129, "ground_truth_oracle": "Assert.assertArrayEquals( \"Only the mapped metadata attributes should be indexed\", new String[] {\"keywords\", \"title\", \"url\"}, new TreeSet<>(fields.keySet()).toArray());", "ground_truth_oracle_lineno": 13, "test_prefix_wo_placeholder": "    @Test\n    public void testFilterMetadata() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n\n        final List vector = new ArrayList();\n        vector.add(\"parse.title=title\");\n        vector.add(\"parse.keywords=keywords\");\n\n        config.put(AbstractIndexerBolt.metadata2fieldParamName, vector);\n\n        prepareIndexerBolt(config);\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"parse.title\", \"This is the title\");\n        metadata.setValue(\"parse.keywords\", \"keyword1, keyword2, keyword3\");\n        metadata.setValue(\"parse.description\", \"This is the description\");\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n    }", "original_test_prefix": "    @Test\n    public void testFilterMetadata() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n\n        final List vector = new ArrayList();\n        vector.add(\"parse.title=title\");\n        vector.add(\"parse.keywords=keywords\");\n\n        config.put(AbstractIndexerBolt.metadata2fieldParamName, vector);\n\n        prepareIndexerBolt(config);\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"parse.title\", \"This is the title\");\n        metadata.setValue(\"parse.keywords\", \"keyword1, keyword2, keyword3\");\n        metadata.setValue(\"parse.description\", \"This is the description\");\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n        Assert.assertArrayEquals( \"Only the mapped metadata attributes should be indexed\", new String[] {\"keywords\", \"title\", \"url\"}, new TreeSet<>(fields.keySet()).toArray());\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.indexer.BasicIndexingTest#testFilterMetadata", "test_setup_list": [{"test_setup": "@Before\n    public void setupIndexerBolt() {\n        bolt = new DummyIndexer();\n        setupIndexerBolt(bolt);\n    }", "start_lineno": 35, "end_lineno": 39}]}
{"index": 175, "project_index": 94, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "MaxDepthFilterTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MaxDepthFilterTest.java", "test_name": "testCustomDepth", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MaxDepthFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MaxDepthFilterTest.java", "test_prefix": "    @Test\n    public void testCustomDepth() throws MalformedURLException {\n        URLFilter filter = createFilter(\"maxDepth\", 1);\n        URL url = new URL(\"http://www.sourcedomain.com/\");\n        Metadata metadata = new Metadata();\n        metadata.setValue(MetadataTransfer.maxDepthKeyName, \"2\");\n        metadata.setValue(MetadataTransfer.depthKeyName, \"1\");\n        String filterResult = filter.filter(url, metadata, url.toExternalForm());\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 69, "test_prefix_end_lineno": 78, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focal_method": "    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter);", "focal_method_start_lineno": 35, "focal_method_end_lineno": 35, "ground_truth_oracle": "Assert.assertEquals(url.toExternalForm(), filterResult);", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void testCustomDepth() throws MalformedURLException {\n        URLFilter filter = createFilter(\"maxDepth\", 1);\n        URL url = new URL(\"http://www.sourcedomain.com/\");\n        Metadata metadata = new Metadata();\n        metadata.setValue(MetadataTransfer.maxDepthKeyName, \"2\");\n        metadata.setValue(MetadataTransfer.depthKeyName, \"1\");\n        String filterResult = filter.filter(url, metadata, url.toExternalForm());\n    }", "original_test_prefix": "    @Test\n    public void testCustomDepth() throws MalformedURLException {\n        URLFilter filter = createFilter(\"maxDepth\", 1);\n        URL url = new URL(\"http://www.sourcedomain.com/\");\n        Metadata metadata = new Metadata();\n        metadata.setValue(MetadataTransfer.maxDepthKeyName, \"2\");\n        metadata.setValue(MetadataTransfer.depthKeyName, \"1\");\n        String filterResult = filter.filter(url, metadata, url.toExternalForm());\n        Assert.assertEquals(url.toExternalForm(), filterResult);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.MaxDepthFilterTest#testCustomDepth", "test_setup_list": []}
{"index": 176, "project_index": 94, "class_index": 1, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "external/warc", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "WARCRecordFormatTest", "class_path": "external/warc/src/test/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormatTest.java", "test_name": "testGetDigestSha1TwoByteArrays", "test_setup_file_path": "external/warc/src/test/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormatTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "external/warc/src/test/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormatTest.java", "test_prefix": "    @Test\n    public void testGetDigestSha1TwoByteArrays() {\n        byte[] content1 = {'a', 'b', 'c'};\n        byte[] content2 = {'d', 'e', 'f'};\n        String sha1str = \"sha1:D6FMCDZDYW23YELHXWUEXAZ6LQCXU56S\";\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 33, "test_prefix_end_lineno": 40, "focal_method_file_path": "external/warc/src/main/java/com/digitalpebble/stormcrawler/warc/WARCRecordFormat.java", "focal_method": "    public static String getDigestSha1(byte[] bytes1, byte[] bytes2) {\n        MessageDigest sha1 = DigestUtils.getSha1Digest();\n        sha1.update(bytes1);\n        return \"sha1:\" + base32.encodeAsString(sha1.digest(bytes2));\n    }", "focal_method_start_lineno": 81, "focal_method_end_lineno": 85, "ground_truth_oracle": "assertEquals( \"Wrong sha1 digest\", sha1str, WARCRecordFormat.getDigestSha1(content1, content2));", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testGetDigestSha1TwoByteArrays() {\n        byte[] content1 = {'a', 'b', 'c'};\n        byte[] content2 = {'d', 'e', 'f'};\n        String sha1str = \"sha1:D6FMCDZDYW23YELHXWUEXAZ6LQCXU56S\";\n    }", "original_test_prefix": "    @Test\n    public void testGetDigestSha1TwoByteArrays() {\n        byte[] content1 = {'a', 'b', 'c'};\n        byte[] content2 = {'d', 'e', 'f'};\n        String sha1str = \"sha1:D6FMCDZDYW23YELHXWUEXAZ6LQCXU56S\";\n        assertEquals( \"Wrong sha1 digest\", sha1str, WARCRecordFormat.getDigestSha1(content1, content2));\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.warc.WARCRecordFormatTest#testGetDigestSha1TwoByteArrays", "test_setup_list": []}
{"index": 177, "project_index": 94, "class_index": 2, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "BasicURLNormalizerTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_name": "testAnchorFilterFalse", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_prefix": "    @Test\n    public void testAnchorFilterFalse() throws MalformedURLException {\n        URLFilter allAllowed = createFilter(false, false);\n        URL url = new URL(\"http://www.sourcedomain.com/#0\");\n        Metadata metadata = new Metadata();\n        String filterResult = allAllowed.filter(url, metadata, url.toExternalForm());\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 88, "test_prefix_end_lineno": 95, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focal_method": "    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter);", "focal_method_start_lineno": 35, "focal_method_end_lineno": 35, "ground_truth_oracle": "Assert.assertEquals(url.toExternalForm(), filterResult);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testAnchorFilterFalse() throws MalformedURLException {\n        URLFilter allAllowed = createFilter(false, false);\n        URL url = new URL(\"http://www.sourcedomain.com/#0\");\n        Metadata metadata = new Metadata();\n        String filterResult = allAllowed.filter(url, metadata, url.toExternalForm());\n    }", "original_test_prefix": "    @Test\n    public void testAnchorFilterFalse() throws MalformedURLException {\n        URLFilter allAllowed = createFilter(false, false);\n        URL url = new URL(\"http://www.sourcedomain.com/#0\");\n        Metadata metadata = new Metadata();\n        String filterResult = allAllowed.filter(url, metadata, url.toExternalForm());\n        Assert.assertEquals(url.toExternalForm(), filterResult);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.BasicURLNormalizerTest#testAnchorFilterFalse", "test_setup_list": []}
{"index": 178, "project_index": 94, "class_index": 3, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "BasicIndexingTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_name": "testRelativeCanonicalURL", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_setup": "@Before\n    public void setupIndexerBolt() {\n        bolt = new DummyIndexer();\n        setupIndexerBolt(bolt);\n    }", "test_setup_start_lineno": 35, "test_setup_end_lineno": 39, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_prefix": "    @Test\n    public void testRelativeCanonicalURL() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n        config.put(AbstractIndexerBolt.canonicalMetadataParamName, \"canonical\");\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"canonical\", \"/home\");\n\n        prepareIndexerBolt(config);\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 76, "test_prefix_end_lineno": 94, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focal_method": "    public void setValue(String key, String value) {\n        checkLockException();\n\n        md.put(key, new String[] {value});\n    }", "focal_method_start_lineno": 125, "focal_method_end_lineno": 129, "ground_truth_oracle": "Assert.assertEquals( \"Use the canonical URL if found\", \"http://www.digitalpebble.com/home\", fields.get(\"url\"));", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "    @Test\n    public void testRelativeCanonicalURL() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n        config.put(AbstractIndexerBolt.canonicalMetadataParamName, \"canonical\");\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"canonical\", \"/home\");\n\n        prepareIndexerBolt(config);\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n    }", "original_test_prefix": "    @Test\n    public void testRelativeCanonicalURL() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n        config.put(AbstractIndexerBolt.canonicalMetadataParamName, \"canonical\");\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"canonical\", \"/home\");\n\n        prepareIndexerBolt(config);\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n        Assert.assertEquals( \"Use the canonical URL if found\", \"http://www.digitalpebble.com/home\", fields.get(\"url\"));\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.indexer.BasicIndexingTest#testRelativeCanonicalURL", "test_setup_list": [{"test_setup": "@Before\n    public void setupIndexerBolt() {\n        bolt = new DummyIndexer();\n        setupIndexerBolt(bolt);\n    }", "start_lineno": 35, "end_lineno": 39}]}
{"index": 179, "project_index": 95, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "UrlUtilsTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/UrlUtilsTest.java", "test_name": "testCreateValidUrl", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/UrlUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/UrlUtilsTest.java", "test_prefix": "    @Test\n    public void testCreateValidUrl() throws Exception {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 43, "test_prefix_end_lineno": 46, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/util/UrlUtils.java", "focal_method": "    public static URL create(final String url) {\n        try {\n            return new URL(url);\n        } catch (MalformedURLException ex) {\n            throw new IllegalArgumentException(ex);\n        }\n    }", "focal_method_start_lineno": 36, "focal_method_end_lineno": 42, "ground_truth_oracle": "assertEquals(\"http://example.org\", UrlUtils.create(\"http://example.org\").toURI().toASCIIString());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testCreateValidUrl() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testCreateValidUrl() throws Exception {\n        assertEquals(\"http://example.org\", UrlUtils.create(\"http://example.org\").toURI().toASCIIString());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.util.UrlUtilsTest#testCreateValidUrl", "test_setup_list": []}
{"index": 180, "project_index": 96, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JmxAttributePollerTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_name": "testGetPolledObjects", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "test_setup_start_lineno": 77, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_prefix": "    @Test\n    public void testGetPolledObjects() throws Exception {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 129, "test_prefix_end_lineno": 132, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java", "focal_method": "    public List<Object> getPolledObjects() {\n        return Collections.unmodifiableList(polledObjects);\n    }", "focal_method_start_lineno": 91, "focal_method_end_lineno": 93, "ground_truth_oracle": "assertEquals(this.polledObjects, this.poller.getPolledObjects());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetPolledObjects() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testGetPolledObjects() throws Exception {\n        assertEquals(this.polledObjects, this.poller.getPolledObjects());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.JmxAttributePollerTest#testGetPolledObjects", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "start_lineno": 77, "end_lineno": 111}]}
{"index": 181, "project_index": 97, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AThreadPoolTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/concurrent/AThreadPoolTest.java", "test_name": "testPrime", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/concurrent/AThreadPoolTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/concurrent/AThreadPoolTest.java", "test_prefix": "    @Test\n    public void testPrime() {\n        <AssertPlaceHolder>;\n        assertEquals (2,  AThreadPoolImpl.prime (1, Collections.emptySet ()));\n        assertEquals (3,  AThreadPoolImpl.prime (2, Collections.emptySet ()));\n        assertEquals (5,  AThreadPoolImpl.prime (3, Collections.emptySet ()));\n        assertEquals (7,  AThreadPoolImpl.prime (4, Collections.emptySet ()));\n        assertEquals (11, AThreadPoolImpl.prime (5, Collections.emptySet ()));\n        assertEquals (13, AThreadPoolImpl.prime (6, Collections.emptySet ()));\n\n        assertEquals (1, AThreadPoolImpl.prime (0, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (3, AThreadPoolImpl.prime (1, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (7, AThreadPoolImpl.prime (2, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (11, AThreadPoolImpl.prime (3, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (13, AThreadPoolImpl.prime (4, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (17, AThreadPoolImpl.prime (5, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (19, AThreadPoolImpl.prime (6, new HashSet<> (Arrays.asList (2, 5))));\n    }", "test_prefix_start_lineno": 29, "test_prefix_end_lineno": 46, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/concurrent/AThreadPoolImpl.java", "focal_method": "    static int prime (int number, Set<Integer> exceptions) {\n        int numPrevPrimes = 0;\n\n        for (int candidate=1; candidate<Integer.MAX_VALUE; candidate++) {\n            if (isPrime (candidate) && !exceptions.contains (candidate)) {\n                if (numPrevPrimes >= number) {\n                    return candidate;\n                }\n                numPrevPrimes += 1;\n            }\n        }\n        return 1; // this should never happen, but '1' is a safe fallback\n    }", "focal_method_start_lineno": 127, "focal_method_end_lineno": 139, "ground_truth_oracle": "assertEquals (1, AThreadPoolImpl.prime (0, Collections.emptySet ()));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testPrime() {\n    }", "original_test_prefix": "    @Test\n    public void testPrime() {\n        assertEquals (1, AThreadPoolImpl.prime (0, Collections.emptySet ()));\n        assertEquals (2,  AThreadPoolImpl.prime (1, Collections.emptySet ()));\n        assertEquals (3,  AThreadPoolImpl.prime (2, Collections.emptySet ()));\n        assertEquals (5,  AThreadPoolImpl.prime (3, Collections.emptySet ()));\n        assertEquals (7,  AThreadPoolImpl.prime (4, Collections.emptySet ()));\n        assertEquals (11, AThreadPoolImpl.prime (5, Collections.emptySet ()));\n        assertEquals (13, AThreadPoolImpl.prime (6, Collections.emptySet ()));\n\n        assertEquals (1, AThreadPoolImpl.prime (0, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (3, AThreadPoolImpl.prime (1, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (7, AThreadPoolImpl.prime (2, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (11, AThreadPoolImpl.prime (3, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (13, AThreadPoolImpl.prime (4, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (17, AThreadPoolImpl.prime (5, new HashSet<> (Arrays.asList (2, 5))));\n        assertEquals (19, AThreadPoolImpl.prime (6, new HashSet<> (Arrays.asList (2, 5))));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.concurrent.AThreadPoolTest#testPrime", "test_setup_list": []}
{"index": 182, "project_index": 98, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "EbmlSintTest", "class_path": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java", "test_name": "testBytePacking", "test_setup_file_path": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java", "test_prefix": "    @Test\n    public void testBytePacking() throws Exception {\n        <AssertPlaceHolder>;\n        Assert.assertArrayEquals(new byte[]{0x5f, (byte)0x9f}, convertToBytes(-96));\n        Assert.assertArrayEquals(new byte[]{0x60, 0x5f}, convertToBytes(96));\n        Assert.assertArrayEquals(new byte[]{(byte) 0xBF}, convertToBytes(0));\n        \n        int value = -192;\n        int size = ebmlSignedLength(value);\n        value += signedComplement[size];\n        Assert.assertEquals(2, size);\n        Assert.assertArrayEquals(new byte[]{0x5f, 0x3f}, ebmlEncodeLen(value, size));\n    }", "test_prefix_start_lineno": 41, "test_prefix_end_lineno": 53, "focal_method_file_path": "src/main/java/org/jcodec/containers/mkv/boxes/EbmlSint.java", "focal_method": "    public static byte[] convertToBytes(long val) {\n        int num = ebmlSignedLength(val);\n        val += signedComplement[num];\n\n        return EbmlUtil.ebmlEncodeLen(val, num);\n    }", "focal_method_start_lineno": 58, "focal_method_end_lineno": 63, "ground_truth_oracle": "Assert.assertArrayEquals(new byte[]{0x5f, 0x3f}, convertToBytes(-192));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testBytePacking() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testBytePacking() throws Exception {\n        Assert.assertArrayEquals(new byte[]{0x5f, 0x3f}, convertToBytes(-192));\n        Assert.assertArrayEquals(new byte[]{0x5f, (byte)0x9f}, convertToBytes(-96));\n        Assert.assertArrayEquals(new byte[]{0x60, 0x5f}, convertToBytes(96));\n        Assert.assertArrayEquals(new byte[]{(byte) 0xBF}, convertToBytes(0));\n        \n        int value = -192;\n        int size = ebmlSignedLength(value);\n        value += signedComplement[size];\n        Assert.assertEquals(2, size);\n        Assert.assertArrayEquals(new byte[]{0x5f, 0x3f}, ebmlEncodeLen(value, size));\n    }", "test_with_params": false, "test_target": "org.jcodec.containers.mkv.boxes.EbmlSintTest#testBytePacking", "test_setup_list": []}
{"index": 183, "project_index": 99, "class_index": 0, "test_index": 0, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "DevUtilTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_name": "testParseNetworks", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }\n\n@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "test_setup_start_lineno": 56, "test_setup_end_lineno": 59, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_prefix": "    @Test\n    public void testParseNetworks() {\n        String[] networkArray = new String[]{\"bridge\"};\n        <AssertPlaceHolder>;\n\n        networkArray = new String[]{\"bridge\", \"myNet\"};\n        assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge:0xc000622000 myNet:0xc0006220c0]\"));\n\n        networkArray = new String[]{\"bridge\", \"myNet\", \"otherNet\"};\n        assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge:0xc000622000 myNet:0xc0006220c0 otherNet:0xc000622180]\"));\n\n        networkArray = new String[]{\"bridge\", \"myNet\"};\n        assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge myNet]\"));\n\n        networkArray = new String[]{\"bridge\", \"\"};\n        assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge: :myNet:]\"));\n\n        assertArrayEquals(null, DevUtil.parseNetworks(\"mapbridge:0xc000622000 myNet:0xc0006220c0 otherNet:0xc000622180]\"));\n        assertArrayEquals(null, DevUtil.parseNetworks(\"map[bridge:0xc000622000 myNet:0xc0006220c0 otherNet:0xc000622180\"));\n        assertArrayEquals(null, DevUtil.parseNetworks(\"[bridge:0xc000622000 myNet:0xc0006220c0 otherNet:0xc000622180]\"));\n        assertArrayEquals(null, DevUtil.parseNetworks(\"string\"));\n        assertArrayEquals(null, DevUtil.parseNetworks(\"\"));\n    }", "test_prefix_start_lineno": 473, "test_prefix_end_lineno": 495, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focal_method": "    protected static String[] parseNetworks(String dockerResult) {\n        // Example dockerResult value: map[bridge:0xc000622000 myNet:0xc0006220c0 otherNet:0xc000622180]\n        if (!dockerResult.matches(\"map\\\\[(.*?)\\\\]\")) {\n            return null;\n        }\n        String networkMap = dockerResult.substring(dockerResult.indexOf(\"[\")+1, dockerResult.indexOf(\"]\"));\n        String[] networkHex = networkMap.split(\" \");\n        String[] networks = new String[networkHex.length];\n        for (int i=0; i < networkHex.length; i++) {\n            networks[i] = networkHex[i].split(\":\")[0];\n        }\n        return networks;\n    }", "focal_method_start_lineno": 1657, "focal_method_end_lineno": 1669, "ground_truth_oracle": "assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge:0xc000622000]\"));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testParseNetworks() {\n        String[] networkArray = new String[]{\"bridge\"};\n    }", "original_test_prefix": "    @Test\n    public void testParseNetworks() {\n        String[] networkArray = new String[]{\"bridge\"};\n        assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge:0xc000622000]\"));\n\n        networkArray = new String[]{\"bridge\", \"myNet\"};\n        assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge:0xc000622000 myNet:0xc0006220c0]\"));\n\n        networkArray = new String[]{\"bridge\", \"myNet\", \"otherNet\"};\n        assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge:0xc000622000 myNet:0xc0006220c0 otherNet:0xc000622180]\"));\n\n        networkArray = new String[]{\"bridge\", \"myNet\"};\n        assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge myNet]\"));\n\n        networkArray = new String[]{\"bridge\", \"\"};\n        assertArrayEquals(networkArray, DevUtil.parseNetworks(\"map[bridge: :myNet:]\"));\n\n        assertArrayEquals(null, DevUtil.parseNetworks(\"mapbridge:0xc000622000 myNet:0xc0006220c0 otherNet:0xc000622180]\"));\n        assertArrayEquals(null, DevUtil.parseNetworks(\"map[bridge:0xc000622000 myNet:0xc0006220c0 otherNet:0xc000622180\"));\n        assertArrayEquals(null, DevUtil.parseNetworks(\"[bridge:0xc000622000 myNet:0xc0006220c0 otherNet:0xc000622180]\"));\n        assertArrayEquals(null, DevUtil.parseNetworks(\"string\"));\n        assertArrayEquals(null, DevUtil.parseNetworks(\"\"));\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.DevUtilTest#testParseNetworks", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }", "start_lineno": 56, "end_lineno": 59}, {"test_setup": "@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "start_lineno": 61, "end_lineno": 68}]}
{"index": 184, "project_index": 100, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_name": "testTriangle2", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 63, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testTriangle2() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:TriangleV, as: friend1}\");\n    query.append(\"  .out('TriangleE'){class:TriangleV, as: friend2, where: (uid = 1)}\");\n    query.append(\"  .out('TriangleE'){as: friend3},\");\n    query.append(\"{class:TriangleV, as: friend1}\");\n    query.append(\"  .out('TriangleE'){as: friend3}\");\n    query.append(\"return $patterns\");\n\n    List<ODocument> result = db.command(new OCommandSQL(query.toString())).execute();\n    <AssertPlaceHolder>;\n    ODocument doc = result.get(0);\n    ODocument friend1 = ((OIdentifiable) doc.field(\"friend1\")).getRecord();\n    ODocument friend2 = ((OIdentifiable) doc.field(\"friend2\")).getRecord();\n    ODocument friend3 = ((OIdentifiable) doc.field(\"friend3\")).getRecord();\n    assertEquals(0, friend1.<Object>field(\"uid\"));\n    assertEquals(1, friend2.<Object>field(\"uid\"));\n    assertEquals(2, friend3.<Object>field(\"uid\"));\n  }", "test_prefix_start_lineno": 944, "test_prefix_end_lineno": 964, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(1, result.size());", "ground_truth_oracle_lineno": 9, "test_prefix_wo_placeholder": "  @Test\n  public void testTriangle2() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:TriangleV, as: friend1}\");\n    query.append(\"  .out('TriangleE'){class:TriangleV, as: friend2, where: (uid = 1)}\");\n    query.append(\"  .out('TriangleE'){as: friend3},\");\n    query.append(\"{class:TriangleV, as: friend1}\");\n    query.append(\"  .out('TriangleE'){as: friend3}\");\n    query.append(\"return $patterns\");\n\n    List<ODocument> result = db.command(new OCommandSQL(query.toString())).execute();\n  }", "original_test_prefix": "  @Test\n  public void testTriangle2() {\n    StringBuilder query = new StringBuilder();\n    query.append(\"match \");\n    query.append(\"{class:TriangleV, as: friend1}\");\n    query.append(\"  .out('TriangleE'){class:TriangleV, as: friend2, where: (uid = 1)}\");\n    query.append(\"  .out('TriangleE'){as: friend3},\");\n    query.append(\"{class:TriangleV, as: friend1}\");\n    query.append(\"  .out('TriangleE'){as: friend3}\");\n    query.append(\"return $patterns\");\n\n    List<ODocument> result = db.command(new OCommandSQL(query.toString())).execute();\n    assertEquals(1, result.size());\n    ODocument doc = result.get(0);\n    ODocument friend1 = ((OIdentifiable) doc.field(\"friend1\")).getRecord();\n    ODocument friend2 = ((OIdentifiable) doc.field(\"friend2\")).getRecord();\n    ODocument friend3 = ((OIdentifiable) doc.field(\"friend3\")).getRecord();\n    assertEquals(0, friend1.<Object>field(\"uid\"));\n    assertEquals(1, friend2.<Object>field(\"uid\"));\n    assertEquals(2, friend3.<Object>field(\"uid\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionTest#testTriangle2", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 29, "end_lineno": 63}]}
{"index": 185, "project_index": 100, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODirtyManagerTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java", "test_name": "testLinkCollectionOther", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java", "test_prefix": "  @Test\n  public void testLinkCollectionOther() {\n    ODocument doc = new ODocument();\n    doc.field(\"test\", \"ddd\");\n    List<ODocument> lst = new ArrayList<ODocument>();\n    ODocument doc1 = new ODocument();\n    lst.add(doc1);\n    doc.field(\"list\", lst);\n    Set<ODocument> set = new HashSet<ODocument>();\n    ODocument doc2 = new ODocument();\n    set.add(doc2);\n    doc.field(\"set\", set);\n    ODocumentInternal.convertAllMultiValuesToTrackedVersions(doc);\n    ODirtyManager manager = ORecordInternal.getDirtyManager(doc1);\n    ODirtyManager manager2 = ORecordInternal.getDirtyManager(doc2);\n    <AssertPlaceHolder>;\n    assertEquals(3, manager.getNewRecords().size());\n  }", "test_prefix_start_lineno": 137, "test_prefix_end_lineno": 154, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java", "focal_method": "  public boolean isSame(ODirtyManager other) {\n    // other = other.getReal();\n    // if (overrider != null)\n    // return overrider.isSame(other);\n    return this.getReal() == other.getReal();\n  }", "focal_method_start_lineno": 75, "focal_method_end_lineno": 80, "ground_truth_oracle": "assertTrue(manager2.isSame(manager));", "ground_truth_oracle_lineno": 13, "test_prefix_wo_placeholder": "  @Test\n  public void testLinkCollectionOther() {\n    ODocument doc = new ODocument();\n    doc.field(\"test\", \"ddd\");\n    List<ODocument> lst = new ArrayList<ODocument>();\n    ODocument doc1 = new ODocument();\n    lst.add(doc1);\n    doc.field(\"list\", lst);\n    Set<ODocument> set = new HashSet<ODocument>();\n    ODocument doc2 = new ODocument();\n    set.add(doc2);\n    doc.field(\"set\", set);\n    ODocumentInternal.convertAllMultiValuesToTrackedVersions(doc);\n    ODirtyManager manager = ORecordInternal.getDirtyManager(doc1);\n    ODirtyManager manager2 = ORecordInternal.getDirtyManager(doc2);\n  }", "original_test_prefix": "  @Test\n  public void testLinkCollectionOther() {\n    ODocument doc = new ODocument();\n    doc.field(\"test\", \"ddd\");\n    List<ODocument> lst = new ArrayList<ODocument>();\n    ODocument doc1 = new ODocument();\n    lst.add(doc1);\n    doc.field(\"list\", lst);\n    Set<ODocument> set = new HashSet<ODocument>();\n    ODocument doc2 = new ODocument();\n    set.add(doc2);\n    doc.field(\"set\", set);\n    ODocumentInternal.convertAllMultiValuesToTrackedVersions(doc);\n    ODirtyManager manager = ORecordInternal.getDirtyManager(doc1);\n    ODirtyManager manager2 = ORecordInternal.getDirtyManager(doc2);\n    assertTrue(manager2.isSame(manager));\n    assertEquals(3, manager.getNewRecords().size());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.record.impl.ODirtyManagerTest#testLinkCollectionOther", "test_setup_list": []}
{"index": 186, "project_index": 100, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "TrackedSetTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedSetTest.java", "test_name": "testRemoveNotificationOne", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedSetTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedSetTest.java", "test_prefix": "  @Test\n  public void testRemoveNotificationOne() {\n    final ODocument doc = new ODocument();\n    ORecordInternal.unsetDirty(doc);\n    <AssertPlaceHolder>;\n\n    final OTrackedSet<String> trackedSet = new OTrackedSet<String>(doc);\n    trackedSet.add(\"value1\");\n    trackedSet.add(\"value2\");\n    trackedSet.add(\"value3\");\n\n    ORecordInternal.unsetDirty(doc);\n    Assert.assertFalse(doc.isDirty());\n\n    final ORef<Boolean> changed = new ORef<Boolean>(false);\n\n    trackedSet.addChangeListener(new OMultiValueChangeListener<String, String>() {\n      public void onAfterRecordChanged(final OMultiValueChangeEvent<String, String> event) {\n        Assert.assertEquals(event.getChangeType(), OMultiValueChangeEvent.OChangeType.REMOVE);\n        Assert.assertEquals(event.getOldValue(), \"value2\");\n        Assert.assertEquals(event.getKey(), \"value2\");\n        Assert.assertNull(event.getValue());\n\n        changed.value = true;\n      }\n    });\n\n    trackedSet.remove(\"value2\");\n    Assert.assertTrue(changed.value);\n    Assert.assertTrue(doc.isDirty());\n  }", "test_prefix_start_lineno": 106, "test_prefix_end_lineno": 136, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focal_method": "  public boolean isDirty() {\n    return _dirty;\n  }", "focal_method_start_lineno": 156, "focal_method_end_lineno": 158, "ground_truth_oracle": "Assert.assertFalse(doc.isDirty());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testRemoveNotificationOne() {\n    final ODocument doc = new ODocument();\n    ORecordInternal.unsetDirty(doc);\n  }", "original_test_prefix": "  @Test\n  public void testRemoveNotificationOne() {\n    final ODocument doc = new ODocument();\n    ORecordInternal.unsetDirty(doc);\n    Assert.assertFalse(doc.isDirty());\n\n    final OTrackedSet<String> trackedSet = new OTrackedSet<String>(doc);\n    trackedSet.add(\"value1\");\n    trackedSet.add(\"value2\");\n    trackedSet.add(\"value3\");\n\n    ORecordInternal.unsetDirty(doc);\n    Assert.assertFalse(doc.isDirty());\n\n    final ORef<Boolean> changed = new ORef<Boolean>(false);\n\n    trackedSet.addChangeListener(new OMultiValueChangeListener<String, String>() {\n      public void onAfterRecordChanged(final OMultiValueChangeEvent<String, String> event) {\n        Assert.assertEquals(event.getChangeType(), OMultiValueChangeEvent.OChangeType.REMOVE);\n        Assert.assertEquals(event.getOldValue(), \"value2\");\n        Assert.assertEquals(event.getKey(), \"value2\");\n        Assert.assertNull(event.getValue());\n\n        changed.value = true;\n      }\n    });\n\n    trackedSet.remove(\"value2\");\n    Assert.assertTrue(changed.value);\n    Assert.assertTrue(doc.isDirty());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.record.TrackedSetTest#testRemoveNotificationOne", "test_setup_list": []}
{"index": 187, "project_index": 100, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OLiveQueryRemoteTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/network/OLiveQueryRemoteTest.java", "test_name": "testRidSelect", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/network/OLiveQueryRemoteTest.java", "test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.SERVER_BACKWARD_COMPATIBILITY.setValue(false);\n    server = new OServer(false);\n    server.startup(\n            getClass().getClassLoader().getResourceAsStream(\"com/orientechnologies/orient/server/network/orientdb-server-config.xml\"));\n    server.activate();\n    orientDB = new OrientDB(\"remote:localhost:\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(OLiveQueryRemoteTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(OLiveQueryRemoteTest.class.getSimpleName(), \"admin\", \"admin\");\n  }", "test_setup_start_lineno": 48, "test_setup_end_lineno": 58, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/network/OLiveQueryRemoteTest.java", "test_prefix": "  @Test\n  public void testRidSelect() throws InterruptedException {\n    MyLiveQueryListener listener = new MyLiveQueryListener(new CountDownLatch(1));\n    OVertex item = database.newVertex();\n    item.save();\n    OLiveQueryMonitor live = database.live(\"LIVE SELECT FROM \" + item.getIdentity(), listener);\n    item.setProperty(\"x\", \"z\");\n    item.save();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 111, "test_prefix_end_lineno": 120, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/ORecord.java", "focal_method": "  <RET extends ORecord> RET save();", "focal_method_start_lineno": 133, "focal_method_end_lineno": 133, "ground_truth_oracle": "Assert.assertTrue(listener.latch.await(10, TimeUnit.SECONDS));", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test\n  public void testRidSelect() throws InterruptedException {\n    MyLiveQueryListener listener = new MyLiveQueryListener(new CountDownLatch(1));\n    OVertex item = database.newVertex();\n    item.save();\n    OLiveQueryMonitor live = database.live(\"LIVE SELECT FROM \" + item.getIdentity(), listener);\n    item.setProperty(\"x\", \"z\");\n    item.save();\n  }", "original_test_prefix": "  @Test\n  public void testRidSelect() throws InterruptedException {\n    MyLiveQueryListener listener = new MyLiveQueryListener(new CountDownLatch(1));\n    OVertex item = database.newVertex();\n    item.save();\n    OLiveQueryMonitor live = database.live(\"LIVE SELECT FROM \" + item.getIdentity(), listener);\n    item.setProperty(\"x\", \"z\");\n    item.save();\n    Assert.assertTrue(listener.latch.await(10, TimeUnit.SECONDS));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.network.OLiveQueryRemoteTest#testRidSelect", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.SERVER_BACKWARD_COMPATIBILITY.setValue(false);\n    server = new OServer(false);\n    server.startup(\n            getClass().getClassLoader().getResourceAsStream(\"com/orientechnologies/orient/server/network/orientdb-server-config.xml\"));\n    server.activate();\n    orientDB = new OrientDB(\"remote:localhost:\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(OLiveQueryRemoteTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(OLiveQueryRemoteTest.class.getSimpleName(), \"admin\", \"admin\");\n  }", "start_lineno": 48, "end_lineno": 58}]}
{"index": 188, "project_index": 100, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "RecursiveLinkedSaveTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/document/RecursiveLinkedSaveTest.java", "test_name": "testTxLinked", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/document/RecursiveLinkedSaveTest.java", "test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + RecursiveLinkedSaveTest.class.getSimpleName());\n    db.create();\n  }", "test_setup_start_lineno": 17, "test_setup_end_lineno": 21, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/document/RecursiveLinkedSaveTest.java", "test_prefix": "  @Test\n  public void testTxLinked() {\n    db.getMetadata().getSchema().createClass(\"Test\");\n    db.begin();\n    ODocument doc = new ODocument(\"Test\");\n    ODocument doc1 = new ODocument(\"Test\");\n    doc.field(\"link\", doc1);\n    ODocument doc2 = new ODocument(\"Test\");\n    doc1.field(\"link\", doc2);\n    doc2.field(\"link\", doc);\n    db.save(doc);\n    db.commit();\n    <AssertPlaceHolder>;\n    doc = db.load(doc.getIdentity());\n    doc1 = doc.field(\"link\");\n    doc2 = doc1.field(\"link\");\n    assertEquals(doc, doc2.field(\"link\"));\n  }", "test_prefix_start_lineno": 40, "test_prefix_end_lineno": 57, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocument.java", "focal_method": "  long countClass(String iClassName);", "focal_method_start_lineno": 100, "focal_method_end_lineno": 100, "ground_truth_oracle": "assertEquals(3, db.countClass(\"Test\"));", "ground_truth_oracle_lineno": 10, "test_prefix_wo_placeholder": "  @Test\n  public void testTxLinked() {\n    db.getMetadata().getSchema().createClass(\"Test\");\n    db.begin();\n    ODocument doc = new ODocument(\"Test\");\n    ODocument doc1 = new ODocument(\"Test\");\n    doc.field(\"link\", doc1);\n    ODocument doc2 = new ODocument(\"Test\");\n    doc1.field(\"link\", doc2);\n    doc2.field(\"link\", doc);\n    db.save(doc);\n    db.commit();\n  }", "original_test_prefix": "  @Test\n  public void testTxLinked() {\n    db.getMetadata().getSchema().createClass(\"Test\");\n    db.begin();\n    ODocument doc = new ODocument(\"Test\");\n    ODocument doc1 = new ODocument(\"Test\");\n    doc.field(\"link\", doc1);\n    ODocument doc2 = new ODocument(\"Test\");\n    doc1.field(\"link\", doc2);\n    doc2.field(\"link\", doc);\n    db.save(doc);\n    db.commit();\n    assertEquals(3, db.countClass(\"Test\"));\n    doc = db.load(doc.getIdentity());\n    doc1 = doc.field(\"link\");\n    doc2 = doc1.field(\"link\");\n    assertEquals(doc, doc2.field(\"link\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.document.RecursiveLinkedSaveTest#testTxLinked", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + RecursiveLinkedSaveTest.class.getSimpleName());\n    db.create();\n  }", "start_lineno": 17, "end_lineno": 21}]}
{"index": 189, "project_index": 101, "class_index": 0, "test_index": 0, "user_name": "redraiment", "repo_name": "jactiverecord", "sub_repos": [], "sub_repo": "", "commit_sha": "d051709c93204658e7f2cc96c9898201c7337269", "build_system": "mvn", "class_name": "SeqTest", "class_path": "src/test/java/me/zzp/util/SeqTest.java", "test_name": "testFormatMap", "test_setup_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_prefix": "  @Test\n  public void testFormatMap() {\n    String[] actuals = Seq.map(Arrays.asList(\"1\", \"2\", \"3\"), \"id = %s\").toArray(new String[0]);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 55, "test_prefix_end_lineno": 59, "focal_method_file_path": "src/main/java/me/zzp/util/Seq.java", "focal_method": "  public static List<String> map(Collection<?> from, String format) {\n    List<String> to = new ArrayList<>(from.size());\n    for (Object e : from) {\n      to.add(String.format(format, e));\n    }\n    return to;\n  }", "focal_method_start_lineno": 256, "focal_method_end_lineno": 262, "ground_truth_oracle": "Assert.assertArrayEquals(new String[] {\"id = 1\", \"id = 2\", \"id = 3\"}, actuals);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testFormatMap() {\n    String[] actuals = Seq.map(Arrays.asList(\"1\", \"2\", \"3\"), \"id = %s\").toArray(new String[0]);\n  }", "original_test_prefix": "  @Test\n  public void testFormatMap() {\n    String[] actuals = Seq.map(Arrays.asList(\"1\", \"2\", \"3\"), \"id = %s\").toArray(new String[0]);\n    Assert.assertArrayEquals(new String[] {\"id = 1\", \"id = 2\", \"id = 3\"}, actuals);\n  }", "test_with_params": false, "test_target": "me.zzp.util.SeqTest#testFormatMap", "test_setup_list": []}
{"index": 190, "project_index": 101, "class_index": 0, "test_index": 1, "user_name": "redraiment", "repo_name": "jactiverecord", "sub_repos": [], "sub_repo": "", "commit_sha": "d051709c93204658e7f2cc96c9898201c7337269", "build_system": "mvn", "class_name": "SeqTest", "class_path": "src/test/java/me/zzp/util/SeqTest.java", "test_name": "testCommaList", "test_setup_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_prefix": "  @Test\n  public void testCommaList() {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 39, "test_prefix_end_lineno": 42, "focal_method_file_path": "src/main/java/me/zzp/util/Seq.java", "focal_method": "  public static String join(Collection<?> list, String delimiter) {\n    if (list == null || list.isEmpty()) {\n      return \"\";\n    }\n    if (delimiter == null) {\n      delimiter = \"\";\n    }\n\n    StringBuilder s = new StringBuilder();\n    boolean first = true;\n    for (Object e : list) {\n      if (first) {\n        first = false;\n      } else {\n        s.append(delimiter);\n      }\n      s.append(e);\n    }\n    return s.toString();\n  }", "focal_method_start_lineno": 83, "focal_method_end_lineno": 102, "ground_truth_oracle": "Assert.assertEquals(\"1, 2, 3\", Seq.join(Arrays.asList(\"1\", \"2\", \"3\"), \", \"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testCommaList() {\n  }", "original_test_prefix": "  @Test\n  public void testCommaList() {\n    Assert.assertEquals(\"1, 2, 3\", Seq.join(Arrays.asList(\"1\", \"2\", \"3\"), \", \"));\n  }", "test_with_params": false, "test_target": "me.zzp.util.SeqTest#testCommaList", "test_setup_list": []}
{"index": 191, "project_index": 102, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "ColorTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ColorTest.java", "test_name": "striped", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ColorTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/ColorTest.java", "test_prefix": "    @Test\n    void striped() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 117, "test_prefix_end_lineno": 121, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Color.java", "focal_method": "    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public Attributes<ForGraphNode> striped() {\n        return attrs((Attributes) this, Style.STRIPED);\n    }", "focal_method_start_lineno": 81, "focal_method_end_lineno": 84, "ground_truth_oracle": "assertEquals(attrs(attr(\"color\", \"red:green\"), attr(\"style\", \"striped\")), Color.RED.and(Color.GREEN).striped());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void striped() {\n    }", "original_test_prefix": "    @Test\n    void striped() {\n        assertEquals(attrs(attr(\"color\", \"red:green\"), attr(\"style\", \"striped\")), Color.RED.and(Color.GREEN).striped());\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.ColorTest#striped", "test_setup_list": []}
{"index": 192, "project_index": 102, "class_index": 1, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "RankTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RankTest.java", "test_name": "newRank", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RankTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RankTest.java", "test_prefix": "    @Test\n    void newRank() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 44, "test_prefix_end_lineno": 47, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java", "focal_method": "    @SafeVarargs\n    static <F extends For> Attributes<F> attrs(Attributes<? extends F>... attributes) {\n        return attrs(asList(attributes));\n    }", "focal_method_start_lineno": 34, "focal_method_end_lineno": 37, "ground_truth_oracle": "assertEquals(attrs(attr(\"newrank\", true)), attrs(Rank.newRank()));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void newRank() {\n    }", "original_test_prefix": "    @Test\n    void newRank() {\n        assertEquals(attrs(attr(\"newrank\", true)), attrs(Rank.newRank()));\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.RankTest#newRank", "test_setup_list": []}
{"index": 193, "project_index": 103, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "FramedataImpl1Test", "class_path": "src/test/java/org/java_websocket/framing/FramedataImpl1Test.java", "test_name": "testDefaultValues", "test_setup_file_path": "src/test/java/org/java_websocket/framing/FramedataImpl1Test.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/framing/FramedataImpl1Test.java", "test_prefix": "  @Test\n  public void testDefaultValues() {\n    FramedataImpl1 binary = FramedataImpl1.get(Opcode.BINARY);\n    <AssertPlaceHolder>;\n    assertEquals(\"Fin must be set\", true, binary.isFin());\n    assertEquals(\"TransferedMask must not be set\", false, binary.getTransfereMasked());\n    assertEquals(\"Payload must be empty\", 0, binary.getPayloadData().capacity());\n    assertEquals(\"RSV1 must be false\", false, binary.isRSV1());\n    assertEquals(\"RSV2 must be false\", false, binary.isRSV2());\n    assertEquals(\"RSV3 must be false\", false, binary.isRSV3());\n  }", "test_prefix_start_lineno": 41, "test_prefix_end_lineno": 51, "focal_method_file_path": "src/main/java/org/java_websocket/framing/FramedataImpl1.java", "focal_method": "  @Override\n  public Opcode getOpcode() {\n    return optcode;\n  }", "focal_method_start_lineno": 114, "focal_method_end_lineno": 117, "ground_truth_oracle": "assertEquals(\"Opcode must be equal\", Opcode.BINARY, binary.getOpcode());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testDefaultValues() {\n    FramedataImpl1 binary = FramedataImpl1.get(Opcode.BINARY);\n  }", "original_test_prefix": "  @Test\n  public void testDefaultValues() {\n    FramedataImpl1 binary = FramedataImpl1.get(Opcode.BINARY);\n    assertEquals(\"Opcode must be equal\", Opcode.BINARY, binary.getOpcode());\n    assertEquals(\"Fin must be set\", true, binary.isFin());\n    assertEquals(\"TransferedMask must not be set\", false, binary.getTransfereMasked());\n    assertEquals(\"Payload must be empty\", 0, binary.getPayloadData().capacity());\n    assertEquals(\"RSV1 must be false\", false, binary.isRSV1());\n    assertEquals(\"RSV2 must be false\", false, binary.isRSV2());\n    assertEquals(\"RSV3 must be false\", false, binary.isRSV3());\n  }", "test_with_params": false, "test_target": "org.java_websocket.framing.FramedataImpl1Test#testDefaultValues", "test_setup_list": []}
{"index": 194, "project_index": 104, "class_index": 0, "test_index": 0, "user_name": "cucumber-ltd", "repo_name": "cucumber-pro-plugin-jvm", "sub_repos": [], "sub_repo": "", "commit_sha": "a09ee0b1682d3cd8b68c240820e647d4515e931f", "build_system": "mvn", "class_name": "ConfigTest", "class_path": "src/test/java/io/cucumber/pro/config/ConfigTest.java", "test_name": "has_yaml_representation", "test_setup_file_path": "src/test/java/io/cucumber/pro/config/ConfigTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/cucumber/pro/config/ConfigTest.java", "test_prefix": "    @Test\n    public void has_yaml_representation() {\n        Config config = new Config();\n        config.set(\"a.b.c.d.e\", \"1\");\n        config.set(\"aa.x.y.z\", \"X\");\n        config.set(\"a.c.d.e\", \"3\");\n        config.set(\"a.d.e\", \"4\");\n\n        String expected = \"\" +\n                \"a:\\n\" +\n                \"  b:\\n\" +\n                \"    c:\\n\" +\n                \"      d:\\n\" +\n                \"        e: 1\\n\" +\n                \"  c:\\n\" +\n                \"    d:\\n\" +\n                \"      e: 3\\n\" +\n                \"  d:\\n\" +\n                \"    e: 4\\n\" +\n                \"\";\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 66, "test_prefix_end_lineno": 87, "focal_method_file_path": "src/main/java/io/cucumber/pro/config/Config.java", "focal_method": "    public String toYaml(String rootKey) {\n        try {\n            StringBuilder out = new StringBuilder();\n            this.print(0, rootKey, out);\n            return out.toString();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }", "focal_method_start_lineno": 100, "focal_method_end_lineno": 108, "ground_truth_oracle": "assertEquals(expected, config.toYaml(\"a\"));", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void has_yaml_representation() {\n        Config config = new Config();\n        config.set(\"a.b.c.d.e\", \"1\");\n        config.set(\"aa.x.y.z\", \"X\");\n        config.set(\"a.c.d.e\", \"3\");\n        config.set(\"a.d.e\", \"4\");\n\n        String expected = \"\" +\n                \"a:\\n\" +\n                \"  b:\\n\" +\n                \"    c:\\n\" +\n                \"      d:\\n\" +\n                \"        e: 1\\n\" +\n                \"  c:\\n\" +\n                \"    d:\\n\" +\n                \"      e: 3\\n\" +\n                \"  d:\\n\" +\n                \"    e: 4\\n\" +\n                \"\";\n    }", "original_test_prefix": "    @Test\n    public void has_yaml_representation() {\n        Config config = new Config();\n        config.set(\"a.b.c.d.e\", \"1\");\n        config.set(\"aa.x.y.z\", \"X\");\n        config.set(\"a.c.d.e\", \"3\");\n        config.set(\"a.d.e\", \"4\");\n\n        String expected = \"\" +\n                \"a:\\n\" +\n                \"  b:\\n\" +\n                \"    c:\\n\" +\n                \"      d:\\n\" +\n                \"        e: 1\\n\" +\n                \"  c:\\n\" +\n                \"    d:\\n\" +\n                \"      e: 3\\n\" +\n                \"  d:\\n\" +\n                \"    e: 4\\n\" +\n                \"\";\n        assertEquals(expected, config.toYaml(\"a\"));\n    }", "test_with_params": false, "test_target": "io.cucumber.pro.config.ConfigTest#has_yaml_representation", "test_setup_list": []}
{"index": 195, "project_index": 105, "class_index": 0, "test_index": 0, "user_name": "rockagen", "repo_name": "commons-lib", "sub_repos": [], "sub_repo": "", "commit_sha": "f37141cf40be79d130db804c39ce61690541d5f1", "build_system": "mvn", "class_name": "CommUtilTest", "class_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_name": "testSameChars", "test_setup_file_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_prefix": "    @Test\n    public void testSameChars() {\n        <AssertPlaceHolder>;\n        Assert.assertEquals(\"b\",CommUtil.repeatChar('b', 1));\n        Assert.assertEquals(\"\",CommUtil.repeatChar('b', 0));\n        Assert.assertEquals(\"\",CommUtil.repeatChar('b', -1));\n\n    }", "test_prefix_start_lineno": 65, "test_prefix_end_lineno": 72, "focal_method_file_path": "src/main/java/com/rockagen/commons/util/CommUtil.java", "focal_method": "    public static String repeatChar(char cha, int len) {\n        len = len < 0 ? 0 : len;\n        char[] c = new char[len];\n        for (int i = 0; i < len; i++)\n            c[i] = cha;\n        return new String(c);\n    }", "focal_method_start_lineno": 1233, "focal_method_end_lineno": 1239, "ground_truth_oracle": "Assert.assertEquals(\"bbbbbbbbbb\",CommUtil.repeatChar('b', 10));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testSameChars() {\n    }", "original_test_prefix": "    @Test\n    public void testSameChars() {\n        Assert.assertEquals(\"bbbbbbbbbb\",CommUtil.repeatChar('b', 10));\n        Assert.assertEquals(\"b\",CommUtil.repeatChar('b', 1));\n        Assert.assertEquals(\"\",CommUtil.repeatChar('b', 0));\n        Assert.assertEquals(\"\",CommUtil.repeatChar('b', -1));\n\n    }", "test_with_params": false, "test_target": "com.rockagen.commons.util.CommUtilTest#testSameChars", "test_setup_list": []}
{"index": 196, "project_index": 106, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "RpcServerTest", "class_path": "src/test/java/com/alipay/remoting/rpc/RpcServerTest.java", "test_name": "doTestRandomPortConstructor", "test_setup_file_path": "src/test/java/com/alipay/remoting/rpc/RpcServerTest.java", "test_setup": "@Before\n    public void init() {\n    }", "test_setup_start_lineno": 35, "test_setup_end_lineno": 37, "test_prefix_file_path": "src/test/java/com/alipay/remoting/rpc/RpcServerTest.java", "test_prefix": "    @Test\n    public void doTestRandomPortConstructor() {\n        RpcServer rpcServer = new RpcServer();\n        rpcServer.startup();\n        <AssertPlaceHolder>;\n        rpcServer.shutdown();\n    }", "test_prefix_start_lineno": 49, "test_prefix_end_lineno": 55, "focal_method_file_path": "src/main/java/com/alipay/remoting/AbstractRemotingServer.java", "focal_method": "    @Override\n    public int port() {\n        return port;\n    }", "focal_method_start_lineno": 121, "focal_method_end_lineno": 124, "ground_truth_oracle": "Assert.assertNotEquals(0, rpcServer.port());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void doTestRandomPortConstructor() {\n        RpcServer rpcServer = new RpcServer();\n        rpcServer.startup();\n    }", "original_test_prefix": "    @Test\n    public void doTestRandomPortConstructor() {\n        RpcServer rpcServer = new RpcServer();\n        rpcServer.startup();\n        Assert.assertNotEquals(0, rpcServer.port());\n        rpcServer.shutdown();\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.rpc.RpcServerTest#doTestRandomPortConstructor", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n    }", "start_lineno": 35, "end_lineno": 37}]}
{"index": 197, "project_index": 107, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "AgentsFileTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/common/AgentsFileTest.java", "test_name": "testLoad_emptyTag", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/common/AgentsFileTest.java", "test_setup": "@Before\n    public void before() throws IOException {\n        agentsFile = ensureExistingFile(\"AgentsFileTest-agents.txt\");\n    }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 32, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/common/AgentsFileTest.java", "test_prefix": "    @Test\n    public void testLoad_emptyTag() {\n        writeText(\"192.168.1.1|\", agentsFile);\n\n        registry = load(agentsFile);\n        <AssertPlaceHolder>;\n\n        AgentData agentData = registry.getFirstAgent();\n        assertEquals(\"192.168.1.1\", agentData.getPublicAddress());\n        assertEquals(\"192.168.1.1\", agentData.getPrivateAddress());\n        assertEquals(toMap(),agentData.getTags());\n    }", "test_prefix_start_lineno": 69, "test_prefix_end_lineno": 80, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java", "focal_method": "    public int agentCount() {\n        return agents.size();\n    }", "focal_method_start_lineno": 97, "focal_method_end_lineno": 99, "ground_truth_oracle": "assertEquals(1, registry.agentCount());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testLoad_emptyTag() {\n        writeText(\"192.168.1.1|\", agentsFile);\n\n        registry = load(agentsFile);\n    }", "original_test_prefix": "    @Test\n    public void testLoad_emptyTag() {\n        writeText(\"192.168.1.1|\", agentsFile);\n\n        registry = load(agentsFile);\n        assertEquals(1, registry.agentCount());\n\n        AgentData agentData = registry.getFirstAgent();\n        assertEquals(\"192.168.1.1\", agentData.getPublicAddress());\n        assertEquals(\"192.168.1.1\", agentData.getPrivateAddress());\n        assertEquals(toMap(),agentData.getTags());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.common.AgentsFileTest#testLoad_emptyTag", "test_setup_list": [{"test_setup": "@Before\n    public void before() throws IOException {\n        agentsFile = ensureExistingFile(\"AgentsFileTest-agents.txt\");\n    }", "start_lineno": 29, "end_lineno": 32}]}
{"index": 198, "project_index": 108, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActivityTest", "class_path": "src/test/java/gov/adlnet/xapi/ActivityTest.java", "test_name": "testSerialize", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActivityTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String id = \"http://example.com/activities/unit-testing\";\n        ActivityDefinition definition = new ActivityDefinition();\n        HashMap<String, String> name = new HashMap<String, String>();\n        name.put(\"en-US\", \"Unit Testing\");\n        definition.setName(name);\n        activity = new Activity(id, definition);\n        assertNotNull(activity);\n        \n    }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 31, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActivityTest.java", "test_prefix": "    @Test\n    public void testSerialize() {\n        String expected = \"http://example.com/activities/unit-testing\";\n        JsonElement actual = activity.serialize();\n        <AssertPlaceHolder>;\n        assert(actual.isJsonObject());\n        JsonObject obj = (JsonObject) actual;\n        assert(obj.get(\"id\").toString().contains(expected));    \n    }", "test_prefix_start_lineno": 107, "test_prefix_end_lineno": 115, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Activity.java", "focal_method": "    public JsonElement serialize() {\n        JsonObject obj = new JsonObject();\n        if (this.id != null) {\n            obj.addProperty(\"id\", this.id);\n        }\n        if (this.definition != null) {\n            obj.add(\"definition\", this.definition.serialize());\n        }\n        return obj;\n    }", "focal_method_start_lineno": 43, "focal_method_end_lineno": 52, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testSerialize() {\n        String expected = \"http://example.com/activities/unit-testing\";\n        JsonElement actual = activity.serialize();\n    }", "original_test_prefix": "    @Test\n    public void testSerialize() {\n        String expected = \"http://example.com/activities/unit-testing\";\n        JsonElement actual = activity.serialize();\n        assertNotNull(actual);\n        assert(actual.isJsonObject());\n        JsonObject obj = (JsonObject) actual;\n        assert(obj.get(\"id\").toString().contains(expected));    \n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActivityTest#testSerialize", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String id = \"http://example.com/activities/unit-testing\";\n        ActivityDefinition definition = new ActivityDefinition();\n        HashMap<String, String> name = new HashMap<String, String>();\n        name.put(\"en-US\", \"Unit Testing\");\n        definition.setName(name);\n        activity = new Activity(id, definition);\n        assertNotNull(activity);\n        \n    }", "start_lineno": 21, "end_lineno": 31}]}
{"index": 199, "project_index": 109, "class_index": 0, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "core", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "GZipIntegrationTest", "class_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java", "test_name": "fixedLengthContentIsEncodedProperly", "test_setup_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java", "test_setup": "", "test_setup_start_lineno": 54, "test_setup_end_lineno": 63, "test_prefix_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java", "test_prefix": "    @Test\n    public void fixedLengthContentIsEncodedProperly() throws IOException {\n        testServer.response = Response.newFixedLengthResponse(\"This is a test\");\n        HttpGet request = new HttpGet(\"http://localhost:8192/\");\n        request.addHeader(\"Accept-encoding\", \"gzip\");\n        HttpResponse response = new DecompressingHttpClient(httpclient).execute(request);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 123, "test_prefix_end_lineno": 130, "focal_method_file_path": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java", "focal_method": "    public static Response newFixedLengthResponse(String msg) {\n        return newFixedLengthResponse(Status.OK, NanoHTTPD.MIME_HTML, msg);\n    }", "focal_method_start_lineno": 431, "focal_method_end_lineno": 433, "ground_truth_oracle": "assertEquals(\"This is a test\", EntityUtils.toString(response.getEntity()));", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void fixedLengthContentIsEncodedProperly() throws IOException {\n        testServer.response = Response.newFixedLengthResponse(\"This is a test\");\n        HttpGet request = new HttpGet(\"http://localhost:8192/\");\n        request.addHeader(\"Accept-encoding\", \"gzip\");\n        HttpResponse response = new DecompressingHttpClient(httpclient).execute(request);\n    }", "original_test_prefix": "    @Test\n    public void fixedLengthContentIsEncodedProperly() throws IOException {\n        testServer.response = Response.newFixedLengthResponse(\"This is a test\");\n        HttpGet request = new HttpGet(\"http://localhost:8192/\");\n        request.addHeader(\"Accept-encoding\", \"gzip\");\n        HttpResponse response = new DecompressingHttpClient(httpclient).execute(request);\n        assertEquals(\"This is a test\", EntityUtils.toString(response.getEntity()));\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.protocols.http.integration.GZipIntegrationTest#fixedLengthContentIsEncodedProperly", "test_setup_list": []}
{"index": 200, "project_index": 110, "class_index": 0, "test_index": 0, "user_name": "jribble", "repo_name": "Java-Websockify", "sub_repos": [], "sub_repo": "", "commit_sha": "3aa62299b11023676dada7ec3b8214960c5dcce2", "build_system": "mvn", "class_name": "FlashPolicyHandlerTest", "class_path": "src/test/java/com/netiq/websockify/FlashPolicyHandlerTest.java", "test_name": "testDecodeCustomResponse", "test_setup_file_path": "src/test/java/com/netiq/websockify/FlashPolicyHandlerTest.java", "test_setup": "@Before\n    public void setUp() {\n        embedder = new DecoderEmbedder<FlashPolicyRequest>(new FlashPolicyHandler());\n    }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 24, "test_prefix_file_path": "src/test/java/com/netiq/websockify/FlashPolicyHandlerTest.java", "test_prefix": "    @Test\n    public void testDecodeCustomResponse() {\n        String XML = \"<myresponse>\";\n        ChannelBuffer policyResponse = ChannelBuffers.copiedBuffer(XML, CharsetUtil.UTF_8);\n        embedder = new DecoderEmbedder<FlashPolicyRequest>(new FlashPolicyHandler(policyResponse));\n        \n        String request = \"<policy-file-request/>\";\n        byte[] b = request.getBytes();\n        ChannelBuffer buf = wrappedBuffer(b);\n        embedder.offer(buf);\n\n        Object first = embedder.poll();\n        ChannelBuffer response = (ChannelBuffer) first;\n        String resp = new String(response.array(), 0, response.readableBytes());\n        <AssertPlaceHolder>;\n        FlashPolicyRequest fpr = embedder.poll(); \n        assertTrue( fpr instanceof FlashPolicyRequest);\n    }", "test_prefix_start_lineno": 41, "test_prefix_end_lineno": 58, "focal_method_file_path": "src/main/java/com/netiq/websockify/FlashPolicyHandler.java", "focal_method": "    public FlashPolicyHandler(ChannelBuffer policyResponse) {\n        super();\n        this.policyResponse = policyResponse;\n    }", "focal_method_start_lineno": 46, "focal_method_end_lineno": 49, "ground_truth_oracle": "assertTrue(XML.equals(resp));", "ground_truth_oracle_lineno": 10, "test_prefix_wo_placeholder": "    @Test\n    public void testDecodeCustomResponse() {\n        String XML = \"<myresponse>\";\n        ChannelBuffer policyResponse = ChannelBuffers.copiedBuffer(XML, CharsetUtil.UTF_8);\n        embedder = new DecoderEmbedder<FlashPolicyRequest>(new FlashPolicyHandler(policyResponse));\n        \n        String request = \"<policy-file-request/>\";\n        byte[] b = request.getBytes();\n        ChannelBuffer buf = wrappedBuffer(b);\n        embedder.offer(buf);\n\n        Object first = embedder.poll();\n        ChannelBuffer response = (ChannelBuffer) first;\n        String resp = new String(response.array(), 0, response.readableBytes());\n    }", "original_test_prefix": "    @Test\n    public void testDecodeCustomResponse() {\n        String XML = \"<myresponse>\";\n        ChannelBuffer policyResponse = ChannelBuffers.copiedBuffer(XML, CharsetUtil.UTF_8);\n        embedder = new DecoderEmbedder<FlashPolicyRequest>(new FlashPolicyHandler(policyResponse));\n        \n        String request = \"<policy-file-request/>\";\n        byte[] b = request.getBytes();\n        ChannelBuffer buf = wrappedBuffer(b);\n        embedder.offer(buf);\n\n        Object first = embedder.poll();\n        ChannelBuffer response = (ChannelBuffer) first;\n        String resp = new String(response.array(), 0, response.readableBytes());\n        assertTrue(XML.equals(resp));\n        FlashPolicyRequest fpr = embedder.poll(); \n        assertTrue( fpr instanceof FlashPolicyRequest);\n    }", "test_with_params": false, "test_target": "com.netiq.websockify.FlashPolicyHandlerTest#testDecodeCustomResponse", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        embedder = new DecoderEmbedder<FlashPolicyRequest>(new FlashPolicyHandler());\n    }", "start_lineno": 21, "end_lineno": 24}]}
{"index": 201, "project_index": 111, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "ImageStreamServiceTest", "class_path": "core/src/test/java/io/fabric8/maven/core/service/openshift/ImageStreamServiceTest.java", "test_name": "should_return_newer_tag", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/service/openshift/ImageStreamServiceTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/service/openshift/ImageStreamServiceTest.java", "test_prefix": "    @Test\n    public void should_return_newer_tag() throws Exception {\n\n        ImageStreamService service = new ImageStreamService(client, log);\n        TagEvent oldTag = new TagEvent(\"2018-03-09T03:27:05Z\\n\", null, null, null);\n        TagEvent latestTag = new TagEvent(\"2018-03-09T03:28:05Z\\n\", null, null, null);\n\n        TagEvent resultedTag = service.newerTag(oldTag, latestTag);\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 153, "test_prefix_end_lineno": 165, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/service/openshift/ImageStreamService.java", "focal_method": "    public TagEvent newerTag(TagEvent tag1, TagEvent tag2) {\n        Date tag1Date = extractDate(tag1);\n        Date tag2Date = extractDate(tag2);\n\n        if(tag1Date == null) {\n            return tag2;\n        }\n\n        if(tag2Date == null) {\n            return tag1;\n        }\n\n        return tag1Date.compareTo(tag2Date) > 0 ? tag1 : tag2;\n    }", "focal_method_start_lineno": 238, "focal_method_end_lineno": 251, "ground_truth_oracle": "Assert.assertEquals(latestTag, resultedTag);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void should_return_newer_tag() throws Exception {\n\n        ImageStreamService service = new ImageStreamService(client, log);\n        TagEvent oldTag = new TagEvent(\"2018-03-09T03:27:05Z\\n\", null, null, null);\n        TagEvent latestTag = new TagEvent(\"2018-03-09T03:28:05Z\\n\", null, null, null);\n\n        TagEvent resultedTag = service.newerTag(oldTag, latestTag);\n\n    }", "original_test_prefix": "    @Test\n    public void should_return_newer_tag() throws Exception {\n\n        ImageStreamService service = new ImageStreamService(client, log);\n        TagEvent oldTag = new TagEvent(\"2018-03-09T03:27:05Z\\n\", null, null, null);\n        TagEvent latestTag = new TagEvent(\"2018-03-09T03:28:05Z\\n\", null, null, null);\n\n        TagEvent resultedTag = service.newerTag(oldTag, latestTag);\n\n        Assert.assertEquals(latestTag, resultedTag);\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.service.openshift.ImageStreamServiceTest#should_return_newer_tag", "test_setup_list": []}
{"index": 202, "project_index": 112, "class_index": 0, "test_index": 0, "user_name": "fluent", "repo_name": "fluent-logger-java", "sub_repos": [], "sub_repo": "", "commit_sha": "2e5fdf2dbed59cc5af88442ceae6cbe72f321060", "build_system": "mvn", "class_name": "TestBugfixes", "class_path": "src/test/java/org/fluentd/logger/TestBugfixes.java", "test_name": "validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters", "test_setup_file_path": "src/test/java/org/fluentd/logger/TestBugfixes.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/fluentd/logger/TestBugfixes.java", "test_prefix": "    @Test\n    public void validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters() {\n\n        System.setProperty(Config.FLUENT_SENDER_CLASS, \"org.fluentd.logger.sender.NullSender\");        \n        FluentLogger logger = FluentLogger.getLogger(\"test\");\n\n        logger.log(\"tag\", Collections.<String, Object>emptyMap());\n        \n\n        logger.close();\n        <AssertPlaceHolder>;\n        \n\n        FluentLogger logger2 = FluentLogger.getLogger(\"test\");\n\n        logger2.log(\"tag\", Collections.<String, Object>emptyMap());\n    }", "test_prefix_start_lineno": 12, "test_prefix_end_lineno": 30, "focal_method_file_path": "src/main/java/org/fluentd/logger/FluentLogger.java", "focal_method": "    public void close() {\n        if (sender != null) {\n            sender.flush();\n            sender.close();\n            sender = null;\n        }\n        factory.purgeLogger(this);\n    }", "focal_method_start_lineno": 109, "focal_method_end_lineno": 116, "ground_truth_oracle": "assertEquals(null, logger.sender);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters() {\n\n        System.setProperty(Config.FLUENT_SENDER_CLASS, \"org.fluentd.logger.sender.NullSender\");        \n        FluentLogger logger = FluentLogger.getLogger(\"test\");\n\n        logger.log(\"tag\", Collections.<String, Object>emptyMap());\n        \n\n        logger.close();\n    }", "original_test_prefix": "    @Test\n    public void validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters() {\n\n        System.setProperty(Config.FLUENT_SENDER_CLASS, \"org.fluentd.logger.sender.NullSender\");        \n        FluentLogger logger = FluentLogger.getLogger(\"test\");\n\n        logger.log(\"tag\", Collections.<String, Object>emptyMap());\n        \n\n        logger.close();\n        assertEquals(null, logger.sender);\n        \n\n        FluentLogger logger2 = FluentLogger.getLogger(\"test\");\n\n        logger2.log(\"tag\", Collections.<String, Object>emptyMap());\n    }", "test_with_params": false, "test_target": "org.fluentd.logger.TestBugfixes#validLoggerReturned_whenOpenThenCloseThenOpenWithSameParameters", "test_setup_list": []}
{"index": 203, "project_index": 113, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JMXRemoteUrlConnectionFactoryTest", "class_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java", "test_name": "testGetSetConnectionFactoryDelegate", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMBeanConnectionFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMBeanConnection = Mockito.mock(JMXMBeanConnection.class);\n        this.mockLog = Mockito.mock(Logger.class);\n\n        this.factory = new JMXRemoteUrlConnectionFactory(this.mockJmxServiceUrl);\n\n        Mockito.when(this.mockConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMBeanConnectionFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMBeanConnection);\n    }", "test_setup_start_lineno": 48, "test_setup_end_lineno": 63, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java", "test_prefix": "    @Test\n    public void testGetSetConnectionFactoryDelegate () throws Exception {\n        <AssertPlaceHolder>;\n\n        this.factory.setConnectorFactoryDelegate(this.mockConnectorFactoryDelegate);\n        assertSame(this.mockConnectorFactoryDelegate, this.factory.getConnectorFactoryDelegate());\n    }", "test_prefix_start_lineno": 70, "test_prefix_end_lineno": 76, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactory.java", "focal_method": "    public JMXConnectorFactoryDelegate getConnectorFactoryDelegate() {\n        return connectorFactoryDelegate;\n    }", "focal_method_start_lineno": 55, "focal_method_end_lineno": 57, "ground_truth_oracle": "assertTrue(this.factory.getConnectorFactoryDelegate() instanceof DefaultJmxConnectorFactoryDelegate);", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetConnectionFactoryDelegate () throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetConnectionFactoryDelegate () throws Exception {\n        assertTrue(this.factory.getConnectorFactoryDelegate() instanceof DefaultJmxConnectorFactoryDelegate);\n\n        this.factory.setConnectorFactoryDelegate(this.mockConnectorFactoryDelegate);\n        assertSame(this.mockConnectorFactoryDelegate, this.factory.getConnectorFactoryDelegate());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.connection.impl.JMXRemoteUrlConnectionFactoryTest#testGetSetConnectionFactoryDelegate", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMBeanConnectionFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMBeanConnection = Mockito.mock(JMXMBeanConnection.class);\n        this.mockLog = Mockito.mock(Logger.class);\n\n        this.factory = new JMXRemoteUrlConnectionFactory(this.mockJmxServiceUrl);\n\n        Mockito.when(this.mockConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMBeanConnectionFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMBeanConnection);\n    }", "start_lineno": 48, "end_lineno": 63}]}
{"index": 204, "project_index": 113, "class_index": 1, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JMXJvmIdConnectionFactoryTest", "class_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_name": "testGetSetAttacher", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "test_setup_start_lineno": 54, "test_setup_end_lineno": 78, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_prefix": "    @Test\n    public void testGetSetAttacher() {\n        <AssertPlaceHolder>;\n\n        this.factory.setAttacher(this.mockAttacher);\n        assertSame(this.mockAttacher, this.factory.getAttacher());\n    }", "test_prefix_start_lineno": 89, "test_prefix_end_lineno": 95, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focal_method": "    public VirtualMachineAttacher getAttacher() {\n        return attacher;\n    }", "focal_method_start_lineno": 72, "focal_method_end_lineno": 74, "ground_truth_oracle": "assertTrue(this.factory.getAttacher() instanceof DefaultVirtualMachineAttacher);", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetAttacher() {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetAttacher() {\n        assertTrue(this.factory.getAttacher() instanceof DefaultVirtualMachineAttacher);\n\n        this.factory.setAttacher(this.mockAttacher);\n        assertSame(this.mockAttacher, this.factory.getAttacher());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.connection.impl.JMXJvmIdConnectionFactoryTest#testGetSetAttacher", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "start_lineno": 54, "end_lineno": 78}]}
{"index": 205, "project_index": 113, "class_index": 2, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JmxAttributePollerTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_name": "testGetStepAfterShutdown", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "test_setup_start_lineno": 77, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_prefix": "    @Test\n    public void testGetStepAfterShutdown() throws Exception {\n        this.poller.shutdown();\n\n        JmxAttributePoller.PollOneObjectSchedulerProcess process = this.poller.new PollOneObjectSchedulerProcess(\"\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 522, "test_prefix_end_lineno": 528, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java", "focal_method": "        @Override\n        public Step getNextStep() {\n            if (done || shutdownInd) {\n                return null;\n            }\n\n            Step result = new Step() {\n                @Override\n                public void execute() {\n                    try {\n                        pollOneObject(target);\n                    } catch (Exception exc) {\n                        failureException = exc;\n                    } finally {\n                        done = true;\n                    }\n                }\n\n                @Override\n                public boolean isBlocking() {\n                    return true;\n                }\n            };\n\n            return result;\n        }", "focal_method_start_lineno": 320, "focal_method_end_lineno": 345, "ground_truth_oracle": "assertNull(process.getNextStep());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetStepAfterShutdown() throws Exception {\n        this.poller.shutdown();\n\n        JmxAttributePoller.PollOneObjectSchedulerProcess process = this.poller.new PollOneObjectSchedulerProcess(\"\");\n    }", "original_test_prefix": "    @Test\n    public void testGetStepAfterShutdown() throws Exception {\n        this.poller.shutdown();\n\n        JmxAttributePoller.PollOneObjectSchedulerProcess process = this.poller.new PollOneObjectSchedulerProcess(\"\");\n        assertNull(process.getNextStep());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.JmxAttributePollerTest#testGetStepAfterShutdown", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "start_lineno": 77, "end_lineno": 111}]}
{"index": 206, "project_index": 114, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActivityDefinitionTest", "class_path": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "test_name": "testActivityDefinitionHashMapOfStringStringHashMapOfStringString", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String key = \"en-US\";\n        String name = \"Unit Testing\";\n        String description = \"Unit testing activity definitions.\";\n        HashMap<String, String> nameMap = new HashMap<String, String>();\n        HashMap<String, String> descriptionMap = new HashMap<String, String>();\n        nameMap.put(key, name);\n        descriptionMap.put(key, description);\n        activityDefinition = new ActivityDefinition(nameMap, descriptionMap);\n        assertNotNull(activityDefinition);\n        String moreInfo = \"More unit testing information.\";\n        activityDefinition.setMoreInfo(moreInfo);\n        String type = \"http://example.com/activities/unittest\";\n        activityDefinition.setType(type);\n        HashMap<String, JsonElement> extensions = new HashMap<String, JsonElement>();\n        key = \"http://example.com/testJSONprimitive\";\n        extensions.put(key, new JsonPrimitive(44));\n        JsonObject jo = new JsonObject();\n        jo.addProperty(\"http://example.com/unitTest\", \"unit test\");\n        key = \"http://example.com/testJSONobject\";\n        extensions.put(key, jo);\n        activityDefinition.setExtensions(extensions);\n        String interactionType = \"performance\";\n        activityDefinition.setInteractionType(interactionType);\n        ArrayList<String> correctResponsesPattern = new ArrayList<String>();\n        correctResponsesPattern.add(\"true\");\n        correctResponsesPattern.add(\"foo\");\n        activityDefinition.setCorrectResponsesPattern(correctResponsesPattern);\n        ArrayList<InteractionComponent> choices = new ArrayList<InteractionComponent>();\n        InteractionComponent e = new InteractionComponent();\n        String id = \"true\";\n        e.setId(id);\n        HashMap<String, String> desc = new HashMap<String, String>();\n        desc.put(\"en-US\", \"test example.\");\n        e.setDescription(desc);\n        choices.add(e);\n        activityDefinition.setChoices(choices);\n        ArrayList<InteractionComponent> scale = new ArrayList<InteractionComponent>();\n        scale.add(e);\n        activityDefinition.setScale(scale);\n        ArrayList<InteractionComponent> source = new ArrayList<InteractionComponent>();\n        source.add(e);\n        activityDefinition.setSource(source);\n        ArrayList<InteractionComponent> target = new ArrayList<InteractionComponent>();\n        target.add(e);\n        activityDefinition.setTarget(target);\n        ArrayList<InteractionComponent> steps = new ArrayList<InteractionComponent>();\n        steps.add(e);\n        activityDefinition.setSteps(steps);\n    }", "test_setup_start_lineno": 24, "test_setup_end_lineno": 74, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActivityDefinitionTest.java", "test_prefix": "    @Test\n    public void testActivityDefinitionHashMapOfStringStringHashMapOfStringString() {\n\n        HashMap<String, String> name = new HashMap<String, String>();\n        HashMap<String, String> description = new HashMap<String, String>();\n        name.put(\"en-US\", \"Unit Testing\");\n        description.put(\"en-US\", \"Unit testing activity defintion.\");\n        ActivityDefinition ad = new ActivityDefinition(name, description);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 87, "test_prefix_end_lineno": 96, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ActivityDefinition.java", "focal_method": "    public ActivityDefinition(HashMap<String, String>name, HashMap<String, String>description) {\n       this.name = name;\n       this.description = description;\n    }", "focal_method_start_lineno": 31, "focal_method_end_lineno": 34, "ground_truth_oracle": "assertNotNull(ad);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testActivityDefinitionHashMapOfStringStringHashMapOfStringString() {\n\n        HashMap<String, String> name = new HashMap<String, String>();\n        HashMap<String, String> description = new HashMap<String, String>();\n        name.put(\"en-US\", \"Unit Testing\");\n        description.put(\"en-US\", \"Unit testing activity defintion.\");\n        ActivityDefinition ad = new ActivityDefinition(name, description);\n    }", "original_test_prefix": "    @Test\n    public void testActivityDefinitionHashMapOfStringStringHashMapOfStringString() {\n\n        HashMap<String, String> name = new HashMap<String, String>();\n        HashMap<String, String> description = new HashMap<String, String>();\n        name.put(\"en-US\", \"Unit Testing\");\n        description.put(\"en-US\", \"Unit testing activity defintion.\");\n        ActivityDefinition ad = new ActivityDefinition(name, description);\n        assertNotNull(ad);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActivityDefinitionTest#testActivityDefinitionHashMapOfStringStringHashMapOfStringString", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String key = \"en-US\";\n        String name = \"Unit Testing\";\n        String description = \"Unit testing activity definitions.\";\n        HashMap<String, String> nameMap = new HashMap<String, String>();\n        HashMap<String, String> descriptionMap = new HashMap<String, String>();\n        nameMap.put(key, name);\n        descriptionMap.put(key, description);\n        activityDefinition = new ActivityDefinition(nameMap, descriptionMap);\n        assertNotNull(activityDefinition);\n        String moreInfo = \"More unit testing information.\";\n        activityDefinition.setMoreInfo(moreInfo);\n        String type = \"http://example.com/activities/unittest\";\n        activityDefinition.setType(type);\n        HashMap<String, JsonElement> extensions = new HashMap<String, JsonElement>();\n        key = \"http://example.com/testJSONprimitive\";\n        extensions.put(key, new JsonPrimitive(44));\n        JsonObject jo = new JsonObject();\n        jo.addProperty(\"http://example.com/unitTest\", \"unit test\");\n        key = \"http://example.com/testJSONobject\";\n        extensions.put(key, jo);\n        activityDefinition.setExtensions(extensions);\n        String interactionType = \"performance\";\n        activityDefinition.setInteractionType(interactionType);\n        ArrayList<String> correctResponsesPattern = new ArrayList<String>();\n        correctResponsesPattern.add(\"true\");\n        correctResponsesPattern.add(\"foo\");\n        activityDefinition.setCorrectResponsesPattern(correctResponsesPattern);\n        ArrayList<InteractionComponent> choices = new ArrayList<InteractionComponent>();\n        InteractionComponent e = new InteractionComponent();\n        String id = \"true\";\n        e.setId(id);\n        HashMap<String, String> desc = new HashMap<String, String>();\n        desc.put(\"en-US\", \"test example.\");\n        e.setDescription(desc);\n        choices.add(e);\n        activityDefinition.setChoices(choices);\n        ArrayList<InteractionComponent> scale = new ArrayList<InteractionComponent>();\n        scale.add(e);\n        activityDefinition.setScale(scale);\n        ArrayList<InteractionComponent> source = new ArrayList<InteractionComponent>();\n        source.add(e);\n        activityDefinition.setSource(source);\n        ArrayList<InteractionComponent> target = new ArrayList<InteractionComponent>();\n        target.add(e);\n        activityDefinition.setTarget(target);\n        ArrayList<InteractionComponent> steps = new ArrayList<InteractionComponent>();\n        steps.add(e);\n        activityDefinition.setSteps(steps);\n    }", "start_lineno": 24, "end_lineno": 74}]}
{"index": 207, "project_index": 114, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ResultTest", "class_path": "src/test/java/gov/adlnet/xapi/ResultTest.java", "test_name": "testGetDuration", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ResultTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        result = new Result();\n        result.setCompletion(true);\n        result.setDuration(DURATION);\n        result.setResponse(RESPONSE);\n        Score score = new Score();\n        result.setScore(score);\n        result.setSuccess(true);\n        JsonObject extensions = new JsonObject();\n        extensions.addProperty(IRI, \"Result Extension\");\n        result.setExtensions(extensions);\n    }", "test_setup_start_lineno": 22, "test_setup_end_lineno": 34, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ResultTest.java", "test_prefix": "    @Test\n    public void testGetDuration() {\n        String expected = DURATION;\n        String actual = result.getDuration();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 106, "test_prefix_end_lineno": 112, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Result.java", "focal_method": "    public String getDuration() {\n        return duration;\n    }", "focal_method_start_lineno": 46, "focal_method_end_lineno": 48, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetDuration() {\n        String expected = DURATION;\n        String actual = result.getDuration();\n    }", "original_test_prefix": "    @Test\n    public void testGetDuration() {\n        String expected = DURATION;\n        String actual = result.getDuration();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ResultTest#testGetDuration", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        result = new Result();\n        result.setCompletion(true);\n        result.setDuration(DURATION);\n        result.setResponse(RESPONSE);\n        Score score = new Score();\n        result.setScore(score);\n        result.setSuccess(true);\n        JsonObject extensions = new JsonObject();\n        extensions.addProperty(IRI, \"Result Extension\");\n        result.setExtensions(extensions);\n    }", "start_lineno": 22, "end_lineno": 34}]}
{"index": 208, "project_index": 114, "class_index": 2, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "AttachmentResultTest", "class_path": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "test_name": "testGetXapiStatement", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        Agent a = new Agent();\n        a.setMbox(MBOX);\n        Verb v = new Verb(VERB);\n        Activity act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n\n        ArrayList<Statement> statementList = new ArrayList<Statement>();\n        statementList.add(statement);\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n        statementList.add(statement);\n\n        statements = new StatementResult();\n        statements.setStatements(statementList);\n\n        type = \"text/plain\";\n        attachment = \"This is a text/plain test.\".getBytes(\"UTF-8\");\n\n        AttachmentAndType att = new AttachmentAndType(attachment, type);\n        attachments = new HashMap<String, AttachmentAndType>();\n        attachments.put(HASH, att);\n    }", "test_setup_start_lineno": 41, "test_setup_end_lineno": 67, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "test_prefix": "    @Test\n    public void testGetXapiStatement() {\n        AttachmentResult a = new AttachmentResult(RESPONSE_MESSAGE, statements, attachments);\n        <AssertPlaceHolder>;\n        a.getXapiStatement();\n    }", "test_prefix_start_lineno": 176, "test_prefix_end_lineno": 181, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/util/AttachmentResult.java", "focal_method": "    public AttachmentResult(String inputMessage, StatementResult inputStatements,\n            Map<String, AttachmentAndType> inputAttachments) {\n\n        responseMessage = inputMessage;\n        statements = inputStatements;\n        attachments = inputAttachments;\n    }", "focal_method_start_lineno": 22, "focal_method_end_lineno": 28, "ground_truth_oracle": "assertNotNull(a);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testGetXapiStatement() {\n        AttachmentResult a = new AttachmentResult(RESPONSE_MESSAGE, statements, attachments);\n    }", "original_test_prefix": "    @Test\n    public void testGetXapiStatement() {\n        AttachmentResult a = new AttachmentResult(RESPONSE_MESSAGE, statements, attachments);\n        assertNotNull(a);\n        a.getXapiStatement();\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.AttachmentResultTest#testGetXapiStatement", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        Agent a = new Agent();\n        a.setMbox(MBOX);\n        Verb v = new Verb(VERB);\n        Activity act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n\n        ArrayList<Statement> statementList = new ArrayList<Statement>();\n        statementList.add(statement);\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n        statementList.add(statement);\n\n        statements = new StatementResult();\n        statements.setStatements(statementList);\n\n        type = \"text/plain\";\n        attachment = \"This is a text/plain test.\".getBytes(\"UTF-8\");\n\n        AttachmentAndType att = new AttachmentAndType(attachment, type);\n        attachments = new HashMap<String, AttachmentAndType>();\n        attachments.put(HASH, att);\n    }", "start_lineno": 41, "end_lineno": 67}]}
{"index": 209, "project_index": 115, "class_index": 0, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "core", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "LoadKeyStoreTest", "class_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/LoadKeyStoreTest.java", "test_name": "loadNonExistentKeyStoreFromResources", "test_setup_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/LoadKeyStoreTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/LoadKeyStoreTest.java", "test_prefix": "    @Test\n    public void loadNonExistentKeyStoreFromResources() throws Exception {\n        String nonExistentPath = \"/nokeystorehere.jks\";\n        InputStream resourceAsStream = this.getClass().getResourceAsStream(nonExistentPath);\n        <AssertPlaceHolder>;\n\n        thrown.expect(IOException.class);\n        NanoHTTPD.makeSSLSocketFactory(nonExistentPath, \"\".toCharArray());\n    }", "test_prefix_start_lineno": 74, "test_prefix_end_lineno": 82, "focal_method_file_path": "core/src/main/java/org/nanohttpd/protocols/http/NanoHTTPD.java", "focal_method": "    public static SSLServerSocketFactory makeSSLSocketFactory(String keyAndTrustStoreClasspathPath, char[] passphrase) throws IOException {\n        try {\n            KeyStore keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n            InputStream keystoreStream = NanoHTTPD.class.getResourceAsStream(keyAndTrustStoreClasspathPath);\n\n            if (keystoreStream == null) {\n                throw new IOException(\"Unable to load keystore from classpath: \" + keyAndTrustStoreClasspathPath);\n            }\n\n            keystore.load(keystoreStream, passphrase);\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n            keyManagerFactory.init(keystore, passphrase);\n            return makeSSLSocketFactory(keystore, keyManagerFactory);\n        } catch (Exception e) {\n            throw new IOException(e.getMessage());\n        }\n    }", "focal_method_start_lineno": 267, "focal_method_end_lineno": 283, "ground_truth_oracle": "assertNull(resourceAsStream);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void loadNonExistentKeyStoreFromResources() throws Exception {\n        String nonExistentPath = \"/nokeystorehere.jks\";\n        InputStream resourceAsStream = this.getClass().getResourceAsStream(nonExistentPath);\n    }", "original_test_prefix": "    @Test\n    public void loadNonExistentKeyStoreFromResources() throws Exception {\n        String nonExistentPath = \"/nokeystorehere.jks\";\n        InputStream resourceAsStream = this.getClass().getResourceAsStream(nonExistentPath);\n        assertNull(resourceAsStream);\n\n        thrown.expect(IOException.class);\n        NanoHTTPD.makeSSLSocketFactory(nonExistentPath, \"\".toCharArray());\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.protocols.http.LoadKeyStoreTest#loadNonExistentKeyStoreFromResources", "test_setup_list": []}
{"index": 210, "project_index": 116, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "BasicURLNormalizerTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_name": "testNonStandardPercentEncoding", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_prefix": "    @Test\n    public void testNonStandardPercentEncoding() throws MalformedURLException {\n        URLFilter urlFilter = createFilter(false, false);\n        URL testSourceUrl = new URL(\"http://www.hurriyet.com.tr/index/?d=20160328&p=13\");\n\n        String inputURL = \"http://www.hurriyet.com.tr/index/?d=20160328&p=13&s=ni%u011fde\";\n        String expectedURL = \"http://www.hurriyet.com.tr/index/?d=20160328&p=13&s=ni%C4%9Fde\";\n        String normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), inputURL);\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 284, "test_prefix_end_lineno": 294, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focal_method": "    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter);", "focal_method_start_lineno": 35, "focal_method_end_lineno": 35, "ground_truth_oracle": "assertEquals(\"Failed to filter query string\", expectedURL, normalizedUrl);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testNonStandardPercentEncoding() throws MalformedURLException {\n        URLFilter urlFilter = createFilter(false, false);\n        URL testSourceUrl = new URL(\"http://www.hurriyet.com.tr/index/?d=20160328&p=13\");\n\n        String inputURL = \"http://www.hurriyet.com.tr/index/?d=20160328&p=13&s=ni%u011fde\";\n        String expectedURL = \"http://www.hurriyet.com.tr/index/?d=20160328&p=13&s=ni%C4%9Fde\";\n        String normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), inputURL);\n\n    }", "original_test_prefix": "    @Test\n    public void testNonStandardPercentEncoding() throws MalformedURLException {\n        URLFilter urlFilter = createFilter(false, false);\n        URL testSourceUrl = new URL(\"http://www.hurriyet.com.tr/index/?d=20160328&p=13\");\n\n        String inputURL = \"http://www.hurriyet.com.tr/index/?d=20160328&p=13&s=ni%u011fde\";\n        String expectedURL = \"http://www.hurriyet.com.tr/index/?d=20160328&p=13&s=ni%C4%9Fde\";\n        String normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), inputURL);\n\n        assertEquals(\"Failed to filter query string\", expectedURL, normalizedUrl);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.BasicURLNormalizerTest#testNonStandardPercentEncoding", "test_setup_list": []}
{"index": 211, "project_index": 117, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLScriptTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLScriptTest.java", "test_name": "testSleep", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLScriptTest.java", "test_setup": "@Before\n  public void before() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.activateOnCurrentThread();\n  }", "test_setup_start_lineno": 28, "test_setup_end_lineno": 40, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLScriptTest.java", "test_prefix": "  @Test\n  public void testSleep() throws Exception {\n    long begin = System.currentTimeMillis();\n\n    StringBuilder script = new StringBuilder();\n    script.append(\"sleep 500\");\n    db.command(new OCommandScript(\"sql\", script.toString())).execute();\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 89, "test_prefix_end_lineno": 98, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "Assert.assertTrue(System.currentTimeMillis() - begin >= 500);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testSleep() throws Exception {\n    long begin = System.currentTimeMillis();\n\n    StringBuilder script = new StringBuilder();\n    script.append(\"sleep 500\");\n    db.command(new OCommandScript(\"sql\", script.toString())).execute();\n\n  }", "original_test_prefix": "  @Test\n  public void testSleep() throws Exception {\n    long begin = System.currentTimeMillis();\n\n    StringBuilder script = new StringBuilder();\n    script.append(\"sleep 500\");\n    db.command(new OCommandScript(\"sql\", script.toString())).execute();\n\n    Assert.assertTrue(System.currentTimeMillis() - begin >= 500);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLScriptTest#testSleep", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.activateOnCurrentThread();\n  }", "start_lineno": 28, "end_lineno": 40}]}
{"index": 212, "project_index": 117, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "RemoteMetadataReloadTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/metadata/RemoteMetadataReloadTest.java", "test_name": "testStorageUpdate", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/metadata/RemoteMetadataReloadTest.java", "test_setup": "@Before\n  public void before() throws Exception {\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(MetadataPushTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(MetadataPushTest.class.getSimpleName(), \"admin\", \"admin\");\n\n  }", "test_setup_start_lineno": 28, "test_setup_end_lineno": 39, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/metadata/RemoteMetadataReloadTest.java", "test_prefix": "  @Test\n  public void testStorageUpdate() throws InterruptedException {\n    database.command(\" ALTER DATABASE LOCALELANGUAGE  ?\", Locale.GERMANY.getLanguage());\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 52, "test_prefix_end_lineno": 56, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focal_method": "  Object get(ATTRIBUTES iAttribute);", "focal_method_start_lineno": 425, "focal_method_end_lineno": 425, "ground_truth_oracle": "assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE), Locale.GERMANY.getLanguage());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testStorageUpdate() throws InterruptedException {\n    database.command(\" ALTER DATABASE LOCALELANGUAGE  ?\", Locale.GERMANY.getLanguage());\n  }", "original_test_prefix": "  @Test\n  public void testStorageUpdate() throws InterruptedException {\n    database.command(\" ALTER DATABASE LOCALELANGUAGE  ?\", Locale.GERMANY.getLanguage());\n    assertEquals(database.get(ODatabase.ATTRIBUTES.LOCALELANGUAGE), Locale.GERMANY.getLanguage());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.metadata.RemoteMetadataReloadTest#testStorageUpdate", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws Exception {\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(MetadataPushTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(MetadataPushTest.class.getSimpleName(), \"admin\", \"admin\");\n\n  }", "start_lineno": 28, "end_lineno": 39}]}
{"index": 213, "project_index": 117, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OScriptExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "test_name": "testReturnInIf", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OScriptExecutionTest\");\n    db.create();\n  }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 25, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "test_prefix": "  @Test\n  public void testReturnInIf() {\n    String className = \"testReturnInIf\";\n    db.createClass(className);\n    String script = \"\";\n    script += \"INSERT INTO \" + className + \" SET name = 'foo';\";\n    script += \"LET $1 = SELECT count(*) as count FROM \" + className + \" WHERE name ='foo';\";\n    script += \"IF($1.size() = 0 OR $1[0].count = 0){\";\n    script += \"   INSERT INTO \" + className + \" SET name = 'bar';\";\n    script += \"   RETURN;\";\n    script += \"}\";\n    script += \"INSERT INTO \" + className + \" SET name = 'baz';\";\n    db.execute(\"SQL\", script);\n    OResultSet rs = db.query(\"SELECT count(*) as count from \" + className);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 60, "test_prefix_end_lineno": 75, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focal_method": "  <T> T getProperty(String name);", "focal_method_start_lineno": 29, "focal_method_end_lineno": 29, "ground_truth_oracle": "Assert.assertEquals((Object) 2L, rs.next().getProperty(\"count\"));", "ground_truth_oracle_lineno": 12, "test_prefix_wo_placeholder": "  @Test\n  public void testReturnInIf() {\n    String className = \"testReturnInIf\";\n    db.createClass(className);\n    String script = \"\";\n    script += \"INSERT INTO \" + className + \" SET name = 'foo';\";\n    script += \"LET $1 = SELECT count(*) as count FROM \" + className + \" WHERE name ='foo';\";\n    script += \"IF($1.size() = 0 OR $1[0].count = 0){\";\n    script += \"   INSERT INTO \" + className + \" SET name = 'bar';\";\n    script += \"   RETURN;\";\n    script += \"}\";\n    script += \"INSERT INTO \" + className + \" SET name = 'baz';\";\n    db.execute(\"SQL\", script);\n    OResultSet rs = db.query(\"SELECT count(*) as count from \" + className);\n  }", "original_test_prefix": "  @Test\n  public void testReturnInIf() {\n    String className = \"testReturnInIf\";\n    db.createClass(className);\n    String script = \"\";\n    script += \"INSERT INTO \" + className + \" SET name = 'foo';\";\n    script += \"LET $1 = SELECT count(*) as count FROM \" + className + \" WHERE name ='foo';\";\n    script += \"IF($1.size() = 0 OR $1[0].count = 0){\";\n    script += \"   INSERT INTO \" + className + \" SET name = 'bar';\";\n    script += \"   RETURN;\";\n    script += \"}\";\n    script += \"INSERT INTO \" + className + \" SET name = 'baz';\";\n    db.execute(\"SQL\", script);\n    OResultSet rs = db.query(\"SELECT count(*) as count from \" + className);\n    Assert.assertEquals((Object) 2L, rs.next().getProperty(\"count\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.OScriptExecutionTest#testReturnInIf", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OScriptExecutionTest\");\n    db.create();\n  }", "start_lineno": 21, "end_lineno": 25}]}
{"index": 214, "project_index": 118, "class_index": 0, "test_index": 0, "user_name": "open-korean-text", "repo_name": "open-korean-text", "sub_repos": [], "sub_repo": "", "commit_sha": "95bf003beb3b357fcb16f94d4f595613cf7c5276", "build_system": "mvn", "class_name": "OpenKoreanProcessorJavaTest", "class_path": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "test_name": "testDetokenizer", "test_setup_file_path": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "test_prefix": "  @Test\n  public void testDetokenizer() {\n    List<String> words = Arrays.asList(\"\ub298\", \"\ud3c9\uc628\", \"\ud558\uac8c\", \"\ub204\uc6cc\", \"\uc788\", \"\ub294\", \"\ub8e8\ub8e8\");\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 200, "test_prefix_end_lineno": 208, "focal_method_file_path": "src/main/java/org/openkoreantext/processor/OpenKoreanTextProcessorJava.java", "focal_method": "  public static String detokenize(List<String> tokens) {\n    return OpenKoreanTextProcessor.detokenize(JavaConverters.asScalaBufferConverter(tokens).asScala());\n  }", "focal_method_start_lineno": 182, "focal_method_end_lineno": 184, "ground_truth_oracle": "assertEquals( \"\ub298 \ud3c9\uc628\ud558\uac8c \ub204\uc6cc\uc788\ub294 \ub8e8\ub8e8\", OpenKoreanTextProcessorJava.detokenize(words) );", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testDetokenizer() {\n    List<String> words = Arrays.asList(\"\ub298\", \"\ud3c9\uc628\", \"\ud558\uac8c\", \"\ub204\uc6cc\", \"\uc788\", \"\ub294\", \"\ub8e8\ub8e8\");\n\n  }", "original_test_prefix": "  @Test\n  public void testDetokenizer() {\n    List<String> words = Arrays.asList(\"\ub298\", \"\ud3c9\uc628\", \"\ud558\uac8c\", \"\ub204\uc6cc\", \"\uc788\", \"\ub294\", \"\ub8e8\ub8e8\");\n\n    assertEquals( \"\ub298 \ud3c9\uc628\ud558\uac8c \ub204\uc6cc\uc788\ub294 \ub8e8\ub8e8\", OpenKoreanTextProcessorJava.detokenize(words) );\n  }", "test_with_params": false, "test_target": "org.openkoreantext.processor.OpenKoreanProcessorJavaTest#testDetokenizer", "test_setup_list": []}
{"index": 215, "project_index": 119, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "StyleTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/StyleTest.java", "test_name": "simple", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/StyleTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/StyleTest.java", "test_prefix": "    @Test\n    void simple() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 25, "test_prefix_end_lineno": 28, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java", "focal_method": "    @SafeVarargs\n    static <F extends For> Attributes<F> attrs(Attributes<? extends F>... attributes) {\n        return attrs(asList(attributes));\n    }", "focal_method_start_lineno": 34, "focal_method_end_lineno": 37, "ground_truth_oracle": "assertEquals(attrs(attr(\"style\", \"bold\")), attrs(Style.BOLD));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void simple() {\n    }", "original_test_prefix": "    @Test\n    void simple() {\n        assertEquals(attrs(attr(\"style\", \"bold\")), attrs(Style.BOLD));\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.StyleTest#simple", "test_setup_list": []}
{"index": 216, "project_index": 119, "class_index": 1, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "OptionsTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/OptionsTest.java", "test_name": "fromJsonEmptyImages", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/OptionsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/engine/OptionsTest.java", "test_prefix": "    @Test\n    void fromJsonEmptyImages() {\n        final Options options = Options.fromJson(\"{engine:'DOT',format:'PNG',totalMemory:'42',yInvert:true,basedir:'hula',images:[]}\");\n        final Options expected = Options.create().engine(Engine.DOT).format(Format.PNG).totalMemory(42).yInvert(true).basedir(new File(\"hula\"));\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 39, "test_prefix_end_lineno": 44, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/engine/Options.java", "focal_method": "    public Options basedir(File basedir) {\n        return new Options(engine, format, totalMemory, yInvert, basedir, images);\n    }", "focal_method_start_lineno": 124, "focal_method_end_lineno": 126, "ground_truth_oracle": "assertEquals(expected, options);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    void fromJsonEmptyImages() {\n        final Options options = Options.fromJson(\"{engine:'DOT',format:'PNG',totalMemory:'42',yInvert:true,basedir:'hula',images:[]}\");\n        final Options expected = Options.create().engine(Engine.DOT).format(Format.PNG).totalMemory(42).yInvert(true).basedir(new File(\"hula\"));\n    }", "original_test_prefix": "    @Test\n    void fromJsonEmptyImages() {\n        final Options options = Options.fromJson(\"{engine:'DOT',format:'PNG',totalMemory:'42',yInvert:true,basedir:'hula',images:[]}\");\n        final Options expected = Options.create().engine(Engine.DOT).format(Format.PNG).totalMemory(42).yInvert(true).basedir(new File(\"hula\"));\n        assertEquals(expected, options);\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.engine.OptionsTest#fromJsonEmptyImages", "test_setup_list": []}
{"index": 217, "project_index": 119, "class_index": 2, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-rough", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "FillStyleTest", "class_path": "graphviz-rough/src/test/java/guru/nidi/graphviz/rough/FillStyleTest.java", "test_name": "dots", "test_setup_file_path": "graphviz-rough/src/test/java/guru/nidi/graphviz/rough/FillStyleTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-rough/src/test/java/guru/nidi/graphviz/rough/FillStyleTest.java", "test_prefix": "    @Test\n    void dots() {\n        <AssertPlaceHolder>;\n        assertEquals(map(\"fillStyle\", \"dots\", \"fillWeight\", 22.0), FillStyle.dots().size(22).values);\n    }", "test_prefix_start_lineno": 64, "test_prefix_end_lineno": 68, "focal_method_file_path": "graphviz-rough/src/main/java/guru/nidi/graphviz/rough/FillStyle.java", "focal_method": "    public static Dots dots() {\n        return new Dots();\n    }", "focal_method_start_lineno": 196, "focal_method_end_lineno": 198, "ground_truth_oracle": "assertEquals(map(\"fillStyle\", \"dots\"), FillStyle.dots().values);", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void dots() {\n    }", "original_test_prefix": "    @Test\n    void dots() {\n        assertEquals(map(\"fillStyle\", \"dots\"), FillStyle.dots().values);\n        assertEquals(map(\"fillStyle\", \"dots\", \"fillWeight\", 22.0), FillStyle.dots().size(22).values);\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.rough.FillStyleTest#dots", "test_setup_list": []}
{"index": 218, "project_index": 120, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "TestSuiteTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/common/TestSuiteTest.java", "test_name": "getTestCase_null", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/common/TestSuiteTest.java", "test_setup": "@Before\n    public void before() {\n        testSuiteFile = ensureExistingFile(\"simulator.properties\");\n    }", "test_setup_start_lineno": 25, "test_setup_end_lineno": 28, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/common/TestSuiteTest.java", "test_prefix": "    @Test\n    public void getTestCase_null() throws Exception {\n        TestSuite testSuite = new TestSuite(\"class=Foo\");\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 130, "test_prefix_end_lineno": 135, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/coordinator/TestSuite.java", "focal_method": "    public TestCase getTestCase(String testCaseId) {\n        if (testCaseId == null) {\n            return null;\n        }\n\n        for (TestCase testCase : testCaseList) {\n            if (testCaseId.equals(testCase.getId())) {\n                return testCase;\n            }\n        }\n        return null;\n    }", "focal_method_start_lineno": 170, "focal_method_end_lineno": 181, "ground_truth_oracle": "assertNull(testSuite.getTestCase(null));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void getTestCase_null() throws Exception {\n        TestSuite testSuite = new TestSuite(\"class=Foo\");\n\n    }", "original_test_prefix": "    @Test\n    public void getTestCase_null() throws Exception {\n        TestSuite testSuite = new TestSuite(\"class=Foo\");\n\n        assertNull(testSuite.getTestCase(null));\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.common.TestSuiteTest#getTestCase_null", "test_setup_list": [{"test_setup": "@Before\n    public void before() {\n        testSuiteFile = ensureExistingFile(\"simulator.properties\");\n    }", "start_lineno": 25, "end_lineno": 28}]}
{"index": 219, "project_index": 120, "class_index": 1, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "GitInfoTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/common/GitInfoTest.java", "test_name": "testLoadProperties", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/common/GitInfoTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/common/GitInfoTest.java", "test_prefix": "    @Test\n    public void testLoadProperties() {\n        Properties properties = GitInfo.loadGitProperties(GitInfo.GIT_INFO_FILE);\n        <AssertPlaceHolder>;\n        assertFalse(properties instanceof GitInfo.UnknownGitProperties);\n    }", "test_prefix_start_lineno": 39, "test_prefix_end_lineno": 44, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/common/GitInfo.java", "focal_method": "    static Properties loadGitProperties(String fileName) {\n        Properties properties = new Properties();\n        InputStream inputStream = GitInfo.class.getClassLoader().getResourceAsStream(fileName);\n        try {\n            properties.load(inputStream);\n            return properties;\n        } catch (NullPointerException e) {\n            LOGGER.trace(\"Error while loading Git properties from \" + fileName, e);\n        } catch (Exception e) {\n            LOGGER.warn(\"Error while loading Git properties from \" + fileName, e);\n        } finally {\n            closeQuietly(inputStream);\n        }\n        return new UnknownGitProperties();\n    }", "focal_method_start_lineno": 67, "focal_method_end_lineno": 81, "ground_truth_oracle": "assertNotNull(properties);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testLoadProperties() {\n        Properties properties = GitInfo.loadGitProperties(GitInfo.GIT_INFO_FILE);\n    }", "original_test_prefix": "    @Test\n    public void testLoadProperties() {\n        Properties properties = GitInfo.loadGitProperties(GitInfo.GIT_INFO_FILE);\n        assertNotNull(properties);\n        assertFalse(properties instanceof GitInfo.UnknownGitProperties);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.common.GitInfoTest#testLoadProperties", "test_setup_list": []}
{"index": 220, "project_index": 121, "class_index": 0, "test_index": 0, "user_name": "myabc", "repo_name": "markdownj", "sub_repos": ["core"], "sub_repo": "core", "commit_sha": "f8ed00caeb69fc602aa2209812d953c26c2a4263", "build_system": "mvn", "class_name": "LineConventions", "class_path": "core/src/test/java/org/markdownj/test/LineConventions.java", "test_name": "testUnixLineConventions", "test_setup_file_path": "core/src/test/java/org/markdownj/test/LineConventions.java", "test_setup": "@Before\n    public void createProcessor() {\n        m = new MarkdownProcessor();\n    }", "test_setup_start_lineno": 47, "test_setup_end_lineno": 50, "test_prefix_file_path": "core/src/test/java/org/markdownj/test/LineConventions.java", "test_prefix": "    @Test\n    public void testUnixLineConventions() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 52, "test_prefix_end_lineno": 55, "focal_method_file_path": "core/src/main/java/org/markdownj/MarkdownProcessor.java", "focal_method": "    public String markdown(String txt) {\n        if (txt == null) {\n            txt = \"\";\n        }\n        TextEditor text = new TextEditor(txt);\n\n        // Standardize line endings:\n        text.replaceAll(\"\\\\r\\\\n\", \"\\n\");     // DOS to Unix\n        text.replaceAll(\"\\\\r\", \"\\n\");        // Mac to Unix\n        text.replaceAll(\"^[ \\\\t]+$\", \"\");\n\n        // Make sure $text ends with a couple of newlines:\n        text.append(\"\\n\\n\");\n\n        text.detabify();\n        text.deleteAll(\"^[ ]+$\");\n        hashHTMLBlocks(text);\n        stripLinkDefinitions(text);\n        text = runBlockGamut(text);\n        unEscapeSpecialChars(text);\n\n        text.append(\"\\n\");\n        return text.toString();\n    }", "focal_method_start_lineno": 75, "focal_method_end_lineno": 98, "ground_truth_oracle": "assertEquals(EXPECTED, m.markdown(\"a\\nb\\nc\\n\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testUnixLineConventions() {\n    }", "original_test_prefix": "    @Test\n    public void testUnixLineConventions() {\n        assertEquals(EXPECTED, m.markdown(\"a\\nb\\nc\\n\"));\n    }", "test_with_params": false, "test_target": "org.markdownj.test.LineConventions#testUnixLineConventions", "test_setup_list": [{"test_setup": "@Before\n    public void createProcessor() {\n        m = new MarkdownProcessor();\n    }", "start_lineno": 47, "end_lineno": 50}]}
{"index": 221, "project_index": 122, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "CharsetfunctionsTest", "class_path": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "test_name": "testAsciiBytes", "test_setup_file_path": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "test_prefix": "  @Test\n  public void testAsciiBytes() {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 35, "test_prefix_end_lineno": 38, "focal_method_file_path": "src/main/java/org/java_websocket/util/Charsetfunctions.java", "focal_method": "  public static byte[] asciiBytes(String s) {\n    return s.getBytes(StandardCharsets.US_ASCII);\n  }", "focal_method_start_lineno": 56, "focal_method_end_lineno": 58, "ground_truth_oracle": "Assert.assertArrayEquals(new byte[]{102, 111, 111}, Charsetfunctions.asciiBytes(\"foo\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testAsciiBytes() {\n  }", "original_test_prefix": "  @Test\n  public void testAsciiBytes() {\n    Assert.assertArrayEquals(new byte[]{102, 111, 111}, Charsetfunctions.asciiBytes(\"foo\"));\n  }", "test_with_params": false, "test_target": "org.java_websocket.util.CharsetfunctionsTest#testAsciiBytes", "test_setup_list": []}
{"index": 222, "project_index": 123, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "simtiem", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void simtiem() {\n\n        Word simtiem = loc\u012bt\u0101js.analyze(\"simtiem\");\n        <AssertPlaceHolder>;\n        assertEquals(\"simts\", simtiem.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n    }", "test_prefix_start_lineno": 150, "test_prefix_end_lineno": 156, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(simtiem.isRecognized());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void simtiem() {\n\n        Word simtiem = loc\u012bt\u0101js.analyze(\"simtiem\");\n    }", "original_test_prefix": "    @Test\n    public void simtiem() {\n\n        Word simtiem = loc\u012bt\u0101js.analyze(\"simtiem\");\n        assertTrue(simtiem.isRecognized());\n        assertEquals(\"simts\", simtiem.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#simtiem", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 223, "project_index": 124, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "ModeInfoTest", "class_path": "src/test/java/org/jcodec/codecs/vpx/vp9/ModeInfoTest.java", "test_name": "testReadIntraMode", "test_setup_file_path": "src/test/java/org/jcodec/codecs/vpx/vp9/ModeInfoTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/codecs/vpx/vp9/ModeInfoTest.java", "test_prefix": "    @Test\n    public void testReadIntraMode() {\n        MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder(\n                new int[] { 91, 30, 32, 116, 93},\n                new int[] { 1, 1, 1, 1, 0 });\n        DecodingContext c = new DecodingContext();\n        int miCol = 2;\n        int miRow = 0;\n        int blSz = 3;\n        c.miTileStartCol = 0;\n        c.aboveModes = new int[16];\n        c.leftModes = new int[16];\n        c.leftModes[0] = 3;\n        \n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 43, "test_prefix_end_lineno": 59, "focal_method_file_path": "src/main/java/org/jcodec/codecs/vpx/vp9/ModeInfo.java", "focal_method": "    public int readKfIntraMode(int miCol, int miRow, int blSz, VPXBooleanDecoder decoder, DecodingContext c) {\n        boolean availAbove = miRow > 0; // Frame based\n        boolean availLeft = miCol > c.getMiTileStartCol(); // Tile based\n        int[] aboveIntraModes = c.getAboveModes();\n        int[] leftIntraModes = c.getLeftModes();\n        int aboveMode;\n        int leftMode;\n        aboveMode = availAbove ? aboveIntraModes[miCol] : DC_PRED;\n        leftMode = availLeft ? leftIntraModes[miRow % 8] : DC_PRED;\n\n        short[][][] probs = c.getKfYModeProbs();\n\n        int intraMode = decoder.readTree(TREE_INTRA_MODE, probs[aboveMode][leftMode]);\n\n        aboveIntraModes[miCol] = intraMode;\n        leftIntraModes[miRow % 8] = intraMode;\n        return intraMode;\n    }", "focal_method_start_lineno": 98, "focal_method_end_lineno": 115, "ground_truth_oracle": "Assert.assertEquals(3, new ModeInfo().readKfIntraMode(miCol, miRow, blSz, decoder, c));", "ground_truth_oracle_lineno": 9, "test_prefix_wo_placeholder": "    @Test\n    public void testReadIntraMode() {\n        MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder(\n                new int[] { 91, 30, 32, 116, 93},\n                new int[] { 1, 1, 1, 1, 0 });\n        DecodingContext c = new DecodingContext();\n        int miCol = 2;\n        int miRow = 0;\n        int blSz = 3;\n        c.miTileStartCol = 0;\n        c.aboveModes = new int[16];\n        c.leftModes = new int[16];\n        c.leftModes[0] = 3;\n        \n    }", "original_test_prefix": "    @Test\n    public void testReadIntraMode() {\n        MockVPXBooleanDecoder decoder = new MockVPXBooleanDecoder(\n                new int[] { 91, 30, 32, 116, 93},\n                new int[] { 1, 1, 1, 1, 0 });\n        DecodingContext c = new DecodingContext();\n        int miCol = 2;\n        int miRow = 0;\n        int blSz = 3;\n        c.miTileStartCol = 0;\n        c.aboveModes = new int[16];\n        c.leftModes = new int[16];\n        c.leftModes[0] = 3;\n        \n        Assert.assertEquals(3, new ModeInfo().readKfIntraMode(miCol, miRow, blSz, decoder, c));\n    }", "test_with_params": false, "test_target": "org.jcodec.codecs.vpx.vp9.ModeInfoTest#testReadIntraMode", "test_setup_list": []}
{"index": 224, "project_index": 125, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AListMapTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListMapTest.java", "test_name": "testKeysValues", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListMapTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListMapTest.java", "test_prefix": "    @Test\n    public void testKeysValues() {\n        final AListMap<String, Integer> map = AListMap.<String, Integer>empty()\n                .updated(\"a\", 1)\n                .updated(\"b\", 2)\n                .updated(\"c\", 3)\n                .updated(\"d\", 4);\n\n        final ASet<String> keys = map.keys();\n        <AssertPlaceHolder>;\n        assertTrue(keys.contains(\"a\"));\n        assertTrue(keys.contains(\"b\"));\n        assertTrue(keys.contains(\"c\"));\n        assertTrue(keys.contains(\"d\"));\n\n        final ACollection<Integer> values = map.values();\n        assertEquals(4, values.size());\n        assertTrue(values.contains(1));\n        assertTrue(values.contains(2));\n        assertTrue(values.contains(3));\n        assertTrue(values.contains(4));\n    }", "test_prefix_start_lineno": 66, "test_prefix_end_lineno": 87, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/ACollection.java", "focal_method": "    int size();", "focal_method_start_lineno": 29, "focal_method_end_lineno": 29, "ground_truth_oracle": "assertEquals(4, keys.size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testKeysValues() {\n        final AListMap<String, Integer> map = AListMap.<String, Integer>empty()\n                .updated(\"a\", 1)\n                .updated(\"b\", 2)\n                .updated(\"c\", 3)\n                .updated(\"d\", 4);\n\n        final ASet<String> keys = map.keys();\n    }", "original_test_prefix": "    @Test\n    public void testKeysValues() {\n        final AListMap<String, Integer> map = AListMap.<String, Integer>empty()\n                .updated(\"a\", 1)\n                .updated(\"b\", 2)\n                .updated(\"c\", 3)\n                .updated(\"d\", 4);\n\n        final ASet<String> keys = map.keys();\n        assertEquals(4, keys.size());\n        assertTrue(keys.contains(\"a\"));\n        assertTrue(keys.contains(\"b\"));\n        assertTrue(keys.contains(\"c\"));\n        assertTrue(keys.contains(\"d\"));\n\n        final ACollection<Integer> values = map.values();\n        assertEquals(4, values.size());\n        assertTrue(values.contains(1));\n        assertTrue(values.contains(2));\n        assertTrue(values.contains(3));\n        assertTrue(values.contains(4));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.immutable.AListMapTest#testKeysValues", "test_setup_list": []}
{"index": 225, "project_index": 126, "class_index": 0, "test_index": 0, "user_name": "cucumber-ltd", "repo_name": "cucumber-pro-plugin-jvm", "sub_repos": [], "sub_repo": "", "commit_sha": "a09ee0b1682d3cd8b68c240820e647d4515e931f", "build_system": "mvn", "class_name": "ConfigTest", "class_path": "src/test/java/io/cucumber/pro/config/ConfigTest.java", "test_name": "gets_and_sets_value", "test_setup_file_path": "src/test/java/io/cucumber/pro/config/ConfigTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/cucumber/pro/config/ConfigTest.java", "test_prefix": "    @Test\n    public void gets_and_sets_value() {\n        Config config = new Config();\n        config.set(\"name\", \"progress\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 11, "test_prefix_end_lineno": 16, "focal_method_file_path": "src/main/java/io/cucumber/pro/config/Config.java", "focal_method": "    public String getString(String key) {\n        return getIn(normalize(key), false).getString();\n    }", "focal_method_start_lineno": 17, "focal_method_end_lineno": 19, "ground_truth_oracle": "assertEquals(\"progress\", config.getString(\"name\"));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void gets_and_sets_value() {\n        Config config = new Config();\n        config.set(\"name\", \"progress\");\n    }", "original_test_prefix": "    @Test\n    public void gets_and_sets_value() {\n        Config config = new Config();\n        config.set(\"name\", \"progress\");\n        assertEquals(\"progress\", config.getString(\"name\"));\n    }", "test_with_params": false, "test_target": "io.cucumber.pro.config.ConfigTest#gets_and_sets_value", "test_setup_list": []}
{"index": 226, "project_index": 127, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "MetronomeSupplierTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/MetronomeSupplierTest.java", "test_name": "testThreadCount", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/MetronomeSupplierTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/MetronomeSupplierTest.java", "test_prefix": "    @Test\n    public void testThreadCount() {\n        PropertyBinding propertyBinding = new PropertyBinding(new TestCase(\"foo\").setProperty(\"interval\", \"20ns\"));\n        MetronomeSupplier supplier = new MetronomeSupplier(\"\", propertyBinding, 10);\n\n        Metronome m = supplier.get();\n        <AssertPlaceHolder>;\n        SleepingMetronome metronome = (SleepingMetronome) m;\n\n        assertEquals(200, metronome.getIntervalNanos());\n    }", "test_prefix_start_lineno": 61, "test_prefix_end_lineno": 71, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/MetronomeSupplier.java", "focal_method": "    @Override\n    public Metronome get() {\n        if (metronomeClass == EmptyMetronome.class) {\n            return EmptyMetronome.INSTANCE;\n        }\n\n        try {\n            Constructor<? extends Metronome> constructor = metronomeClass.getConstructor(Metronome.class);\n            return constructor.newInstance(masterMetronome);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }", "focal_method_start_lineno": 128, "focal_method_end_lineno": 140, "ground_truth_oracle": "assertEquals(SleepingMetronome.class, m.getClass());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testThreadCount() {\n        PropertyBinding propertyBinding = new PropertyBinding(new TestCase(\"foo\").setProperty(\"interval\", \"20ns\"));\n        MetronomeSupplier supplier = new MetronomeSupplier(\"\", propertyBinding, 10);\n\n        Metronome m = supplier.get();\n    }", "original_test_prefix": "    @Test\n    public void testThreadCount() {\n        PropertyBinding propertyBinding = new PropertyBinding(new TestCase(\"foo\").setProperty(\"interval\", \"20ns\"));\n        MetronomeSupplier supplier = new MetronomeSupplier(\"\", propertyBinding, 10);\n\n        Metronome m = supplier.get();\n        assertEquals(SleepingMetronome.class, m.getClass());\n        SleepingMetronome metronome = (SleepingMetronome) m;\n\n        assertEquals(200, metronome.getIntervalNanos());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.worker.testcontainer.MetronomeSupplierTest#testThreadCount", "test_setup_list": []}
{"index": 227, "project_index": 127, "class_index": 1, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "NativeUtilsTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/NativeUtilsTest.java", "test_name": "testGetPidStringOrNull", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/NativeUtilsTest.java", "test_setup": "@Before\n    public void before() {\n        oldSecurityManager = System.getSecurityManager();\n        System.setSecurityManager(new ExitExceptionSecurityManager(true));\n    }", "test_setup_start_lineno": 22, "test_setup_end_lineno": 26, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/NativeUtilsTest.java", "test_prefix": "    @Test\n    public void testGetPidStringOrNull() {\n        Integer pid = getPidFromBeanString(\"2342@localhost\");\n        <AssertPlaceHolder>;\n        assertEquals(2342, (int) pid);\n    }", "test_prefix_start_lineno": 72, "test_prefix_end_lineno": 77, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/NativeUtils.java", "focal_method": "    static Integer getPidFromBeanString(String name) {\n        int indexOf = name.indexOf('@');\n        if (indexOf == -1) {\n            return null;\n        }\n        String pidString = name.substring(0, indexOf);\n        try {\n            return Integer.parseInt(pidString);\n        } catch (NumberFormatException e) {\n            LOGGER.warn(e);\n            return null;\n        }\n    }", "focal_method_start_lineno": 79, "focal_method_end_lineno": 91, "ground_truth_oracle": "assertNotNull(pid);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testGetPidStringOrNull() {\n        Integer pid = getPidFromBeanString(\"2342@localhost\");\n    }", "original_test_prefix": "    @Test\n    public void testGetPidStringOrNull() {\n        Integer pid = getPidFromBeanString(\"2342@localhost\");\n        assertNotNull(pid);\n        assertEquals(2342, (int) pid);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.NativeUtilsTest#testGetPidStringOrNull", "test_setup_list": [{"test_setup": "@Before\n    public void before() {\n        oldSecurityManager = System.getSecurityManager();\n        System.setSecurityManager(new ExitExceptionSecurityManager(true));\n    }", "start_lineno": 22, "end_lineno": 26}]}
{"index": 228, "project_index": 128, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "MapUtilTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java", "test_name": "testMergeMaps", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/MapUtilTest.java", "test_prefix": "    @Test\n    public void testMergeMaps() {\n        Map<String, String> mapA = createMap(\"eins\", \"one\", \"zwei\", \"two\");\n        Map<String, String> mapB = createMap(\"zwei\", \"deux\", \"drei\", \"trois\");\n        Map<String, String> expectedA = createMap(\"eins\", \"one\", \"zwei\", \"two\", \"drei\", \"trois\");\n        Map<String, String> expectedB = createMap(\"eins\", \"one\", \"zwei\", \"deux\", \"drei\", \"trois\");\n\n        <AssertPlaceHolder>;\n        assertEquals(expectedB, MapUtil.mergeMaps(mapB, mapA));\n    }", "test_prefix_start_lineno": 52, "test_prefix_end_lineno": 61, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/MapUtil.java", "focal_method": "    public static <K,V> Map<K,V> mergeMaps(Map<K, V> map1, Map<K, V> map2) {\n        Map<K, V> answer = new HashMap<>();\n        if (map2 != null) {\n            answer.putAll(map2);\n        }\n        if (map1 != null) {\n            answer.putAll(map1);\n        }\n        return answer;\n\n    }", "focal_method_start_lineno": 52, "focal_method_end_lineno": 62, "ground_truth_oracle": "assertEquals(expectedA, MapUtil.mergeMaps(mapA, mapB));", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testMergeMaps() {\n        Map<String, String> mapA = createMap(\"eins\", \"one\", \"zwei\", \"two\");\n        Map<String, String> mapB = createMap(\"zwei\", \"deux\", \"drei\", \"trois\");\n        Map<String, String> expectedA = createMap(\"eins\", \"one\", \"zwei\", \"two\", \"drei\", \"trois\");\n        Map<String, String> expectedB = createMap(\"eins\", \"one\", \"zwei\", \"deux\", \"drei\", \"trois\");\n\n    }", "original_test_prefix": "    @Test\n    public void testMergeMaps() {\n        Map<String, String> mapA = createMap(\"eins\", \"one\", \"zwei\", \"two\");\n        Map<String, String> mapB = createMap(\"zwei\", \"deux\", \"drei\", \"trois\");\n        Map<String, String> expectedA = createMap(\"eins\", \"one\", \"zwei\", \"two\", \"drei\", \"trois\");\n        Map<String, String> expectedB = createMap(\"eins\", \"one\", \"zwei\", \"deux\", \"drei\", \"trois\");\n\n        assertEquals(expectedA, MapUtil.mergeMaps(mapA, mapB));\n        assertEquals(expectedB, MapUtil.mergeMaps(mapB, mapA));\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.MapUtilTest#testMergeMaps", "test_setup_list": []}
{"index": 229, "project_index": 128, "class_index": 1, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "ProfileUtilTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/ProfileUtilTest.java", "test_name": "simple", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/ProfileUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/ProfileUtilTest.java", "test_prefix": "    @Test\n    public void simple() throws IOException {\n        InputStream is = getClass().getResourceAsStream(\"/fabric8/config/profiles-lookup-dir/profiles.yaml\");\n        <AssertPlaceHolder>;\n        List<Profile> profiles = ProfileUtil.fromYaml(is);\n        assertNotNull(profiles);\n        assertEquals(profiles.size(),3);\n        Profile profile = profiles.get(0);\n        assertEquals(\"simple\", profile.getName());\n        ProcessorConfig config = profile.getEnricherConfig();\n        assertTrue(config.use(\"base\"));\n        assertFalse(config.use(\"blub\"));\n        config = profile.getGeneratorConfig();\n        assertFalse(config.use(\"java.app\"));\n        assertTrue(config.use(\"spring.swarm\"));\n    }", "test_prefix_start_lineno": 43, "test_prefix_end_lineno": 58, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/config/ProcessorConfig.java", "focal_method": "    public boolean use(String inc) {\n        return !excludes.contains(inc) && includes.contains(inc);\n    }", "focal_method_start_lineno": 128, "focal_method_end_lineno": 130, "ground_truth_oracle": "assertNotNull(is);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void simple() throws IOException {\n        InputStream is = getClass().getResourceAsStream(\"/fabric8/config/profiles-lookup-dir/profiles.yaml\");\n    }", "original_test_prefix": "    @Test\n    public void simple() throws IOException {\n        InputStream is = getClass().getResourceAsStream(\"/fabric8/config/profiles-lookup-dir/profiles.yaml\");\n        assertNotNull(is);\n        List<Profile> profiles = ProfileUtil.fromYaml(is);\n        assertNotNull(profiles);\n        assertEquals(profiles.size(),3);\n        Profile profile = profiles.get(0);\n        assertEquals(\"simple\", profile.getName());\n        ProcessorConfig config = profile.getEnricherConfig();\n        assertTrue(config.use(\"base\"));\n        assertFalse(config.use(\"blub\"));\n        config = profile.getGeneratorConfig();\n        assertFalse(config.use(\"java.app\"));\n        assertTrue(config.use(\"spring.swarm\"));\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.ProfileUtilTest#simple", "test_setup_list": []}
{"index": 230, "project_index": 129, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "CASObjectArrayTest", "class_path": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java", "test_name": "testCompareAndSetSingleItem", "test_setup_file_path": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/common/concur/collection/CASObjectArrayTest.java", "test_prefix": "  @Test\n  public void testCompareAndSetSingleItem() {\n    final CASObjectArray<Integer> array = new CASObjectArray<>();\n\n    <AssertPlaceHolder>;\n    Assert.assertFalse(array.compareAndSet(0, 12, 21));\n    Assert.assertEquals(1, array.get(0).intValue());\n\n    Assert.assertTrue(array.compareAndSet(0, 1, 22));\n    Assert.assertEquals(22, array.get(0).intValue());\n  }", "test_prefix_start_lineno": 124, "test_prefix_end_lineno": 134, "focal_method_file_path": "core/src/main/java/com/orientechnologies/common/concur/collection/CASObjectArray.java", "focal_method": "  public int add(T value) {\n    Objects.requireNonNull(value);\n\n    while (true) {\n      final int newIndex = size.get();\n      final int containerIndex = 31 - Integer.numberOfLeadingZeros(newIndex + 1);\n      final int containerSize = 1 << containerIndex;\n      final int indexInsideContainer = newIndex + 1 - containerSize;\n\n      AtomicReferenceArray<T> container = containers.get(containerIndex);\n      if (container == null) {\n        container = new AtomicReferenceArray<>(containerSize);\n        if (!containers.compareAndSet(containerIndex, null, container)) {\n          container = containers.get(containerIndex);\n        }\n      }\n\n      if (container.compareAndSet(indexInsideContainer, null, value)) {\n        size.incrementAndGet();\n        return newIndex;\n      }\n    }\n\n  }", "focal_method_start_lineno": 11, "focal_method_end_lineno": 34, "ground_truth_oracle": "Assert.assertEquals(0, array.add(1));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testCompareAndSetSingleItem() {\n    final CASObjectArray<Integer> array = new CASObjectArray<>();\n\n  }", "original_test_prefix": "  @Test\n  public void testCompareAndSetSingleItem() {\n    final CASObjectArray<Integer> array = new CASObjectArray<>();\n\n    Assert.assertEquals(0, array.add(1));\n    Assert.assertFalse(array.compareAndSet(0, 12, 21));\n    Assert.assertEquals(1, array.get(0).intValue());\n\n    Assert.assertTrue(array.compareAndSet(0, 1, 22));\n    Assert.assertEquals(22, array.get(0).intValue());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.common.concur.collection.CASObjectArrayTest#testCompareAndSetSingleItem", "test_setup_list": []}
{"index": 231, "project_index": 129, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionNewTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_name": "testOrderByDesc", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 32, "test_setup_end_lineno": 66, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_prefix": "  @Test\n  public void testOrderByDesc() {\n    db.command(new OCommandSQL(\"CREATE CLASS testOrderByDesc EXTENDS V\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'bbb'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'zzz'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'ccc'\")).execute();\n\n    String query = \"MATCH { class: testOrderByDesc, as:a} RETURN a.name as name order by name desc\";\n\n    OResultSet result = db.query(query);\n    <AssertPlaceHolder>;\n    Assert.assertEquals(\"zzz\", result.next().getProperty(\"name\"));\n    Assert.assertTrue(result.hasNext());\n    Assert.assertEquals(\"ccc\", result.next().getProperty(\"name\"));\n    Assert.assertTrue(result.hasNext());\n    Assert.assertEquals(\"bbb\", result.next().getProperty(\"name\"));\n    Assert.assertTrue(result.hasNext());\n    Assert.assertEquals(\"aaa\", result.next().getProperty(\"name\"));\n    Assert.assertFalse(result.hasNext());\n    result.close();\n  }", "test_prefix_start_lineno": 1641, "test_prefix_end_lineno": 1663, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  @Override\n  boolean hasNext();", "focal_method_start_lineno": 20, "focal_method_end_lineno": 21, "ground_truth_oracle": "Assert.assertTrue(result.hasNext());", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testOrderByDesc() {\n    db.command(new OCommandSQL(\"CREATE CLASS testOrderByDesc EXTENDS V\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'bbb'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'zzz'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'ccc'\")).execute();\n\n    String query = \"MATCH { class: testOrderByDesc, as:a} RETURN a.name as name order by name desc\";\n\n    OResultSet result = db.query(query);\n  }", "original_test_prefix": "  @Test\n  public void testOrderByDesc() {\n    db.command(new OCommandSQL(\"CREATE CLASS testOrderByDesc EXTENDS V\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'bbb'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'zzz'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX testOrderByDesc SET name = 'ccc'\")).execute();\n\n    String query = \"MATCH { class: testOrderByDesc, as:a} RETURN a.name as name order by name desc\";\n\n    OResultSet result = db.query(query);\n    Assert.assertTrue(result.hasNext());\n    Assert.assertEquals(\"zzz\", result.next().getProperty(\"name\"));\n    Assert.assertTrue(result.hasNext());\n    Assert.assertEquals(\"ccc\", result.next().getProperty(\"name\"));\n    Assert.assertTrue(result.hasNext());\n    Assert.assertEquals(\"bbb\", result.next().getProperty(\"name\"));\n    Assert.assertTrue(result.hasNext());\n    Assert.assertEquals(\"aaa\", result.next().getProperty(\"name\"));\n    Assert.assertFalse(result.hasNext());\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionNewTest#testOrderByDesc", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 32, "end_lineno": 66}]}
{"index": 232, "project_index": 129, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCompositeKeyTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_name": "testEqualNull", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_prefix": "  @Test\n  public void testEqualNull() {\n    final OCompositeKey compositeKey = new OCompositeKey();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 46, "test_prefix_end_lineno": 50, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focal_method": "  @Override\n  public boolean equals(final Object o) {\n    if (this == o)\n      return true;\n    if (o == null || getClass() != o.getClass())\n      return false;\n\n    final OCompositeKey that = (OCompositeKey) o;\n\n    return keys.equals(that.keys);\n  }", "focal_method_start_lineno": 138, "focal_method_end_lineno": 148, "ground_truth_oracle": "assertFalse(compositeKey.equals(null));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testEqualNull() {\n    final OCompositeKey compositeKey = new OCompositeKey();\n  }", "original_test_prefix": "  @Test\n  public void testEqualNull() {\n    final OCompositeKey compositeKey = new OCompositeKey();\n    assertFalse(compositeKey.equals(null));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OCompositeKeyTest#testEqualNull", "test_setup_list": []}
{"index": 233, "project_index": 129, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OSchemaSharedGlobalPropertyTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OSchemaSharedGlobalPropertyTest.java", "test_name": "testGlobalPropertyCreate", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OSchemaSharedGlobalPropertyTest.java", "test_setup": "@Before\n  public void setUp() {\n    db = new ODatabaseDocumentTx(\"memory:\" + OSchemaSharedGlobalPropertyTest.class.getSimpleName());\n    if (db.exists()) {\n      db.open(\"admin\", \"admin\");\n    } else\n      db.create();\n  }", "test_setup_start_lineno": 15, "test_setup_end_lineno": 22, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OSchemaSharedGlobalPropertyTest.java", "test_prefix": "  @Test\n  public void testGlobalPropertyCreate() {\n\n    OSchema schema = db.getMetadata().getSchema();\n\n    schema.createGlobalProperty(\"testaasd\", OType.SHORT, 100);\n    OGlobalProperty prop = schema.getGlobalPropertyById(100);\n    <AssertPlaceHolder>;\n    assertEquals(prop.getId(), (Integer) 100);\n    assertEquals(prop.getType(), OType.SHORT);\n\n  }", "test_prefix_start_lineno": 35, "test_prefix_end_lineno": 46, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OGlobalProperty.java", "focal_method": "  String getName();", "focal_method_start_lineno": 27, "focal_method_end_lineno": 27, "ground_truth_oracle": "assertEquals(prop.getName(), \"testaasd\");", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void testGlobalPropertyCreate() {\n\n    OSchema schema = db.getMetadata().getSchema();\n\n    schema.createGlobalProperty(\"testaasd\", OType.SHORT, 100);\n    OGlobalProperty prop = schema.getGlobalPropertyById(100);\n  }", "original_test_prefix": "  @Test\n  public void testGlobalPropertyCreate() {\n\n    OSchema schema = db.getMetadata().getSchema();\n\n    schema.createGlobalProperty(\"testaasd\", OType.SHORT, 100);\n    OGlobalProperty prop = schema.getGlobalPropertyById(100);\n    assertEquals(prop.getName(), \"testaasd\");\n    assertEquals(prop.getId(), (Integer) 100);\n    assertEquals(prop.getType(), OType.SHORT);\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.metadata.schema.OSchemaSharedGlobalPropertyTest#testGlobalPropertyCreate", "test_setup_list": [{"test_setup": "@Before\n  public void setUp() {\n    db = new ODatabaseDocumentTx(\"memory:\" + OSchemaSharedGlobalPropertyTest.class.getSimpleName());\n    if (db.exists()) {\n      db.open(\"admin\", \"admin\");\n    } else\n      db.create();\n  }", "start_lineno": 15, "end_lineno": 22}]}
{"index": 234, "project_index": 129, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "TrackedMapTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedMapTest.java", "test_name": "testRemoveTwo", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedMapTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedMapTest.java", "test_prefix": "  @Test\n  public void testRemoveTwo() {\n    final ODocument doc = new ODocument();\n\n    final OTrackedMap<String> map = new OTrackedMap<String>(doc);\n\n    map.put(\"key1\", \"value1\");\n\n    ORecordInternal.unsetDirty(doc);\n    <AssertPlaceHolder>;\n\n    final ORef<Boolean> changed = new ORef<Boolean>(false);\n\n    map.addChangeListener(new OMultiValueChangeListener<Object, String>() {\n      public void onAfterRecordChanged(final OMultiValueChangeEvent<Object, String> event) {\n        changed.value = true;\n      }\n    });\n\n    map.remove(\"key2\");\n\n    Assert.assertFalse(changed.value);\n    Assert.assertFalse(doc.isDirty());\n  }", "test_prefix_start_lineno": 185, "test_prefix_end_lineno": 208, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focal_method": "  public boolean isDirty() {\n    return _dirty;\n  }", "focal_method_start_lineno": 156, "focal_method_end_lineno": 158, "ground_truth_oracle": "Assert.assertFalse(doc.isDirty());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testRemoveTwo() {\n    final ODocument doc = new ODocument();\n\n    final OTrackedMap<String> map = new OTrackedMap<String>(doc);\n\n    map.put(\"key1\", \"value1\");\n\n    ORecordInternal.unsetDirty(doc);\n  }", "original_test_prefix": "  @Test\n  public void testRemoveTwo() {\n    final ODocument doc = new ODocument();\n\n    final OTrackedMap<String> map = new OTrackedMap<String>(doc);\n\n    map.put(\"key1\", \"value1\");\n\n    ORecordInternal.unsetDirty(doc);\n    Assert.assertFalse(doc.isDirty());\n\n    final ORef<Boolean> changed = new ORef<Boolean>(false);\n\n    map.addChangeListener(new OMultiValueChangeListener<Object, String>() {\n      public void onAfterRecordChanged(final OMultiValueChangeEvent<Object, String> event) {\n        changed.value = true;\n      }\n    });\n\n    map.remove(\"key2\");\n\n    Assert.assertFalse(changed.value);\n    Assert.assertFalse(doc.isDirty());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.record.TrackedMapTest#testRemoveTwo", "test_setup_list": []}
{"index": 235, "project_index": 129, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "SaveLinkedTypeAnyTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/SaveLinkedTypeAnyTest.java", "test_name": "testAlterRemoveLinkedType", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/SaveLinkedTypeAnyTest.java", "test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + SaveLinkedTypeAnyTest.class.getSimpleName());\n    db.create();\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/SaveLinkedTypeAnyTest.java", "test_prefix": "  @Test\n  public void testAlterRemoveLinkedType() {\n    OSchema schema = db.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"TestRemoveLinkedType\");\n    OProperty prop = classA.createProperty(\"prop\", OType.EMBEDDEDLIST, OType.ANY);\n\n    db.command(new OCommandSQL(\"alter property TestRemoveLinkedType.prop linkedtype null\")).execute();\n    db.command(new OCommandSQL(\"insert into TestRemoveLinkedType set prop = [4]\")).execute();\n\n    List<ODocument> result = db.query(new OSQLSynchQuery<ODocument>(\"select from TestRemoveLinkedType\"));\n    <AssertPlaceHolder>;\n    Assert.assertEquals(result.size(), 1);\n    Collection coll = result.get(0).field(\"prop\");\n    Assert.assertEquals(coll.size(), 1);\n    Assert.assertEquals(coll.iterator().next(), 4);\n  }", "test_prefix_start_lineno": 51, "test_prefix_end_lineno": 66, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focal_method": "  @Deprecated\n  <RET extends List<?>> RET query(final OQuery<?> iCommand, final Object... iArgs);", "focal_method_start_lineno": 830, "focal_method_end_lineno": 831, "ground_truth_oracle": "Assert.assertNotNull(result);", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test\n  public void testAlterRemoveLinkedType() {\n    OSchema schema = db.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"TestRemoveLinkedType\");\n    OProperty prop = classA.createProperty(\"prop\", OType.EMBEDDEDLIST, OType.ANY);\n\n    db.command(new OCommandSQL(\"alter property TestRemoveLinkedType.prop linkedtype null\")).execute();\n    db.command(new OCommandSQL(\"insert into TestRemoveLinkedType set prop = [4]\")).execute();\n\n    List<ODocument> result = db.query(new OSQLSynchQuery<ODocument>(\"select from TestRemoveLinkedType\"));\n  }", "original_test_prefix": "  @Test\n  public void testAlterRemoveLinkedType() {\n    OSchema schema = db.getMetadata().getSchema();\n    OClass classA = schema.createClass(\"TestRemoveLinkedType\");\n    OProperty prop = classA.createProperty(\"prop\", OType.EMBEDDEDLIST, OType.ANY);\n\n    db.command(new OCommandSQL(\"alter property TestRemoveLinkedType.prop linkedtype null\")).execute();\n    db.command(new OCommandSQL(\"insert into TestRemoveLinkedType set prop = [4]\")).execute();\n\n    List<ODocument> result = db.query(new OSQLSynchQuery<ODocument>(\"select from TestRemoveLinkedType\"));\n    Assert.assertNotNull(result);\n    Assert.assertEquals(result.size(), 1);\n    Collection coll = result.get(0).field(\"prop\");\n    Assert.assertEquals(coll.size(), 1);\n    Assert.assertEquals(coll.iterator().next(), 4);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.metadata.schema.SaveLinkedTypeAnyTest#testAlterRemoveLinkedType", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + SaveLinkedTypeAnyTest.class.getSimpleName());\n    db.create();\n  }", "start_lineno": 23, "end_lineno": 27}]}
{"index": 236, "project_index": 129, "class_index": 6, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODatabaseDocumentTxTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java", "test_name": "testDocFromJsonEmbedded", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java", "test_setup": "@Before\n  public void setUp() throws Exception {\n    String url = \"memory:\" + ODatabaseDocumentTxTest.class.getSimpleName();\n    db = new ODatabaseDocumentTx(url).create();\n\n  }", "test_setup_start_lineno": 36, "test_setup_end_lineno": 41, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java", "test_prefix": "  @Test\n  public void testDocFromJsonEmbedded() {\n    OSchema schema = db.getMetadata().getSchema();\n\n    OClass c0 = schema.createClass(\"testDocFromJsonEmbedded_Class0\");\n\n    OClass c1 = schema.createClass(\"testDocFromJsonEmbedded_Class1\");\n    c1.createProperty(\"account\", OType.STRING);\n    c1.createProperty(\"meta\", OType.EMBEDDED, c0);\n\n    ODocument doc = new ODocument(\"testDocFromJsonEmbedded_Class1\");\n\n    doc.fromJSON(\n        \"{\\n\" + \"    \\\"account\\\": \\\"#25:0\\\",\\n\" + \"    \" + \"\\\"meta\\\": {\" + \"   \\\"created\\\": \\\"2016-10-03T21:10:21.77-07:00\\\",\\n\"\n            + \"        \\\"ip\\\": \\\"0:0:0:0:0:0:0:1\\\",\\n\" + \"   \\\"contentType\\\": \\\"application/x-www-form-urlencoded\\\",\"\n            + \"   \\\"userAgent\\\": \\\"PostmanRuntime/2.5.2\\\"\" + \"},\" + \"\\\"data\\\": \\\"firstName=Jessica&lastName=Smith\\\"\\n\" + \"}\");\n\n    db.save(doc);\n\n    List<ODocument> result = db.query(new OSQLSynchQuery<Object>(\"select from testDocFromJsonEmbedded_Class0\"));\n    <AssertPlaceHolder>;\n\n    result = db.query(new OSQLSynchQuery<Object>(\"select from testDocFromJsonEmbedded_Class1\"));\n    Assert.assertEquals(result.size(), 1);\n    ODocument item = result.get(0);\n    ODocument meta = item.field(\"meta\");\n    Assert.assertEquals(meta.getClassName(), \"testDocFromJsonEmbedded_Class0\");\n    Assert.assertEquals(meta.field(\"ip\"), \"0:0:0:0:0:0:0:1\");\n\n  }", "test_prefix_start_lineno": 148, "test_prefix_end_lineno": 177, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focal_method": "  @Override\n  public <RET extends List<?>> RET query(OQuery<?> iCommand, Object... iArgs) {\n    checkOpenness();\n    return internal.query(iCommand, iArgs);\n  }", "focal_method_start_lineno": 754, "focal_method_end_lineno": 758, "ground_truth_oracle": "Assert.assertEquals(result.size(), 0);", "ground_truth_oracle_lineno": 9, "test_prefix_wo_placeholder": "  @Test\n  public void testDocFromJsonEmbedded() {\n    OSchema schema = db.getMetadata().getSchema();\n\n    OClass c0 = schema.createClass(\"testDocFromJsonEmbedded_Class0\");\n\n    OClass c1 = schema.createClass(\"testDocFromJsonEmbedded_Class1\");\n    c1.createProperty(\"account\", OType.STRING);\n    c1.createProperty(\"meta\", OType.EMBEDDED, c0);\n\n    ODocument doc = new ODocument(\"testDocFromJsonEmbedded_Class1\");\n\n    doc.fromJSON(\n        \"{\\n\" + \"    \\\"account\\\": \\\"#25:0\\\",\\n\" + \"    \" + \"\\\"meta\\\": {\" + \"   \\\"created\\\": \\\"2016-10-03T21:10:21.77-07:00\\\",\\n\"\n            + \"        \\\"ip\\\": \\\"0:0:0:0:0:0:0:1\\\",\\n\" + \"   \\\"contentType\\\": \\\"application/x-www-form-urlencoded\\\",\"\n            + \"   \\\"userAgent\\\": \\\"PostmanRuntime/2.5.2\\\"\" + \"},\" + \"\\\"data\\\": \\\"firstName=Jessica&lastName=Smith\\\"\\n\" + \"}\");\n\n    db.save(doc);\n\n    List<ODocument> result = db.query(new OSQLSynchQuery<Object>(\"select from testDocFromJsonEmbedded_Class0\"));\n  }", "original_test_prefix": "  @Test\n  public void testDocFromJsonEmbedded() {\n    OSchema schema = db.getMetadata().getSchema();\n\n    OClass c0 = schema.createClass(\"testDocFromJsonEmbedded_Class0\");\n\n    OClass c1 = schema.createClass(\"testDocFromJsonEmbedded_Class1\");\n    c1.createProperty(\"account\", OType.STRING);\n    c1.createProperty(\"meta\", OType.EMBEDDED, c0);\n\n    ODocument doc = new ODocument(\"testDocFromJsonEmbedded_Class1\");\n\n    doc.fromJSON(\n        \"{\\n\" + \"    \\\"account\\\": \\\"#25:0\\\",\\n\" + \"    \" + \"\\\"meta\\\": {\" + \"   \\\"created\\\": \\\"2016-10-03T21:10:21.77-07:00\\\",\\n\"\n            + \"        \\\"ip\\\": \\\"0:0:0:0:0:0:0:1\\\",\\n\" + \"   \\\"contentType\\\": \\\"application/x-www-form-urlencoded\\\",\"\n            + \"   \\\"userAgent\\\": \\\"PostmanRuntime/2.5.2\\\"\" + \"},\" + \"\\\"data\\\": \\\"firstName=Jessica&lastName=Smith\\\"\\n\" + \"}\");\n\n    db.save(doc);\n\n    List<ODocument> result = db.query(new OSQLSynchQuery<Object>(\"select from testDocFromJsonEmbedded_Class0\"));\n    Assert.assertEquals(result.size(), 0);\n\n    result = db.query(new OSQLSynchQuery<Object>(\"select from testDocFromJsonEmbedded_Class1\"));\n    Assert.assertEquals(result.size(), 1);\n    ODocument item = result.get(0);\n    ODocument meta = item.field(\"meta\");\n    Assert.assertEquals(meta.getClassName(), \"testDocFromJsonEmbedded_Class0\");\n    Assert.assertEquals(meta.field(\"ip\"), \"0:0:0:0:0:0:0:1\");\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.document.ODatabaseDocumentTxTest#testDocFromJsonEmbedded", "test_setup_list": [{"test_setup": "@Before\n  public void setUp() throws Exception {\n    String url = \"memory:\" + ODatabaseDocumentTxTest.class.getSimpleName();\n    db = new ODatabaseDocumentTx(url).create();\n\n  }", "start_lineno": 36, "end_lineno": 41}]}
{"index": 237, "project_index": 129, "class_index": 7, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_name": "testFriendsOfFriends", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 63, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testFriendsOfFriends() throws Exception {\n\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (match {class:Person, where:(name = 'n1')}.out('Friend').out('Friend'){as:friend} return $matches)\"))\n        .execute();\n    <AssertPlaceHolder>;\n    assertEquals(\"n4\", qResult.get(0).field(\"name\"));\n  }", "test_prefix_start_lineno": 416, "test_prefix_end_lineno": 426, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(1, qResult.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testFriendsOfFriends() throws Exception {\n\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (match {class:Person, where:(name = 'n1')}.out('Friend').out('Friend'){as:friend} return $matches)\"))\n        .execute();\n  }", "original_test_prefix": "  @Test\n  public void testFriendsOfFriends() throws Exception {\n\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (match {class:Person, where:(name = 'n1')}.out('Friend').out('Friend'){as:friend} return $matches)\"))\n        .execute();\n    assertEquals(1, qResult.size());\n    assertEquals(\"n4\", qResult.get(0).field(\"name\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionTest#testFriendsOfFriends", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 29, "end_lineno": 63}]}
{"index": 238, "project_index": 129, "class_index": 8, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "HttpIndexTest", "class_path": "server/src/test/java/com/orientechnologies/orient/test/server/network/http/HttpIndexTest.java", "test_name": "updateKey", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/test/server/network/http/HttpIndexTest.java", "test_setup": "", "test_setup_start_lineno": 37, "test_setup_end_lineno": 46, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/test/server/network/http/HttpIndexTest.java", "test_prefix": "  @Test\n\n  public void updateKey() throws IOException {\n    put(\"index/\" + getDatabaseName() + \"/ManualIndex/Harry2\").payload(\"{@class:'V', name:'Harry', surname:'Potter',age:18}\", CONTENT.JSON)\n        .exec();\n    <AssertPlaceHolder>;\n\n    put(\"index/\" + getDatabaseName() + \"/ManualIndex/Harry2\").payload(\"{@class:'V', name:'Harry2', surname:'Potter2',age:182}\", CONTENT.JSON)\n        .exec();\n    Assert.assertEquals(getResponse().getStatusLine().getStatusCode(), 201);\n\n    get(\"index/\" + getDatabaseName() + \"/ManualIndex/Harry2\").exec();\n    Assert.assertEquals(getResponse().getStatusLine().getStatusCode(), 200);\n\n    String response = EntityUtils.toString(getResponse().getEntity());\n    Assert.assertEquals(response.charAt(0), '[');\n    Assert.assertEquals(response.charAt(response.length() - 1), ']');\n    response = response.substring(1, response.length() - 1);\n\n    final ODocument jay = new ODocument().fromJSON(response);\n    Assert.assertEquals(jay.field(\"name\"), \"Harry2\");\n    Assert.assertEquals(jay.field(\"surname\"), \"Potter2\");\n    Assert.assertEquals(jay.<Object>field(\"age\"), 182);\n    Assert.assertEquals(jay.getVersion(), 1);\n  }", "test_prefix_start_lineno": 48, "test_prefix_end_lineno": 72, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focal_method": "  public int getVersion() {\n    // checkForLoading();\n    return _recordVersion;\n  }", "focal_method_start_lineno": 205, "focal_method_end_lineno": 208, "ground_truth_oracle": "Assert.assertEquals(getResponse().getStatusLine().getStatusCode(), 201);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n\n  public void updateKey() throws IOException {\n    put(\"index/\" + getDatabaseName() + \"/ManualIndex/Harry2\").payload(\"{@class:'V', name:'Harry', surname:'Potter',age:18}\", CONTENT.JSON)\n        .exec();\n  }", "original_test_prefix": "  @Test\n\n  public void updateKey() throws IOException {\n    put(\"index/\" + getDatabaseName() + \"/ManualIndex/Harry2\").payload(\"{@class:'V', name:'Harry', surname:'Potter',age:18}\", CONTENT.JSON)\n        .exec();\n    Assert.assertEquals(getResponse().getStatusLine().getStatusCode(), 201);\n\n    put(\"index/\" + getDatabaseName() + \"/ManualIndex/Harry2\").payload(\"{@class:'V', name:'Harry2', surname:'Potter2',age:182}\", CONTENT.JSON)\n        .exec();\n    Assert.assertEquals(getResponse().getStatusLine().getStatusCode(), 201);\n\n    get(\"index/\" + getDatabaseName() + \"/ManualIndex/Harry2\").exec();\n    Assert.assertEquals(getResponse().getStatusLine().getStatusCode(), 200);\n\n    String response = EntityUtils.toString(getResponse().getEntity());\n    Assert.assertEquals(response.charAt(0), '[');\n    Assert.assertEquals(response.charAt(response.length() - 1), ']');\n    response = response.substring(1, response.length() - 1);\n\n    final ODocument jay = new ODocument().fromJSON(response);\n    Assert.assertEquals(jay.field(\"name\"), \"Harry2\");\n    Assert.assertEquals(jay.field(\"surname\"), \"Potter2\");\n    Assert.assertEquals(jay.<Object>field(\"age\"), 182);\n    Assert.assertEquals(jay.getVersion(), 1);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.test.server.network.http.HttpIndexTest#updateKey", "test_setup_list": []}
{"index": 239, "project_index": 130, "class_index": 0, "test_index": 0, "user_name": "Yubico", "repo_name": "yubico-java-client", "sub_repos": ["v2client", "jaas", "demo-server"], "sub_repo": "v2client", "commit_sha": "e21fb672e290a118f7420daaf81ccb96d319d52c", "build_system": "mvn", "class_name": "YubicoClientTest", "class_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_name": "testReplayedOTP", "test_setup_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 69, "test_prefix_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_prefix": "    @Test\n    public void testReplayedOTP() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        VerificationResponse response = client.verify(otp);\n        <AssertPlaceHolder>;\n        assertEquals(otp, response.getOtp());\n        assertEquals(ResponseStatus.REPLAYED_OTP, response.getStatus());\n    }", "test_prefix_start_lineno": 84, "test_prefix_end_lineno": 91, "focal_method_file_path": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focal_method": "    public abstract VerificationResponse verify(String otp) throws YubicoVerificationException, YubicoValidationFailure;", "focal_method_start_lineno": 70, "focal_method_end_lineno": 70, "ground_truth_oracle": "assertNotNull(response);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testReplayedOTP() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        VerificationResponse response = client.verify(otp);\n    }", "original_test_prefix": "    @Test\n    public void testReplayedOTP() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        VerificationResponse response = client.verify(otp);\n        assertNotNull(response);\n        assertEquals(otp, response.getOtp());\n        assertEquals(ResponseStatus.REPLAYED_OTP, response.getStatus());\n    }", "test_with_params": false, "test_target": "com.yubico.client.v2.YubicoClientTest#testReplayedOTP", "test_setup_list": [{"test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "start_lineno": 66, "end_lineno": 69}]}
{"index": 240, "project_index": 131, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "MultiTurtlePanelTest", "class_path": "src/test/java/org/teachingextensions/logo/MultiTurtlePanelTest.java", "test_name": "testAddTurtle", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/MultiTurtlePanelTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/MultiTurtlePanelTest.java", "test_prefix": "  @Test\n  public void testAddTurtle() throws Exception {\n    JUnitUtils.assumeNotHeadless();\n    MultiTurtleWindow panel = new MultiTurtleWindow();\n    panel.addTurtle(new Turtle());\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 53, "test_prefix_end_lineno": 59, "focal_method_file_path": "src/main/java/org/teachingextensions/WindowUtils/MultiTurtleWindow.java", "focal_method": "  public int getTurtleCount()\n  {\n    return this.turtles.size();\n  }", "focal_method_start_lineno": 63, "focal_method_end_lineno": 66, "ground_truth_oracle": "assertEquals(1, panel.getTurtleCount());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void testAddTurtle() throws Exception {\n    JUnitUtils.assumeNotHeadless();\n    MultiTurtleWindow panel = new MultiTurtleWindow();\n    panel.addTurtle(new Turtle());\n  }", "original_test_prefix": "  @Test\n  public void testAddTurtle() throws Exception {\n    JUnitUtils.assumeNotHeadless();\n    MultiTurtleWindow panel = new MultiTurtleWindow();\n    panel.addTurtle(new Turtle());\n    assertEquals(1, panel.getTurtleCount());\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.MultiTurtlePanelTest#testAddTurtle", "test_setup_list": []}
{"index": 241, "project_index": 132, "class_index": 0, "test_index": 0, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "DevUtilPrepareDockerfileTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilPrepareDockerfileTest.java", "test_name": "testDisableOpenJ9SCC_mixedcase", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilPrepareDockerfileTest.java", "test_setup": "@Before\n    public void setUp() throws IOException {\n        util = getNewDevUtil(null);\n    }", "test_setup_start_lineno": 37, "test_setup_end_lineno": 40, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilPrepareDockerfileTest.java", "test_prefix": "    @Test\n    public void testDisableOpenJ9SCC_mixedcase() throws Exception {\n        List<String> dockerfileLines = new ArrayList<String>();\n        List<String> expectedDockerfileLines = new ArrayList<String>();\n        dockerfileLines.add(\"FROM openliberty/open-liberty\");\n        dockerfileLines.add(\"RuN configure.sh\");\n        util.disableOpenJ9SCC(dockerfileLines);\n        expectedDockerfileLines.add(\"FROM openliberty/open-liberty\");\n        expectedDockerfileLines.add(\"ENV OPENJ9_SCC=false\");\n        expectedDockerfileLines.add(\"RuN configure.sh\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 252, "test_prefix_end_lineno": 263, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focal_method": "    protected void disableOpenJ9SCC(List<String> dockerfileLines) {\n        final String RUN_CONFIGURE_COMMAND_LOWERCASE = \"run configure.sh\";\n        for (int i=0; i<dockerfileLines.size(); i++) {\n            String line = dockerfileLines.get(i);\n            // RUN command is case insensitive, so use lowercase matching.\n            if (line.toLowerCase().equals(RUN_CONFIGURE_COMMAND_LOWERCASE)) {\n                debug(\"Detected RUN configure.sh command.  Skipping OpenJ9 Shared Class Cache.\");\n                dockerfileLines.add(i, \"ENV OPENJ9_SCC=false\");\n                return;\n            }\n        }\n    }", "focal_method_start_lineno": 1029, "focal_method_end_lineno": 1040, "ground_truth_oracle": "assertEquals(expectedDockerfileLines, dockerfileLines);", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "    @Test\n    public void testDisableOpenJ9SCC_mixedcase() throws Exception {\n        List<String> dockerfileLines = new ArrayList<String>();\n        List<String> expectedDockerfileLines = new ArrayList<String>();\n        dockerfileLines.add(\"FROM openliberty/open-liberty\");\n        dockerfileLines.add(\"RuN configure.sh\");\n        util.disableOpenJ9SCC(dockerfileLines);\n        expectedDockerfileLines.add(\"FROM openliberty/open-liberty\");\n        expectedDockerfileLines.add(\"ENV OPENJ9_SCC=false\");\n        expectedDockerfileLines.add(\"RuN configure.sh\");\n    }", "original_test_prefix": "    @Test\n    public void testDisableOpenJ9SCC_mixedcase() throws Exception {\n        List<String> dockerfileLines = new ArrayList<String>();\n        List<String> expectedDockerfileLines = new ArrayList<String>();\n        dockerfileLines.add(\"FROM openliberty/open-liberty\");\n        dockerfileLines.add(\"RuN configure.sh\");\n        util.disableOpenJ9SCC(dockerfileLines);\n        expectedDockerfileLines.add(\"FROM openliberty/open-liberty\");\n        expectedDockerfileLines.add(\"ENV OPENJ9_SCC=false\");\n        expectedDockerfileLines.add(\"RuN configure.sh\");\n        assertEquals(expectedDockerfileLines, dockerfileLines);\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_mixedcase", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws IOException {\n        util = getNewDevUtil(null);\n    }", "start_lineno": 37, "end_lineno": 40}]}
{"index": 242, "project_index": 133, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "MkvBlockTest", "class_path": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java", "test_name": "testXiph", "test_setup_file_path": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java", "test_prefix": "    @Test\n    public void testXiph() {\n        int[] _in = new int[]{187, 630, 255, 60, 0xFFFFFF};\n        byte[] expecteds = new byte[]{(byte)187, (byte)255, (byte)255, 120, (byte)255, 0, 60};\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 22, "test_prefix_end_lineno": 27, "focal_method_file_path": "src/main/java/org/jcodec/containers/mkv/boxes/MkvBlock.java", "focal_method": "    public static byte[] muxXiphLacing(int[] laceSizes) {\n        ByteArrayList bytes = ByteArrayList.createByteArrayList();\n        for (int i = 0; i < laceSizes.length - 1; i++) {\n            long laceSize = laceSizes[i];\n            while (laceSize >= 255) {\n                bytes.add((byte) 255);\n                laceSize -= 255;\n            }\n            bytes.add((byte) laceSize);\n        }\n        return bytes.toArray();\n    }", "focal_method_start_lineno": 384, "focal_method_end_lineno": 395, "ground_truth_oracle": "assertArrayEquals(expecteds, MkvBlock.muxXiphLacing(_in));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testXiph() {\n        int[] _in = new int[]{187, 630, 255, 60, 0xFFFFFF};\n        byte[] expecteds = new byte[]{(byte)187, (byte)255, (byte)255, 120, (byte)255, 0, 60};\n    }", "original_test_prefix": "    @Test\n    public void testXiph() {\n        int[] _in = new int[]{187, 630, 255, 60, 0xFFFFFF};\n        byte[] expecteds = new byte[]{(byte)187, (byte)255, (byte)255, 120, (byte)255, 0, 60};\n        assertArrayEquals(expecteds, MkvBlock.muxXiphLacing(_in));\n    }", "test_with_params": false, "test_target": "org.jcodec.containers.mkv.MkvBlockTest#testXiph", "test_setup_list": []}
{"index": 243, "project_index": 133, "class_index": 1, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "SegmentTypeBoxTest", "class_path": "src/test/java/org/jcodec/containers/mp4/boxes/SegmentTypeBoxTest.java", "test_name": "testParse", "test_setup_file_path": "src/test/java/org/jcodec/containers/mp4/boxes/SegmentTypeBoxTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/containers/mp4/boxes/SegmentTypeBoxTest.java", "test_prefix": "    @Test\n    public void testParse() throws Exception {\n        ByteBuffer buf = ByteBuffer.allocate(0x18 + 8);\n        buf.putInt(0x18);\n        buf.put(\"stypmsdh\".getBytes());\n        buf.putInt(0);\n        buf.put(\"msdhmsix\".getBytes());\n        buf.putInt(8);\n        buf.put(\"free\".getBytes());\n        buf.clear();\n\n        SeekableByteChannel input = ByteBufferSeekableByteChannel.readFromByteBuffer(buf);\n        List<Atom> rootAtoms = MP4Util.getRootAtoms(input);\n        <AssertPlaceHolder>;\n        Atom atom = rootAtoms.get(0);\n        assertEquals(\"styp\", atom.getHeader().getFourcc());\n        Box box = atom.parseBox(input);\n        assertTrue(box instanceof SegmentTypeBox);\n\n        SegmentTypeBox ftyp = (SegmentTypeBox) box;\n        assertEquals(\"msdh\", ftyp.getMajorBrand());\n        assertArrayEquals(new String[] { \"msdh\", \"msix\" }, ftyp.getCompBrands().toArray(new String[0]));\n\n    }", "test_prefix_start_lineno": 16, "test_prefix_end_lineno": 39, "focal_method_file_path": "src/main/java/org/jcodec/containers/mp4/MP4Util.java", "focal_method": "    public static List<Atom> getRootAtoms(SeekableByteChannel input) throws IOException {\n        input.setPosition(0);\n        List<Atom> result = new ArrayList<Atom>();\n        long off = 0;\n        Header atom;\n        while (off < input.size()) {\n            input.setPosition(off);\n            atom = Header.read(NIOUtils.fetchFromChannel(input, 16));\n            if (atom == null)\n                break;\n            result.add(new Atom(atom, off));\n            off += atom.getSize();\n        }\n\n        return result;\n    }", "focal_method_start_lineno": 130, "focal_method_end_lineno": 145, "ground_truth_oracle": "assertEquals(2, rootAtoms.size());", "ground_truth_oracle_lineno": 10, "test_prefix_wo_placeholder": "    @Test\n    public void testParse() throws Exception {\n        ByteBuffer buf = ByteBuffer.allocate(0x18 + 8);\n        buf.putInt(0x18);\n        buf.put(\"stypmsdh\".getBytes());\n        buf.putInt(0);\n        buf.put(\"msdhmsix\".getBytes());\n        buf.putInt(8);\n        buf.put(\"free\".getBytes());\n        buf.clear();\n\n        SeekableByteChannel input = ByteBufferSeekableByteChannel.readFromByteBuffer(buf);\n        List<Atom> rootAtoms = MP4Util.getRootAtoms(input);\n    }", "original_test_prefix": "    @Test\n    public void testParse() throws Exception {\n        ByteBuffer buf = ByteBuffer.allocate(0x18 + 8);\n        buf.putInt(0x18);\n        buf.put(\"stypmsdh\".getBytes());\n        buf.putInt(0);\n        buf.put(\"msdhmsix\".getBytes());\n        buf.putInt(8);\n        buf.put(\"free\".getBytes());\n        buf.clear();\n\n        SeekableByteChannel input = ByteBufferSeekableByteChannel.readFromByteBuffer(buf);\n        List<Atom> rootAtoms = MP4Util.getRootAtoms(input);\n        assertEquals(2, rootAtoms.size());\n        Atom atom = rootAtoms.get(0);\n        assertEquals(\"styp\", atom.getHeader().getFourcc());\n        Box box = atom.parseBox(input);\n        assertTrue(box instanceof SegmentTypeBox);\n\n        SegmentTypeBox ftyp = (SegmentTypeBox) box;\n        assertEquals(\"msdh\", ftyp.getMajorBrand());\n        assertArrayEquals(new String[] { \"msdh\", \"msix\" }, ftyp.getCompBrands().toArray(new String[0]));\n\n    }", "test_with_params": false, "test_target": "org.jcodec.containers.mp4.boxes.SegmentTypeBoxTest#testParse", "test_setup_list": []}
{"index": 244, "project_index": 133, "class_index": 2, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "MPEGESTest", "class_path": "src/test/java/org/jcodec/codecs/mpeg12/MPEGESTest.java", "test_name": "testESBuffer", "test_setup_file_path": "src/test/java/org/jcodec/codecs/mpeg12/MPEGESTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/codecs/mpeg12/MPEGESTest.java", "test_prefix": "    @Test\n    public void testESBuffer() throws IOException {\n\n        byte[] mpeg = MPEGTestConst.mpeg();\n\n        byte[] frame1 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegHeader, MPEGTestConst._mpegFrame});\n        byte[] frame2 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegFrame});\n        MPEGES mpeges = new MPEGES(Channels.newChannel(new ByteArrayInputStream(mpeg)), 32);\n        Packet f1 = mpeges.getFrame();\n        <AssertPlaceHolder>;\n\n        Packet f2 = mpeges.getFrame();\n        assertArrayEquals(frame1, NIOUtils.toArray(f2.getData()));\n\n        Packet f3 = mpeges.getFrame();\n        assertArrayEquals(frame2, NIOUtils.toArray(f3.getData()));\n    }", "test_prefix_start_lineno": 34, "test_prefix_end_lineno": 50, "focal_method_file_path": "src/main/java/org/jcodec/common/io/NIOUtils.java", "focal_method": "    public static byte[] toArray(ByteBuffer buffer) {\n        byte[] result = new byte[buffer.remaining()];\n        buffer.duplicate().get(result);\n        return result;\n    }", "focal_method_start_lineno": 146, "focal_method_end_lineno": 150, "ground_truth_oracle": "assertArrayEquals(frame1, NIOUtils.toArray(f1.getData()));", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testESBuffer() throws IOException {\n\n        byte[] mpeg = MPEGTestConst.mpeg();\n\n        byte[] frame1 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegHeader, MPEGTestConst._mpegFrame});\n        byte[] frame2 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegFrame});\n        MPEGES mpeges = new MPEGES(Channels.newChannel(new ByteArrayInputStream(mpeg)), 32);\n        Packet f1 = mpeges.getFrame();\n    }", "original_test_prefix": "    @Test\n    public void testESBuffer() throws IOException {\n\n        byte[] mpeg = MPEGTestConst.mpeg();\n\n        byte[] frame1 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegHeader, MPEGTestConst._mpegFrame});\n        byte[] frame2 = MPEGTestConst.toBB(new int[][]{MPEGTestConst._mpegFrame});\n        MPEGES mpeges = new MPEGES(Channels.newChannel(new ByteArrayInputStream(mpeg)), 32);\n        Packet f1 = mpeges.getFrame();\n        assertArrayEquals(frame1, NIOUtils.toArray(f1.getData()));\n\n        Packet f2 = mpeges.getFrame();\n        assertArrayEquals(frame1, NIOUtils.toArray(f2.getData()));\n\n        Packet f3 = mpeges.getFrame();\n        assertArrayEquals(frame2, NIOUtils.toArray(f3.getData()));\n    }", "test_with_params": false, "test_target": "org.jcodec.codecs.mpeg12.MPEGESTest#testESBuffer", "test_setup_list": []}
{"index": 245, "project_index": 134, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ContextTest", "class_path": "src/test/java/gov/adlnet/xapi/ContextTest.java", "test_name": "testSetInstructor", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ContextTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ContextTest.java", "test_prefix": "    @Test\n    public void testSetInstructor() {\n        Agent expected = new Agent(\"jXAPI\", \"mailto:test@example.com\");\n        Context c = new Context();\n        c.setInstructor(expected);\n        Actor actual = c.getInstructor();\n        <AssertPlaceHolder>;\n        assertEquals(expected.getMbox(), actual.getMbox());\n    }", "test_prefix_start_lineno": 90, "test_prefix_end_lineno": 98, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Context.java", "focal_method": "    public Actor getInstructor() {\n        return instructor;\n    }", "focal_method_start_lineno": 35, "focal_method_end_lineno": 37, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testSetInstructor() {\n        Agent expected = new Agent(\"jXAPI\", \"mailto:test@example.com\");\n        Context c = new Context();\n        c.setInstructor(expected);\n        Actor actual = c.getInstructor();\n    }", "original_test_prefix": "    @Test\n    public void testSetInstructor() {\n        Agent expected = new Agent(\"jXAPI\", \"mailto:test@example.com\");\n        Context c = new Context();\n        c.setInstructor(expected);\n        Actor actual = c.getInstructor();\n        assertNotNull(actual);\n        assertEquals(expected.getMbox(), actual.getMbox());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ContextTest#testSetInstructor", "test_setup_list": []}
{"index": 246, "project_index": 135, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "izskanjas", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void izskanjas() {\n        loc\u012bt\u0101js.enableGuessing = true;\n        loc\u012bt\u0101js.enableVocative = false;\n        loc\u012bt\u0101js.guessVerbs = true;\n        loc\u012bt\u0101js.enableAllGuesses = true;\n\n        Word austrumlatvija = loc\u012bt\u0101js.analyze(\"Austrumlatvija\");\n        <AssertPlaceHolder>;\n\n        Word w = loc\u012bt\u0101js.analyze(\"miru\u0161ais\");\n        assertTrue(w.isRecognized());\n    }", "test_prefix_start_lineno": 2157, "test_prefix_end_lineno": 2169, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(austrumlatvija.isRecognized());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void izskanjas() {\n        loc\u012bt\u0101js.enableGuessing = true;\n        loc\u012bt\u0101js.enableVocative = false;\n        loc\u012bt\u0101js.guessVerbs = true;\n        loc\u012bt\u0101js.enableAllGuesses = true;\n\n        Word austrumlatvija = loc\u012bt\u0101js.analyze(\"Austrumlatvija\");\n    }", "original_test_prefix": "    @Test\n    public void izskanjas() {\n        loc\u012bt\u0101js.enableGuessing = true;\n        loc\u012bt\u0101js.enableVocative = false;\n        loc\u012bt\u0101js.guessVerbs = true;\n        loc\u012bt\u0101js.enableAllGuesses = true;\n\n        Word austrumlatvija = loc\u012bt\u0101js.analyze(\"Austrumlatvija\");\n        assertTrue(austrumlatvija.isRecognized());\n\n        Word w = loc\u012bt\u0101js.analyze(\"miru\u0161ais\");\n        assertTrue(w.isRecognized());\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#izskanjas", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 247, "project_index": 136, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "UserProcessorRegisterHelperTest", "class_path": "src/test/java/com/alipay/remoting/rpc/userprocessor/UserProcessorRegisterHelperTest.java", "test_name": "testRegisterMultiInterestUserProcessor", "test_setup_file_path": "src/test/java/com/alipay/remoting/rpc/userprocessor/UserProcessorRegisterHelperTest.java", "test_setup": "@Before\n    public void init() {\n        userProcessors = new ConcurrentHashMap<String, UserProcessor<?>>();\n    }", "test_setup_start_lineno": 40, "test_setup_end_lineno": 43, "test_prefix_file_path": "src/test/java/com/alipay/remoting/rpc/userprocessor/UserProcessorRegisterHelperTest.java", "test_prefix": "    @Test\n    public void testRegisterMultiInterestUserProcessor() {\n        UserProcessor multiInterestUserProcessor = new SimpleServerMultiInterestUserProcessor();\n        UserProcessorRegisterHelper.registerUserProcessor(multiInterestUserProcessor,\n            userProcessors);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 52, "test_prefix_end_lineno": 59, "focal_method_file_path": "src/main/java/com/alipay/remoting/rpc/protocol/UserProcessorRegisterHelper.java", "focal_method": "    public static void registerUserProcessor(UserProcessor<?> processor,\n                                             ConcurrentHashMap<String, UserProcessor<?>> userProcessors) {\n        if (null == processor) {\n            throw new RuntimeException(\"User processor should not be null!\");\n        }\n        if (processor instanceof MultiInterestUserProcessor) {\n            registerUserProcessor((MultiInterestUserProcessor) processor, userProcessors);\n        } else {\n            if (StringUtils.isBlank(processor.interest())) {\n                throw new RuntimeException(\"Processor interest should not be blank!\");\n            }\n            UserProcessor<?> preProcessor = userProcessors.putIfAbsent(processor.interest(),\n                processor);\n            if (preProcessor != null) {\n                String errMsg = \"Processor with interest key [\"\n                                + processor.interest()\n                                + \"] has already been registered to rpc server, can not register again!\";\n                throw new RuntimeException(errMsg);\n            }\n        }\n\n    }", "focal_method_start_lineno": 34, "focal_method_end_lineno": 55, "ground_truth_oracle": "Assert.assertEquals(((SimpleServerMultiInterestUserProcessor) multiInterestUserProcessor) .multiInterest().size(), userProcessors.size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testRegisterMultiInterestUserProcessor() {\n        UserProcessor multiInterestUserProcessor = new SimpleServerMultiInterestUserProcessor();\n        UserProcessorRegisterHelper.registerUserProcessor(multiInterestUserProcessor,\n            userProcessors);\n    }", "original_test_prefix": "    @Test\n    public void testRegisterMultiInterestUserProcessor() {\n        UserProcessor multiInterestUserProcessor = new SimpleServerMultiInterestUserProcessor();\n        UserProcessorRegisterHelper.registerUserProcessor(multiInterestUserProcessor,\n            userProcessors);\n        Assert.assertEquals(((SimpleServerMultiInterestUserProcessor) multiInterestUserProcessor) .multiInterest().size(), userProcessors.size());\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.rpc.userprocessor.UserProcessorRegisterHelperTest#testRegisterMultiInterestUserProcessor", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n        userProcessors = new ConcurrentHashMap<String, UserProcessor<?>>();\n    }", "start_lineno": 40, "end_lineno": 43}]}
{"index": 248, "project_index": 136, "class_index": 1, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "RpcConnectionManagerTest", "class_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_name": "testAdd", "test_setup_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 91, "test_prefix_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_prefix": "    @Test\n    public void testAdd() {\n        Connection conn = getAConn();\n        cm.add(conn);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 103, "test_prefix_end_lineno": 108, "focal_method_file_path": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focal_method": "    @Override\n    public int count(String poolKey) {\n        if (StringUtils.isBlank(poolKey)) {\n            return 0;\n        }\n        ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey));\n        if (null != pool) {\n            return pool.size();\n        } else {\n            return 0;\n        }\n    }", "focal_method_start_lineno": 370, "focal_method_end_lineno": 381, "ground_truth_oracle": "Assert.assertEquals(1, cm.count(poolKey));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testAdd() {\n        Connection conn = getAConn();\n        cm.add(conn);\n    }", "original_test_prefix": "    @Test\n    public void testAdd() {\n        Connection conn = getAConn();\n        cm.add(conn);\n        Assert.assertEquals(1, cm.count(poolKey));\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.inner.connection.RpcConnectionManagerTest#testAdd", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "start_lineno": 81, "end_lineno": 91}]}
{"index": 249, "project_index": 137, "class_index": 0, "test_index": 0, "user_name": "basis-technology-corp", "repo_name": "tcl-regex-java", "sub_repos": [], "sub_repo": "", "commit_sha": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62", "build_system": "mvn", "class_name": "MatcherTest", "class_path": "src/test/java/apitests/MatcherTest.java", "test_name": "lookingAtPrefix", "test_setup_file_path": "src/test/java/apitests/MatcherTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/apitests/MatcherTest.java", "test_prefix": "    @Test\n    public void lookingAtPrefix() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"(?i)ab\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"abcdefg\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 108, "test_prefix_end_lineno": 113, "focal_method_file_path": "src/main/java/com/basistech/tclre/ReMatcher.java", "focal_method": "    boolean lookingAt();", "focal_method_start_lineno": 120, "focal_method_end_lineno": 120, "ground_truth_oracle": "assertTrue(matcher.lookingAt());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void lookingAtPrefix() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"(?i)ab\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"abcdefg\");\n    }", "original_test_prefix": "    @Test\n    public void lookingAtPrefix() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"(?i)ab\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"abcdefg\");\n        assertTrue(matcher.lookingAt());\n    }", "test_with_params": false, "test_target": "apitests.MatcherTest#lookingAtPrefix", "test_setup_list": []}
{"index": 250, "project_index": 138, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "StringUtilsTest", "class_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_name": "testIsEmptyNonZero", "test_setup_file_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_prefix": "  @Test\n  public void testIsEmptyNonZero() throws Exception\n  {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 76, "test_prefix_end_lineno": 80, "focal_method_file_path": "src/main/java/org/teachingextensions/approvals/lite/util/StringUtils.java", "focal_method": "  public static boolean isNonZero(String string) {\n    return string != null && 0 < string.trim().length();\n  }", "focal_method_start_lineno": 70, "focal_method_end_lineno": 72, "ground_truth_oracle": "assertFalse(StringUtils.isNonZero(\" \"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testIsEmptyNonZero() throws Exception\n  {\n  }", "original_test_prefix": "  @Test\n  public void testIsEmptyNonZero() throws Exception\n  {\n    assertFalse(StringUtils.isNonZero(\" \"));\n  }", "test_with_params": false, "test_target": "org.teachingextensions.approvals.lite.util.StringUtilsTest#testIsEmptyNonZero", "test_setup_list": []}
{"index": 251, "project_index": 138, "class_index": 1, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleStateTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_name": "actual_cost_is_actual_steps", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_prefix": "  @Test\n  public void actual_cost_is_actual_steps()\n  {\n    Stack<PuzzleState.Direction> history = new Stack<>();\n    history.add(PuzzleState.Direction.Right);\n    history.add(PuzzleState.Direction.Right);\n    PuzzleState s = new PuzzleState(getSolvedPuzzle(), history);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 96, "test_prefix_end_lineno": 104, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focal_method": "  public int getActualCost()\n  {\n    return this.history.size();\n  }", "focal_method_start_lineno": 68, "focal_method_end_lineno": 71, "ground_truth_oracle": "assertEquals(2, s.getActualCost());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void actual_cost_is_actual_steps()\n  {\n    Stack<PuzzleState.Direction> history = new Stack<>();\n    history.add(PuzzleState.Direction.Right);\n    history.add(PuzzleState.Direction.Right);\n    PuzzleState s = new PuzzleState(getSolvedPuzzle(), history);\n  }", "original_test_prefix": "  @Test\n  public void actual_cost_is_actual_steps()\n  {\n    Stack<PuzzleState.Direction> history = new Stack<>();\n    history.add(PuzzleState.Direction.Right);\n    history.add(PuzzleState.Direction.Right);\n    PuzzleState s = new PuzzleState(getSolvedPuzzle(), history);\n    assertEquals(2, s.getActualCost());\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleStateTest#actual_cost_is_actual_steps", "test_setup_list": []}
{"index": 252, "project_index": 139, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCreateClusterStatementExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateClusterStatementExecutionTest.java", "test_name": "testBlob", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateClusterStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OCreateClusterStatementExecutionTest\");\n    db.create();\n  }", "test_setup_start_lineno": 18, "test_setup_end_lineno": 22, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OCreateClusterStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testBlob() {\n    String clusterName = \"testBlob\";\n    OResultSet result = db.command(\"create blob cluster \" + clusterName);\n    <AssertPlaceHolder>;\n    Assert.assertTrue(((ODatabaseDocumentTx) db).getStorage().getClusterIdByName(clusterName) >= 0);\n\n    result.close();\n  }", "test_prefix_start_lineno": 66, "test_prefix_end_lineno": 74, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focal_method": "  int getClusterIdByName(String iClusterName);", "focal_method_start_lineno": 250, "focal_method_end_lineno": 250, "ground_truth_oracle": "Assert.assertTrue(db.getClusterIdByName(clusterName) > 0);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testBlob() {\n    String clusterName = \"testBlob\";\n    OResultSet result = db.command(\"create blob cluster \" + clusterName);\n  }", "original_test_prefix": "  @Test\n  public void testBlob() {\n    String clusterName = \"testBlob\";\n    OResultSet result = db.command(\"create blob cluster \" + clusterName);\n    Assert.assertTrue(db.getClusterIdByName(clusterName) > 0);\n    Assert.assertTrue(((ODatabaseDocumentTx) db).getStorage().getClusterIdByName(clusterName) >= 0);\n\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.OCreateClusterStatementExecutionTest#testBlob", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OCreateClusterStatementExecutionTest\");\n    db.create();\n  }", "start_lineno": 18, "end_lineno": 22}]}
{"index": 253, "project_index": 139, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OClassImplTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OClassImplTest.java", "test_name": "testCreatePropertyIdKeep", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OClassImplTest.java", "test_setup": "@Before\n  public void setUp() {\n    db = new ODatabaseDocumentTx(\"memory:\" + OClassImplTest.class.getSimpleName());\n    if (db.exists()) {\n      db.open(\"admin\", \"admin\");\n    } else\n      db.create();\n  }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 28, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/metadata/schema/OClassImplTest.java", "test_prefix": "  @Test\n  public void testCreatePropertyIdKeep() {\n    final OSchema oSchema = db.getMetadata().getSchema();\n    OClass oClass = oSchema.createClass(\"Test12\");\n    OProperty prop = oClass.createProperty(\"test2\", OType.STRING);\n    Integer id = prop.getId();\n    oClass.dropProperty(\"test2\");\n    prop = oClass.createProperty(\"test2\", OType.STRING);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 260, "test_prefix_end_lineno": 269, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java", "focal_method": "  public Integer getId();", "focal_method_start_lineno": 271, "focal_method_end_lineno": 271, "ground_truth_oracle": "assertEquals(id, prop.getId());", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test\n  public void testCreatePropertyIdKeep() {\n    final OSchema oSchema = db.getMetadata().getSchema();\n    OClass oClass = oSchema.createClass(\"Test12\");\n    OProperty prop = oClass.createProperty(\"test2\", OType.STRING);\n    Integer id = prop.getId();\n    oClass.dropProperty(\"test2\");\n    prop = oClass.createProperty(\"test2\", OType.STRING);\n  }", "original_test_prefix": "  @Test\n  public void testCreatePropertyIdKeep() {\n    final OSchema oSchema = db.getMetadata().getSchema();\n    OClass oClass = oSchema.createClass(\"Test12\");\n    OProperty prop = oClass.createProperty(\"test2\", OType.STRING);\n    Integer id = prop.getId();\n    oClass.dropProperty(\"test2\");\n    prop = oClass.createProperty(\"test2\", OType.STRING);\n    assertEquals(id, prop.getId());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.metadata.schema.OClassImplTest#testCreatePropertyIdKeep", "test_setup_list": [{"test_setup": "@Before\n  public void setUp() {\n    db = new ODatabaseDocumentTx(\"memory:\" + OClassImplTest.class.getSimpleName());\n    if (db.exists()) {\n      db.open(\"admin\", \"admin\");\n    } else\n      db.create();\n  }", "start_lineno": 21, "end_lineno": 28}]}
{"index": 254, "project_index": 139, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "lucene", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "LuceneSpatialMiscFunctionsTest", "class_path": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java", "test_name": "testStEqualsPoint", "test_setup_file_path": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java", "test_setup": "", "test_setup_start_lineno": 45, "test_setup_end_lineno": 75, "test_prefix_file_path": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialMiscFunctionsTest.java", "test_prefix": "  @Test\n  public void testStEqualsPoint(){\n\n    List<ODocument> execute = db.command(new OCommandSQL(\n        \"select ST_Equals(ST_GeomFromText('POINT (55.78639 37.58378)'), ST_GeomFromText('POINT (55.78639 37.58378)'))\")).execute();\n    ODocument next = execute.iterator().next();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 49, "test_prefix_end_lineno": 57, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  @Override\n  public <RET> RET field(final String iFieldName) {\n    RET value = this.rawField(iFieldName);\n\n    if (!iFieldName.startsWith(\"@\") && _lazyLoad && value instanceof ORID && (((ORID) value).isPersistent() || ((ORID) value)\n        .isNew()) && ODatabaseRecordThreadLocal.instance().isDefined()) {\n      // CREATE THE DOCUMENT OBJECT IN LAZY WAY\n      RET newValue = getDatabase().load((ORID) value);\n      if (newValue != null) {\n        unTrack((ORID) value);\n        track((OIdentifiable) newValue);\n        value = newValue;\n        if (this.isTrackingChanges()) {\n          ORecordInternal.setDirtyManager((ORecord) value, this.getDirtyManager());\n        }\n        if (!iFieldName.contains(\".\")) {\n          ODocumentEntry entry = _fields.get(iFieldName);\n          removeCollectionChangeListener(entry, entry.value);\n          entry.value = value;\n          addCollectionChangeListener(entry);\n        }\n      }\n    }\n\n    return value;\n  }", "focal_method_start_lineno": 1201, "focal_method_end_lineno": 1226, "ground_truth_oracle": "Assert.assertEquals(next.field(\"ST_Equals\"), true);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testStEqualsPoint(){\n\n    List<ODocument> execute = db.command(new OCommandSQL(\n        \"select ST_Equals(ST_GeomFromText('POINT (55.78639 37.58378)'), ST_GeomFromText('POINT (55.78639 37.58378)'))\")).execute();\n    ODocument next = execute.iterator().next();\n  }", "original_test_prefix": "  @Test\n  public void testStEqualsPoint(){\n\n    List<ODocument> execute = db.command(new OCommandSQL(\n        \"select ST_Equals(ST_GeomFromText('POINT (55.78639 37.58378)'), ST_GeomFromText('POINT (55.78639 37.58378)'))\")).execute();\n    ODocument next = execute.iterator().next();\n    Assert.assertEquals(next.field(\"ST_Equals\"), true);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.spatial.functions.LuceneSpatialMiscFunctionsTest#testStEqualsPoint", "test_setup_list": []}
{"index": 255, "project_index": 139, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "etl", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OETLFieldTransformerTest", "class_path": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLFieldTransformerTest.java", "test_name": "testToLowerCase", "test_setup_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLFieldTransformerTest.java", "test_setup": "", "test_setup_start_lineno": 47, "test_setup_end_lineno": 57, "test_prefix_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLFieldTransformerTest.java", "test_prefix": "  @Test\n  public void testToLowerCase() {\n    configure(\n        \"{source: { content: { value: 'name,surname\\nJay,Miner' } }, extractor : { csv: {} }, transformers: [ {field: {fieldName:'name', expression: '$input.name.toLowerCase()'}}], loader: { test: {} } }\");\n    proc.execute();\n    <AssertPlaceHolder>;\n\n    ODocument doc = getResult().get(0);\n    assertEquals(2, doc.fields());\n    assertEquals(\"jay\", doc.field(\"name\"));\n    assertEquals(\"Miner\", doc.field(\"surname\"));\n  }", "test_prefix_start_lineno": 65, "test_prefix_end_lineno": 76, "focal_method_file_path": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focal_method": "  public void execute() {\n    configure();\n    begin();\n    runExtractorAndPipeline();\n    end();\n  }", "focal_method_start_lineno": 172, "focal_method_end_lineno": 177, "ground_truth_oracle": "assertEquals(1, getResult().size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testToLowerCase() {\n    configure(\n        \"{source: { content: { value: 'name,surname\\nJay,Miner' } }, extractor : { csv: {} }, transformers: [ {field: {fieldName:'name', expression: '$input.name.toLowerCase()'}}], loader: { test: {} } }\");\n    proc.execute();\n  }", "original_test_prefix": "  @Test\n  public void testToLowerCase() {\n    configure(\n        \"{source: { content: { value: 'name,surname\\nJay,Miner' } }, extractor : { csv: {} }, transformers: [ {field: {fieldName:'name', expression: '$input.name.toLowerCase()'}}], loader: { test: {} } }\");\n    proc.execute();\n    assertEquals(1, getResult().size());\n\n    ODocument doc = getResult().get(0);\n    assertEquals(2, doc.fields());\n    assertEquals(\"jay\", doc.field(\"name\"));\n    assertEquals(\"Miner\", doc.field(\"surname\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.etl.transformer.OETLFieldTransformerTest#testToLowerCase", "test_setup_list": []}
{"index": 256, "project_index": 139, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODatabaseDocumentTxTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java", "test_name": "testCreateEdgeClass", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java", "test_setup": "@Before\n  public void setUp() throws Exception {\n    String url = \"memory:\" + ODatabaseDocumentTxTest.class.getSimpleName();\n    db = new ODatabaseDocumentTx(url).create();\n\n  }", "test_setup_start_lineno": 36, "test_setup_end_lineno": 41, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTxTest.java", "test_prefix": "  @Test\n  public void testCreateEdgeClass() {\n    OClass clazz = db.createEdgeClass(\"TestCreateEdgeClass\");\n    <AssertPlaceHolder>;\n\n    clazz = db.getClass(\"TestCreateEdgeClass\");\n    Assert.assertNotNull(clazz);\n    Assert.assertEquals(\"TestCreateEdgeClass\", clazz.getName());\n    List<OClass> superclasses = clazz.getSuperClasses();\n    Assert.assertEquals(1, superclasses.size());\n    Assert.assertEquals(\"E\", superclasses.get(0).getName());\n  }", "test_prefix_start_lineno": 213, "test_prefix_end_lineno": 224, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocument.java", "focal_method": "  default OClass createEdgeClass(String className) {\n    return createClass(className, \"E\");\n  }", "focal_method_start_lineno": 419, "focal_method_end_lineno": 421, "ground_truth_oracle": "Assert.assertNotNull(clazz);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testCreateEdgeClass() {\n    OClass clazz = db.createEdgeClass(\"TestCreateEdgeClass\");\n  }", "original_test_prefix": "  @Test\n  public void testCreateEdgeClass() {\n    OClass clazz = db.createEdgeClass(\"TestCreateEdgeClass\");\n    Assert.assertNotNull(clazz);\n\n    clazz = db.getClass(\"TestCreateEdgeClass\");\n    Assert.assertNotNull(clazz);\n    Assert.assertEquals(\"TestCreateEdgeClass\", clazz.getName());\n    List<OClass> superclasses = clazz.getSuperClasses();\n    Assert.assertEquals(1, superclasses.size());\n    Assert.assertEquals(\"E\", superclasses.get(0).getName());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.document.ODatabaseDocumentTxTest#testCreateEdgeClass", "test_setup_list": [{"test_setup": "@Before\n  public void setUp() throws Exception {\n    String url = \"memory:\" + ODatabaseDocumentTxTest.class.getSimpleName();\n    db = new ODatabaseDocumentTx(url).create();\n\n  }", "start_lineno": 36, "end_lineno": 41}]}
{"index": 257, "project_index": 139, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OPropertyListIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinitionTest.java", "test_name": "testCreateValueWrongParameterArrayParams", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeMethod() {\n    propertyIndex = new OPropertyListIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER);\n  }", "test_setup_start_lineno": 19, "test_setup_end_lineno": 22, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testCreateValueWrongParameterArrayParams() {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 87, "test_prefix_end_lineno": 90, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyListIndexDefinition.java", "focal_method": "  @Override\n  public Object createValue(final Object... params) {\n    Object param = params[0];\n    if (!(param instanceof Collection)) {\n      try {\n        return OType.convert(param, keyType.getDefaultJavaType());\n      } catch (Exception e) {\n        return null;\n      }\n    }\n\n    final Collection<?> multiValueCollection = (Collection<?>) param;\n    final List<Object> values = new ArrayList<>(multiValueCollection.size());\n    for (final Object item : multiValueCollection) {\n      values.add(createSingleValue(item));\n    }\n    return values;\n  }", "focal_method_start_lineno": 63, "focal_method_end_lineno": 80, "ground_truth_oracle": "Assert.assertNull(propertyIndex.createValue(\"tt\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testCreateValueWrongParameterArrayParams() {\n  }", "original_test_prefix": "  @Test\n  public void testCreateValueWrongParameterArrayParams() {\n    Assert.assertNull(propertyIndex.createValue(\"tt\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OPropertyListIndexDefinitionTest#testCreateValueWrongParameterArrayParams", "test_setup_list": [{"test_setup": "@Before\n  public void beforeMethod() {\n    propertyIndex = new OPropertyListIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER);\n  }", "start_lineno": 19, "end_lineno": 22}]}
{"index": 258, "project_index": 140, "class_index": 0, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "nanolets", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "TestNanolets", "class_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_name": "testRoutePrioritizerRemoveRouteNoRouteMatches", "test_setup_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 96, "test_prefix_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_prefix": "    @Test\n    public void testRoutePrioritizerRemoveRouteNoRouteMatches() {\n        DefaultRoutePrioritizer prioritizer = new DefaultRoutePrioritizer();\n        prioritizer.addRoute(\"/world\", 100, NotImplementedHandler.class);\n        prioritizer.removeRoute(\"/hello\");\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 548, "test_prefix_end_lineno": 555, "focal_method_file_path": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java", "focal_method": "        @Override\n        public Collection<UriResource> getPrioritizedRoutes() {\n            return Collections.unmodifiableCollection(mappings);\n        }", "focal_method_start_lineno": 515, "focal_method_end_lineno": 518, "ground_truth_oracle": "Assert.assertEquals(1, prioritizer.getPrioritizedRoutes().size());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testRoutePrioritizerRemoveRouteNoRouteMatches() {\n        DefaultRoutePrioritizer prioritizer = new DefaultRoutePrioritizer();\n        prioritizer.addRoute(\"/world\", 100, NotImplementedHandler.class);\n        prioritizer.removeRoute(\"/hello\");\n\n    }", "original_test_prefix": "    @Test\n    public void testRoutePrioritizerRemoveRouteNoRouteMatches() {\n        DefaultRoutePrioritizer prioritizer = new DefaultRoutePrioritizer();\n        prioritizer.addRoute(\"/world\", 100, NotImplementedHandler.class);\n        prioritizer.removeRoute(\"/hello\");\n\n        Assert.assertEquals(1, prioritizer.getPrioritizedRoutes().size());\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.router.TestNanolets#testRoutePrioritizerRemoveRouteNoRouteMatches", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "start_lineno": 81, "end_lineno": 96}]}
{"index": 259, "project_index": 140, "class_index": 0, "test_index": 1, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "nanolets", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "TestNanolets", "class_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_name": "testBaseRoutePrioritizerAddNullRoute", "test_setup_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 96, "test_prefix_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_prefix": "    @Test\n    public void testBaseRoutePrioritizerAddNullRoute() {\n        DefaultRoutePrioritizer routePrioritizer = new DefaultRoutePrioritizer();\n        routePrioritizer.addRoute(null, 100, null);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 436, "test_prefix_end_lineno": 441, "focal_method_file_path": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java", "focal_method": "        @Override\n        public Collection<UriResource> getPrioritizedRoutes() {\n            return Collections.unmodifiableCollection(mappings);\n        }", "focal_method_start_lineno": 515, "focal_method_end_lineno": 518, "ground_truth_oracle": "Assert.assertEquals(0, routePrioritizer.getPrioritizedRoutes().size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testBaseRoutePrioritizerAddNullRoute() {\n        DefaultRoutePrioritizer routePrioritizer = new DefaultRoutePrioritizer();\n        routePrioritizer.addRoute(null, 100, null);\n    }", "original_test_prefix": "    @Test\n    public void testBaseRoutePrioritizerAddNullRoute() {\n        DefaultRoutePrioritizer routePrioritizer = new DefaultRoutePrioritizer();\n        routePrioritizer.addRoute(null, 100, null);\n        Assert.assertEquals(0, routePrioritizer.getPrioritizedRoutes().size());\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.router.TestNanolets#testBaseRoutePrioritizerAddNullRoute", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "start_lineno": 81, "end_lineno": 96}]}
{"index": 260, "project_index": 141, "class_index": 0, "test_index": 0, "user_name": "Yubico", "repo_name": "yubico-java-client", "sub_repos": ["v2client", "jaas", "demo-server"], "sub_repo": "v2client", "commit_sha": "e21fb672e290a118f7420daaf81ccb96d319d52c", "build_system": "mvn", "class_name": "YubicoClientTest", "class_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_name": "testBadOTP", "test_setup_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 69, "test_prefix_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_prefix": "    @Test\n    public void testBadOTP() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp=\"11111111111111111111111111111111111\";\n        VerificationResponse response = client.verify(otp);\n        <AssertPlaceHolder>;\n        assertEquals(ResponseStatus.BAD_OTP, response.getStatus());\n    }", "test_prefix_start_lineno": 76, "test_prefix_end_lineno": 82, "focal_method_file_path": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focal_method": "    public abstract VerificationResponse verify(String otp) throws YubicoVerificationException, YubicoValidationFailure;", "focal_method_start_lineno": 70, "focal_method_end_lineno": 70, "ground_truth_oracle": "assertNotNull(response);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testBadOTP() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp=\"11111111111111111111111111111111111\";\n        VerificationResponse response = client.verify(otp);\n    }", "original_test_prefix": "    @Test\n    public void testBadOTP() throws YubicoVerificationException, YubicoValidationFailure {\n        String otp=\"11111111111111111111111111111111111\";\n        VerificationResponse response = client.verify(otp);\n        assertNotNull(response);\n        assertEquals(ResponseStatus.BAD_OTP, response.getStatus());\n    }", "test_with_params": false, "test_target": "com.yubico.client.v2.YubicoClientTest#testBadOTP", "test_setup_list": [{"test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "start_lineno": 66, "end_lineno": 69}]}
{"index": 261, "project_index": 142, "class_index": 0, "test_index": 0, "user_name": "redraiment", "repo_name": "jactiverecord", "sub_repos": [], "sub_repo": "", "commit_sha": "d051709c93204658e7f2cc96c9898201c7337269", "build_system": "mvn", "class_name": "SeqTest", "class_path": "src/test/java/me/zzp/util/SeqTest.java", "test_name": "testJoinListEmpty", "test_setup_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_prefix": "  @Test\n  public void testJoinListEmpty() {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 24, "test_prefix_end_lineno": 27, "focal_method_file_path": "src/main/java/me/zzp/util/Seq.java", "focal_method": "  public static String join(Collection<?> list, String delimiter) {\n    if (list == null || list.isEmpty()) {\n      return \"\";\n    }\n    if (delimiter == null) {\n      delimiter = \"\";\n    }\n\n    StringBuilder s = new StringBuilder();\n    boolean first = true;\n    for (Object e : list) {\n      if (first) {\n        first = false;\n      } else {\n        s.append(delimiter);\n      }\n      s.append(e);\n    }\n    return s.toString();\n  }", "focal_method_start_lineno": 83, "focal_method_end_lineno": 102, "ground_truth_oracle": "Assert.assertEquals(\"\", Seq.join(Collections.EMPTY_LIST, \"\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testJoinListEmpty() {\n  }", "original_test_prefix": "  @Test\n  public void testJoinListEmpty() {\n    Assert.assertEquals(\"\", Seq.join(Collections.EMPTY_LIST, \"\"));\n  }", "test_with_params": false, "test_target": "me.zzp.util.SeqTest#testJoinListEmpty", "test_setup_list": []}
{"index": 262, "project_index": 143, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActivityStateTest", "class_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_name": "testSetAgent", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activity-state/unit-testing\";\n        String stateId =\"state\"+1234;\n        Agent agent = new Agent();\n        agent.setMbox(\"mailto:test@example.com\");\n        activityState = new ActivityState(activityId, stateId, agent);\n        assertNotNull(activityState);\n        activityState.setRegistration(REG_ID);\n        JsonObject state = new JsonObject();\n        state.addProperty(\"ActState\", \"Unit Test\");\n        activityState.setState(state);\n    }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 33, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_prefix": "    @Test\n    public void testSetAgent() {\n        Agent expected = new Agent();\n        expected.setMbox(\"mailto:new@example.com\");\n        activityState.setAgent(expected);\n        Agent actual = activityState.getAgent();\n        <AssertPlaceHolder>;\n        assertEquals(expected.getMbox(), actual.getMbox());\n    }", "test_prefix_start_lineno": 90, "test_prefix_end_lineno": 98, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ActivityState.java", "focal_method": "    public Agent getAgent(){\n        return this.agent;\n    }", "focal_method_start_lineno": 37, "focal_method_end_lineno": 39, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testSetAgent() {\n        Agent expected = new Agent();\n        expected.setMbox(\"mailto:new@example.com\");\n        activityState.setAgent(expected);\n        Agent actual = activityState.getAgent();\n    }", "original_test_prefix": "    @Test\n    public void testSetAgent() {\n        Agent expected = new Agent();\n        expected.setMbox(\"mailto:new@example.com\");\n        activityState.setAgent(expected);\n        Agent actual = activityState.getAgent();\n        assertNotNull(actual);\n        assertEquals(expected.getMbox(), actual.getMbox());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActivityStateTest#testSetAgent", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activity-state/unit-testing\";\n        String stateId =\"state\"+1234;\n        Agent agent = new Agent();\n        agent.setMbox(\"mailto:test@example.com\");\n        activityState = new ActivityState(activityId, stateId, agent);\n        assertNotNull(activityState);\n        activityState.setRegistration(REG_ID);\n        JsonObject state = new JsonObject();\n        state.addProperty(\"ActState\", \"Unit Test\");\n        activityState.setState(state);\n    }", "start_lineno": 21, "end_lineno": 33}]}
{"index": 263, "project_index": 143, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "VerbTest", "class_path": "src/test/java/gov/adlnet/xapi/VerbTest.java", "test_name": "testSetDisplay", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/VerbTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        display.put(\"es\", ES_VERB);\n        verb = new Verb(ID, display);\n    }", "test_setup_start_lineno": 24, "test_setup_end_lineno": 30, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/VerbTest.java", "test_prefix": "    @Test\n    public void testSetDisplay() {\n        HashMap<String, String> expected = new HashMap<String, String>();\n        expected.put(\"en-US\", \"changed\");\n        verb.setDisplay(expected);\n        HashMap<String, String> actual = verb.getDisplay();\n        <AssertPlaceHolder>;\n        assertEquals(expected.get(\"en-US\"), actual.get(\"en-US\"));\n    }", "test_prefix_start_lineno": 95, "test_prefix_end_lineno": 103, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Verb.java", "focal_method": "    public HashMap<String, String> getDisplay() {\n        return display;\n    }", "focal_method_start_lineno": 45, "focal_method_end_lineno": 47, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testSetDisplay() {\n        HashMap<String, String> expected = new HashMap<String, String>();\n        expected.put(\"en-US\", \"changed\");\n        verb.setDisplay(expected);\n        HashMap<String, String> actual = verb.getDisplay();\n    }", "original_test_prefix": "    @Test\n    public void testSetDisplay() {\n        HashMap<String, String> expected = new HashMap<String, String>();\n        expected.put(\"en-US\", \"changed\");\n        verb.setDisplay(expected);\n        HashMap<String, String> actual = verb.getDisplay();\n        assertNotNull(actual);\n        assertEquals(expected.get(\"en-US\"), actual.get(\"en-US\"));\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.VerbTest#testSetDisplay", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        HashMap<String, String> display = new HashMap<String, String>();\n        display.put(\"en-US\", EN_VERB);\n        display.put(\"es\", ES_VERB);\n        verb = new Verb(ID, display);\n    }", "start_lineno": 24, "end_lineno": 30}]}
{"index": 264, "project_index": 143, "class_index": 2, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "AttachmentResultTest", "class_path": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "test_name": "testSetAttachments", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        Agent a = new Agent();\n        a.setMbox(MBOX);\n        Verb v = new Verb(VERB);\n        Activity act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n\n        ArrayList<Statement> statementList = new ArrayList<Statement>();\n        statementList.add(statement);\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n        statementList.add(statement);\n\n        statements = new StatementResult();\n        statements.setStatements(statementList);\n\n        type = \"text/plain\";\n        attachment = \"This is a text/plain test.\".getBytes(\"UTF-8\");\n\n        AttachmentAndType att = new AttachmentAndType(attachment, type);\n        attachments = new HashMap<String, AttachmentAndType>();\n        attachments.put(HASH, att);\n    }", "test_setup_start_lineno": 41, "test_setup_end_lineno": 67, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "test_prefix": "    @Test\n    public void testSetAttachments() throws UnsupportedEncodingException {\n        AttachmentResult a = new AttachmentResult(RESPONSE_MESSAGE, statements, attachments);\n        <AssertPlaceHolder>;\n\n        String testHash = \"abc6743b9e031244a015\";\n        String type = \"test/plain\";\n        byte[] attachment = \"This is a new text/plain test.\".getBytes(\"UTF-8\");\n        \n        AttachmentAndType att = new AttachmentAndType(attachment, type);\n        Map<String, AttachmentAndType> inputAttachments = new HashMap<String, AttachmentAndType>();\n        inputAttachments.put(testHash, att);\n        a.setAttachments(inputAttachments);\n        assertEquals(attachment, a.getAttachment().get(testHash).getAttachment());\n        assertEquals(type, a.getAttachment().get(testHash).getType());\n    }", "test_prefix_start_lineno": 152, "test_prefix_end_lineno": 167, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/util/AttachmentResult.java", "focal_method": "    public AttachmentResult(String inputMessage, StatementResult inputStatements,\n            Map<String, AttachmentAndType> inputAttachments) {\n\n        responseMessage = inputMessage;\n        statements = inputStatements;\n        attachments = inputAttachments;\n    }", "focal_method_start_lineno": 22, "focal_method_end_lineno": 28, "ground_truth_oracle": "assertNotNull(a);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testSetAttachments() throws UnsupportedEncodingException {\n        AttachmentResult a = new AttachmentResult(RESPONSE_MESSAGE, statements, attachments);\n    }", "original_test_prefix": "    @Test\n    public void testSetAttachments() throws UnsupportedEncodingException {\n        AttachmentResult a = new AttachmentResult(RESPONSE_MESSAGE, statements, attachments);\n        assertNotNull(a);\n\n        String testHash = \"abc6743b9e031244a015\";\n        String type = \"test/plain\";\n        byte[] attachment = \"This is a new text/plain test.\".getBytes(\"UTF-8\");\n        \n        AttachmentAndType att = new AttachmentAndType(attachment, type);\n        Map<String, AttachmentAndType> inputAttachments = new HashMap<String, AttachmentAndType>();\n        inputAttachments.put(testHash, att);\n        a.setAttachments(inputAttachments);\n        assertEquals(attachment, a.getAttachment().get(testHash).getAttachment());\n        assertEquals(type, a.getAttachment().get(testHash).getType());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.AttachmentResultTest#testSetAttachments", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        Agent a = new Agent();\n        a.setMbox(MBOX);\n        Verb v = new Verb(VERB);\n        Activity act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n\n        ArrayList<Statement> statementList = new ArrayList<Statement>();\n        statementList.add(statement);\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n        statementList.add(statement);\n\n        statements = new StatementResult();\n        statements.setStatements(statementList);\n\n        type = \"text/plain\";\n        attachment = \"This is a text/plain test.\".getBytes(\"UTF-8\");\n\n        AttachmentAndType att = new AttachmentAndType(attachment, type);\n        attachments = new HashMap<String, AttachmentAndType>();\n        attachments.put(HASH, att);\n    }", "start_lineno": 41, "end_lineno": 67}]}
{"index": 265, "project_index": 144, "class_index": 0, "test_index": 0, "user_name": "AlejandroRivera", "repo_name": "embedded-rabbitmq", "sub_repos": [], "sub_repo": "", "commit_sha": "79615bf3e8e738ba756ebb44e6bf456610de4520", "build_system": "mvn", "class_name": "ExtractorFactoryTest", "class_path": "src/test/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactoryTest.java", "test_name": "withCaching", "test_setup_file_path": "src/test/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactoryTest.java", "test_setup": "@Before\n  public void setUp() throws Exception {\n    builder = new EmbeddedRabbitMqConfig.Builder();\n  }", "test_setup_start_lineno": 14, "test_setup_end_lineno": 17, "test_prefix_file_path": "src/test/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactoryTest.java", "test_prefix": "  @Test\n  public void withCaching() throws Exception {\n    builder.useCachedDownload(true);\n    Extractor extractor = new ExtractorFactory(builder.build()).getNewInstance();\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 27, "test_prefix_end_lineno": 33, "focal_method_file_path": "src/main/java/io/arivera/oss/embedded/rabbitmq/extract/ExtractorFactory.java", "focal_method": "  public Extractor getNewInstance() {\n    Extractor extractor = new BasicExtractor(config);\n    if (config.shouldCachedDownload()) {\n      extractor = new CachedExtractor(extractor, config);\n    }\n    return extractor;\n  }", "focal_method_start_lineno": 16, "focal_method_end_lineno": 22, "ground_truth_oracle": "assertTrue(extractor.getClass().equals(CachedExtractor.class));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void withCaching() throws Exception {\n    builder.useCachedDownload(true);\n    Extractor extractor = new ExtractorFactory(builder.build()).getNewInstance();\n\n  }", "original_test_prefix": "  @Test\n  public void withCaching() throws Exception {\n    builder.useCachedDownload(true);\n    Extractor extractor = new ExtractorFactory(builder.build()).getNewInstance();\n\n    assertTrue(extractor.getClass().equals(CachedExtractor.class));\n  }", "test_with_params": false, "test_target": "io.arivera.oss.embedded.rabbitmq.extract.ExtractorFactoryTest#withCaching", "test_setup_list": [{"test_setup": "@Before\n  public void setUp() throws Exception {\n    builder = new EmbeddedRabbitMqConfig.Builder();\n  }", "start_lineno": 14, "end_lineno": 17}]}
{"index": 266, "project_index": 145, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "ACollectionHelperTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_name": "testGroupByEquals", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_prefix": "    @Test\n    public void testGroupByEquals() {\n        final AFunction1NoThrow<String, Integer> len = new AFunction1NoThrow<String, Integer>() {\n            @Override public Integer apply(String param) {\n                return param.length();\n            }\n        };\n\n        final Map<Integer, List<String>> grouped = ACollectionHelper.groupBy(Arrays.asList(\"a\", \"bc\", \"d\", \"efg\", \"hi\", \"j\"), len);\n        <AssertPlaceHolder>;\n        assertEquals(Arrays.asList(\"a\", \"d\", \"j\"), grouped.get (1));\n        assertEquals(Arrays.asList(\"bc\", \"hi\"), grouped.get (2));\n        assertEquals(Arrays.asList(\"efg\"), grouped.get (3));\n    }", "test_prefix_start_lineno": 160, "test_prefix_end_lineno": 173, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focal_method": "    public static <T, X, E extends Throwable> Map<X, List<T>> groupBy (List<T> coll, AFunction1<? super T, ? extends X, E> f) throws E {\n        final Map<X, List<T>> result = new HashMap<>();\n        for(T o: coll) {\n            final X key = f.apply(o);\n            List<T> perKey = result.get(key);\n            if(perKey == null) {\n                perKey = createEmptyListOfType (coll, false);\n                result.put(key, perKey);\n            }\n            perKey.add(o);\n        }\n        return result;\n    }", "focal_method_start_lineno": 432, "focal_method_end_lineno": 444, "ground_truth_oracle": "assertEquals(3, grouped.size ());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGroupByEquals() {\n        final AFunction1NoThrow<String, Integer> len = new AFunction1NoThrow<String, Integer>() {\n            @Override public Integer apply(String param) {\n                return param.length();\n            }\n        };\n\n        final Map<Integer, List<String>> grouped = ACollectionHelper.groupBy(Arrays.asList(\"a\", \"bc\", \"d\", \"efg\", \"hi\", \"j\"), len);\n    }", "original_test_prefix": "    @Test\n    public void testGroupByEquals() {\n        final AFunction1NoThrow<String, Integer> len = new AFunction1NoThrow<String, Integer>() {\n            @Override public Integer apply(String param) {\n                return param.length();\n            }\n        };\n\n        final Map<Integer, List<String>> grouped = ACollectionHelper.groupBy(Arrays.asList(\"a\", \"bc\", \"d\", \"efg\", \"hi\", \"j\"), len);\n        assertEquals(3, grouped.size ());\n        assertEquals(Arrays.asList(\"a\", \"d\", \"j\"), grouped.get (1));\n        assertEquals(Arrays.asList(\"bc\", \"hi\"), grouped.get (2));\n        assertEquals(Arrays.asList(\"efg\"), grouped.get (3));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.ACollectionHelperTest#testGroupByEquals", "test_setup_list": []}
{"index": 267, "project_index": 145, "class_index": 0, "test_index": 1, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "ACollectionHelperTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_name": "testMkStringSeparator", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_prefix": "    @Test\n    public void testMkStringSeparator() {\n        <AssertPlaceHolder>;\n        assertEquals(\"a\",     ACollectionHelper.mkString(Arrays.asList(\"a\"),           \"#\"));\n        assertEquals(\"a#b#c\", ACollectionHelper.mkString(Arrays.asList(\"a\", \"b\", \"c\"), \"#\"));\n\n        assertEquals(\"\",        ACollectionHelper.mkString(Arrays.asList(),              \"?!\"));\n        assertEquals(\"a\",       ACollectionHelper.mkString(Arrays.asList(\"a\"),           \"?!\"));\n        assertEquals(\"a?!b?!c\", ACollectionHelper.mkString(Arrays.asList(\"a\", \"b\", \"c\"), \"?!\"));\n    }", "test_prefix_start_lineno": 26, "test_prefix_end_lineno": 35, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focal_method": "    public static String mkString(Iterable<?> iterable, String separator) {\n        return mkString(iterable, \"\", separator, \"\");\n    }", "focal_method_start_lineno": 64, "focal_method_end_lineno": 66, "ground_truth_oracle": "assertEquals(\"\", ACollectionHelper.mkString(Arrays.asList(), \"#\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testMkStringSeparator() {\n    }", "original_test_prefix": "    @Test\n    public void testMkStringSeparator() {\n        assertEquals(\"\", ACollectionHelper.mkString(Arrays.asList(), \"#\"));\n        assertEquals(\"a\",     ACollectionHelper.mkString(Arrays.asList(\"a\"),           \"#\"));\n        assertEquals(\"a#b#c\", ACollectionHelper.mkString(Arrays.asList(\"a\", \"b\", \"c\"), \"#\"));\n\n        assertEquals(\"\",        ACollectionHelper.mkString(Arrays.asList(),              \"?!\"));\n        assertEquals(\"a\",       ACollectionHelper.mkString(Arrays.asList(\"a\"),           \"?!\"));\n        assertEquals(\"a?!b?!c\", ACollectionHelper.mkString(Arrays.asList(\"a\", \"b\", \"c\"), \"?!\"));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.ACollectionHelperTest#testMkStringSeparator", "test_setup_list": []}
{"index": 268, "project_index": 146, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "jaundzimu\u0161\u0101kais", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void jaundzimu\u0161\u0101kais() {\n        Word w = loc\u012bt\u0101js.analyze(\"jaundzimu\u0161ais\");\n        <AssertPlaceHolder>;\n        w = loc\u012bt\u0101js.analyze(\"jaundzimu\u0161\u0101kais\");\n        assertFalse(w.isRecognized());\n        w = loc\u012bt\u0101js.analyze(\"jaundzimu\u0161ajam\");\n        assertTrue(w.isRecognized());\n        w = loc\u012bt\u0101js.analyze(\"jaundzimu\u0161\u0101kajam\");\n        assertFalse(w.isRecognized());\n    }", "test_prefix_start_lineno": 2848, "test_prefix_end_lineno": 2858, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(w.isRecognized());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void jaundzimu\u0161\u0101kais() {\n        Word w = loc\u012bt\u0101js.analyze(\"jaundzimu\u0161ais\");\n    }", "original_test_prefix": "    @Test\n    public void jaundzimu\u0161\u0101kais() {\n        Word w = loc\u012bt\u0101js.analyze(\"jaundzimu\u0161ais\");\n        assertTrue(w.isRecognized());\n        w = loc\u012bt\u0101js.analyze(\"jaundzimu\u0161\u0101kais\");\n        assertFalse(w.isRecognized());\n        w = loc\u012bt\u0101js.analyze(\"jaundzimu\u0161ajam\");\n        assertTrue(w.isRecognized());\n        w = loc\u012bt\u0101js.analyze(\"jaundzimu\u0161\u0101kajam\");\n        assertFalse(w.isRecognized());\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#jaundzimu\u0161\u0101kais", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 269, "project_index": 147, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "AnnotationFilterTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotationFilterTest.java", "test_name": "testGlobalVerifyFilter", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotationFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotationFilterTest.java", "test_prefix": "    @Test\n    public void testGlobalVerifyFilter() {\n        Method method = new AnnotatedMethodRetriever(AnnotationTestClass.class, Verify.class)\n                .withVoidReturnType()\n                .withFilter(new VerifyFilter(true))\n                .find();\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 65, "test_prefix_end_lineno": 73, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java", "focal_method": "    public Method find() {\n        List<Method> methods = findAll();\n        switch (methods.size()) {\n            case 0:\n                return null;\n            case 1:\n                return methods.iterator().next();\n            default:\n                throw new ReflectionException(format(\"Too many methods on class %s with annotation %s\", clazz.getName(),\n                        annotationClazz.getName()));\n        }\n    }", "focal_method_start_lineno": 68, "focal_method_end_lineno": 79, "ground_truth_oracle": "assertEquals(\"globalVerify\", method.getName());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testGlobalVerifyFilter() {\n        Method method = new AnnotatedMethodRetriever(AnnotationTestClass.class, Verify.class)\n                .withVoidReturnType()\n                .withFilter(new VerifyFilter(true))\n                .find();\n\n    }", "original_test_prefix": "    @Test\n    public void testGlobalVerifyFilter() {\n        Method method = new AnnotatedMethodRetriever(AnnotationTestClass.class, Verify.class)\n                .withVoidReturnType()\n                .withFilter(new VerifyFilter(true))\n                .find();\n\n        assertEquals(\"globalVerify\", method.getName());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.AnnotationFilterTest#testGlobalVerifyFilter", "test_setup_list": []}
{"index": 270, "project_index": 147, "class_index": 1, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "PerformanceStatsCollectorTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollectorTest.java", "test_name": "testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollectorTest.java", "test_setup": "@Before\n    public void before() {\n        emptyPerformanceStatsCollector = new PerformanceStatsCollector();\n        performanceStatsCollector = new PerformanceStatsCollector();\n\n        a1w1 = workerAddress(1, 1);\n        a1w2 = workerAddress(1, 2);\n        a2w1 = workerAddress(2, 1);\n        a2w2 = workerAddress(2, 2);\n\n        a1 = a1w1.getParent();\n        a2 = a2w1.getParent();\n    }", "test_setup_start_lineno": 37, "test_setup_end_lineno": 49, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollectorTest.java", "test_prefix": "    @Test\n    public void testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold() throws Exception {\n        SimulatorAddress worker = workerAddress(3, 1);\n\n        Map<String, PerformanceStats> performanceStats = new HashMap<String, PerformanceStats>();\n        performanceStats.put(TEST_CASE_ID_1, new PerformanceStats(\n                800, 100, 300, SECONDS.toNanos(3), MICROSECONDS.toNanos(2400), MICROSECONDS.toNanos(2500)));\n\n        performanceStatsCollector.update(worker, performanceStats);\n\n        String performance = performanceStatsCollector.formatIntervalPerformanceNumbers(TEST_CASE_ID_1);\n        <AssertPlaceHolder>;\n        assertFalse(performance.contains(\"\u00b5s\"));\n    }", "test_prefix_start_lineno": 71, "test_prefix_end_lineno": 84, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollector.java", "focal_method": "    public String formatIntervalPerformanceNumbers(String testId) {\n        PerformanceStats latest = get(testId, false);\n        if (latest.isEmpty() || latest.getOperationCount() < 1) {\n            return \"\";\n        }\n\n        String latencyUnit = \"\u00b5s\";\n        long latencyAvg = NANOSECONDS.toMicros(round(latest.getIntervalLatencyAvgNanos()));\n        long latency999Percentile = NANOSECONDS.toMicros(latest.getIntervalLatency999PercentileNanos());\n        long latencyMax = NANOSECONDS.toMicros(latest.getIntervalLatencyMaxNanos());\n\n        if (latencyAvg > DISPLAY_LATENCY_AS_MICROS_MAX_VALUE) {\n            latencyUnit = \"ms\";\n            latencyAvg = MICROSECONDS.toMillis(latencyAvg);\n            latency999Percentile = MICROSECONDS.toMillis(latency999Percentile);\n            latencyMax = MICROSECONDS.toMillis(latencyMax);\n        }\n\n        return format(\"%s ops %s ops/s %s %s (avg) %s %s (%sth) %s %s (max)\",\n                formatLong(latest.getOperationCount(), OPERATION_COUNT_FORMAT_LENGTH),\n                formatDouble(latest.getIntervalThroughput(), THROUGHPUT_FORMAT_LENGTH),\n                formatLong(latencyAvg, LATENCY_FORMAT_LENGTH),\n                latencyUnit,\n                formatLong(latency999Percentile, LATENCY_FORMAT_LENGTH),\n                latencyUnit,\n                INTERVAL_LATENCY_PERCENTILE,\n                formatLong(latencyMax, LATENCY_FORMAT_LENGTH),\n                latencyUnit);\n    }", "focal_method_start_lineno": 68, "focal_method_end_lineno": 96, "ground_truth_oracle": "assertTrue(performance.contains(\"ms\"));", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold() throws Exception {\n        SimulatorAddress worker = workerAddress(3, 1);\n\n        Map<String, PerformanceStats> performanceStats = new HashMap<String, PerformanceStats>();\n        performanceStats.put(TEST_CASE_ID_1, new PerformanceStats(\n                800, 100, 300, SECONDS.toNanos(3), MICROSECONDS.toNanos(2400), MICROSECONDS.toNanos(2500)));\n\n        performanceStatsCollector.update(worker, performanceStats);\n\n        String performance = performanceStatsCollector.formatIntervalPerformanceNumbers(TEST_CASE_ID_1);\n    }", "original_test_prefix": "    @Test\n    public void testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold() throws Exception {\n        SimulatorAddress worker = workerAddress(3, 1);\n\n        Map<String, PerformanceStats> performanceStats = new HashMap<String, PerformanceStats>();\n        performanceStats.put(TEST_CASE_ID_1, new PerformanceStats(\n                800, 100, 300, SECONDS.toNanos(3), MICROSECONDS.toNanos(2400), MICROSECONDS.toNanos(2500)));\n\n        performanceStatsCollector.update(worker, performanceStats);\n\n        String performance = performanceStatsCollector.formatIntervalPerformanceNumbers(TEST_CASE_ID_1);\n        assertTrue(performance.contains(\"ms\"));\n        assertFalse(performance.contains(\"\u00b5s\"));\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.coordinator.PerformanceStatsCollectorTest#testFormatPerformanceNumbers_avgLatencyOverMicrosThreshold", "test_setup_list": [{"test_setup": "@Before\n    public void before() {\n        emptyPerformanceStatsCollector = new PerformanceStatsCollector();\n        performanceStatsCollector = new PerformanceStatsCollector();\n\n        a1w1 = workerAddress(1, 1);\n        a1w2 = workerAddress(1, 2);\n        a2w1 = workerAddress(2, 1);\n        a2w2 = workerAddress(2, 2);\n\n        a1 = a1w1.getParent();\n        a2 = a2w1.getParent();\n    }", "start_lineno": 37, "end_lineno": 49}]}
{"index": 271, "project_index": 147, "class_index": 2, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "CommonUtils_SleepTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/CommonUtils_SleepTest.java", "test_name": "testSleepTimeUnit", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/CommonUtils_SleepTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/CommonUtils_SleepTest.java", "test_prefix": "    @Test\n    public void testSleepTimeUnit() {\n        long started = System.nanoTime();\n        sleepTimeUnit(MILLISECONDS, 1);\n        long duration = NANOSECONDS.toMillis(System.nanoTime() - started);\n\n        long durationLimit = SECONDS.toMillis(3);\n        <AssertPlaceHolder>;\n        assertTrue(format(\"Expected sleep duration < %d ms, but was %d\", durationLimit, duration), duration < durationLimit);\n    }", "test_prefix_start_lineno": 126, "test_prefix_end_lineno": 135, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/CommonUtils.java", "focal_method": "    public static void sleepTimeUnit(TimeUnit timeUnit, long timeout) {\n        try {\n            timeUnit.sleep(timeout);\n        } catch (InterruptedException e) {\n            ignore(e);\n        }\n    }", "focal_method_start_lineno": 191, "focal_method_end_lineno": 197, "ground_truth_oracle": "assertTrue(format(\"Expected sleep duration > 0 ms, but was %d\", duration), duration > 0);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testSleepTimeUnit() {\n        long started = System.nanoTime();\n        sleepTimeUnit(MILLISECONDS, 1);\n        long duration = NANOSECONDS.toMillis(System.nanoTime() - started);\n\n        long durationLimit = SECONDS.toMillis(3);\n    }", "original_test_prefix": "    @Test\n    public void testSleepTimeUnit() {\n        long started = System.nanoTime();\n        sleepTimeUnit(MILLISECONDS, 1);\n        long duration = NANOSECONDS.toMillis(System.nanoTime() - started);\n\n        long durationLimit = SECONDS.toMillis(3);\n        assertTrue(format(\"Expected sleep duration > 0 ms, but was %d\", duration), duration > 0);\n        assertTrue(format(\"Expected sleep duration < %d ms, but was %d\", durationLimit, duration), duration < durationLimit);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.CommonUtils_SleepTest#testSleepTimeUnit", "test_setup_list": []}
{"index": 272, "project_index": 148, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "EbmlSintTest", "class_path": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java", "test_name": "testNegativeVals", "test_setup_file_path": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/containers/mkv/boxes/EbmlSintTest.java", "test_prefix": "    @Test\n    public void testNegativeVals() throws Exception {\n        <AssertPlaceHolder>;\n        Assert.assertEquals(1, ebmlSignedLength(0));\n        Assert.assertEquals(1, ebmlSignedLength(10));\n        Assert.assertEquals(1, ebmlSignedLength(6));\n        Assert.assertEquals(1, ebmlSignedLength(27));\n        Assert.assertEquals(1, ebmlSignedLength(5));\n    }", "test_prefix_start_lineno": 31, "test_prefix_end_lineno": 39, "focal_method_file_path": "src/main/java/org/jcodec/containers/mkv/boxes/EbmlSint.java", "focal_method": "    public static int ebmlSignedLength(long val) {\n        if (val <= 0x40 && val >= (-0x3F)) {\n            return 1;\n        } else if (val <= 0x2000 && val >= (-0x1FFF)) {\n            return 2;\n        } else if (val <= 0x100000 && val >= (-0x0FFFFF)) {\n            return 3;\n        } else if (val <= 0x8000000 && val >= (-0x07FFFFFF)) {\n            return 4;\n        } else if (val <= 0x400000000L && val >= -0x03FFFFFFFFL) {\n            return 5;\n        } else if (val <= 0x20000000000L && val >= -0x01FFFFFFFFFFL) {\n            return 6;\n        } else if (val <= 0x1000000000000L && val >= -0x00FFFFFFFFFFFFL) {\n            return 7;\n        } else {\n            return 8;\n        }\n    }", "focal_method_start_lineno": 36, "focal_method_end_lineno": 54, "ground_truth_oracle": "Assert.assertEquals(1, ebmlSignedLength(-3));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testNegativeVals() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testNegativeVals() throws Exception {\n        Assert.assertEquals(1, ebmlSignedLength(-3));\n        Assert.assertEquals(1, ebmlSignedLength(0));\n        Assert.assertEquals(1, ebmlSignedLength(10));\n        Assert.assertEquals(1, ebmlSignedLength(6));\n        Assert.assertEquals(1, ebmlSignedLength(27));\n        Assert.assertEquals(1, ebmlSignedLength(5));\n    }", "test_with_params": false, "test_target": "org.jcodec.containers.mkv.boxes.EbmlSintTest#testNegativeVals", "test_setup_list": []}
{"index": 273, "project_index": 149, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "enricher/api", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "InitContainerHandlerTest", "class_path": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java", "test_name": "removeOne", "test_setup_file_path": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java", "test_setup": "@Before\n    public void setUp() {\n        handler = new InitContainerHandler(log);\n    }", "test_setup_start_lineno": 50, "test_setup_end_lineno": 53, "test_prefix_file_path": "enricher/api/src/test/java/io/fabric8/maven/enricher/api/util/InitContainerHandlerTest.java", "test_prefix": "    @Test\n    public void removeOne() {\n        PodTemplateSpecBuilder builder = getPodTemplateBuilder(\"bla\", \"foo/bla\", \"blub\", \"foo/blub\");\n        <AssertPlaceHolder>;\n        assertTrue(handler.hasInitContainer(builder, \"blub\"));\n        handler.removeInitContainer(builder, \"bla\");\n        assertFalse(handler.hasInitContainer(builder, \"bla\"));\n        assertTrue(handler.hasInitContainer(builder, \"blub\"));\n        verifyBuilder(builder, Arrays.asList(createInitContainer(\"blub\", \"foo/blub\")));\n    }", "test_prefix_start_lineno": 84, "test_prefix_end_lineno": 93, "focal_method_file_path": "enricher/api/src/main/java/io/fabric8/maven/enricher/api/util/InitContainerHandler.java", "focal_method": "    public boolean hasInitContainer(PodTemplateSpecBuilder builder, String name) {\n        return getInitContainer(builder, name) != null;\n    }", "focal_method_start_lineno": 38, "focal_method_end_lineno": 40, "ground_truth_oracle": "assertTrue(handler.hasInitContainer(builder, \"bla\"));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void removeOne() {\n        PodTemplateSpecBuilder builder = getPodTemplateBuilder(\"bla\", \"foo/bla\", \"blub\", \"foo/blub\");\n    }", "original_test_prefix": "    @Test\n    public void removeOne() {\n        PodTemplateSpecBuilder builder = getPodTemplateBuilder(\"bla\", \"foo/bla\", \"blub\", \"foo/blub\");\n        assertTrue(handler.hasInitContainer(builder, \"bla\"));\n        assertTrue(handler.hasInitContainer(builder, \"blub\"));\n        handler.removeInitContainer(builder, \"bla\");\n        assertFalse(handler.hasInitContainer(builder, \"bla\"));\n        assertTrue(handler.hasInitContainer(builder, \"blub\"));\n        verifyBuilder(builder, Arrays.asList(createInitContainer(\"blub\", \"foo/blub\")));\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.enricher.api.util.InitContainerHandlerTest#removeOne", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        handler = new InitContainerHandler(log);\n    }", "start_lineno": 50, "end_lineno": 53}]}
{"index": 274, "project_index": 150, "class_index": 0, "test_index": 0, "user_name": "basis-technology-corp", "repo_name": "tcl-regex-java", "sub_repos": [], "sub_repo": "", "commit_sha": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62", "build_system": "mvn", "class_name": "SmpTest", "class_path": "src/test/java/com/basistech/tclre/SmpTest.java", "test_name": "findCharClass", "test_setup_file_path": "src/test/java/com/basistech/tclre/SmpTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/basistech/tclre/SmpTest.java", "test_prefix": "    @Test\n    public void findCharClass() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"[\\\\U00010380]\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 45, "test_prefix_end_lineno": 50, "focal_method_file_path": "src/main/java/com/basistech/tclre/ReMatcher.java", "focal_method": "    boolean find();", "focal_method_start_lineno": 61, "focal_method_end_lineno": 61, "ground_truth_oracle": "assertTrue(matcher.find());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void findCharClass() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"[\\\\U00010380]\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80\");\n    }", "original_test_prefix": "    @Test\n    public void findCharClass() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"[\\\\U00010380]\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80\");\n        assertTrue(matcher.find());\n    }", "test_with_params": false, "test_target": "com.basistech.tclre.SmpTest#findCharClass", "test_setup_list": []}
{"index": 275, "project_index": 151, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "etl", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OETLCSVExtractorTest", "class_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_name": "testNullValueInCell", "test_setup_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_setup": "", "test_setup_start_lineno": 47, "test_setup_end_lineno": 57, "test_prefix_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_prefix": "  @Test\n  public void testNullValueInCell() {\n    String cfgJson = \"{source: { content: { value: 'id,postId,text\\n1,NULL,Hello'} }, extractor : { csv : {} },  loader : { test: {} } }\";\n    configure(cfgJson);\n\n    proc.execute();\n    List<ODocument> res = getResult();\n    <AssertPlaceHolder>;\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertNull(doc.field(\"postId\"));\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }", "test_prefix_start_lineno": 286, "test_prefix_end_lineno": 298, "focal_method_file_path": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focal_method": "  public void execute() {\n    configure();\n    begin();\n    runExtractorAndPipeline();\n    end();\n  }", "focal_method_start_lineno": 172, "focal_method_end_lineno": 177, "ground_truth_oracle": "assertFalse(res.isEmpty());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testNullValueInCell() {\n    String cfgJson = \"{source: { content: { value: 'id,postId,text\\n1,NULL,Hello'} }, extractor : { csv : {} },  loader : { test: {} } }\";\n    configure(cfgJson);\n\n    proc.execute();\n    List<ODocument> res = getResult();\n  }", "original_test_prefix": "  @Test\n  public void testNullValueInCell() {\n    String cfgJson = \"{source: { content: { value: 'id,postId,text\\n1,NULL,Hello'} }, extractor : { csv : {} },  loader : { test: {} } }\";\n    configure(cfgJson);\n\n    proc.execute();\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertNull(doc.field(\"postId\"));\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.etl.extractor.OETLCSVExtractorTest#testNullValueInCell", "test_setup_list": []}
{"index": 276, "project_index": 151, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OVarIntSerializerTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OVarIntSerializerTest.java", "test_name": "serializePosition", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OVarIntSerializerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/OVarIntSerializerTest.java", "test_prefix": "  @Test\n  public void serializePosition() {\n    BytesContainer bytes = new BytesContainer();\n    bytes.offset = OVarIntSerializer.write(bytes, 16238);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 43, "test_prefix_end_lineno": 48, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/OVarIntSerializer.java", "focal_method": "  public static long readAsLong(final BytesContainer bytes) {\n    return readSignedVarLong(bytes);\n  }", "focal_method_start_lineno": 37, "focal_method_end_lineno": 39, "ground_truth_oracle": "assertEquals(OVarIntSerializer.readAsLong(bytes), 16238l);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void serializePosition() {\n    BytesContainer bytes = new BytesContainer();\n    bytes.offset = OVarIntSerializer.write(bytes, 16238);\n  }", "original_test_prefix": "  @Test\n  public void serializePosition() {\n    BytesContainer bytes = new BytesContainer();\n    bytes.offset = OVarIntSerializer.write(bytes, 16238);\n    assertEquals(OVarIntSerializer.readAsLong(bytes), 16238l);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.record.impl.OVarIntSerializerTest#serializePosition", "test_setup_list": []}
{"index": 277, "project_index": 151, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionNewTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_name": "testManager2", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 32, "test_setup_end_lineno": 66, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_prefix": "  @Test\n  public void testManager2() {\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(\"c\", getManager2(\"p12\").getProperty(\"name\"));\n    Assert.assertEquals(\"b\", getManager2(\"p6\").getProperty(\"name\"));\n    Assert.assertEquals(\"b\", getManager2(\"p11\").getProperty(\"name\"));\n\n    Assert.assertEquals(\"c\", getManager2Arrows(\"p10\").getProperty(\"name\"));\n    Assert.assertEquals(\"c\", getManager2Arrows(\"p12\").getProperty(\"name\"));\n    Assert.assertEquals(\"b\", getManager2Arrows(\"p6\").getProperty(\"name\"));\n    Assert.assertEquals(\"b\", getManager2Arrows(\"p11\").getProperty(\"name\"));\n  }", "test_prefix_start_lineno": 774, "test_prefix_end_lineno": 788, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focal_method": "  <T> T getProperty(String name);", "focal_method_start_lineno": 29, "focal_method_end_lineno": 29, "ground_truth_oracle": "Assert.assertEquals(\"c\", getManager2(\"p10\").getProperty(\"name\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testManager2() {\n\n  }", "original_test_prefix": "  @Test\n  public void testManager2() {\n\n    Assert.assertEquals(\"c\", getManager2(\"p10\").getProperty(\"name\"));\n    Assert.assertEquals(\"c\", getManager2(\"p12\").getProperty(\"name\"));\n    Assert.assertEquals(\"b\", getManager2(\"p6\").getProperty(\"name\"));\n    Assert.assertEquals(\"b\", getManager2(\"p11\").getProperty(\"name\"));\n\n    Assert.assertEquals(\"c\", getManager2Arrows(\"p10\").getProperty(\"name\"));\n    Assert.assertEquals(\"c\", getManager2Arrows(\"p12\").getProperty(\"name\"));\n    Assert.assertEquals(\"b\", getManager2Arrows(\"p6\").getProperty(\"name\"));\n    Assert.assertEquals(\"b\", getManager2Arrows(\"p11\").getProperty(\"name\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionNewTest#testManager2", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 32, "end_lineno": 66}]}
{"index": 278, "project_index": 151, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODocumentTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentTest.java", "test_name": "testKeepFieldTypeSerialization", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentTest.java", "test_prefix": "  @Test\n  public void testKeepFieldTypeSerialization() throws Exception {\n    ODocument doc = new ODocument();\n    doc.field(\"integer\", 10, OType.INTEGER);\n    doc.field(\"link\", new ORecordId(1, 2), OType.LINK);\n    doc.field(\"string\", 20, OType.STRING);\n    doc.field(\"binary\", new byte[] { 30 }, OType.BINARY);\n\n    <AssertPlaceHolder>;\n    assertEquals(doc.fieldType(\"link\"), OType.LINK);\n    assertEquals(doc.fieldType(\"string\"), OType.STRING);\n    assertEquals(doc.fieldType(\"binary\"), OType.BINARY);\n    ORecordSerializer ser = ODatabaseDocumentTx.getDefaultSerializer();\n    byte[] bytes = ser.toStream(doc, false);\n    doc = new ODocument();\n    ser.fromStream(bytes, doc, null);\n    assertEquals(doc.fieldType(\"integer\"), OType.INTEGER);\n    assertEquals(doc.fieldType(\"string\"), OType.STRING);\n    assertEquals(doc.fieldType(\"binary\"), OType.BINARY);\n    assertEquals(doc.fieldType(\"link\"), OType.LINK);\n  }", "test_prefix_start_lineno": 121, "test_prefix_end_lineno": 141, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  public OType fieldType(final String iFieldName) {\n    checkForLoading();\n    checkForFields(iFieldName);\n\n    ODocumentEntry entry = _fields.get(iFieldName);\n    if (entry != null)\n      return entry.type;\n\n    return null;\n  }", "focal_method_start_lineno": 1884, "focal_method_end_lineno": 1893, "ground_truth_oracle": "assertEquals(doc.fieldType(\"integer\"), OType.INTEGER);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testKeepFieldTypeSerialization() throws Exception {\n    ODocument doc = new ODocument();\n    doc.field(\"integer\", 10, OType.INTEGER);\n    doc.field(\"link\", new ORecordId(1, 2), OType.LINK);\n    doc.field(\"string\", 20, OType.STRING);\n    doc.field(\"binary\", new byte[] { 30 }, OType.BINARY);\n\n  }", "original_test_prefix": "  @Test\n  public void testKeepFieldTypeSerialization() throws Exception {\n    ODocument doc = new ODocument();\n    doc.field(\"integer\", 10, OType.INTEGER);\n    doc.field(\"link\", new ORecordId(1, 2), OType.LINK);\n    doc.field(\"string\", 20, OType.STRING);\n    doc.field(\"binary\", new byte[] { 30 }, OType.BINARY);\n\n    assertEquals(doc.fieldType(\"integer\"), OType.INTEGER);\n    assertEquals(doc.fieldType(\"link\"), OType.LINK);\n    assertEquals(doc.fieldType(\"string\"), OType.STRING);\n    assertEquals(doc.fieldType(\"binary\"), OType.BINARY);\n    ORecordSerializer ser = ODatabaseDocumentTx.getDefaultSerializer();\n    byte[] bytes = ser.toStream(doc, false);\n    doc = new ODocument();\n    ser.fromStream(bytes, doc, null);\n    assertEquals(doc.fieldType(\"integer\"), OType.INTEGER);\n    assertEquals(doc.fieldType(\"string\"), OType.STRING);\n    assertEquals(doc.fieldType(\"binary\"), OType.BINARY);\n    assertEquals(doc.fieldType(\"link\"), OType.LINK);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.record.impl.ODocumentTest#testKeepFieldTypeSerialization", "test_setup_list": []}
{"index": 279, "project_index": 151, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "RemoteTransactionSupportTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java", "test_name": "testRefFlushedInTransaction", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java", "test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.CLASS_MINIMUM_CLUSTERS.setValue(1);\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteTransactionSupportTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(RemoteTransactionSupportTest.class.getSimpleName(), \"admin\", \"admin\");\n    database.createClass(\"SomeTx\");\n    database.createClass(\"SomeTx2\");\n\n    OClass klass = database.createClass(\"IndexedTx\");\n    klass.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.NOTUNIQUE);\n\n    OClass uniqueClass = database.createClass(\"UniqueIndexedTx\");\n    uniqueClass.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.UNIQUE);\n\n  }", "test_setup_start_lineno": 50, "test_setup_end_lineno": 70, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java", "test_prefix": "  @Test\n  public void testRefFlushedInTransaction() {\n    database.begin();\n    OElement someTx = database.newElement(\"SomeTx\");\n    someTx.setProperty(\"name\", \"foo\");\n    database.save(someTx);\n\n    OElement oneMore = database.newElement(\"SomeTx\");\n    oneMore.setProperty(\"name\", \"bar\");\n    oneMore.setProperty(\"ref\", someTx);\n    OResultSet result = database.query(\"select from SomeTx\");\n    <AssertPlaceHolder>;\n    result.close();\n    database.save(oneMore);\n    database.commit();\n    OResultSet result1 = database.query(\"select ref from SomeTx where name='bar'\");\n    assertTrue(result1.hasNext());\n    assertEquals(someTx.getIdentity(), result1.next().getProperty(\"ref\"));\n    result1.close();\n  }", "test_prefix_start_lineno": 255, "test_prefix_end_lineno": 274, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  default Stream<OResult> stream() {\n    return StreamSupport.stream(this, false).onClose(() -> this.close());\n  }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 71, "ground_truth_oracle": "assertEquals(1, result.stream().count());", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "  @Test\n  public void testRefFlushedInTransaction() {\n    database.begin();\n    OElement someTx = database.newElement(\"SomeTx\");\n    someTx.setProperty(\"name\", \"foo\");\n    database.save(someTx);\n\n    OElement oneMore = database.newElement(\"SomeTx\");\n    oneMore.setProperty(\"name\", \"bar\");\n    oneMore.setProperty(\"ref\", someTx);\n    OResultSet result = database.query(\"select from SomeTx\");\n  }", "original_test_prefix": "  @Test\n  public void testRefFlushedInTransaction() {\n    database.begin();\n    OElement someTx = database.newElement(\"SomeTx\");\n    someTx.setProperty(\"name\", \"foo\");\n    database.save(someTx);\n\n    OElement oneMore = database.newElement(\"SomeTx\");\n    oneMore.setProperty(\"name\", \"bar\");\n    oneMore.setProperty(\"ref\", someTx);\n    OResultSet result = database.query(\"select from SomeTx\");\n    assertEquals(1, result.stream().count());\n    result.close();\n    database.save(oneMore);\n    database.commit();\n    OResultSet result1 = database.query(\"select ref from SomeTx where name='bar'\");\n    assertTrue(result1.hasNext());\n    assertEquals(someTx.getIdentity(), result1.next().getProperty(\"ref\"));\n    result1.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.tx.RemoteTransactionSupportTest#testRefFlushedInTransaction", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.CLASS_MINIMUM_CLUSTERS.setValue(1);\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteTransactionSupportTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(RemoteTransactionSupportTest.class.getSimpleName(), \"admin\", \"admin\");\n    database.createClass(\"SomeTx\");\n    database.createClass(\"SomeTx2\");\n\n    OClass klass = database.createClass(\"IndexedTx\");\n    klass.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.NOTUNIQUE);\n\n    OClass uniqueClass = database.createClass(\"UniqueIndexedTx\");\n    uniqueClass.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.UNIQUE);\n\n  }", "start_lineno": 50, "end_lineno": 70}]}
{"index": 280, "project_index": 151, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODatabaseImportTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/tool/ODatabaseImportTest.java", "test_name": "exportImportExcludeClusters", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/tool/ODatabaseImportTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/tool/ODatabaseImportTest.java", "test_prefix": "  @Test\n  public void exportImportExcludeClusters() throws IOException {\n    ODatabaseDocument db = new ODatabaseDocumentTx(\"memory:\" + ODatabaseImportTest.class.getSimpleName()+\"_excludeclusters\");\n    db.create();\n    db.getMetadata().getSchema().createClass(\"SimpleClass\");\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    ODatabaseExport export = new ODatabaseExport((ODatabaseDocumentInternal) db, output, new OCommandOutputListener() {\n      @Override\n      public void onMessage(String iText) {\n      }\n    });\n\n    export.setOptions(\" -includeClusterDefinitions=false\");\n    export.exportDatabase();\n    db.drop();\n\n    ODatabaseDocument dbImp = new ODatabaseDocumentTx(\"memory:import_\" + ODatabaseImportTest.class.getSimpleName());\n    dbImp.create();\n    ODatabaseImport importer = new ODatabaseImport((ODatabaseDocumentInternal) dbImp,\n        new ByteArrayInputStream(output.toByteArray()), new OCommandOutputListener() {\n      @Override\n      public void onMessage(String iText) {\n\n      }\n    });\n    importer.importDatabase();\n\n    <AssertPlaceHolder>;\n    dbImp.drop();\n  }", "test_prefix_start_lineno": 50, "test_prefix_end_lineno": 79, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OSchema.java", "focal_method": "  boolean existsClass(String iClassName);", "focal_method_start_lineno": 56, "focal_method_end_lineno": 56, "ground_truth_oracle": "Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(\"SimpleClass\"));", "ground_truth_oracle_lineno": 12, "test_prefix_wo_placeholder": "  @Test\n  public void exportImportExcludeClusters() throws IOException {\n    ODatabaseDocument db = new ODatabaseDocumentTx(\"memory:\" + ODatabaseImportTest.class.getSimpleName()+\"_excludeclusters\");\n    db.create();\n    db.getMetadata().getSchema().createClass(\"SimpleClass\");\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    ODatabaseExport export = new ODatabaseExport((ODatabaseDocumentInternal) db, output, new OCommandOutputListener() {\n      @Override\n      public void onMessage(String iText) {\n      }\n    });\n\n    export.setOptions(\" -includeClusterDefinitions=false\");\n    export.exportDatabase();\n    db.drop();\n\n    ODatabaseDocument dbImp = new ODatabaseDocumentTx(\"memory:import_\" + ODatabaseImportTest.class.getSimpleName());\n    dbImp.create();\n    ODatabaseImport importer = new ODatabaseImport((ODatabaseDocumentInternal) dbImp,\n        new ByteArrayInputStream(output.toByteArray()), new OCommandOutputListener() {\n      @Override\n      public void onMessage(String iText) {\n\n      }\n    });\n    importer.importDatabase();\n\n  }", "original_test_prefix": "  @Test\n  public void exportImportExcludeClusters() throws IOException {\n    ODatabaseDocument db = new ODatabaseDocumentTx(\"memory:\" + ODatabaseImportTest.class.getSimpleName()+\"_excludeclusters\");\n    db.create();\n    db.getMetadata().getSchema().createClass(\"SimpleClass\");\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    ODatabaseExport export = new ODatabaseExport((ODatabaseDocumentInternal) db, output, new OCommandOutputListener() {\n      @Override\n      public void onMessage(String iText) {\n      }\n    });\n\n    export.setOptions(\" -includeClusterDefinitions=false\");\n    export.exportDatabase();\n    db.drop();\n\n    ODatabaseDocument dbImp = new ODatabaseDocumentTx(\"memory:import_\" + ODatabaseImportTest.class.getSimpleName());\n    dbImp.create();\n    ODatabaseImport importer = new ODatabaseImport((ODatabaseDocumentInternal) dbImp,\n        new ByteArrayInputStream(output.toByteArray()), new OCommandOutputListener() {\n      @Override\n      public void onMessage(String iText) {\n\n      }\n    });\n    importer.importDatabase();\n\n    Assert.assertTrue(dbImp.getMetadata().getSchema().existsClass(\"SimpleClass\"));\n    dbImp.drop();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.tool.ODatabaseImportTest#exportImportExcludeClusters", "test_setup_list": []}
{"index": 281, "project_index": 151, "class_index": 6, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OTruncateClassStatementExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OTruncateClassStatementExecutionTest.java", "test_name": "testTruncateVertexClassSubclassesWithIndex", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OTruncateClassStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() {\n    database = new ODatabaseDocumentTx(\"memory:OTruncateClassStatementExecutionTest\");\n    database.create();\n  }", "test_setup_start_lineno": 27, "test_setup_end_lineno": 31, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OTruncateClassStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testTruncateVertexClassSubclassesWithIndex() {\n\n    database.command(\"create class TestTruncateVertexClassSuperclassWithIndex\");\n    database.command(\"create property TestTruncateVertexClassSuperclassWithIndex.name STRING\");\n    database.command(\n        \"create index TestTruncateVertexClassSuperclassWithIndex_index on TestTruncateVertexClassSuperclassWithIndex (name) NOTUNIQUE\");\n\n    database.command(\"create class TestTruncateVertexClassSubclassWithIndex extends TestTruncateVertexClassSuperclassWithIndex\");\n\n    database.command(\"insert into TestTruncateVertexClassSuperclassWithIndex set name = 'foo'\");\n    database.command(\"insert into TestTruncateVertexClassSubclassWithIndex set name = 'bar'\");\n\n    OResultSet result = database.query(\"select from index:TestTruncateVertexClassSuperclassWithIndex_index\");\n    <AssertPlaceHolder>;\n    result.close();\n\n    database.command(\"truncate class TestTruncateVertexClassSubclassWithIndex\");\n    result = database.query(\"select from index:TestTruncateVertexClassSuperclassWithIndex_index\");\n    Assert.assertEquals(toList(result).size(), 1);\n    result.close();\n\n    database.command(\"truncate class TestTruncateVertexClassSuperclassWithIndex polymorphic\");\n    result = database.query(\"select from index:TestTruncateVertexClassSuperclassWithIndex_index\");\n    Assert.assertEquals(toList(result).size(), 0);\n    result.close();\n\n  }", "test_prefix_start_lineno": 132, "test_prefix_end_lineno": 159, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/ODatabase.java", "focal_method": "  default OResultSet query(String query, Object... args) throws OCommandSQLParsingException, OCommandExecutionException {\n    throw new UnsupportedOperationException();\n  }", "focal_method_start_lineno": 863, "focal_method_end_lineno": 865, "ground_truth_oracle": "Assert.assertEquals(toList(result).size(), 2);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testTruncateVertexClassSubclassesWithIndex() {\n\n    database.command(\"create class TestTruncateVertexClassSuperclassWithIndex\");\n    database.command(\"create property TestTruncateVertexClassSuperclassWithIndex.name STRING\");\n    database.command(\n        \"create index TestTruncateVertexClassSuperclassWithIndex_index on TestTruncateVertexClassSuperclassWithIndex (name) NOTUNIQUE\");\n\n    database.command(\"create class TestTruncateVertexClassSubclassWithIndex extends TestTruncateVertexClassSuperclassWithIndex\");\n\n    database.command(\"insert into TestTruncateVertexClassSuperclassWithIndex set name = 'foo'\");\n    database.command(\"insert into TestTruncateVertexClassSubclassWithIndex set name = 'bar'\");\n\n    OResultSet result = database.query(\"select from index:TestTruncateVertexClassSuperclassWithIndex_index\");\n  }", "original_test_prefix": "  @Test\n  public void testTruncateVertexClassSubclassesWithIndex() {\n\n    database.command(\"create class TestTruncateVertexClassSuperclassWithIndex\");\n    database.command(\"create property TestTruncateVertexClassSuperclassWithIndex.name STRING\");\n    database.command(\n        \"create index TestTruncateVertexClassSuperclassWithIndex_index on TestTruncateVertexClassSuperclassWithIndex (name) NOTUNIQUE\");\n\n    database.command(\"create class TestTruncateVertexClassSubclassWithIndex extends TestTruncateVertexClassSuperclassWithIndex\");\n\n    database.command(\"insert into TestTruncateVertexClassSuperclassWithIndex set name = 'foo'\");\n    database.command(\"insert into TestTruncateVertexClassSubclassWithIndex set name = 'bar'\");\n\n    OResultSet result = database.query(\"select from index:TestTruncateVertexClassSuperclassWithIndex_index\");\n    Assert.assertEquals(toList(result).size(), 2);\n    result.close();\n\n    database.command(\"truncate class TestTruncateVertexClassSubclassWithIndex\");\n    result = database.query(\"select from index:TestTruncateVertexClassSuperclassWithIndex_index\");\n    Assert.assertEquals(toList(result).size(), 1);\n    result.close();\n\n    database.command(\"truncate class TestTruncateVertexClassSuperclassWithIndex polymorphic\");\n    result = database.query(\"select from index:TestTruncateVertexClassSuperclassWithIndex_index\");\n    Assert.assertEquals(toList(result).size(), 0);\n    result.close();\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.OTruncateClassStatementExecutionTest#testTruncateVertexClassSubclassesWithIndex", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() {\n    database = new ODatabaseDocumentTx(\"memory:OTruncateClassStatementExecutionTest\");\n    database.create();\n  }", "start_lineno": 27, "end_lineno": 31}]}
{"index": 282, "project_index": 151, "class_index": 7, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCompositeKeyTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_name": "testDocumentSerializationCompositeKeyNull", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_prefix": "  @Test\n  public void testDocumentSerializationCompositeKeyNull() {\n    final OCompositeKey compositeKeyOne = new OCompositeKey();\n    compositeKeyOne.addKey(1);\n    compositeKeyOne.addKey(null);\n    compositeKeyOne.addKey(2);\n\n    ODocument document = compositeKeyOne.toDocument();\n\n    final OCompositeKey compositeKeyTwo = new OCompositeKey();\n    compositeKeyTwo.fromDocument(document);\n\n    <AssertPlaceHolder>;\n    assertNotSame(compositeKeyOne, compositeKeyTwo);\n  }", "test_prefix_start_lineno": 228, "test_prefix_end_lineno": 242, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focal_method": "  @Override\n  public void fromDocument(ODocument document) {\n    document.setLazyLoad(false);\n\n    final String[] fieldNames = document.fieldNames();\n\n    final SortedMap<Integer, Object> keyMap = new TreeMap<Integer, Object>();\n\n    for (String fieldName : fieldNames) {\n      if (fieldName.startsWith(\"key\")) {\n        final String keyIndex = fieldName.substring(3);\n        keyMap.put(Integer.valueOf(keyIndex), document.field(fieldName));\n      }\n    }\n\n    keys.clear();\n    for (Object value : keyMap.values())\n      keys.add(value);\n  }", "focal_method_start_lineno": 176, "focal_method_end_lineno": 194, "ground_truth_oracle": "assertEquals(compositeKeyOne, compositeKeyTwo);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testDocumentSerializationCompositeKeyNull() {\n    final OCompositeKey compositeKeyOne = new OCompositeKey();\n    compositeKeyOne.addKey(1);\n    compositeKeyOne.addKey(null);\n    compositeKeyOne.addKey(2);\n\n    ODocument document = compositeKeyOne.toDocument();\n\n    final OCompositeKey compositeKeyTwo = new OCompositeKey();\n    compositeKeyTwo.fromDocument(document);\n\n  }", "original_test_prefix": "  @Test\n  public void testDocumentSerializationCompositeKeyNull() {\n    final OCompositeKey compositeKeyOne = new OCompositeKey();\n    compositeKeyOne.addKey(1);\n    compositeKeyOne.addKey(null);\n    compositeKeyOne.addKey(2);\n\n    ODocument document = compositeKeyOne.toDocument();\n\n    final OCompositeKey compositeKeyTwo = new OCompositeKey();\n    compositeKeyTwo.fromDocument(document);\n\n    assertEquals(compositeKeyOne, compositeKeyTwo);\n    assertNotSame(compositeKeyOne, compositeKeyTwo);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OCompositeKeyTest#testDocumentSerializationCompositeKeyNull", "test_setup_list": []}
{"index": 283, "project_index": 152, "class_index": 0, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "nanolets", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "TestNanolets", "class_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_name": "checkIniParameter2", "test_setup_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 96, "test_prefix_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_prefix": "    @Test\n    public void checkIniParameter2() throws Exception {\n        <AssertPlaceHolder>;\n        Assert.assertNull(new RouterNanoHTTPD.UriResource(\"browse\", 100, null).initParameter(String.class));\n    }", "test_prefix_start_lineno": 250, "test_prefix_end_lineno": 254, "focal_method_file_path": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java", "focal_method": "        public <T> T initParameter(Class<T> paramClazz) {\n            return initParameter(0, paramClazz);\n        }", "focal_method_start_lineno": 423, "focal_method_end_lineno": 425, "ground_truth_oracle": "Assert.assertEquals(\"init\", new RouterNanoHTTPD.UriResource(\"browse\", 100, null, \"init\").initParameter(String.class));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void checkIniParameter2() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void checkIniParameter2() throws Exception {\n        Assert.assertEquals(\"init\", new RouterNanoHTTPD.UriResource(\"browse\", 100, null, \"init\").initParameter(String.class));\n        Assert.assertNull(new RouterNanoHTTPD.UriResource(\"browse\", 100, null).initParameter(String.class));\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.router.TestNanolets#checkIniParameter2", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "start_lineno": 81, "end_lineno": 96}]}
{"index": 284, "project_index": 152, "class_index": 0, "test_index": 1, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "nanolets", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "TestNanolets", "class_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_name": "testProvidedPriorityRoutePrioritizerNullUri", "test_setup_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 96, "test_prefix_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_prefix": "    @Test\n    public void testProvidedPriorityRoutePrioritizerNullUri() {\n        ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer();\n        <AssertPlaceHolder>;\n        routePrioritizer.addRoute(null, 100, null);\n        Assert.assertEquals(0, routePrioritizer.getPrioritizedRoutes().size());\n    }", "test_prefix_start_lineno": 476, "test_prefix_end_lineno": 482, "focal_method_file_path": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java", "focal_method": "        @Override\n        public Collection<UriResource> getPrioritizedRoutes() {\n            return Collections.unmodifiableCollection(mappings);\n        }", "focal_method_start_lineno": 515, "focal_method_end_lineno": 518, "ground_truth_oracle": "Assert.assertEquals(0, routePrioritizer.getPrioritizedRoutes().size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testProvidedPriorityRoutePrioritizerNullUri() {\n        ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer();\n    }", "original_test_prefix": "    @Test\n    public void testProvidedPriorityRoutePrioritizerNullUri() {\n        ProvidedPriorityRoutePrioritizer routePrioritizer = new ProvidedPriorityRoutePrioritizer();\n        Assert.assertEquals(0, routePrioritizer.getPrioritizedRoutes().size());\n        routePrioritizer.addRoute(null, 100, null);\n        Assert.assertEquals(0, routePrioritizer.getPrioritizedRoutes().size());\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.router.TestNanolets#testProvidedPriorityRoutePrioritizerNullUri", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "start_lineno": 81, "end_lineno": 96}]}
{"index": 285, "project_index": 152, "class_index": 0, "test_index": 2, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "nanolets", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "TestNanolets", "class_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_name": "testHandlerSetters", "test_setup_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 96, "test_prefix_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_prefix": "    @Test\n    public void testHandlerSetters() throws Exception {\n        final UriResponder notFoundHandler = new GeneralHandler() {\n        };\n        final UriResponder notImplementedHandler = new GeneralHandler() {\n        };\n\n        TestRouter router = new TestRouter();\n\n        RouterNanoHTTPD routerNanoHttpd = new RouterNanoHTTPD(9999);\n\n        Field routerField = RouterNanoHTTPD.class.getDeclaredField(\"router\");\n        routerField.setAccessible(true);\n        routerField.set(routerNanoHttpd, router);\n\n        routerNanoHttpd.setNotFoundHandler(notFoundHandler.getClass());\n        routerNanoHttpd.setNotImplementedHandler(notImplementedHandler.getClass());\n\n        <AssertPlaceHolder>;\n        Assert.assertEquals(notImplementedHandler.getClass(), router.notImplementedHandlerClass);\n    }", "test_prefix_start_lineno": 557, "test_prefix_end_lineno": 577, "focal_method_file_path": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java", "focal_method": "    public <T extends UriResponder> void setNotImplementedHandler(Class<T> handler) {\n        router.setNotImplemented(handler);\n    }", "focal_method_start_lineno": 653, "focal_method_end_lineno": 655, "ground_truth_oracle": "Assert.assertEquals(notFoundHandler.getClass(), router.notFoundHandlerClass);", "ground_truth_oracle_lineno": 9, "test_prefix_wo_placeholder": "    @Test\n    public void testHandlerSetters() throws Exception {\n        final UriResponder notFoundHandler = new GeneralHandler() {\n        };\n        final UriResponder notImplementedHandler = new GeneralHandler() {\n        };\n\n        TestRouter router = new TestRouter();\n\n        RouterNanoHTTPD routerNanoHttpd = new RouterNanoHTTPD(9999);\n\n        Field routerField = RouterNanoHTTPD.class.getDeclaredField(\"router\");\n        routerField.setAccessible(true);\n        routerField.set(routerNanoHttpd, router);\n\n        routerNanoHttpd.setNotFoundHandler(notFoundHandler.getClass());\n        routerNanoHttpd.setNotImplementedHandler(notImplementedHandler.getClass());\n\n    }", "original_test_prefix": "    @Test\n    public void testHandlerSetters() throws Exception {\n        final UriResponder notFoundHandler = new GeneralHandler() {\n        };\n        final UriResponder notImplementedHandler = new GeneralHandler() {\n        };\n\n        TestRouter router = new TestRouter();\n\n        RouterNanoHTTPD routerNanoHttpd = new RouterNanoHTTPD(9999);\n\n        Field routerField = RouterNanoHTTPD.class.getDeclaredField(\"router\");\n        routerField.setAccessible(true);\n        routerField.set(routerNanoHttpd, router);\n\n        routerNanoHttpd.setNotFoundHandler(notFoundHandler.getClass());\n        routerNanoHttpd.setNotImplementedHandler(notImplementedHandler.getClass());\n\n        Assert.assertEquals(notFoundHandler.getClass(), router.notFoundHandlerClass);\n        Assert.assertEquals(notImplementedHandler.getClass(), router.notImplementedHandlerClass);\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.router.TestNanolets#testHandlerSetters", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "start_lineno": 81, "end_lineno": 96}]}
{"index": 286, "project_index": 153, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "TestExceptionTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/test/TestExceptionTest.java", "test_name": "testConstructor_withCause", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/test/TestExceptionTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/test/TestExceptionTest.java", "test_prefix": "    @Test\n    public void testConstructor_withCause() {\n        RuntimeException cause = new RuntimeException();\n        TestException exception = new TestException(cause);\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 9, "test_prefix_end_lineno": 15, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/test/TestException.java", "focal_method": "    public TestException(Throwable cause) {\n        super(cause);\n    }", "focal_method_start_lineno": 27, "focal_method_end_lineno": 29, "ground_truth_oracle": "assertEquals(cause, exception.getCause());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testConstructor_withCause() {\n        RuntimeException cause = new RuntimeException();\n        TestException exception = new TestException(cause);\n\n    }", "original_test_prefix": "    @Test\n    public void testConstructor_withCause() {\n        RuntimeException cause = new RuntimeException();\n        TestException exception = new TestException(cause);\n\n        assertEquals(cause, exception.getCause());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.test.TestExceptionTest#testConstructor_withCause", "test_setup_list": []}
{"index": 287, "project_index": 153, "class_index": 0, "test_index": 1, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "TestExceptionTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/test/TestExceptionTest.java", "test_name": "testConstructor_withMessageFormat_singleArgument", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/test/TestExceptionTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/test/TestExceptionTest.java", "test_prefix": "    @Test\n    public void testConstructor_withMessageFormat_singleArgument() {\n        TestException exception = new TestException(\"cause %d\", 1);\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 24, "test_prefix_end_lineno": 29, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/test/TestException.java", "focal_method": "    public TestException(String message, Object... args) {\n        super(format(message, args));\n\n        Object lastArg = args[args.length - 1];\n        if (lastArg instanceof Throwable) {\n            initCause((Throwable) lastArg);\n        }\n    }", "focal_method_start_lineno": 35, "focal_method_end_lineno": 42, "ground_truth_oracle": "assertEquals(\"cause 1\", exception.getMessage());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testConstructor_withMessageFormat_singleArgument() {\n        TestException exception = new TestException(\"cause %d\", 1);\n\n    }", "original_test_prefix": "    @Test\n    public void testConstructor_withMessageFormat_singleArgument() {\n        TestException exception = new TestException(\"cause %d\", 1);\n\n        assertEquals(\"cause 1\", exception.getMessage());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.test.TestExceptionTest#testConstructor_withMessageFormat_singleArgument", "test_setup_list": []}
{"index": 288, "project_index": 153, "class_index": 1, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "PerformanceStatsCollectorTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollectorTest.java", "test_name": "testGet", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollectorTest.java", "test_setup": "@Before\n    public void before() {\n        emptyPerformanceStatsCollector = new PerformanceStatsCollector();\n        performanceStatsCollector = new PerformanceStatsCollector();\n\n        a1w1 = workerAddress(1, 1);\n        a1w2 = workerAddress(1, 2);\n        a2w1 = workerAddress(2, 1);\n        a2w2 = workerAddress(2, 2);\n\n        a1 = a1w1.getParent();\n        a2 = a2w1.getParent();\n    }", "test_setup_start_lineno": 37, "test_setup_end_lineno": 49, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/PerformanceStatsCollectorTest.java", "test_prefix": "    @Test\n    public void testGet() {\n        update(a1w1, TEST_CASE_ID_1, new PerformanceStats(1000, 200, 500, 1900.0d, 1800, 2500));\n        update(a1w1, TEST_CASE_ID_1, new PerformanceStats(1500, 150, 550, 1600.0d, 1700, 2400));\n        update(a2w1, TEST_CASE_ID_1, new PerformanceStats(800, 100, 300, 2200.0d, 2400, 2800));\n\n        PerformanceStats performanceStats = performanceStatsCollector.get(TEST_CASE_ID_1, true);\n\n        <AssertPlaceHolder>;\n        assertEquals(2300, performanceStats.getOperationCount());\n        assertEquals(300.0, performanceStats.getIntervalThroughput(), ASSERT_EQUALS_DELTA);\n        assertEquals(850.0, performanceStats.getTotalThroughput(), ASSERT_EQUALS_DELTA);\n        assertEquals(2400, performanceStats.getIntervalLatency999PercentileNanos());\n        assertEquals(2200.0d, performanceStats.getIntervalLatencyAvgNanos(), 0.001);\n        assertEquals(2800, performanceStats.getIntervalLatencyMaxNanos());\n    }", "test_prefix_start_lineno": 92, "test_prefix_end_lineno": 107, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/worker/performance/PerformanceStats.java", "focal_method": "    public boolean isEmpty() {\n        return (operationCount == EMPTY_OPERATION_COUNT && intervalThroughput == EMPTY_THROUGHPUT);\n    }", "focal_method_start_lineno": 146, "focal_method_end_lineno": 148, "ground_truth_oracle": "assertFalse(performanceStats.isEmpty());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testGet() {\n        update(a1w1, TEST_CASE_ID_1, new PerformanceStats(1000, 200, 500, 1900.0d, 1800, 2500));\n        update(a1w1, TEST_CASE_ID_1, new PerformanceStats(1500, 150, 550, 1600.0d, 1700, 2400));\n        update(a2w1, TEST_CASE_ID_1, new PerformanceStats(800, 100, 300, 2200.0d, 2400, 2800));\n\n        PerformanceStats performanceStats = performanceStatsCollector.get(TEST_CASE_ID_1, true);\n\n    }", "original_test_prefix": "    @Test\n    public void testGet() {\n        update(a1w1, TEST_CASE_ID_1, new PerformanceStats(1000, 200, 500, 1900.0d, 1800, 2500));\n        update(a1w1, TEST_CASE_ID_1, new PerformanceStats(1500, 150, 550, 1600.0d, 1700, 2400));\n        update(a2w1, TEST_CASE_ID_1, new PerformanceStats(800, 100, 300, 2200.0d, 2400, 2800));\n\n        PerformanceStats performanceStats = performanceStatsCollector.get(TEST_CASE_ID_1, true);\n\n        assertFalse(performanceStats.isEmpty());\n        assertEquals(2300, performanceStats.getOperationCount());\n        assertEquals(300.0, performanceStats.getIntervalThroughput(), ASSERT_EQUALS_DELTA);\n        assertEquals(850.0, performanceStats.getTotalThroughput(), ASSERT_EQUALS_DELTA);\n        assertEquals(2400, performanceStats.getIntervalLatency999PercentileNanos());\n        assertEquals(2200.0d, performanceStats.getIntervalLatencyAvgNanos(), 0.001);\n        assertEquals(2800, performanceStats.getIntervalLatencyMaxNanos());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.coordinator.PerformanceStatsCollectorTest#testGet", "test_setup_list": [{"test_setup": "@Before\n    public void before() {\n        emptyPerformanceStatsCollector = new PerformanceStatsCollector();\n        performanceStatsCollector = new PerformanceStatsCollector();\n\n        a1w1 = workerAddress(1, 1);\n        a1w2 = workerAddress(1, 2);\n        a2w1 = workerAddress(2, 1);\n        a2w2 = workerAddress(2, 2);\n\n        a1 = a1w1.getParent();\n        a2 = a2w1.getParent();\n    }", "start_lineno": 37, "end_lineno": 49}]}
{"index": 289, "project_index": 153, "class_index": 2, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "SimulatorAddressTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java", "test_name": "testToString_whenCoordinator", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/protocol/core/SimulatorAddressTest.java", "test_prefix": "    @Test\n    public void testToString_whenCoordinator() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 108, "test_prefix_end_lineno": 111, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/protocol/core/SimulatorAddress.java", "focal_method": "    @Override\n    public String toString() {\n        if (addressLevel == COORDINATOR) {\n            return COORDINATOR_STRING;\n        } else if (addressLevel == AGENT) {\n            return \"A\" + agentIndex;\n        } else {\n            return \"A\" + agentIndex + \"_W\" + workerIndex;\n        }\n    }", "focal_method_start_lineno": 162, "focal_method_end_lineno": 171, "ground_truth_oracle": "assertEquals(\"C\", coordinatorAddress().toString());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testToString_whenCoordinator() {\n    }", "original_test_prefix": "    @Test\n    public void testToString_whenCoordinator() {\n        assertEquals(\"C\", coordinatorAddress().toString());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.protocol.core.SimulatorAddressTest#testToString_whenCoordinator", "test_setup_list": []}
{"index": 290, "project_index": 153, "class_index": 3, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "AnnotatedMethodRetrieverTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java", "test_name": "testSubClass_methodFoundInSuper", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java", "test_prefix": "    @Test\n    public void testSubClass_methodFoundInSuper() {\n        List<Method> methodList = new AnnotatedMethodRetriever(Subclass.class, Teardown.class)\n                .withFilter(new AnnotationFilter.TeardownFilter(false))\n                .withVoidReturnType()\n                .withoutArgs()\n                .findAll();\n\n        <AssertPlaceHolder>;\n        assertEquals(\"tearDown\", methodList.get(0).getName());\n    }", "test_prefix_start_lineno": 108, "test_prefix_end_lineno": 118, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java", "focal_method": "    public List<Method> findAll() {\n        List<Method> methods = findAllDeclaredMethods(clazz);\n        for (Method method : methods) {\n            verifyPublic(method);\n            verifyNotStatic(method);\n            verifyReturnType(method);\n            verifyArgs(method);\n            method.setAccessible(true);\n        }\n        return methods;\n    }", "focal_method_start_lineno": 81, "focal_method_end_lineno": 91, "ground_truth_oracle": "assertEquals(1, methodList.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testSubClass_methodFoundInSuper() {\n        List<Method> methodList = new AnnotatedMethodRetriever(Subclass.class, Teardown.class)\n                .withFilter(new AnnotationFilter.TeardownFilter(false))\n                .withVoidReturnType()\n                .withoutArgs()\n                .findAll();\n\n    }", "original_test_prefix": "    @Test\n    public void testSubClass_methodFoundInSuper() {\n        List<Method> methodList = new AnnotatedMethodRetriever(Subclass.class, Teardown.class)\n                .withFilter(new AnnotationFilter.TeardownFilter(false))\n                .withVoidReturnType()\n                .withoutArgs()\n                .findAll();\n\n        assertEquals(1, methodList.size());\n        assertEquals(\"tearDown\", methodList.get(0).getName());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.AnnotatedMethodRetrieverTest#testSubClass_methodFoundInSuper", "test_setup_list": []}
{"index": 291, "project_index": 154, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "SpringBootUtilTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_name": "testMultipleProfilesParsing", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_prefix": "    @Test\n    public void testMultipleProfilesParsing() {\n        Properties props = SpringBootUtil.getPropertiesFromApplicationYamlResource(null, getClass().getResource(\"/util/test-application-with-multiple-profiles.yml\"));\n        <AssertPlaceHolder>;\n\n        assertEquals(\"spring-boot-k8-recipes\", props.get(\"spring.application.name\"));\n        assertEquals(\"false\", props.get(\"management.endpoints.enabled-by-default\"));\n        assertEquals(\"true\", props.get(\"management.endpoint.health.enabled\"));\n        assertNull(props.get(\"cloud.kubernetes.reload.enabled\"));\n\n        props = SpringBootUtil.getPropertiesFromApplicationYamlResource(\"kubernetes\", getClass().getResource(\"/util/test-application-with-multiple-profiles.yml\"));\n        assertEquals(\"true\", props.get(\"cloud.kubernetes.reload.enabled\"));\n        assertNull(props.get(\"spring.application.name\"));\n    }", "test_prefix_start_lineno": 85, "test_prefix_end_lineno": 98, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/SpringBootUtil.java", "focal_method": "    public static Properties getPropertiesFromApplicationYamlResource(String springActiveProfile, URL ymlResource) {\n        return YamlUtil.getPropertiesFromYamlResource(springActiveProfile, ymlResource);\n    }", "focal_method_start_lineno": 70, "focal_method_end_lineno": 72, "ground_truth_oracle": "assertTrue(props.size() > 0);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testMultipleProfilesParsing() {\n        Properties props = SpringBootUtil.getPropertiesFromApplicationYamlResource(null, getClass().getResource(\"/util/test-application-with-multiple-profiles.yml\"));\n    }", "original_test_prefix": "    @Test\n    public void testMultipleProfilesParsing() {\n        Properties props = SpringBootUtil.getPropertiesFromApplicationYamlResource(null, getClass().getResource(\"/util/test-application-with-multiple-profiles.yml\"));\n        assertTrue(props.size() > 0);\n\n        assertEquals(\"spring-boot-k8-recipes\", props.get(\"spring.application.name\"));\n        assertEquals(\"false\", props.get(\"management.endpoints.enabled-by-default\"));\n        assertEquals(\"true\", props.get(\"management.endpoint.health.enabled\"));\n        assertNull(props.get(\"cloud.kubernetes.reload.enabled\"));\n\n        props = SpringBootUtil.getPropertiesFromApplicationYamlResource(\"kubernetes\", getClass().getResource(\"/util/test-application-with-multiple-profiles.yml\"));\n        assertEquals(\"true\", props.get(\"cloud.kubernetes.reload.enabled\"));\n        assertNull(props.get(\"spring.application.name\"));\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.SpringBootUtilTest#testMultipleProfilesParsing", "test_setup_list": []}
{"index": 292, "project_index": 155, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "EnvironmentTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/EnvironmentTest.java", "test_name": "testSetupWithCompleteJob", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/EnvironmentTest.java", "test_setup": "@Before\n    public void init() throws Exception {\n        mojo = new CoverallsReportMojo() {\n            @Override\n            protected List<CoverageParser> createCoverageParsers(SourceLoader sourceLoader) {\n                return Arrays.asList(coverageParserMock);\n            }\n\n            @Override\n            public Log getLog() {\n                return logMock;\n            }\n        };\n        mojo.serviceName = \"service\";\n        mojo.sourceEncoding = \"UTF-8\";\n        when(serviceMock.isSelected()).thenReturn(true);\n    }", "test_setup_start_lineno": 61, "test_setup_end_lineno": 77, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/EnvironmentTest.java", "test_prefix": "    @Test\n    public void testSetupWithCompleteJob() {\n        mojo.serviceName = null;\n        Properties environment = new Properties();\n        environment.setProperty(\"env\", \"true\");\n        when(serviceMock.getName()).thenReturn(\"defined service\");\n        when(serviceMock.getJobId()).thenReturn(\"123\");\n        when(serviceMock.getBuildNumber()).thenReturn(\"456\");\n        when(serviceMock.getBuildUrl()).thenReturn(\"http://ci.com/project\");\n        when(serviceMock.getBranch()).thenReturn(\"master\");\n        when(serviceMock.getPullRequest()).thenReturn(\"111\");\n        when(serviceMock.getEnvironment()).thenReturn(environment);\n        \n        create(Arrays.asList(mock(ServiceSetup.class), serviceMock)).setup();\n        <AssertPlaceHolder>;\n        assertEquals(\"123\", mojo.serviceJobId);\n        assertEquals(\"456\", mojo.serviceBuildNumber);\n        assertEquals(\"http://ci.com/project\", mojo.serviceBuildUrl);\n        assertEquals(\"master\", mojo.branch);\n        assertEquals(\"111\", mojo.pullRequest);\n        assertEquals(\"true\", mojo.serviceEnvironment.get(\"env\"));\n    }", "test_prefix_start_lineno": 116, "test_prefix_end_lineno": 137, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/Environment.java", "focal_method": "    public void setup() {\n        setupService();\n        verify();\n    }", "focal_method_start_lineno": 53, "focal_method_end_lineno": 56, "ground_truth_oracle": "assertEquals(\"defined service\", mojo.serviceName);", "ground_truth_oracle_lineno": 11, "test_prefix_wo_placeholder": "    @Test\n    public void testSetupWithCompleteJob() {\n        mojo.serviceName = null;\n        Properties environment = new Properties();\n        environment.setProperty(\"env\", \"true\");\n        when(serviceMock.getName()).thenReturn(\"defined service\");\n        when(serviceMock.getJobId()).thenReturn(\"123\");\n        when(serviceMock.getBuildNumber()).thenReturn(\"456\");\n        when(serviceMock.getBuildUrl()).thenReturn(\"http://ci.com/project\");\n        when(serviceMock.getBranch()).thenReturn(\"master\");\n        when(serviceMock.getPullRequest()).thenReturn(\"111\");\n        when(serviceMock.getEnvironment()).thenReturn(environment);\n        \n        create(Arrays.asList(mock(ServiceSetup.class), serviceMock)).setup();\n    }", "original_test_prefix": "    @Test\n    public void testSetupWithCompleteJob() {\n        mojo.serviceName = null;\n        Properties environment = new Properties();\n        environment.setProperty(\"env\", \"true\");\n        when(serviceMock.getName()).thenReturn(\"defined service\");\n        when(serviceMock.getJobId()).thenReturn(\"123\");\n        when(serviceMock.getBuildNumber()).thenReturn(\"456\");\n        when(serviceMock.getBuildUrl()).thenReturn(\"http://ci.com/project\");\n        when(serviceMock.getBranch()).thenReturn(\"master\");\n        when(serviceMock.getPullRequest()).thenReturn(\"111\");\n        when(serviceMock.getEnvironment()).thenReturn(environment);\n        \n        create(Arrays.asList(mock(ServiceSetup.class), serviceMock)).setup();\n        assertEquals(\"defined service\", mojo.serviceName);\n        assertEquals(\"123\", mojo.serviceJobId);\n        assertEquals(\"456\", mojo.serviceBuildNumber);\n        assertEquals(\"http://ci.com/project\", mojo.serviceBuildUrl);\n        assertEquals(\"master\", mojo.branch);\n        assertEquals(\"111\", mojo.pullRequest);\n        assertEquals(\"true\", mojo.serviceEnvironment.get(\"env\"));\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.EnvironmentTest#testSetupWithCompleteJob", "test_setup_list": [{"test_setup": "@Before\n    public void init() throws Exception {\n        mojo = new CoverallsReportMojo() {\n            @Override\n            protected List<CoverageParser> createCoverageParsers(SourceLoader sourceLoader) {\n                return Arrays.asList(coverageParserMock);\n            }\n\n            @Override\n            public Log getLog() {\n                return logMock;\n            }\n        };\n        mojo.serviceName = \"service\";\n        mojo.sourceEncoding = \"UTF-8\";\n        when(serviceMock.isSelected()).thenReturn(true);\n    }", "start_lineno": 61, "end_lineno": 77}]}
{"index": 293, "project_index": 156, "class_index": 0, "test_index": 0, "user_name": "javadev", "repo_name": "moneytostr-russian", "sub_repos": [], "sub_repo": "", "commit_sha": "d39c8729e15292d4f3d38ddbae68977f170f482b", "build_system": "mvn", "class_name": "MoneyToStrTest", "class_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_name": "checkPER100", "test_setup_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "test_setup_start_lineno": 106, "test_setup_end_lineno": 174, "test_prefix_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_prefix": "    @Test\n    public void checkPER100() {\n        <AssertPlaceHolder>;\n        assertEquals(\"\u043e\u0434\u043d\u0430 \u0446\u0435\u043b\u0430\u044f, \u0434\u0435\u0441\u044f\u0442\u044c \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_1_1D));\n        assertEquals(\"\u043e\u0434\u043d\u0430 \u0446\u0435\u043b\u0430\u044f, \u0434\u0432\u0435 \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_1_02D));\n        assertEquals(\"\u043e\u0434\u043d\u0430 \u0446\u0435\u043b\u0430\u044f, \u043e\u0434\u0438\u043d\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_1_11D));\n        assertEquals(\"\u0434\u0432\u0435 \u0446\u0435\u043b\u044b\u0445, \u0434\u0432\u0435 \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_2_02D));\n        assertEquals(\"\u043f\u044f\u0442\u044c \u0446\u0435\u043b\u044b\u0445, \u043f\u044f\u0442\u044c \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_5_05D));\n    }", "test_prefix_start_lineno": 448, "test_prefix_end_lineno": 456, "focal_method_file_path": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focal_method": "    public String convert(Double theMoney) {\n        if (theMoney == null) {\n            throw new IllegalArgumentException(\"theMoney is null\");\n        }\n        Long intPart = theMoney.longValue();\n        Long fractPart = Math.round((theMoney - intPart) * NUM100);\n        if (currency == Currency.PER1000) {\n            fractPart = Math.round((theMoney - intPart) * NUM1000);\n        }\n        return convert(intPart, fractPart);\n    }", "focal_method_start_lineno": 442, "focal_method_end_lineno": 452, "ground_truth_oracle": "assertEquals(\"\u043e\u0434\u043d\u0430 \u0446\u0435\u043b\u0430\u044f, \u043e\u0434\u043d\u0430 \u0441\u043e\u0442\u0430\u044f \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_1_01D));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void checkPER100() {\n    }", "original_test_prefix": "    @Test\n    public void checkPER100() {\n        assertEquals(\"\u043e\u0434\u043d\u0430 \u0446\u0435\u043b\u0430\u044f, \u043e\u0434\u043d\u0430 \u0441\u043e\u0442\u0430\u044f \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_1_01D));\n        assertEquals(\"\u043e\u0434\u043d\u0430 \u0446\u0435\u043b\u0430\u044f, \u0434\u0435\u0441\u044f\u0442\u044c \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_1_1D));\n        assertEquals(\"\u043e\u0434\u043d\u0430 \u0446\u0435\u043b\u0430\u044f, \u0434\u0432\u0435 \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_1_02D));\n        assertEquals(\"\u043e\u0434\u043d\u0430 \u0446\u0435\u043b\u0430\u044f, \u043e\u0434\u0438\u043d\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_1_11D));\n        assertEquals(\"\u0434\u0432\u0435 \u0446\u0435\u043b\u044b\u0445, \u0434\u0432\u0435 \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_2_02D));\n        assertEquals(\"\u043f\u044f\u0442\u044c \u0446\u0435\u043b\u044b\u0445, \u043f\u044f\u0442\u044c \u0441\u043e\u0442\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER100.convert(V_5_05D));\n    }", "test_with_params": false, "test_target": "com.github.moneytostr.MoneyToStrTest#checkPER100", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "start_lineno": 106, "end_lineno": 174}]}
{"index": 294, "project_index": 157, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "rezidu\u0101\u013ci", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void rezidu\u0101\u013ci() {\n        loc\u012bt\u0101js.enableDiminutive = true;\n        loc\u012bt\u0101js.enablePrefixes = true;\n        loc\u012bt\u0101js.enableGuessing = true;\n        loc\u012bt\u0101js.enableAllGuesses = true;\n        loc\u012bt\u0101js.mekl\u0113tsalikte\u0146us = true;\n\n        Word m = loc\u012bt\u0101js.analyze(\"M.\");\n        <AssertPlaceHolder>;\n        assertEquals(AttributeNames.v_Abbreviation, m.wordforms.get(0).getValue(AttributeNames.i_PartOfSpeech));\n    }", "test_prefix_start_lineno": 969, "test_prefix_end_lineno": 980, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(m.isRecognized());", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void rezidu\u0101\u013ci() {\n        loc\u012bt\u0101js.enableDiminutive = true;\n        loc\u012bt\u0101js.enablePrefixes = true;\n        loc\u012bt\u0101js.enableGuessing = true;\n        loc\u012bt\u0101js.enableAllGuesses = true;\n        loc\u012bt\u0101js.mekl\u0113tsalikte\u0146us = true;\n\n        Word m = loc\u012bt\u0101js.analyze(\"M.\");\n    }", "original_test_prefix": "    @Test\n    public void rezidu\u0101\u013ci() {\n        loc\u012bt\u0101js.enableDiminutive = true;\n        loc\u012bt\u0101js.enablePrefixes = true;\n        loc\u012bt\u0101js.enableGuessing = true;\n        loc\u012bt\u0101js.enableAllGuesses = true;\n        loc\u012bt\u0101js.mekl\u0113tsalikte\u0146us = true;\n\n        Word m = loc\u012bt\u0101js.analyze(\"M.\");\n        assertTrue(m.isRecognized());\n        assertEquals(AttributeNames.v_Abbreviation, m.wordforms.get(0).getValue(AttributeNames.i_PartOfSpeech));\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#rezidu\u0101\u013ci", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 295, "project_index": 157, "class_index": 0, "test_index": 1, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana() {\n        List<Wordform> formas = loc\u012bt\u0101js.generateInflections(\"labi\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 2403, "test_prefix_end_lineno": 2407, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Analyzer.java", "focal_method": "    public ArrayList<Wordform> generateInflections(String lemma) {\n        return generateInflections(lemma, false);\n    }", "focal_method_start_lineno": 639, "focal_method_end_lineno": 641, "ground_truth_oracle": "assertEquals(1, formas.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana() {\n        List<Wordform> formas = loc\u012bt\u0101js.generateInflections(\"labi\");\n    }", "original_test_prefix": "    @Test\n    public void apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana() {\n        List<Wordform> formas = loc\u012bt\u0101js.generateInflections(\"labi\");\n        assertEquals(1, formas.size());\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#apst\u0101k\u013ca_v\u0101rdu_\u0123ener\u0113\u0161ana", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 296, "project_index": 158, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "LabelTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "test_name": "raw", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "test_prefix": "    @Test\n    void raw() {\n        <AssertPlaceHolder>;\n        assertEquals(\"<hula>\", Label.raw(\"<hula>\").serialized());\n        assertEquals(\"<hula<b>bold</b>**star**>\", Label.raw(\"<hula<b>bold</b>**star**>\").serialized());\n        assertEquals(\"<hula<b>bold</b>>\", Label.raw(\"<hula**bold**>\").serialized());\n    }", "test_prefix_start_lineno": 119, "test_prefix_end_lineno": 125, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/SimpleLabel.java", "focal_method": "    public String serialized() {\n        return html ? (\"<\" + value + \">\") : (\"\\\"\" + quoted() + \"\\\"\");\n    }", "focal_method_start_lineno": 37, "focal_method_end_lineno": 39, "ground_truth_oracle": "assertEquals(\"\\\"hula\\\"\", Label.raw(\"hula\").serialized());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void raw() {\n    }", "original_test_prefix": "    @Test\n    void raw() {\n        assertEquals(\"\\\"hula\\\"\", Label.raw(\"hula\").serialized());\n        assertEquals(\"<hula>\", Label.raw(\"<hula>\").serialized());\n        assertEquals(\"<hula<b>bold</b>**star**>\", Label.raw(\"<hula<b>bold</b>**star**>\").serialized());\n        assertEquals(\"<hula<b>bold</b>>\", Label.raw(\"<hula**bold**>\").serialized());\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.LabelTest#raw", "test_setup_list": []}
{"index": 297, "project_index": 158, "class_index": 1, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "RecordsTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java", "test_name": "turn", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/RecordsTest.java", "test_prefix": "    @Test\n    void turn() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 55, "test_prefix_end_lineno": 58, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Records.java", "focal_method": "    public static String turn(String... records) {\n        return \"{\" + String.join(\"|\", records) + \"}\";\n    }", "focal_method_start_lineno": 57, "focal_method_end_lineno": 59, "ground_truth_oracle": "assertEquals(\"{<tag>label|hula}\", Records.turn(Records.rec(\"tag\", \"label\"), \"hula\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void turn() {\n    }", "original_test_prefix": "    @Test\n    void turn() {\n        assertEquals(\"{<tag>label|hula}\", Records.turn(Records.rec(\"tag\", \"label\"), \"hula\"));\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.RecordsTest#turn", "test_setup_list": []}
{"index": 298, "project_index": 159, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "RpcConnectionManagerTest", "class_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_name": "testGetAll", "test_setup_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 91, "test_prefix_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_prefix": "    @Test\n    public void testGetAll() {\n        cm.add(getAConn());\n        cm.add(getAConn());\n        cm.add(getAConn());\n        cm.add(getAConn());\n        Map<String, List<Connection>> conns = cm.getAll();\n        <AssertPlaceHolder>;\n        Assert.assertEquals(4, conns.get(poolKey).size());\n    }", "test_prefix_start_lineno": 158, "test_prefix_end_lineno": 167, "focal_method_file_path": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focal_method": "    @Override\n    public Map<String, List<Connection>> getAll() {\n        Map<String, List<Connection>> allConnections = new HashMap<String, List<Connection>>();\n        for (Map.Entry<String, RunStateRecordedFutureTask<ConnectionPool>> entry : this\n            .getConnPools().entrySet()) {\n            ConnectionPool pool = FutureTaskUtil.getFutureTaskResult(entry.getValue(), logger);\n            if (null != pool) {\n                allConnections.put(entry.getKey(), pool.getAll());\n            }\n        }\n        return allConnections;\n    }", "focal_method_start_lineno": 249, "focal_method_end_lineno": 260, "ground_truth_oracle": "Assert.assertEquals(1, conns.size());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testGetAll() {\n        cm.add(getAConn());\n        cm.add(getAConn());\n        cm.add(getAConn());\n        cm.add(getAConn());\n        Map<String, List<Connection>> conns = cm.getAll();\n    }", "original_test_prefix": "    @Test\n    public void testGetAll() {\n        cm.add(getAConn());\n        cm.add(getAConn());\n        cm.add(getAConn());\n        cm.add(getAConn());\n        Map<String, List<Connection>> conns = cm.getAll();\n        Assert.assertEquals(1, conns.size());\n        Assert.assertEquals(4, conns.get(poolKey).size());\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.inner.connection.RpcConnectionManagerTest#testGetAll", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "start_lineno": 81, "end_lineno": 91}]}
{"index": 299, "project_index": 160, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AOptionTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AOptionTest.java", "test_name": "testSome", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AOptionTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/AOptionTest.java", "test_prefix": "    @Test\n    public void testSome() throws Exception {\n        final AOption<String> s = AOption.some(\"a\");\n        <AssertPlaceHolder>;\n        assertEquals(\"a\", s.getOrElse(\"b\"));\n\n        assertEquals (\"a\", s.getOrElseEval (new AFunction0NoThrow<String> () {\n            @Override public String apply () {\n                throw new RuntimeException (\"failure\");\n            }\n        }));\n        assertEquals (\"a\", s.getOrElseThrow (new AFunction0NoThrow<Exception> () {\n            @Override public Exception apply () {\n                return new Exception (\"failure\");\n            }\n        }));\n\n        assertEquals(true, s.isDefined());\n        assertEquals(false, s.isEmpty());\n\n        assertEquals(AOption.<String>none(), s.filter(new APredicate<String, Exception>() {\n            @Override public boolean apply(String o) throws Exception {\n                return false;\n            }\n        }));\n        assertEquals(s, s.filter(new APredicate<String, Exception>() {\n            @Override public boolean apply(String o) throws Exception {\n                return true;\n            }\n        }));\n\n        assertEquals(AOption.some(1), s.map(new AFunction1<String, Integer, Exception>() {\n            @Override public Integer apply(String param) throws Exception {\n                return param.length();\n            }\n        }));\n    }", "test_prefix_start_lineno": 18, "test_prefix_end_lineno": 54, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AOption.java", "focal_method": "    public abstract T get();", "focal_method_start_lineno": 74, "focal_method_end_lineno": 74, "ground_truth_oracle": "assertEquals(\"a\", s.get());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testSome() throws Exception {\n        final AOption<String> s = AOption.some(\"a\");\n    }", "original_test_prefix": "    @Test\n    public void testSome() throws Exception {\n        final AOption<String> s = AOption.some(\"a\");\n        assertEquals(\"a\", s.get());\n        assertEquals(\"a\", s.getOrElse(\"b\"));\n\n        assertEquals (\"a\", s.getOrElseEval (new AFunction0NoThrow<String> () {\n            @Override public String apply () {\n                throw new RuntimeException (\"failure\");\n            }\n        }));\n        assertEquals (\"a\", s.getOrElseThrow (new AFunction0NoThrow<Exception> () {\n            @Override public Exception apply () {\n                return new Exception (\"failure\");\n            }\n        }));\n\n        assertEquals(true, s.isDefined());\n        assertEquals(false, s.isEmpty());\n\n        assertEquals(AOption.<String>none(), s.filter(new APredicate<String, Exception>() {\n            @Override public boolean apply(String o) throws Exception {\n                return false;\n            }\n        }));\n        assertEquals(s, s.filter(new APredicate<String, Exception>() {\n            @Override public boolean apply(String o) throws Exception {\n                return true;\n            }\n        }));\n\n        assertEquals(AOption.some(1), s.map(new AFunction1<String, Integer, Exception>() {\n            @Override public Integer apply(String param) throws Exception {\n                return param.length();\n            }\n        }));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.AOptionTest#testSome", "test_setup_list": []}
{"index": 300, "project_index": 161, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleStateTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_name": "estimated_cost_is_zero_when_solved", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_prefix": "  @Test\n  public void estimated_cost_is_zero_when_solved()\n  {\n    PuzzleState s = new PuzzleState(getSolvedPuzzle());\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 118, "test_prefix_end_lineno": 123, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focal_method": "  public int getEstimatedCost()\n  {\n    return puzzle.getDistanceToGoal();\n  }", "focal_method_start_lineno": 109, "focal_method_end_lineno": 112, "ground_truth_oracle": "assertEquals(0, s.getEstimatedCost());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void estimated_cost_is_zero_when_solved()\n  {\n    PuzzleState s = new PuzzleState(getSolvedPuzzle());\n  }", "original_test_prefix": "  @Test\n  public void estimated_cost_is_zero_when_solved()\n  {\n    PuzzleState s = new PuzzleState(getSolvedPuzzle());\n    assertEquals(0, s.getEstimatedCost());\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleStateTest#estimated_cost_is_zero_when_solved", "test_setup_list": []}
{"index": 301, "project_index": 162, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "RpcConnectionManagerTest", "class_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_name": "testAddWconnithPoolKey_multiPoolKey", "test_setup_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 91, "test_prefix_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_prefix": "    @Test\n    public void testAddWconnithPoolKey_multiPoolKey() throws InterruptedException {\n        Connection conn = getAConn();\n        cm.add(conn, poolKey);\n        cm.add(conn, \"GROUP1\");\n        cm.add(conn, \"GROUP2\");\n        <AssertPlaceHolder>;\n        Assert.assertEquals(1, cm.count(\"GROUP1\"));\n        Assert.assertEquals(1, cm.count(\"GROUP2\"));\n\n        cm.remove(conn, poolKey);\n        Assert.assertTrue(conn.isFine());\n        Assert.assertTrue(cm.get(poolKey) == null);\n        Assert.assertTrue(cm.get(\"GROUP1\").isFine());\n        Assert.assertTrue(cm.get(\"GROUP2\").isFine());\n\n        cm.remove(conn, \"GROUP1\");\n        cm.remove(conn, \"GROUP2\");\n        Thread.sleep(1000);\n        Assert.assertFalse(conn.isFine());\n        Assert.assertTrue(cm.get(poolKey) == null);\n        Assert.assertTrue(cm.get(\"GROUP1\") == null);\n        Assert.assertTrue(cm.get(\"GROUP2\") == null);\n    }", "test_prefix_start_lineno": 117, "test_prefix_end_lineno": 140, "focal_method_file_path": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focal_method": "    @Override\n    public int count(String poolKey) {\n        if (StringUtils.isBlank(poolKey)) {\n            return 0;\n        }\n        ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey));\n        if (null != pool) {\n            return pool.size();\n        } else {\n            return 0;\n        }\n    }", "focal_method_start_lineno": 370, "focal_method_end_lineno": 381, "ground_truth_oracle": "Assert.assertEquals(1, cm.count(poolKey));", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testAddWconnithPoolKey_multiPoolKey() throws InterruptedException {\n        Connection conn = getAConn();\n        cm.add(conn, poolKey);\n        cm.add(conn, \"GROUP1\");\n        cm.add(conn, \"GROUP2\");\n    }", "original_test_prefix": "    @Test\n    public void testAddWconnithPoolKey_multiPoolKey() throws InterruptedException {\n        Connection conn = getAConn();\n        cm.add(conn, poolKey);\n        cm.add(conn, \"GROUP1\");\n        cm.add(conn, \"GROUP2\");\n        Assert.assertEquals(1, cm.count(poolKey));\n        Assert.assertEquals(1, cm.count(\"GROUP1\"));\n        Assert.assertEquals(1, cm.count(\"GROUP2\"));\n\n        cm.remove(conn, poolKey);\n        Assert.assertTrue(conn.isFine());\n        Assert.assertTrue(cm.get(poolKey) == null);\n        Assert.assertTrue(cm.get(\"GROUP1\").isFine());\n        Assert.assertTrue(cm.get(\"GROUP2\").isFine());\n\n        cm.remove(conn, \"GROUP1\");\n        cm.remove(conn, \"GROUP2\");\n        Thread.sleep(1000);\n        Assert.assertFalse(conn.isFine());\n        Assert.assertTrue(cm.get(poolKey) == null);\n        Assert.assertTrue(cm.get(\"GROUP1\") == null);\n        Assert.assertTrue(cm.get(\"GROUP2\") == null);\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.inner.connection.RpcConnectionManagerTest#testAddWconnithPoolKey_multiPoolKey", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "start_lineno": 81, "end_lineno": 91}]}
{"index": 302, "project_index": 163, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "TrackedListTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedListTest.java", "test_name": "testAddIndexNotificationThree", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedListTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/TrackedListTest.java", "test_prefix": "  @Test\n  public void testAddIndexNotificationThree() {\n    final ODocument doc = new ODocument();\n    ORecordInternal.unsetDirty(doc);\n    <AssertPlaceHolder>;\n\n    final OTrackedList<String> trackedList = new OTrackedList<String>(doc);\n    trackedList.add(\"value1\");\n    trackedList.add(\"value2\");\n\n    ORecordInternal.unsetDirty(doc);\n    Assert.assertFalse(doc.isDirty());\n\n    trackedList.setInternalStatus(ORecordElement.STATUS.UNMARSHALLING);\n\n    final ORef<Boolean> changed = new ORef<Boolean>(false);\n\n    trackedList.addChangeListener(new OMultiValueChangeListener<Integer, String>() {\n      public void onAfterRecordChanged(final OMultiValueChangeEvent<Integer, String> event) {\n        changed.value = true;\n      }\n    });\n\n    trackedList.add(1, \"value3\");\n    Assert.assertEquals(changed.value, Boolean.FALSE);\n    Assert.assertFalse(doc.isDirty());\n  }", "test_prefix_start_lineno": 234, "test_prefix_end_lineno": 260, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focal_method": "  public boolean isDirty() {\n    return _dirty;\n  }", "focal_method_start_lineno": 156, "focal_method_end_lineno": 158, "ground_truth_oracle": "Assert.assertFalse(doc.isDirty());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testAddIndexNotificationThree() {\n    final ODocument doc = new ODocument();\n    ORecordInternal.unsetDirty(doc);\n  }", "original_test_prefix": "  @Test\n  public void testAddIndexNotificationThree() {\n    final ODocument doc = new ODocument();\n    ORecordInternal.unsetDirty(doc);\n    Assert.assertFalse(doc.isDirty());\n\n    final OTrackedList<String> trackedList = new OTrackedList<String>(doc);\n    trackedList.add(\"value1\");\n    trackedList.add(\"value2\");\n\n    ORecordInternal.unsetDirty(doc);\n    Assert.assertFalse(doc.isDirty());\n\n    trackedList.setInternalStatus(ORecordElement.STATUS.UNMARSHALLING);\n\n    final ORef<Boolean> changed = new ORef<Boolean>(false);\n\n    trackedList.addChangeListener(new OMultiValueChangeListener<Integer, String>() {\n      public void onAfterRecordChanged(final OMultiValueChangeEvent<Integer, String> event) {\n        changed.value = true;\n      }\n    });\n\n    trackedList.add(1, \"value3\");\n    Assert.assertEquals(changed.value, Boolean.FALSE);\n    Assert.assertFalse(doc.isDirty());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.record.TrackedListTest#testAddIndexNotificationThree", "test_setup_list": []}
{"index": 303, "project_index": 163, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "etl", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OETLCSVExtractorTest", "class_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_name": "testFloatWithinQuotesAndCommaAsDecimalSeparator", "test_setup_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_setup": "", "test_setup_start_lineno": 47, "test_setup_end_lineno": 57, "test_prefix_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_prefix": "  @Test\n  public void testFloatWithinQuotesAndCommaAsDecimalSeparator() {\n    String cfgJson = \"{source: { content: { value: 'firstNumber\\n\\\"10,78\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n    <AssertPlaceHolder>;\n    ODocument doc = res.get(0);\n\n    assertThat(doc.<Float>field(\"firstNumber\")).isEqualTo(10.78f);\n\n  }", "test_prefix_start_lineno": 162, "test_prefix_end_lineno": 174, "focal_method_file_path": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focal_method": "  public void execute() {\n    configure();\n    begin();\n    runExtractorAndPipeline();\n    end();\n  }", "focal_method_start_lineno": 172, "focal_method_end_lineno": 177, "ground_truth_oracle": "assertFalse(res.isEmpty());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testFloatWithinQuotesAndCommaAsDecimalSeparator() {\n    String cfgJson = \"{source: { content: { value: 'firstNumber\\n\\\"10,78\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n  }", "original_test_prefix": "  @Test\n  public void testFloatWithinQuotesAndCommaAsDecimalSeparator() {\n    String cfgJson = \"{source: { content: { value: 'firstNumber\\n\\\"10,78\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n\n    assertThat(doc.<Float>field(\"firstNumber\")).isEqualTo(10.78f);\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.etl.extractor.OETLCSVExtractorTest#testFloatWithinQuotesAndCommaAsDecimalSeparator", "test_setup_list": []}
{"index": 304, "project_index": 163, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "CharSerializerTest", "class_path": "core/src/test/java/com/orientechnologies/common/serialization/types/CharSerializerTest.java", "test_name": "testSerialize", "test_setup_file_path": "core/src/test/java/com/orientechnologies/common/serialization/types/CharSerializerTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    charSerializer = new OCharSerializer();\n  }", "test_setup_start_lineno": 39, "test_setup_end_lineno": 42, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/common/serialization/types/CharSerializerTest.java", "test_prefix": "  @Test\n  public void testSerialize() {\n    charSerializer.serialize(OBJECT, stream, 0);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 49, "test_prefix_end_lineno": 53, "focal_method_file_path": "core/src/main/java/com/orientechnologies/common/serialization/types/OCharSerializer.java", "focal_method": "  public Character deserialize(final byte[] stream, final int startPosition) {\n    return deserializeLiteral(stream, startPosition);\n  }", "focal_method_start_lineno": 56, "focal_method_end_lineno": 58, "ground_truth_oracle": "Assert.assertEquals(charSerializer.deserialize(stream, 0), OBJECT);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testSerialize() {\n    charSerializer.serialize(OBJECT, stream, 0);\n  }", "original_test_prefix": "  @Test\n  public void testSerialize() {\n    charSerializer.serialize(OBJECT, stream, 0);\n    Assert.assertEquals(charSerializer.deserialize(stream, 0), OBJECT);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.common.serialization.types.CharSerializerTest#testSerialize", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    charSerializer = new OCharSerializer();\n  }", "start_lineno": 39, "end_lineno": 42}]}
{"index": 305, "project_index": 163, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "BlueprintsTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/blueprints/BlueprintsTest.java", "test_name": "testPersistentRIDAfterCommit", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/blueprints/BlueprintsTest.java", "test_setup": "@BeforeClass\n  public static void before() {\n    graph = new OrientGraph(DB_URL);\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 26, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/blueprints/BlueprintsTest.java", "test_prefix": "  @Test\n  public void testPersistentRIDAfterCommit() {\n    Vertex v = graph.addVertex(null);\n    v.setProperty(\"test\", \"value\");\n    graph.commit();\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 171, "test_prefix_end_lineno": 178, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/id/ORID.java", "focal_method": "  boolean isPersistent();", "focal_method_start_lineno": 48, "focal_method_end_lineno": 48, "ground_truth_oracle": "Assert.assertTrue(((ORID) v.getId()).isPersistent());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void testPersistentRIDAfterCommit() {\n    Vertex v = graph.addVertex(null);\n    v.setProperty(\"test\", \"value\");\n    graph.commit();\n\n  }", "original_test_prefix": "  @Test\n  public void testPersistentRIDAfterCommit() {\n    Vertex v = graph.addVertex(null);\n    v.setProperty(\"test\", \"value\");\n    graph.commit();\n\n    Assert.assertTrue(((ORID) v.getId()).isPersistent());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.blueprints.BlueprintsTest#testPersistentRIDAfterCommit", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void before() {\n    graph = new OrientGraph(DB_URL);\n  }", "start_lineno": 23, "end_lineno": 26}]}
{"index": 306, "project_index": 163, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCompositeIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_name": "testDocumentToIndexMapValueSuccessful", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeMethod() {\n    compositeIndex = new OCompositeIndexDefinition(\"testClass\");\n\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER));\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fTwo\", OType.STRING));\n  }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testDocumentToIndexMapValueSuccessful() {\n    final ODocument document = new ODocument();\n\n    final Map<String, String> stringMap = new HashMap<String, String>();\n    stringMap.put(\"key1\", \"val1\");\n    stringMap.put(\"key2\", \"val2\");\n\n    document.field(\"fOne\", 12);\n    document.field(\"fTwo\", stringMap);\n\n    final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition(\"testCollectionClass\");\n\n    compositeIndexDefinition.addIndex(new OPropertyIndexDefinition(\"testCollectionClass\", \"fOne\", OType.INTEGER));\n    compositeIndexDefinition.addIndex(\n        new OPropertyMapIndexDefinition(\"testCollectionClass\", \"fTwo\", OType.STRING, OPropertyMapIndexDefinition.INDEX_BY.KEY));\n\n    final Object result = compositeIndexDefinition.getDocumentValueToIndex(document);\n    final Collection<OCompositeKey> collectionResult = (Collection<OCompositeKey>) result;\n\n    <AssertPlaceHolder>;\n    Assert.assertTrue(collectionResult.contains(new OCompositeKey(12, \"key1\")));\n    Assert.assertTrue(collectionResult.contains(new OCompositeKey(12, \"key2\")));\n  }", "test_prefix_start_lineno": 296, "test_prefix_end_lineno": 319, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinition.java", "focal_method": "  public Object getDocumentValueToIndex(final ODocument iDocument) {\n    final List<OCompositeKey> compositeKeys = new ArrayList<OCompositeKey>(10);\n    final OCompositeKey firstKey = new OCompositeKey();\n    boolean containsCollection = false;\n\n    compositeKeys.add(firstKey);\n\n    for (final OIndexDefinition indexDefinition : indexDefinitions) {\n      final Object result = indexDefinition.getDocumentValueToIndex(iDocument);\n\n      if (result == null && isNullValuesIgnored())\n        return null;\n\n      //for empty collections we add null key in index\n      if (result instanceof Collection && ((Collection) result).isEmpty() && isNullValuesIgnored())\n        return null;\n\n      containsCollection = addKey(firstKey, compositeKeys, containsCollection, result);\n    }\n\n    if (!containsCollection)\n      return firstKey;\n\n    return compositeKeys;\n  }", "focal_method_start_lineno": 133, "focal_method_end_lineno": 157, "ground_truth_oracle": "Assert.assertEquals(collectionResult.size(), 2);", "ground_truth_oracle_lineno": 11, "test_prefix_wo_placeholder": "  @Test\n  public void testDocumentToIndexMapValueSuccessful() {\n    final ODocument document = new ODocument();\n\n    final Map<String, String> stringMap = new HashMap<String, String>();\n    stringMap.put(\"key1\", \"val1\");\n    stringMap.put(\"key2\", \"val2\");\n\n    document.field(\"fOne\", 12);\n    document.field(\"fTwo\", stringMap);\n\n    final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition(\"testCollectionClass\");\n\n    compositeIndexDefinition.addIndex(new OPropertyIndexDefinition(\"testCollectionClass\", \"fOne\", OType.INTEGER));\n    compositeIndexDefinition.addIndex(\n        new OPropertyMapIndexDefinition(\"testCollectionClass\", \"fTwo\", OType.STRING, OPropertyMapIndexDefinition.INDEX_BY.KEY));\n\n    final Object result = compositeIndexDefinition.getDocumentValueToIndex(document);\n    final Collection<OCompositeKey> collectionResult = (Collection<OCompositeKey>) result;\n\n  }", "original_test_prefix": "  @Test\n  public void testDocumentToIndexMapValueSuccessful() {\n    final ODocument document = new ODocument();\n\n    final Map<String, String> stringMap = new HashMap<String, String>();\n    stringMap.put(\"key1\", \"val1\");\n    stringMap.put(\"key2\", \"val2\");\n\n    document.field(\"fOne\", 12);\n    document.field(\"fTwo\", stringMap);\n\n    final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition(\"testCollectionClass\");\n\n    compositeIndexDefinition.addIndex(new OPropertyIndexDefinition(\"testCollectionClass\", \"fOne\", OType.INTEGER));\n    compositeIndexDefinition.addIndex(\n        new OPropertyMapIndexDefinition(\"testCollectionClass\", \"fTwo\", OType.STRING, OPropertyMapIndexDefinition.INDEX_BY.KEY));\n\n    final Object result = compositeIndexDefinition.getDocumentValueToIndex(document);\n    final Collection<OCompositeKey> collectionResult = (Collection<OCompositeKey>) result;\n\n    Assert.assertEquals(collectionResult.size(), 2);\n    Assert.assertTrue(collectionResult.contains(new OCompositeKey(12, \"key1\")));\n    Assert.assertTrue(collectionResult.contains(new OCompositeKey(12, \"key2\")));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OCompositeIndexDefinitionTest#testDocumentToIndexMapValueSuccessful", "test_setup_list": [{"test_setup": "@Before\n  public void beforeMethod() {\n    compositeIndex = new OCompositeIndexDefinition(\"testClass\");\n\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER));\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fTwo\", OType.STRING));\n  }", "start_lineno": 21, "end_lineno": 27}]}
{"index": 307, "project_index": 163, "class_index": 4, "test_index": 1, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCompositeIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_name": "testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeMethod() {\n    compositeIndex = new OCompositeIndexDefinition(\"testClass\");\n\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER));\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fTwo\", OType.STRING));\n  }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport() {\n    final ODocument document = new ODocument();\n\n    document.field(\"fOne\", Collections.emptyList());\n    document.field(\"fTwo\", 12);\n\n    final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition(\"testCollectionClass\");\n\n    compositeIndexDefinition.addIndex(new OPropertyListIndexDefinition(\"testCollectionClass\", \"fOne\", OType.INTEGER));\n    compositeIndexDefinition.addIndex(new OPropertyIndexDefinition(\"testCollectionClass\", \"fTwo\", OType.INTEGER));\n    compositeIndexDefinition.setNullValuesIgnored(false);\n\n    final Object result = compositeIndexDefinition.getDocumentValueToIndex(document);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 392, "test_prefix_end_lineno": 407, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focal_method": "  public OCompositeKey(final Object... keys) {\n    this.keys = new ArrayList<Object>(keys.length);\n    this.comparator = ODefaultComparator.INSTANCE;\n\n    for (final Object key : keys)\n      addKey(key);\n  }", "focal_method_start_lineno": 50, "focal_method_end_lineno": 56, "ground_truth_oracle": "Assert.assertEquals(result, Arrays.asList(new OCompositeKey(null, 12)));", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "  @Test\n  public void testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport() {\n    final ODocument document = new ODocument();\n\n    document.field(\"fOne\", Collections.emptyList());\n    document.field(\"fTwo\", 12);\n\n    final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition(\"testCollectionClass\");\n\n    compositeIndexDefinition.addIndex(new OPropertyListIndexDefinition(\"testCollectionClass\", \"fOne\", OType.INTEGER));\n    compositeIndexDefinition.addIndex(new OPropertyIndexDefinition(\"testCollectionClass\", \"fTwo\", OType.INTEGER));\n    compositeIndexDefinition.setNullValuesIgnored(false);\n\n    final Object result = compositeIndexDefinition.getDocumentValueToIndex(document);\n  }", "original_test_prefix": "  @Test\n  public void testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport() {\n    final ODocument document = new ODocument();\n\n    document.field(\"fOne\", Collections.emptyList());\n    document.field(\"fTwo\", 12);\n\n    final OCompositeIndexDefinition compositeIndexDefinition = new OCompositeIndexDefinition(\"testCollectionClass\");\n\n    compositeIndexDefinition.addIndex(new OPropertyListIndexDefinition(\"testCollectionClass\", \"fOne\", OType.INTEGER));\n    compositeIndexDefinition.addIndex(new OPropertyIndexDefinition(\"testCollectionClass\", \"fTwo\", OType.INTEGER));\n    compositeIndexDefinition.setNullValuesIgnored(false);\n\n    final Object result = compositeIndexDefinition.getDocumentValueToIndex(document);\n    Assert.assertEquals(result, Arrays.asList(new OCompositeKey(null, 12)));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OCompositeIndexDefinitionTest#testDocumentToIndexCollectionValueEmptyTwoNullValuesSupport", "test_setup_list": [{"test_setup": "@Before\n  public void beforeMethod() {\n    compositeIndex = new OCompositeIndexDefinition(\"testClass\");\n\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER));\n    compositeIndex.addIndex(new OPropertyIndexDefinition(\"testClass\", \"fTwo\", OType.STRING));\n  }", "start_lineno": 21, "end_lineno": 27}]}
{"index": 308, "project_index": 163, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "distributed", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OClusterRepairInfoTaskTest", "class_path": "distributed/src/test/java/com/orientechnologies/orient/server/distributed/impl/task/OClusterRepairInfoTaskTest.java", "test_name": "testSerialization", "test_setup_file_path": "distributed/src/test/java/com/orientechnologies/orient/server/distributed/impl/task/OClusterRepairInfoTaskTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "distributed/src/test/java/com/orientechnologies/orient/server/distributed/impl/task/OClusterRepairInfoTaskTest.java", "test_prefix": "  @Test\n  public void testSerialization() throws IOException {\n    OClusterRepairInfoTask from = new OClusterRepairInfoTask(100);\n    OClusterRepairInfoTask to = new OClusterRepairInfoTask();\n    serializeDeserialize(from, to);\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 10, "test_prefix_end_lineno": 17, "focal_method_file_path": "distributed/src/main/java/com/orientechnologies/orient/server/distributed/impl/task/OClusterRepairInfoTask.java", "focal_method": "  public int getClusterId() {\n    return clusterId;\n  }", "focal_method_start_lineno": 116, "focal_method_end_lineno": 118, "ground_truth_oracle": "Assert.assertEquals(from.getClusterId(), to.getClusterId());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void testSerialization() throws IOException {\n    OClusterRepairInfoTask from = new OClusterRepairInfoTask(100);\n    OClusterRepairInfoTask to = new OClusterRepairInfoTask();\n    serializeDeserialize(from, to);\n\n  }", "original_test_prefix": "  @Test\n  public void testSerialization() throws IOException {\n    OClusterRepairInfoTask from = new OClusterRepairInfoTask(100);\n    OClusterRepairInfoTask to = new OClusterRepairInfoTask();\n    serializeDeserialize(from, to);\n\n    Assert.assertEquals(from.getClusterId(), to.getClusterId());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.distributed.impl.task.OClusterRepairInfoTaskTest#testSerialization", "test_setup_list": []}
{"index": 309, "project_index": 163, "class_index": 6, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "SQLCreateVertexAndEdgeTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/SQLCreateVertexAndEdgeTest.java", "test_name": "testNewParser", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/SQLCreateVertexAndEdgeTest.java", "test_setup": "@Before\n  public void before(){\n    OCommandManager.instance().registerExecutor(OCommandScript.class, OCommandExecutorScript.class);\n  }", "test_setup_start_lineno": 56, "test_setup_end_lineno": 59, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/SQLCreateVertexAndEdgeTest.java", "test_prefix": "  @Test\n  public void testNewParser() {\n    ODocument v1 = database.command(new OCommandSQL(\"create vertex\")).execute();\n\n    <AssertPlaceHolder>;\n\n    ORID vid = v1.getIdentity();\n\n    database.command(new OCommandSQL(\"create edge from \" + vid + \" to \" + vid)).execute();\n\n    database.command(new OCommandSQL(\"create edge E from \" + vid + \" to \" + vid)).execute();\n\n    database.command(new OCommandSQL(\"create edge from \" + vid + \" to \" + vid + \" set foo = 'bar'\")).execute();\n\n    database.command(new OCommandSQL(\"create edge E from \" + vid + \" to \" + vid + \" set bar = 'foo'\")).execute();\n\n  }", "test_prefix_start_lineno": 168, "test_prefix_end_lineno": 184, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  public String getClassName() {\n    if (_className == null)\n      fetchClassName();\n\n    return _className;\n  }", "focal_method_start_lineno": 2371, "focal_method_end_lineno": 2376, "ground_truth_oracle": "Assert.assertEquals(v1.getClassName(), OrientVertexType.CLASS_NAME);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testNewParser() {\n    ODocument v1 = database.command(new OCommandSQL(\"create vertex\")).execute();\n\n  }", "original_test_prefix": "  @Test\n  public void testNewParser() {\n    ODocument v1 = database.command(new OCommandSQL(\"create vertex\")).execute();\n\n    Assert.assertEquals(v1.getClassName(), OrientVertexType.CLASS_NAME);\n\n    ORID vid = v1.getIdentity();\n\n    database.command(new OCommandSQL(\"create edge from \" + vid + \" to \" + vid)).execute();\n\n    database.command(new OCommandSQL(\"create edge E from \" + vid + \" to \" + vid)).execute();\n\n    database.command(new OCommandSQL(\"create edge from \" + vid + \" to \" + vid + \" set foo = 'bar'\")).execute();\n\n    database.command(new OCommandSQL(\"create edge E from \" + vid + \" to \" + vid + \" set bar = 'foo'\")).execute();\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.SQLCreateVertexAndEdgeTest#testNewParser", "test_setup_list": [{"test_setup": "@Before\n  public void before(){\n    OCommandManager.instance().registerExecutor(OCommandScript.class, OCommandExecutorScript.class);\n  }", "start_lineno": 56, "end_lineno": 59}]}
{"index": 310, "project_index": 163, "class_index": 7, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "RemoteQuerySupportTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java", "test_name": "testQueryEmbeddedMap", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java", "test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.CLASS_MINIMUM_CLUSTERS.setValue(1);\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteQuerySupportTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    session = orientDB.open(RemoteQuerySupportTest.class.getSimpleName(), \"admin\", \"admin\");\n    session.createClass(\"Some\");\n    oldPageSize = QUERY_REMOTE_RESULTSET_PAGE_SIZE.getValueAsInteger();\n    QUERY_REMOTE_RESULTSET_PAGE_SIZE.setValue(10);\n  }", "test_setup_start_lineno": 50, "test_setup_end_lineno": 64, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/query/RemoteQuerySupportTest.java", "test_prefix": "  @Test\n  public void testQueryEmbeddedMap() {\n    ODocument doc = new ODocument(\"Some\");\n    doc.setProperty(\"prop\", \"value\");\n    ODocument emb = new ODocument();\n    emb.setProperty(\"one\", \"value\");\n    Map<String, ODocument> map = new HashMap<>();\n    map.put(\"key\", emb);\n    doc.setProperty(\"map\", map, OType.EMBEDDEDMAP);\n    session.save(doc);\n    OResultSet res = session.query(\"select map from Some\");\n\n    OResult item = res.next();\n    <AssertPlaceHolder>;\n    assertEquals(((Map<String, OResult>) item.getProperty(\"map\")).size(), 1);\n    assertEquals(((Map<String, OResult>) item.getProperty(\"map\")).get(\"key\").getProperty(\"one\"), \"value\");\n  }", "test_prefix_start_lineno": 205, "test_prefix_end_lineno": 221, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focal_method": "  <T> T getProperty(String name);", "focal_method_start_lineno": 29, "focal_method_end_lineno": 29, "ground_truth_oracle": "assertNotNull(item.getProperty(\"map\"));", "ground_truth_oracle_lineno": 10, "test_prefix_wo_placeholder": "  @Test\n  public void testQueryEmbeddedMap() {\n    ODocument doc = new ODocument(\"Some\");\n    doc.setProperty(\"prop\", \"value\");\n    ODocument emb = new ODocument();\n    emb.setProperty(\"one\", \"value\");\n    Map<String, ODocument> map = new HashMap<>();\n    map.put(\"key\", emb);\n    doc.setProperty(\"map\", map, OType.EMBEDDEDMAP);\n    session.save(doc);\n    OResultSet res = session.query(\"select map from Some\");\n\n    OResult item = res.next();\n  }", "original_test_prefix": "  @Test\n  public void testQueryEmbeddedMap() {\n    ODocument doc = new ODocument(\"Some\");\n    doc.setProperty(\"prop\", \"value\");\n    ODocument emb = new ODocument();\n    emb.setProperty(\"one\", \"value\");\n    Map<String, ODocument> map = new HashMap<>();\n    map.put(\"key\", emb);\n    doc.setProperty(\"map\", map, OType.EMBEDDEDMAP);\n    session.save(doc);\n    OResultSet res = session.query(\"select map from Some\");\n\n    OResult item = res.next();\n    assertNotNull(item.getProperty(\"map\"));\n    assertEquals(((Map<String, OResult>) item.getProperty(\"map\")).size(), 1);\n    assertEquals(((Map<String, OResult>) item.getProperty(\"map\")).get(\"key\").getProperty(\"one\"), \"value\");\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.query.RemoteQuerySupportTest#testQueryEmbeddedMap", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.CLASS_MINIMUM_CLUSTERS.setValue(1);\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteQuerySupportTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    session = orientDB.open(RemoteQuerySupportTest.class.getSimpleName(), \"admin\", \"admin\");\n    session.createClass(\"Some\");\n    oldPageSize = QUERY_REMOTE_RESULTSET_PAGE_SIZE.getValueAsInteger();\n    QUERY_REMOTE_RESULTSET_PAGE_SIZE.setValue(10);\n  }", "start_lineno": 50, "end_lineno": 64}]}
{"index": 311, "project_index": 164, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "WildcardsTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "test_name": "testMatchesAgainstWildcards", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "test_prefix": "    @Test\n    public void testMatchesAgainstWildcards() throws Exception {\n        <AssertPlaceHolder>;\n        assertFalse(Wildcards.matches(\"abcdefg\", \"a*d?g?\"));\n    }", "test_prefix_start_lineno": 51, "test_prefix_end_lineno": 55, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/util/Wildcards.java", "focal_method": "    public static boolean matches(final String text, final String wildcard) {\n        String pattern = wildcard.replace(\"?\", \"\\\\w\").replace(\"*\", \"\\\\w*\");\n        return (text != null && text.matches(pattern));\n    }", "focal_method_start_lineno": 42, "focal_method_end_lineno": 45, "ground_truth_oracle": "assertTrue(Wildcards.matches(\"abcdefg\", \"a*d??g\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testMatchesAgainstWildcards() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testMatchesAgainstWildcards() throws Exception {\n        assertTrue(Wildcards.matches(\"abcdefg\", \"a*d??g\"));\n        assertFalse(Wildcards.matches(\"abcdefg\", \"a*d?g?\"));\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.util.WildcardsTest#testMatchesAgainstWildcards", "test_setup_list": []}
{"index": 312, "project_index": 164, "class_index": 1, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "JsonWriterTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/json/JsonWriterTest.java", "test_name": "testSubDirectoryCreation", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/json/JsonWriterTest.java", "test_setup": "@Before\n    public void init() throws IOException {\n        file = folder.newFile();\n    }", "test_setup_start_lineno": 64, "test_setup_end_lineno": 67, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/json/JsonWriterTest.java", "test_prefix": "    @Test\n    public void testSubDirectoryCreation() throws Exception {\n        File f = new File(new File(folder.getRoot(), \"sub1\"), \"sub2\");\n        Job job = job();\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 69, "test_prefix_end_lineno": 74, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/json/JsonWriter.java", "focal_method": "    public final File getCoverallsFile() {\n        return coverallsFile;\n    }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 71, "ground_truth_oracle": "assertTrue(new JsonWriter(job, f).getCoverallsFile().getParentFile().isDirectory());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testSubDirectoryCreation() throws Exception {\n        File f = new File(new File(folder.getRoot(), \"sub1\"), \"sub2\");\n        Job job = job();\n    }", "original_test_prefix": "    @Test\n    public void testSubDirectoryCreation() throws Exception {\n        File f = new File(new File(folder.getRoot(), \"sub1\"), \"sub2\");\n        Job job = job();\n        assertTrue(new JsonWriter(job, f).getCoverallsFile().getParentFile().isDirectory());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.json.JsonWriterTest#testSubDirectoryCreation", "test_setup_list": [{"test_setup": "@Before\n    public void init() throws IOException {\n        file = folder.newFile();\n    }", "start_lineno": 64, "end_lineno": 67}]}
{"index": 313, "project_index": 164, "class_index": 2, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "TravisTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest.java", "test_name": "testGetBranch", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest.java", "test_prefix": "    @Test\n    public void testGetBranch() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 70, "test_prefix_end_lineno": 73, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/Travis.java", "focal_method": "    @Override\n    public String getBranch() {\n        return getProperty(TRAVIS_BRANCH);\n    }", "focal_method_start_lineno": 64, "focal_method_end_lineno": 67, "ground_truth_oracle": "assertEquals(\"master\", new Travis(env()).getBranch());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetBranch() {\n    }", "original_test_prefix": "    @Test\n    public void testGetBranch() {\n        assertEquals(\"master\", new Travis(env()).getBranch());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.TravisTest#testGetBranch", "test_setup_list": []}
{"index": 314, "project_index": 165, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "BatchPollProcessorTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java", "test_name": "testGetSetAttributeInjector", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.processor = new BatchPollProcessor();\n\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.mockAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n\n        this.polledObjects = new LinkedList<>();\n        this.polled001 = Mockito.mock(TestClass001.class);\n        this.polledObjects.add(this.polled001);\n\n        this.mockObjectQueryInfo001 = Mockito.mock(ObjectQueryInfo.class);\n        this.objectName001 = Mockito.mock(ObjectName.class);\n        this.attributeNames001 = new HashSet<>(Arrays.asList(\"x-att1-x\", \"x-att2-x\"));\n        this.attributeSetters001 = new HashMap<>();\n        this.queryAttributeMap = new HashMap<>();\n        this.resultAttributeMap = new HashMap<>();\n\n        this.attributeSetters001.put(\"x-att1-x\", TestClass001.class.getMethod(\"setStringValue\", String.class));\n        this.attributeSetters001.put(\"x-att2-x\", TestClass001.class.getMethod(\"setIntValue\", int.class));\n\n        this.queryAttributeMap.put(this.objectName001, Arrays.asList(\"x-att1-x\", \"x-att2-x\"));\n        this.resultAttributeMap.put(this.objectName001,\n                Arrays.asList(new Attribute(\"x-att1-x\", \"x-string-value-x\"), new Attribute(\"x-att2-x\", 11)));\n\n        Mockito.when(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001))\n                .thenReturn(this.mockObjectQueryInfo001);\n        Mockito.when(this.mockObjectQueryInfo001.getTarget()).thenReturn(this.polled001);\n        Mockito.when(this.mockObjectQueryInfo001.getObjectName()).thenReturn(this.objectName001);\n        Mockito.when(this.mockObjectQueryInfo001.getAttributeNames()).thenReturn(this.attributeNames001);\n        Mockito.when(this.mockObjectQueryInfo001.getAttributeSetters()).thenReturn(this.attributeSetters001);\n\n        Mockito.when(this.mockAccessConnection\n                .batchQueryAttributes(this.createAttributeMapMatcher(this.queryAttributeMap)))\n                .thenReturn(this.resultAttributeMap);\n    }", "test_setup_start_lineno": 64, "test_setup_end_lineno": 102, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/BatchPollProcessorTest.java", "test_prefix": "    @Test\n    public void testGetSetAttributeInjector() throws Exception {\n        <AssertPlaceHolder>;\n        assertNotSame(this.mockAttributeInjector, this.processor.getAttributeInjector());\n\n        this.processor.setAttributeInjector(this.mockAttributeInjector);\n        assertSame(this.mockAttributeInjector, this.processor.getAttributeInjector());\n    }", "test_prefix_start_lineno": 109, "test_prefix_end_lineno": 116, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/BatchPollProcessor.java", "focal_method": "    public AttributeInjector getAttributeInjector() {\n        return attributeInjector;\n    }", "focal_method_start_lineno": 46, "focal_method_end_lineno": 48, "ground_truth_oracle": "assertNotNull(this.processor.getAttributeInjector());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetAttributeInjector() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetAttributeInjector() throws Exception {\n        assertNotNull(this.processor.getAttributeInjector());\n        assertNotSame(this.mockAttributeInjector, this.processor.getAttributeInjector());\n\n        this.processor.setAttributeInjector(this.mockAttributeInjector);\n        assertSame(this.mockAttributeInjector, this.processor.getAttributeInjector());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.BatchPollProcessorTest#testGetSetAttributeInjector", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.processor = new BatchPollProcessor();\n\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.mockAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n\n        this.polledObjects = new LinkedList<>();\n        this.polled001 = Mockito.mock(TestClass001.class);\n        this.polledObjects.add(this.polled001);\n\n        this.mockObjectQueryInfo001 = Mockito.mock(ObjectQueryInfo.class);\n        this.objectName001 = Mockito.mock(ObjectName.class);\n        this.attributeNames001 = new HashSet<>(Arrays.asList(\"x-att1-x\", \"x-att2-x\"));\n        this.attributeSetters001 = new HashMap<>();\n        this.queryAttributeMap = new HashMap<>();\n        this.resultAttributeMap = new HashMap<>();\n\n        this.attributeSetters001.put(\"x-att1-x\", TestClass001.class.getMethod(\"setStringValue\", String.class));\n        this.attributeSetters001.put(\"x-att2-x\", TestClass001.class.getMethod(\"setIntValue\", int.class));\n\n        this.queryAttributeMap.put(this.objectName001, Arrays.asList(\"x-att1-x\", \"x-att2-x\"));\n        this.resultAttributeMap.put(this.objectName001,\n                Arrays.asList(new Attribute(\"x-att1-x\", \"x-string-value-x\"), new Attribute(\"x-att2-x\", 11)));\n\n        Mockito.when(this.mockObjectQueryPreparer.prepareObjectQuery(this.polled001))\n                .thenReturn(this.mockObjectQueryInfo001);\n        Mockito.when(this.mockObjectQueryInfo001.getTarget()).thenReturn(this.polled001);\n        Mockito.when(this.mockObjectQueryInfo001.getObjectName()).thenReturn(this.objectName001);\n        Mockito.when(this.mockObjectQueryInfo001.getAttributeNames()).thenReturn(this.attributeNames001);\n        Mockito.when(this.mockObjectQueryInfo001.getAttributeSetters()).thenReturn(this.attributeSetters001);\n\n        Mockito.when(this.mockAccessConnection\n                .batchQueryAttributes(this.createAttributeMapMatcher(this.queryAttributeMap)))\n                .thenReturn(this.resultAttributeMap);\n    }", "start_lineno": 64, "end_lineno": 102}]}
{"index": 315, "project_index": 166, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "ReflectionUtilsTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/ReflectionUtilsTest.java", "test_name": "testSetFieldValue", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/ReflectionUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/ReflectionUtilsTest.java", "test_prefix": "    @Test\n    public void testSetFieldValue() {\n        SetFieldTest setFieldTest = new SetFieldTest();\n        <AssertPlaceHolder>;\n\n        Field field = getField(SetFieldTest.class, \"injectField\", Object.class);\n        assertNotNull(field);\n\n        setFieldValue(setFieldTest, field, 154915782);\n        assertEquals(154915782, setFieldTest.injectField);\n    }", "test_prefix_start_lineno": 89, "test_prefix_end_lineno": 99, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/ReflectionUtils.java", "focal_method": "    public static void setFieldValue(Object instance, Field field, Object value) {\n        field.setAccessible(true);\n        setFieldValue0(instance, field, value);\n    }", "focal_method_start_lineno": 60, "focal_method_end_lineno": 63, "ground_truth_oracle": "assertNull(setFieldTest.injectField);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testSetFieldValue() {\n        SetFieldTest setFieldTest = new SetFieldTest();\n    }", "original_test_prefix": "    @Test\n    public void testSetFieldValue() {\n        SetFieldTest setFieldTest = new SetFieldTest();\n        assertNull(setFieldTest.injectField);\n\n        Field field = getField(SetFieldTest.class, \"injectField\", Object.class);\n        assertNotNull(field);\n\n        setFieldValue(setFieldTest, field, 154915782);\n        assertEquals(154915782, setFieldTest.injectField);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.ReflectionUtilsTest#testSetFieldValue", "test_setup_list": []}
{"index": 316, "project_index": 166, "class_index": 1, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "TagUtilsTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/TagUtilsTest.java", "test_name": "parseTags", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/TagUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/TagUtilsTest.java", "test_prefix": "    @Test\n    public void parseTags() {\n        Map<String, String> result = TagUtils.parseTags(\"a,b=10,c=20\");\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 13, "test_prefix_end_lineno": 18, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/TagUtils.java", "focal_method": "    public static Map<String, String> parseTags(String s) {\n        Map<String, String> result = new HashMap<>();\n        if (\"\".equals(s)) {\n            return result;\n        }\n        for (String keyValue : s.split(\",\")) {\n            if (keyValue.contains(\"=\")) {\n                String[] array = keyValue.split(\"=\");\n                result.put(array[0], array[1]);\n            } else {\n                result.put(keyValue, \"\");\n            }\n        }\n\n        return result;\n    }", "focal_method_start_lineno": 42, "focal_method_end_lineno": 57, "ground_truth_oracle": "assertEquals(toMap(\"a\", \"\", \"b\", \"10\", \"c\", \"20\"), result);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void parseTags() {\n        Map<String, String> result = TagUtils.parseTags(\"a,b=10,c=20\");\n\n    }", "original_test_prefix": "    @Test\n    public void parseTags() {\n        Map<String, String> result = TagUtils.parseTags(\"a,b=10,c=20\");\n\n        assertEquals(toMap(\"a\", \"\", \"b\", \"10\", \"c\", \"20\"), result);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.TagUtilsTest#parseTags", "test_setup_list": []}
{"index": 317, "project_index": 166, "class_index": 2, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "RegistryTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "test_name": "testGetWorkers_getMemberWorkers_notEnoughWorkersFound", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "test_prefix": "    @Test(expected = IllegalStateException.class)\n    public void testGetWorkers_getMemberWorkers_notEnoughWorkersFound() {\n        SimulatorAddress agentAddress = addAgent();\n        registry.addWorkers(newWorkerParametersList(agentAddress, 2, \"member\"));\n        registry.addWorkers(newWorkerParametersList(agentAddress, 2, \"javaclient\"));\n        <AssertPlaceHolder>;\n\n        registry.getWorkerAddresses(TargetType.MEMBER, 3);\n    }", "test_prefix_start_lineno": 243, "test_prefix_end_lineno": 251, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java", "focal_method": "    public int workerCount() {\n        return workers.size();\n    }", "focal_method_start_lineno": 181, "focal_method_end_lineno": 183, "ground_truth_oracle": "assertEquals(4, registry.workerCount());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test(expected = IllegalStateException.class)\n    public void testGetWorkers_getMemberWorkers_notEnoughWorkersFound() {\n        SimulatorAddress agentAddress = addAgent();\n        registry.addWorkers(newWorkerParametersList(agentAddress, 2, \"member\"));\n        registry.addWorkers(newWorkerParametersList(agentAddress, 2, \"javaclient\"));\n    }", "original_test_prefix": "    @Test(expected = IllegalStateException.class)\n    public void testGetWorkers_getMemberWorkers_notEnoughWorkersFound() {\n        SimulatorAddress agentAddress = addAgent();\n        registry.addWorkers(newWorkerParametersList(agentAddress, 2, \"member\"));\n        registry.addWorkers(newWorkerParametersList(agentAddress, 2, \"javaclient\"));\n        assertEquals(4, registry.workerCount());\n\n        registry.getWorkerAddresses(TargetType.MEMBER, 3);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.coordinator.registry.RegistryTest#testGetWorkers_getMemberWorkers_notEnoughWorkersFound", "test_setup_list": []}
{"index": 318, "project_index": 167, "class_index": 0, "test_index": 0, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "DevUtilTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_name": "testCopyFile", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }\n\n@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "test_setup_start_lineno": 56, "test_setup_end_lineno": 59, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_prefix": "    @Test\n    public void testCopyFile() throws Exception {\n        File configFile = new File(srcDir, \"config.xml\");\n        Files.write(configFile.toPath(), \"temp\".getBytes());\n\n        util.copyFile(configFile, srcDir, targetDir, \"server.xml\");\n\n        File targetFile = new File(targetDir, \"server.xml\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 338, "test_prefix_end_lineno": 347, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focal_method": "    public void copyFile(File fileChanged, File srcDir, File targetDir, String targetFileName) throws IOException {\n        File targetResource = getTargetFile(fileChanged, srcDir, targetDir, targetFileName);\n\n        try {\n            FileUtils.copyFile(fileChanged, targetResource);\n            info(\"Copied file: \" + fileChanged.getCanonicalPath() + \" to: \" + targetResource.getCanonicalPath());\n        } catch (FileNotFoundException ex) {\n            debug(\"Failed to copy file: \" + fileChanged.getCanonicalPath());\n        } catch (Exception ex) {\n            debug(ex);\n        }\n    }", "focal_method_start_lineno": 4093, "focal_method_end_lineno": 4104, "ground_truth_oracle": "assertTrue(targetFile.exists());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testCopyFile() throws Exception {\n        File configFile = new File(srcDir, \"config.xml\");\n        Files.write(configFile.toPath(), \"temp\".getBytes());\n\n        util.copyFile(configFile, srcDir, targetDir, \"server.xml\");\n\n        File targetFile = new File(targetDir, \"server.xml\");\n    }", "original_test_prefix": "    @Test\n    public void testCopyFile() throws Exception {\n        File configFile = new File(srcDir, \"config.xml\");\n        Files.write(configFile.toPath(), \"temp\".getBytes());\n\n        util.copyFile(configFile, srcDir, targetDir, \"server.xml\");\n\n        File targetFile = new File(targetDir, \"server.xml\");\n        assertTrue(targetFile.exists());\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.DevUtilTest#testCopyFile", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }", "start_lineno": 56, "end_lineno": 59}, {"test_setup": "@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "start_lineno": 61, "end_lineno": 68}]}
{"index": 319, "project_index": 167, "class_index": 1, "test_index": 0, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "DevUtilPrepareDockerfileTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilPrepareDockerfileTest.java", "test_name": "testDisableOpenJ9SCC_lowercase", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilPrepareDockerfileTest.java", "test_setup": "@Before\n    public void setUp() throws IOException {\n        util = getNewDevUtil(null);\n    }", "test_setup_start_lineno": 37, "test_setup_end_lineno": 40, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilPrepareDockerfileTest.java", "test_prefix": "    @Test\n    public void testDisableOpenJ9SCC_lowercase() throws Exception {\n        List<String> dockerfileLines = new ArrayList<String>();\n        List<String> expectedDockerfileLines = new ArrayList<String>();\n        dockerfileLines.add(\"FROM openliberty/open-liberty\");\n        dockerfileLines.add(\"run configure.sh\");\n        util.disableOpenJ9SCC(dockerfileLines);\n        expectedDockerfileLines.add(\"FROM openliberty/open-liberty\");\n        expectedDockerfileLines.add(\"ENV OPENJ9_SCC=false\");\n        expectedDockerfileLines.add(\"run configure.sh\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 226, "test_prefix_end_lineno": 237, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focal_method": "    protected void disableOpenJ9SCC(List<String> dockerfileLines) {\n        final String RUN_CONFIGURE_COMMAND_LOWERCASE = \"run configure.sh\";\n        for (int i=0; i<dockerfileLines.size(); i++) {\n            String line = dockerfileLines.get(i);\n            // RUN command is case insensitive, so use lowercase matching.\n            if (line.toLowerCase().equals(RUN_CONFIGURE_COMMAND_LOWERCASE)) {\n                debug(\"Detected RUN configure.sh command.  Skipping OpenJ9 Shared Class Cache.\");\n                dockerfileLines.add(i, \"ENV OPENJ9_SCC=false\");\n                return;\n            }\n        }\n    }", "focal_method_start_lineno": 1029, "focal_method_end_lineno": 1040, "ground_truth_oracle": "assertEquals(expectedDockerfileLines, dockerfileLines);", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "    @Test\n    public void testDisableOpenJ9SCC_lowercase() throws Exception {\n        List<String> dockerfileLines = new ArrayList<String>();\n        List<String> expectedDockerfileLines = new ArrayList<String>();\n        dockerfileLines.add(\"FROM openliberty/open-liberty\");\n        dockerfileLines.add(\"run configure.sh\");\n        util.disableOpenJ9SCC(dockerfileLines);\n        expectedDockerfileLines.add(\"FROM openliberty/open-liberty\");\n        expectedDockerfileLines.add(\"ENV OPENJ9_SCC=false\");\n        expectedDockerfileLines.add(\"run configure.sh\");\n    }", "original_test_prefix": "    @Test\n    public void testDisableOpenJ9SCC_lowercase() throws Exception {\n        List<String> dockerfileLines = new ArrayList<String>();\n        List<String> expectedDockerfileLines = new ArrayList<String>();\n        dockerfileLines.add(\"FROM openliberty/open-liberty\");\n        dockerfileLines.add(\"run configure.sh\");\n        util.disableOpenJ9SCC(dockerfileLines);\n        expectedDockerfileLines.add(\"FROM openliberty/open-liberty\");\n        expectedDockerfileLines.add(\"ENV OPENJ9_SCC=false\");\n        expectedDockerfileLines.add(\"run configure.sh\");\n        assertEquals(expectedDockerfileLines, dockerfileLines);\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.DevUtilPrepareDockerfileTest#testDisableOpenJ9SCC_lowercase", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws IOException {\n        util = getNewDevUtil(null);\n    }", "start_lineno": 37, "end_lineno": 40}]}
{"index": 320, "project_index": 168, "class_index": 0, "test_index": 0, "user_name": "1337joe", "repo_name": "cubesensors-for-java", "sub_repos": [], "sub_repo": "", "commit_sha": "f3ba432d36b744e68b916682d7ef24afaff447f8", "build_system": "mvn", "class_name": "TestPressure", "class_path": "src/test/java/com/w3asel/cubesensors/api/v1/format/TestPressure.java", "test_name": "testToInHg", "test_setup_file_path": "src/test/java/com/w3asel/cubesensors/api/v1/format/TestPressure.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/w3asel/cubesensors/api/v1/format/TestPressure.java", "test_prefix": "    @Test\n    public void testToInHg() {\n        String expected, actual;\n\n        expected = \"23.7\";\n        actual = Pressure.toInHg(802);\n        <AssertPlaceHolder>;\n\n        expected = \"23.7\";\n        actual = Pressure.toInHg(802, 1);\n        Assert.assertEquals(expected, actual);\n\n        expected = \"23.683\";\n        actual = Pressure.toInHg(802, 3);\n        Assert.assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 24, "test_prefix_end_lineno": 39, "focal_method_file_path": "src/main/java/com/w3asel/cubesensors/api/v1/format/Pressure.java", "focal_method": "    public static String toInHg(final int apiValue) {\n        return toInHg(apiValue, 1);\n    }", "focal_method_start_lineno": 32, "focal_method_end_lineno": 34, "ground_truth_oracle": "Assert.assertEquals(expected, actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testToInHg() {\n        String expected, actual;\n\n        expected = \"23.7\";\n        actual = Pressure.toInHg(802);\n    }", "original_test_prefix": "    @Test\n    public void testToInHg() {\n        String expected, actual;\n\n        expected = \"23.7\";\n        actual = Pressure.toInHg(802);\n        Assert.assertEquals(expected, actual);\n\n        expected = \"23.7\";\n        actual = Pressure.toInHg(802, 1);\n        Assert.assertEquals(expected, actual);\n\n        expected = \"23.683\";\n        actual = Pressure.toInHg(802, 3);\n        Assert.assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "com.w3asel.cubesensors.api.v1.format.TestPressure#testToInHg", "test_setup_list": []}
{"index": 321, "project_index": 169, "class_index": 0, "test_index": 0, "user_name": "basis-technology-corp", "repo_name": "tcl-regex-java", "sub_repos": [], "sub_repo": "", "commit_sha": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62", "build_system": "mvn", "class_name": "ColorMapTest", "class_path": "src/test/java/com/basistech/tclre/ColorMapTest.java", "test_name": "testVerySimple", "test_setup_file_path": "src/test/java/com/basistech/tclre/ColorMapTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/basistech/tclre/ColorMapTest.java", "test_prefix": "    @Test\n    public void testVerySimple() throws Exception {\n        ColorMap cm = new ColorMap(compiler);\n        cm.subcolor('a');\n        cm.okcolors(nfa);\n        <AssertPlaceHolder>;\n        verify(compiler, never()).getNfa();\n        verify(nfa, never()).newarc(anyInt(), anyShort(), (State)anyObject(), (State)anyObject());\n    }", "test_prefix_start_lineno": 71, "test_prefix_end_lineno": 79, "focal_method_file_path": "src/main/java/com/basistech/tclre/ColorMap.java", "focal_method": "    short subcolor(int c) throws RegexException {\n        return subcolor(c, 1);\n    }", "focal_method_start_lineno": 194, "focal_method_end_lineno": 196, "ground_truth_oracle": "assertEquals(1, cm.subcolor('a'));", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testVerySimple() throws Exception {\n        ColorMap cm = new ColorMap(compiler);\n        cm.subcolor('a');\n        cm.okcolors(nfa);\n    }", "original_test_prefix": "    @Test\n    public void testVerySimple() throws Exception {\n        ColorMap cm = new ColorMap(compiler);\n        cm.subcolor('a');\n        cm.okcolors(nfa);\n        assertEquals(1, cm.subcolor('a'));\n        verify(compiler, never()).getNfa();\n        verify(nfa, never()).newarc(anyInt(), anyShort(), (State)anyObject(), (State)anyObject());\n    }", "test_with_params": false, "test_target": "com.basistech.tclre.ColorMapTest#testVerySimple", "test_setup_list": []}
{"index": 322, "project_index": 170, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "Draft_6455Test", "class_path": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java", "test_name": "createFramesText", "test_setup_file_path": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java", "test_prefix": "  @Test\n  public void createFramesText() throws Exception {\n    Draft_6455 draft_6455 = new Draft_6455();\n    TextFrame curframe = new TextFrame();\n    curframe.setPayload(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(\"Test0\")));\n    curframe.setTransferemasked(false);\n    List<Framedata> createdFrame = draft_6455.createFrames(\"Test0\", false);\n    <AssertPlaceHolder>;\n    assertEquals(curframe, createdFrame.get(0));\n    curframe = new TextFrame();\n    curframe.setPayload(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(\"Test0\")));\n    curframe.setTransferemasked(true);\n    createdFrame = draft_6455.createFrames(\"Test0\", true);\n    assertEquals(1, createdFrame.size());\n    assertEquals(curframe, createdFrame.get(0));\n  }", "test_prefix_start_lineno": 537, "test_prefix_end_lineno": 552, "focal_method_file_path": "src/main/java/org/java_websocket/drafts/Draft_6455.java", "focal_method": "  @Override\n  public List<Framedata> createFrames(String text, boolean mask) {\n    TextFrame curframe = new TextFrame();\n    curframe.setPayload(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(text)));\n    curframe.setTransferemasked(mask);\n    try {\n      curframe.isValid();\n    } catch (InvalidDataException e) {\n      throw new NotSendableException(e);\n    }\n    return Collections.singletonList((Framedata) curframe);\n  }", "focal_method_start_lineno": 767, "focal_method_end_lineno": 778, "ground_truth_oracle": "assertEquals(1, createdFrame.size());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void createFramesText() throws Exception {\n    Draft_6455 draft_6455 = new Draft_6455();\n    TextFrame curframe = new TextFrame();\n    curframe.setPayload(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(\"Test0\")));\n    curframe.setTransferemasked(false);\n    List<Framedata> createdFrame = draft_6455.createFrames(\"Test0\", false);\n  }", "original_test_prefix": "  @Test\n  public void createFramesText() throws Exception {\n    Draft_6455 draft_6455 = new Draft_6455();\n    TextFrame curframe = new TextFrame();\n    curframe.setPayload(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(\"Test0\")));\n    curframe.setTransferemasked(false);\n    List<Framedata> createdFrame = draft_6455.createFrames(\"Test0\", false);\n    assertEquals(1, createdFrame.size());\n    assertEquals(curframe, createdFrame.get(0));\n    curframe = new TextFrame();\n    curframe.setPayload(ByteBuffer.wrap(Charsetfunctions.utf8Bytes(\"Test0\")));\n    curframe.setTransferemasked(true);\n    createdFrame = draft_6455.createFrames(\"Test0\", true);\n    assertEquals(1, createdFrame.size());\n    assertEquals(curframe, createdFrame.get(0));\n  }", "test_with_params": false, "test_target": "org.java_websocket.drafts.Draft_6455Test#createFramesText", "test_setup_list": []}
{"index": 323, "project_index": 171, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "BasicURLNormalizerTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_name": "testDontFixMangledQueryString", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/BasicURLNormalizerTest.java", "test_prefix": "    @Test\n    public void testDontFixMangledQueryString() throws MalformedURLException {\n        URLFilter urlFilter = createFilter(true, false, queryParamsToFilter);\n        URL testSourceUrl = new URL(\"http://google.com\");\n        String testUrl = \"http://google.com&d=4&good=true\";\n        String expectedResult = \"http://google.com&d=4&good=true\";\n        String normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), testUrl);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 188, "test_prefix_end_lineno": 196, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focal_method": "    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter);", "focal_method_start_lineno": 35, "focal_method_end_lineno": 35, "ground_truth_oracle": "assertEquals(\"Failed to filter query string\", expectedResult, normalizedUrl);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testDontFixMangledQueryString() throws MalformedURLException {\n        URLFilter urlFilter = createFilter(true, false, queryParamsToFilter);\n        URL testSourceUrl = new URL(\"http://google.com\");\n        String testUrl = \"http://google.com&d=4&good=true\";\n        String expectedResult = \"http://google.com&d=4&good=true\";\n        String normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), testUrl);\n    }", "original_test_prefix": "    @Test\n    public void testDontFixMangledQueryString() throws MalformedURLException {\n        URLFilter urlFilter = createFilter(true, false, queryParamsToFilter);\n        URL testSourceUrl = new URL(\"http://google.com\");\n        String testUrl = \"http://google.com&d=4&good=true\";\n        String expectedResult = \"http://google.com&d=4&good=true\";\n        String normalizedUrl = urlFilter.filter(testSourceUrl, new Metadata(), testUrl);\n        assertEquals(\"Failed to filter query string\", expectedResult, normalizedUrl);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.BasicURLNormalizerTest#testDontFixMangledQueryString", "test_setup_list": []}
{"index": 324, "project_index": 172, "class_index": 0, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "websocket", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "WebSocketResponseHandlerTest", "class_path": "websocket/src/test/java/org/nanohttpd/junit/protocols/websockets/WebSocketResponseHandlerTest.java", "test_name": "testMissingKeyReturnsErrorResponse", "test_setup_file_path": "websocket/src/test/java/org/nanohttpd/junit/protocols/websockets/WebSocketResponseHandlerTest.java", "test_setup": "@Before\n    public void setUp() {\n        // Be careful.\n        // This does NOT call any constructors, instead, directly creates\n        // the object in memory. I wasted 3 fucking hours attempting to\n        // debug this. ~ LordFokas\n        this.nanoWebSocketServer = Mockito.mock(MockedWSD.class, Mockito.CALLS_REAL_METHODS);\n        // this could have been avoided if Mockito had a way to call fucking\n        // constructors!!\n        this.nanoWebSocketServer.initialize();\n\n        this.headers = new HashMap<String, String>();\n        this.headers.put(\"upgrade\", \"websocket\");\n        this.headers.put(\"connection\", \"Upgrade\");\n        this.headers.put(\"sec-websocket-key\", \"x3JJHMbDL1EzLkh9GBhXDw==\");\n        this.headers.put(\"sec-websocket-protocol\", \"chat, superchat\");\n        this.headers.put(\"sec-websocket-version\", \"13\");\n\n        when(this.session.getHeaders()).thenReturn(this.headers);\n    }", "test_setup_start_lineno": 126, "test_setup_end_lineno": 145, "test_prefix_file_path": "websocket/src/test/java/org/nanohttpd/junit/protocols/websockets/WebSocketResponseHandlerTest.java", "test_prefix": "    @Test\n    public void testMissingKeyReturnsErrorResponse() {\n        this.headers.remove(\"sec-websocket-key\");\n\n        Response handshakeResponse = this.nanoWebSocketServer.handle(this.session);\n\n        <AssertPlaceHolder>;\n        assertEquals(Status.BAD_REQUEST, handshakeResponse.getStatus());\n    }", "test_prefix_start_lineno": 165, "test_prefix_end_lineno": 173, "focal_method_file_path": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java", "focal_method": "    public IStatus getStatus() {\n        return this.status;\n    }", "focal_method_start_lineno": 217, "focal_method_end_lineno": 219, "ground_truth_oracle": "assertNotNull(handshakeResponse);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testMissingKeyReturnsErrorResponse() {\n        this.headers.remove(\"sec-websocket-key\");\n\n        Response handshakeResponse = this.nanoWebSocketServer.handle(this.session);\n\n    }", "original_test_prefix": "    @Test\n    public void testMissingKeyReturnsErrorResponse() {\n        this.headers.remove(\"sec-websocket-key\");\n\n        Response handshakeResponse = this.nanoWebSocketServer.handle(this.session);\n\n        assertNotNull(handshakeResponse);\n        assertEquals(Status.BAD_REQUEST, handshakeResponse.getStatus());\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.protocols.websockets.WebSocketResponseHandlerTest#testMissingKeyReturnsErrorResponse", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        // Be careful.\n        // This does NOT call any constructors, instead, directly creates\n        // the object in memory. I wasted 3 fucking hours attempting to\n        // debug this. ~ LordFokas\n        this.nanoWebSocketServer = Mockito.mock(MockedWSD.class, Mockito.CALLS_REAL_METHODS);\n        // this could have been avoided if Mockito had a way to call fucking\n        // constructors!!\n        this.nanoWebSocketServer.initialize();\n\n        this.headers = new HashMap<String, String>();\n        this.headers.put(\"upgrade\", \"websocket\");\n        this.headers.put(\"connection\", \"Upgrade\");\n        this.headers.put(\"sec-websocket-key\", \"x3JJHMbDL1EzLkh9GBhXDw==\");\n        this.headers.put(\"sec-websocket-protocol\", \"chat, superchat\");\n        this.headers.put(\"sec-websocket-version\", \"13\");\n\n        when(this.session.getHeaders()).thenReturn(this.headers);\n    }", "start_lineno": 126, "end_lineno": 145}]}
{"index": 325, "project_index": 173, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "HostURLFilterTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_name": "testWithinDomain", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/HostURLFilterTest.java", "test_prefix": "    @Test\n    public void testWithinDomain() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(false, true);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n        <AssertPlaceHolder>;\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.anotherDomain.com/index.html\");\n        Assert.assertNull(filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://sub.sourcedomain.com/index.html\");\n        Assert.assertEquals(\"http://sub.sourcedomain.com/index.html\", filterResult);\n    }", "test_prefix_start_lineno": 94, "test_prefix_end_lineno": 109, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/host/HostURLFilter.java", "focal_method": "    @Override\n    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter) {\n        if (sourceUrl == null || (!ignoreOutsideHost && !ignoreOutsideDomain)) {\n            return urlToFilter;\n        }\n\n        URL tURL;\n        try {\n            tURL = new URL(urlToFilter);\n        } catch (MalformedURLException e1) {\n            return null;\n        }\n\n        String fromHost;\n        String fromDomain = null;\n        // Using identity comparison because URL.equals performs poorly\n        if (sourceUrl == previousSourceUrl) {\n            fromHost = previousSourceHost;\n            if (ignoreOutsideDomain) {\n                fromDomain = previousSourceDomain;\n            }\n        } else {\n            fromHost = sourceUrl.getHost();\n            if (ignoreOutsideDomain) {\n                fromDomain = PaidLevelDomain.getPLD(fromHost);\n            }\n            previousSourceHost = fromHost;\n            previousSourceDomain = fromDomain;\n            previousSourceUrl = sourceUrl;\n        }\n\n        // resolve the hosts\n        String toHost = tURL.getHost();\n\n        if (ignoreOutsideHost) {\n            if (toHost == null || !toHost.equalsIgnoreCase(fromHost)) {\n                return null;\n            }\n        }\n\n        if (ignoreOutsideDomain) {\n            String toDomain = PaidLevelDomain.getPLD(toHost);\n            if (toDomain == null || !toDomain.equals(fromDomain)) {\n                return null;\n            }\n        }\n\n        return urlToFilter;\n    }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 117, "ground_truth_oracle": "Assert.assertEquals(\"http://www.sourcedomain.com/index.html\", filterResult);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testWithinDomain() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(false, true);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n    }", "original_test_prefix": "    @Test\n    public void testWithinDomain() throws MalformedURLException {\n        HostURLFilter allAllowed = createFilter(false, true);\n        URL sourceURL = new URL(\"http://www.sourcedomain.com/index.html\");\n        Metadata metadata = new Metadata();\n\n        String filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.sourcedomain.com/index.html\");\n        Assert.assertEquals(\"http://www.sourcedomain.com/index.html\", filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://www.anotherDomain.com/index.html\");\n        Assert.assertNull(filterResult);\n        filterResult =\n                allAllowed.filter(sourceURL, metadata, \"http://sub.sourcedomain.com/index.html\");\n        Assert.assertEquals(\"http://sub.sourcedomain.com/index.html\", filterResult);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.HostURLFilterTest#testWithinDomain", "test_setup_list": []}
{"index": 326, "project_index": 174, "class_index": 0, "test_index": 0, "user_name": "redraiment", "repo_name": "jactiverecord", "sub_repos": [], "sub_repo": "", "commit_sha": "d051709c93204658e7f2cc96c9898201c7337269", "build_system": "mvn", "class_name": "SeqTest", "class_path": "src/test/java/me/zzp/util/SeqTest.java", "test_name": "testJoinListNull", "test_setup_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_prefix": "  @Test\n  public void testJoinListNull() {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 19, "test_prefix_end_lineno": 22, "focal_method_file_path": "src/main/java/me/zzp/util/Seq.java", "focal_method": "  public static String join(Collection<?> list, String delimiter) {\n    if (list == null || list.isEmpty()) {\n      return \"\";\n    }\n    if (delimiter == null) {\n      delimiter = \"\";\n    }\n\n    StringBuilder s = new StringBuilder();\n    boolean first = true;\n    for (Object e : list) {\n      if (first) {\n        first = false;\n      } else {\n        s.append(delimiter);\n      }\n      s.append(e);\n    }\n    return s.toString();\n  }", "focal_method_start_lineno": 83, "focal_method_end_lineno": 102, "ground_truth_oracle": "Assert.assertEquals(\"\", Seq.join(null, \"\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testJoinListNull() {\n  }", "original_test_prefix": "  @Test\n  public void testJoinListNull() {\n    Assert.assertEquals(\"\", Seq.join(null, \"\"));\n  }", "test_with_params": false, "test_target": "me.zzp.util.SeqTest#testJoinListNull", "test_setup_list": []}
{"index": 327, "project_index": 174, "class_index": 0, "test_index": 1, "user_name": "redraiment", "repo_name": "jactiverecord", "sub_repos": [], "sub_repo": "", "commit_sha": "d051709c93204658e7f2cc96c9898201c7337269", "build_system": "mvn", "class_name": "SeqTest", "class_path": "src/test/java/me/zzp/util/SeqTest.java", "test_name": "testAssignAt", "test_setup_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/me/zzp/util/SeqTest.java", "test_prefix": "  @Test\n  public void testAssignAt() {\n    int[] a = new int[5];\n    Seq.assignAt(a, Seq.array(0, 2, 3), 1, 3, 4);\n    Seq.assignAt(a, Seq.array(-1, -4), 5, 2);\n    <AssertPlaceHolder>;\n    \n    String[] s = new String[3];\n    Seq.assignAt(s, Seq.array(0, 2), \"a\", \"d\");\n    Seq.assignAt(s, Seq.array(-2, -1), \"b\", \"c\");\n    Assert.assertArrayEquals(Seq.array(\"a\", \"b\", \"c\"), s);\n  }", "test_prefix_start_lineno": 75, "test_prefix_end_lineno": 86, "focal_method_file_path": "src/main/java/me/zzp/util/Seq.java", "focal_method": "  public static int[] assignAt(int[] a, Integer[] indexes, int... values) {\n    if (indexes.length != values.length) {\n      throw new IllegalArgumentException(String.format(\"index.length(%d) != values.length(%d)\", indexes.length, values.length));\n    }\n    for (int i = 0; i < indexes.length; i++) {\n      int index = indexes[i];\n      if (0 <= index && index < a.length) {\n        a[index] = values[i];\n      } else if (-a.length <= index && index < 0) {\n        a[a.length + index] = values[i];\n      } else {\n        throw new ArrayIndexOutOfBoundsException(index);\n      }\n    }\n    return a;\n  }", "focal_method_start_lineno": 206, "focal_method_end_lineno": 221, "ground_truth_oracle": "Assert.assertArrayEquals(new int[] {1, 2, 3, 4, 5}, a);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void testAssignAt() {\n    int[] a = new int[5];\n    Seq.assignAt(a, Seq.array(0, 2, 3), 1, 3, 4);\n    Seq.assignAt(a, Seq.array(-1, -4), 5, 2);\n  }", "original_test_prefix": "  @Test\n  public void testAssignAt() {\n    int[] a = new int[5];\n    Seq.assignAt(a, Seq.array(0, 2, 3), 1, 3, 4);\n    Seq.assignAt(a, Seq.array(-1, -4), 5, 2);\n    Assert.assertArrayEquals(new int[] {1, 2, 3, 4, 5}, a);\n    \n    String[] s = new String[3];\n    Seq.assignAt(s, Seq.array(0, 2), \"a\", \"d\");\n    Seq.assignAt(s, Seq.array(-2, -1), \"b\", \"c\");\n    Assert.assertArrayEquals(Seq.array(\"a\", \"b\", \"c\"), s);\n  }", "test_with_params": false, "test_target": "me.zzp.util.SeqTest#testAssignAt", "test_setup_list": []}
{"index": 328, "project_index": 174, "class_index": 1, "test_index": 0, "user_name": "redraiment", "repo_name": "jactiverecord", "sub_repos": [], "sub_repo": "", "commit_sha": "d051709c93204658e7f2cc96c9898201c7337269", "build_system": "mvn", "class_name": "TSqlBuilderTest", "class_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_name": "testPaging", "test_setup_file_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_setup": "@BeforeClass\n  public static void setUpClass() {\n    sql = new TSqlBuilder();\n  }", "test_setup_start_lineno": 10, "test_setup_end_lineno": 13, "test_prefix_file_path": "src/test/java/me/zzp/ar/sql/TSqlBuilderTest.java", "test_prefix": "  @Test\n  public void testPaging() {\n    sql.select().from(\"users\").limit(10);\n    <AssertPlaceHolder>;\n    sql.select().from(\"users\").offset(10);\n    assertEquals(\"select * from users offset 10\", sql.toString());\n    sql.select().from(\"users\").limit(10).offset(20);\n    assertEquals(\"select * from users limit 10 offset 20\", sql.toString());\n    sql.select().from(\"users\").offset(20).limit(10);\n    assertEquals(\"select * from users limit 10 offset 20\", sql.toString());\n  }", "test_prefix_start_lineno": 56, "test_prefix_end_lineno": 66, "focal_method_file_path": "src/main/java/me/zzp/ar/sql/SqlBuilder.java", "focal_method": "  @Override\n  public String toString();", "focal_method_start_lineno": 34, "focal_method_end_lineno": 35, "ground_truth_oracle": "assertEquals(\"select * from users limit 10\", sql.toString());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testPaging() {\n    sql.select().from(\"users\").limit(10);\n  }", "original_test_prefix": "  @Test\n  public void testPaging() {\n    sql.select().from(\"users\").limit(10);\n    assertEquals(\"select * from users limit 10\", sql.toString());\n    sql.select().from(\"users\").offset(10);\n    assertEquals(\"select * from users offset 10\", sql.toString());\n    sql.select().from(\"users\").limit(10).offset(20);\n    assertEquals(\"select * from users limit 10 offset 20\", sql.toString());\n    sql.select().from(\"users\").offset(20).limit(10);\n    assertEquals(\"select * from users limit 10 offset 20\", sql.toString());\n  }", "test_with_params": false, "test_target": "me.zzp.ar.sql.TSqlBuilderTest#testPaging", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void setUpClass() {\n    sql = new TSqlBuilder();\n  }", "start_lineno": 10, "end_lineno": 13}]}
{"index": 329, "project_index": 175, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "DuplicateDictionaryIndexChangesTxTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/tx/DuplicateDictionaryIndexChangesTxTest.java", "test_name": "testDuplicateNullsOnCreate", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/tx/DuplicateDictionaryIndexChangesTxTest.java", "test_setup": "@BeforeClass\n  public static void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + DuplicateDictionaryIndexChangesTxTest.class.getSimpleName());\n  }\n\n@Before\n  public void beforeMethod() {\n    if (!db.isClosed())\n      db.drop();\n    db.create();\n    final OClass class_ = db.getMetadata().getSchema().createClass(\"Person\");\n    index = class_.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX);\n  }", "test_setup_start_lineno": 37, "test_setup_end_lineno": 40, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/tx/DuplicateDictionaryIndexChangesTxTest.java", "test_prefix": "  @Test\n  public void testDuplicateNullsOnCreate() {\n    db.begin();\n\n    final ODocument person1 = db.newInstance(\"Person\").save();\n    final ODocument person2 = db.newInstance(\"Person\").save();\n    final ODocument person3 = db.newInstance(\"Person\").save();\n\n    person1.field(\"name\", \"Name1\").save();\n    person2.field(\"name\", \"Name1\").save();\n\n    db.commit();\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(person3, index.get(null));\n  }", "test_prefix_start_lineno": 56, "test_prefix_end_lineno": 75, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java", "focal_method": "  T get(Object iKey);", "focal_method_start_lineno": 66, "focal_method_end_lineno": 66, "ground_truth_oracle": "Assert.assertEquals(person2, index.get(\"Name1\"));", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testDuplicateNullsOnCreate() {\n    db.begin();\n\n    final ODocument person1 = db.newInstance(\"Person\").save();\n    final ODocument person2 = db.newInstance(\"Person\").save();\n    final ODocument person3 = db.newInstance(\"Person\").save();\n\n    person1.field(\"name\", \"Name1\").save();\n    person2.field(\"name\", \"Name1\").save();\n\n    db.commit();\n\n  }", "original_test_prefix": "  @Test\n  public void testDuplicateNullsOnCreate() {\n    db.begin();\n\n    final ODocument person1 = db.newInstance(\"Person\").save();\n    final ODocument person2 = db.newInstance(\"Person\").save();\n    final ODocument person3 = db.newInstance(\"Person\").save();\n\n    person1.field(\"name\", \"Name1\").save();\n    person2.field(\"name\", \"Name1\").save();\n\n    db.commit();\n\n    Assert.assertEquals(person2, index.get(\"Name1\"));\n    Assert.assertEquals(person3, index.get(null));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.tx.DuplicateDictionaryIndexChangesTxTest#testDuplicateNullsOnCreate", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + DuplicateDictionaryIndexChangesTxTest.class.getSimpleName());\n  }", "start_lineno": 37, "end_lineno": 40}, {"test_setup": "@Before\n  public void beforeMethod() {\n    if (!db.isClosed())\n      db.drop();\n    db.create();\n    final OClass class_ = db.getMetadata().getSchema().createClass(\"Person\");\n    index = class_.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.DICTIONARY_HASH_INDEX);\n  }", "start_lineno": 47, "end_lineno": 54}]}
{"index": 330, "project_index": 175, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLSelectTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_name": "testMatches", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 180, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_prefix": "  @Test\n  public void testMatches() {\n    List<?> result = db.query(new OSQLSynchQuery<Object>(\n        \"select from foo where name matches '(?i)(^\\\\\\\\Qa\\\\\\\\E$)|(^\\\\\\\\Qname2\\\\\\\\E$)|(^\\\\\\\\Qname3\\\\\\\\E$)' and bar = 1\"));\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 711, "test_prefix_end_lineno": 716, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focal_method": "  @Override\n  public <RET extends List<?>> RET query(OQuery<?> iCommand, Object... iArgs) {\n    checkOpenness();\n    return internal.query(iCommand, iArgs);\n  }", "focal_method_start_lineno": 754, "focal_method_end_lineno": 758, "ground_truth_oracle": "assertEquals(result.size(), 1);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testMatches() {\n    List<?> result = db.query(new OSQLSynchQuery<Object>(\n        \"select from foo where name matches '(?i)(^\\\\\\\\Qa\\\\\\\\E$)|(^\\\\\\\\Qname2\\\\\\\\E$)|(^\\\\\\\\Qname3\\\\\\\\E$)' and bar = 1\"));\n  }", "original_test_prefix": "  @Test\n  public void testMatches() {\n    List<?> result = db.query(new OSQLSynchQuery<Object>(\n        \"select from foo where name matches '(?i)(^\\\\\\\\Qa\\\\\\\\E$)|(^\\\\\\\\Qname2\\\\\\\\E$)|(^\\\\\\\\Qname3\\\\\\\\E$)' and bar = 1\"));\n    assertEquals(result.size(), 1);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLSelectTest#testMatches", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "start_lineno": 51, "end_lineno": 180}]}
{"index": 331, "project_index": 175, "class_index": 1, "test_index": 1, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLSelectTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_name": "testParamWithMatches", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 180, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_prefix": "  @Test\n  public void testParamWithMatches() {\n\n    Map<String, Object> params = new HashMap<String, Object>();\n    params.put(\"param1\", \"adm.*\");\n    OSQLSynchQuery sql = new OSQLSynchQuery(\"select from OUser where name matches :param1\");\n    List<ODocument> results = db.query(sql, params);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 1004, "test_prefix_end_lineno": 1012, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focal_method": "  @Override\n  public <RET extends List<?>> RET query(OQuery<?> iCommand, Object... iArgs) {\n    checkOpenness();\n    return internal.query(iCommand, iArgs);\n  }", "focal_method_start_lineno": 754, "focal_method_end_lineno": 758, "ground_truth_oracle": "assertEquals(results.size(), 1);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testParamWithMatches() {\n\n    Map<String, Object> params = new HashMap<String, Object>();\n    params.put(\"param1\", \"adm.*\");\n    OSQLSynchQuery sql = new OSQLSynchQuery(\"select from OUser where name matches :param1\");\n    List<ODocument> results = db.query(sql, params);\n  }", "original_test_prefix": "  @Test\n  public void testParamWithMatches() {\n\n    Map<String, Object> params = new HashMap<String, Object>();\n    params.put(\"param1\", \"adm.*\");\n    OSQLSynchQuery sql = new OSQLSynchQuery(\"select from OUser where name matches :param1\");\n    List<ODocument> results = db.query(sql, params);\n    assertEquals(results.size(), 1);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLSelectTest#testParamWithMatches", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "start_lineno": 51, "end_lineno": 180}]}
{"index": 332, "project_index": 175, "class_index": 1, "test_index": 2, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLSelectTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_name": "testMatchesWithQuotes3", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 180, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_prefix": "  @Test\n  public void testMatchesWithQuotes3() {\n\n    OSQLSynchQuery sql = new OSQLSynchQuery(\n        \"SELECT FROM matchesstuff WHERE (name matches '\\\\\\\\Qadm\\\\\\\\E.*' and  ( name matches '\\\\\\\\Qadmin\\\\\\\\E.*' ) )\");\n    List<ODocument> results = db.query(sql);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 1045, "test_prefix_end_lineno": 1052, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focal_method": "  @Override\n  public <RET extends List<?>> RET query(OQuery<?> iCommand, Object... iArgs) {\n    checkOpenness();\n    return internal.query(iCommand, iArgs);\n  }", "focal_method_start_lineno": 754, "focal_method_end_lineno": 758, "ground_truth_oracle": "assertEquals(results.size(), 1);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testMatchesWithQuotes3() {\n\n    OSQLSynchQuery sql = new OSQLSynchQuery(\n        \"SELECT FROM matchesstuff WHERE (name matches '\\\\\\\\Qadm\\\\\\\\E.*' and  ( name matches '\\\\\\\\Qadmin\\\\\\\\E.*' ) )\");\n    List<ODocument> results = db.query(sql);\n  }", "original_test_prefix": "  @Test\n  public void testMatchesWithQuotes3() {\n\n    OSQLSynchQuery sql = new OSQLSynchQuery(\n        \"SELECT FROM matchesstuff WHERE (name matches '\\\\\\\\Qadm\\\\\\\\E.*' and  ( name matches '\\\\\\\\Qadmin\\\\\\\\E.*' ) )\");\n    List<ODocument> results = db.query(sql);\n    assertEquals(results.size(), 1);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLSelectTest#testMatchesWithQuotes3", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "start_lineno": 51, "end_lineno": 180}]}
{"index": 333, "project_index": 175, "class_index": 1, "test_index": 3, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLSelectTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_name": "testBooleanParams", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 180, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_prefix": "  @Test\n  public void testBooleanParams() {\n\n    List<ODocument> qResult = db.command(new OCommandSQL(\"select name from TestParams where name = ? and active = ?\"))\n        .execute(\"foo\", true);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 561, "test_prefix_end_lineno": 567, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(qResult.size(), 1);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testBooleanParams() {\n\n    List<ODocument> qResult = db.command(new OCommandSQL(\"select name from TestParams where name = ? and active = ?\"))\n        .execute(\"foo\", true);\n  }", "original_test_prefix": "  @Test\n  public void testBooleanParams() {\n\n    List<ODocument> qResult = db.command(new OCommandSQL(\"select name from TestParams where name = ? and active = ?\"))\n        .execute(\"foo\", true);\n    assertEquals(qResult.size(), 1);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLSelectTest#testBooleanParams", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "start_lineno": 51, "end_lineno": 180}]}
{"index": 334, "project_index": 175, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OSimpleKeyIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinitionTest.java", "test_name": "testGetKeyTypes", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeMethod() {\n    simpleKeyIndexDefinition = new OSimpleKeyIndexDefinition(OType.INTEGER, OType.STRING);\n  }", "test_setup_start_lineno": 19, "test_setup_end_lineno": 22, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testGetKeyTypes() {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 121, "test_prefix_end_lineno": 124, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OSimpleKeyIndexDefinition.java", "focal_method": "  public OType[] getTypes() {\n    return Arrays.copyOf(keyTypes, keyTypes.length);\n  }", "focal_method_start_lineno": 111, "focal_method_end_lineno": 113, "ground_truth_oracle": "Assert.assertEquals(simpleKeyIndexDefinition.getTypes(), new OType[] { OType.INTEGER, OType.STRING });", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testGetKeyTypes() {\n  }", "original_test_prefix": "  @Test\n  public void testGetKeyTypes() {\n    Assert.assertEquals(simpleKeyIndexDefinition.getTypes(), new OType[] { OType.INTEGER, OType.STRING });\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OSimpleKeyIndexDefinitionTest#testGetKeyTypes", "test_setup_list": [{"test_setup": "@Before\n  public void beforeMethod() {\n    simpleKeyIndexDefinition = new OSimpleKeyIndexDefinition(OType.INTEGER, OType.STRING);\n  }", "start_lineno": 19, "end_lineno": 22}]}
{"index": 335, "project_index": 175, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODocumentTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentTest.java", "test_name": "testNoDirtySameBytes", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentTest.java", "test_prefix": "  @Test\n  public void testNoDirtySameBytes() {\n    ODocument doc = new ODocument();\n    byte[] bytes = new byte[] { 0, 1, 2, 3, 4, 5 };\n    doc.field(\"bytes\", bytes);\n    ODocumentInternal.clearTrackData(doc);\n    ORecordInternal.unsetDirty(doc);\n    <AssertPlaceHolder>;\n    assertNull(doc.getOriginalValue(\"bytes\"));\n    doc.field(\"bytes\", bytes.clone());\n    assertFalse(doc.isDirty());\n    assertNull(doc.getOriginalValue(\"bytes\"));\n  }", "test_prefix_start_lineno": 374, "test_prefix_end_lineno": 386, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/ORecordAbstract.java", "focal_method": "  public boolean isDirty() {\n    return _dirty;\n  }", "focal_method_start_lineno": 156, "focal_method_end_lineno": 158, "ground_truth_oracle": "assertFalse(doc.isDirty());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testNoDirtySameBytes() {\n    ODocument doc = new ODocument();\n    byte[] bytes = new byte[] { 0, 1, 2, 3, 4, 5 };\n    doc.field(\"bytes\", bytes);\n    ODocumentInternal.clearTrackData(doc);\n    ORecordInternal.unsetDirty(doc);\n  }", "original_test_prefix": "  @Test\n  public void testNoDirtySameBytes() {\n    ODocument doc = new ODocument();\n    byte[] bytes = new byte[] { 0, 1, 2, 3, 4, 5 };\n    doc.field(\"bytes\", bytes);\n    ODocumentInternal.clearTrackData(doc);\n    ORecordInternal.unsetDirty(doc);\n    assertFalse(doc.isDirty());\n    assertNull(doc.getOriginalValue(\"bytes\"));\n    doc.field(\"bytes\", bytes.clone());\n    assertFalse(doc.isDirty());\n    assertNull(doc.getOriginalValue(\"bytes\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.record.impl.ODocumentTest#testNoDirtySameBytes", "test_setup_list": []}
{"index": 336, "project_index": 175, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OSqlScriptExecutorTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/command/OSqlScriptExecutorTest.java", "test_name": "testMultipleCreateEdgeOnTheSameLet", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/command/OSqlScriptExecutorTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/command/OSqlScriptExecutorTest.java", "test_prefix": "  @Test\n  public void testMultipleCreateEdgeOnTheSameLet() {\n\n    OrientDB factory = new OrientDB(\"embedded:./\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    String dbName = getClass().getSimpleName() + \"testMultipleCreateEdgeOnTheSameLet\";\n    factory.create(dbName, ODatabaseType.MEMORY);\n    ODatabaseDocument db = factory.open(dbName, \"admin\", \"admin\");\n\n    String script = \"begin;\";\n    script += \"let $v1 = create vertex v set name = 'Foo';\";\n    script += \"let $v2 = create vertex v set name = 'Bar';\";\n    script += \"create edge from $v1 to $v2;\";\n    script += \"let $v3 = create vertex v set name = 'Baz';\";\n    script += \"create edge from $v1 to $v3;\";\n    script += \"commit;\";\n\n    OResultSet result = db.execute(\"sql\", script);\n    result.close();\n\n    result = db.query(\"SELECT expand(out()) FROM V WHERE name ='Foo'\");\n    <AssertPlaceHolder>;\n    result.close();\n    db.close();\n    factory.drop(dbName);\n    factory.close();\n  }", "test_prefix_start_lineno": 109, "test_prefix_end_lineno": 134, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  default Stream<OResult> stream() {\n    return StreamSupport.stream(this, false).onClose(() -> this.close());\n  }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 71, "ground_truth_oracle": "Assert.assertEquals(2, result.stream().count());", "ground_truth_oracle_lineno": 14, "test_prefix_wo_placeholder": "  @Test\n  public void testMultipleCreateEdgeOnTheSameLet() {\n\n    OrientDB factory = new OrientDB(\"embedded:./\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    String dbName = getClass().getSimpleName() + \"testMultipleCreateEdgeOnTheSameLet\";\n    factory.create(dbName, ODatabaseType.MEMORY);\n    ODatabaseDocument db = factory.open(dbName, \"admin\", \"admin\");\n\n    String script = \"begin;\";\n    script += \"let $v1 = create vertex v set name = 'Foo';\";\n    script += \"let $v2 = create vertex v set name = 'Bar';\";\n    script += \"create edge from $v1 to $v2;\";\n    script += \"let $v3 = create vertex v set name = 'Baz';\";\n    script += \"create edge from $v1 to $v3;\";\n    script += \"commit;\";\n\n    OResultSet result = db.execute(\"sql\", script);\n    result.close();\n\n    result = db.query(\"SELECT expand(out()) FROM V WHERE name ='Foo'\");\n  }", "original_test_prefix": "  @Test\n  public void testMultipleCreateEdgeOnTheSameLet() {\n\n    OrientDB factory = new OrientDB(\"embedded:./\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    String dbName = getClass().getSimpleName() + \"testMultipleCreateEdgeOnTheSameLet\";\n    factory.create(dbName, ODatabaseType.MEMORY);\n    ODatabaseDocument db = factory.open(dbName, \"admin\", \"admin\");\n\n    String script = \"begin;\";\n    script += \"let $v1 = create vertex v set name = 'Foo';\";\n    script += \"let $v2 = create vertex v set name = 'Bar';\";\n    script += \"create edge from $v1 to $v2;\";\n    script += \"let $v3 = create vertex v set name = 'Baz';\";\n    script += \"create edge from $v1 to $v3;\";\n    script += \"commit;\";\n\n    OResultSet result = db.execute(\"sql\", script);\n    result.close();\n\n    result = db.query(\"SELECT expand(out()) FROM V WHERE name ='Foo'\");\n    Assert.assertEquals(2, result.stream().count());\n    result.close();\n    db.close();\n    factory.drop(dbName);\n    factory.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.command.OSqlScriptExecutorTest#testMultipleCreateEdgeOnTheSameLet", "test_setup_list": []}
{"index": 337, "project_index": 175, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OSQLFunctionAbsoluteValueTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java", "test_name": "testNegativeDouble", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java", "test_setup": "@Before\n  public void setup() {\n    function = new OSQLFunctionAbsoluteValue();\n  }", "test_setup_start_lineno": 26, "test_setup_end_lineno": 29, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValueTest.java", "test_prefix": "  @Test\n  public void testNegativeDouble() {\n    function.execute(null, null, null, new Object[] { -10.5D }, null);\n    Object result = function.getResult();\n    <AssertPlaceHolder>;\n    assertEquals(result, 10.5D);\n  }", "test_prefix_start_lineno": 100, "test_prefix_end_lineno": 106, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/functions/math/OSQLFunctionAbsoluteValue.java", "focal_method": "  @Override\n  public Object getResult() {\n    return result;\n  }", "focal_method_start_lineno": 81, "focal_method_end_lineno": 84, "ground_truth_oracle": "assertTrue(result instanceof Double);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testNegativeDouble() {\n    function.execute(null, null, null, new Object[] { -10.5D }, null);\n    Object result = function.getResult();\n  }", "original_test_prefix": "  @Test\n  public void testNegativeDouble() {\n    function.execute(null, null, null, new Object[] { -10.5D }, null);\n    Object result = function.getResult();\n    assertTrue(result instanceof Double);\n    assertEquals(result, 10.5D);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.functions.math.OSQLFunctionAbsoluteValueTest#testNegativeDouble", "test_setup_list": [{"test_setup": "@Before\n  public void setup() {\n    function = new OSQLFunctionAbsoluteValue();\n  }", "start_lineno": 26, "end_lineno": 29}]}
{"index": 338, "project_index": 175, "class_index": 6, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMathExpressionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OMathExpressionTest.java", "test_name": "testAnd", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OMathExpressionTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/parser/OMathExpressionTest.java", "test_prefix": "  @Test\n  public void testAnd() {\n    OMathExpression exp = new OMathExpression(-1);\n    exp.childExpressions.add(integer(5));\n    exp.operators.add(OMathExpression.Operator.BIT_AND);\n    exp.childExpressions.add(integer(1));\n\n    Object result = exp.execute((OResult) null, null);\n    <AssertPlaceHolder>;\n    Assert.assertEquals(1, result);\n  }", "test_prefix_start_lineno": 142, "test_prefix_end_lineno": 152, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/parser/OMathExpression.java", "focal_method": "  public Object execute(OResult iCurrentRecord, OCommandContext ctx) {\n    if (childExpressions.size() == 0) {\n      return null;\n    }\n    if (childExpressions.size() == 1) {\n      return childExpressions.get(0).execute(iCurrentRecord, ctx);\n    }\n\n    if (childExpressions.size() == 2) {\n      Object leftValue = childExpressions.get(0).execute(iCurrentRecord, ctx);\n      Object rightValue = childExpressions.get(1).execute(iCurrentRecord, ctx);\n      return operators.get(0).apply(leftValue, rightValue);\n    }\n\n    return calculateWithOpPriority(iCurrentRecord, ctx);\n  }", "focal_method_start_lineno": 607, "focal_method_end_lineno": 622, "ground_truth_oracle": "Assert.assertTrue(result instanceof Integer);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testAnd() {\n    OMathExpression exp = new OMathExpression(-1);\n    exp.childExpressions.add(integer(5));\n    exp.operators.add(OMathExpression.Operator.BIT_AND);\n    exp.childExpressions.add(integer(1));\n\n    Object result = exp.execute((OResult) null, null);\n  }", "original_test_prefix": "  @Test\n  public void testAnd() {\n    OMathExpression exp = new OMathExpression(-1);\n    exp.childExpressions.add(integer(5));\n    exp.operators.add(OMathExpression.Operator.BIT_AND);\n    exp.childExpressions.add(integer(1));\n\n    Object result = exp.execute((OResult) null, null);\n    Assert.assertTrue(result instanceof Integer);\n    Assert.assertEquals(1, result);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.parser.OMathExpressionTest#testAnd", "test_setup_list": []}
{"index": 339, "project_index": 175, "class_index": 7, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "etl", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OETLEdgeTransformerTest", "class_path": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLEdgeTransformerTest.java", "test_name": "testDynamicEdgeClassMultipleValues", "test_setup_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLEdgeTransformerTest.java", "test_setup": "@Before\n  public void cleanFs() throws Exception {\n    OFileUtils.deleteRecursively(new File(\"./target/databases/\"));\n\n  }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 55, "test_prefix_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/transformer/OETLEdgeTransformerTest.java", "test_prefix": "  @Test\n  public void testDynamicEdgeClassMultipleValues() {\n    configure(\"{source: { content: { value: 'v1,edge,v2\\nJay,friend2,Luca' } }, extractor : { csv: {} },\"\n        + \" transformers: [{vertex: {class:'V1'}}, {edge:{class:'${input.edge}',joinFieldName:'v2',lookup:'V2.name'}},\"\n        + \"], loader: { orientdb: { dbURL: 'memory:\" + name.getMethodName() + \"', dbType:'graph', useLightweightEdges:false } } }\");\n\n    OETLLoader loader = proc.getLoader();\n    ODatabasePool pool = loader.getPool();\n    ODatabaseDocument db = pool.acquire();\n    createClasses(db);\n    OVertex vertex = db.newVertex(\"v2\");\n\n    vertex.setProperty(\"name\", \"Luca\");\n    db.save(vertex);\n    db.commit();\n    db.close();\n\n    proc.execute();\n    db = pool.acquire();\n\n    <AssertPlaceHolder>;\n    assertEquals(2, db.countClass(\"V2\"));\n    assertEquals(2, db.countClass(\"Friend2\"));\n    db.close();\n    pool.close();\n\n  }", "test_prefix_start_lineno": 132, "test_prefix_end_lineno": 158, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocument.java", "focal_method": "  long countClass(String iClassName);", "focal_method_start_lineno": 100, "focal_method_end_lineno": 100, "ground_truth_oracle": "assertEquals(1, db.countClass(\"V1\"));", "ground_truth_oracle_lineno": 12, "test_prefix_wo_placeholder": "  @Test\n  public void testDynamicEdgeClassMultipleValues() {\n    configure(\"{source: { content: { value: 'v1,edge,v2\\nJay,friend2,Luca' } }, extractor : { csv: {} },\"\n        + \" transformers: [{vertex: {class:'V1'}}, {edge:{class:'${input.edge}',joinFieldName:'v2',lookup:'V2.name'}},\"\n        + \"], loader: { orientdb: { dbURL: 'memory:\" + name.getMethodName() + \"', dbType:'graph', useLightweightEdges:false } } }\");\n\n    OETLLoader loader = proc.getLoader();\n    ODatabasePool pool = loader.getPool();\n    ODatabaseDocument db = pool.acquire();\n    createClasses(db);\n    OVertex vertex = db.newVertex(\"v2\");\n\n    vertex.setProperty(\"name\", \"Luca\");\n    db.save(vertex);\n    db.commit();\n    db.close();\n\n    proc.execute();\n    db = pool.acquire();\n\n  }", "original_test_prefix": "  @Test\n  public void testDynamicEdgeClassMultipleValues() {\n    configure(\"{source: { content: { value: 'v1,edge,v2\\nJay,friend2,Luca' } }, extractor : { csv: {} },\"\n        + \" transformers: [{vertex: {class:'V1'}}, {edge:{class:'${input.edge}',joinFieldName:'v2',lookup:'V2.name'}},\"\n        + \"], loader: { orientdb: { dbURL: 'memory:\" + name.getMethodName() + \"', dbType:'graph', useLightweightEdges:false } } }\");\n\n    OETLLoader loader = proc.getLoader();\n    ODatabasePool pool = loader.getPool();\n    ODatabaseDocument db = pool.acquire();\n    createClasses(db);\n    OVertex vertex = db.newVertex(\"v2\");\n\n    vertex.setProperty(\"name\", \"Luca\");\n    db.save(vertex);\n    db.commit();\n    db.close();\n\n    proc.execute();\n    db = pool.acquire();\n\n    assertEquals(1, db.countClass(\"V1\"));\n    assertEquals(2, db.countClass(\"V2\"));\n    assertEquals(2, db.countClass(\"Friend2\"));\n    db.close();\n    pool.close();\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.etl.transformer.OETLEdgeTransformerTest#testDynamicEdgeClassMultipleValues", "test_setup_list": [{"test_setup": "@Before\n  public void cleanFs() throws Exception {\n    OFileUtils.deleteRecursively(new File(\"./target/databases/\"));\n\n  }", "start_lineno": 51, "end_lineno": 55}]}
{"index": 340, "project_index": 175, "class_index": 8, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OSelectStatementExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java", "test_name": "testSelectNoTargetSkip", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() {\n\n    db = new ODatabaseDocumentTx(\"memory:OSelectStatementExecutionTest\");\n    db.create();\n  }", "test_setup_start_lineno": 49, "test_setup_end_lineno": 54, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testSelectNoTargetSkip() {\n    OResultSet result = db.query(\"select 1 as one, 2 as two, 2+3 skip 1\");\n    <AssertPlaceHolder>;\n    printExecutionPlan(result);\n\n    result.close();\n  }", "test_prefix_start_lineno": 75, "test_prefix_end_lineno": 82, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  @Override\n  boolean hasNext();", "focal_method_start_lineno": 20, "focal_method_end_lineno": 21, "ground_truth_oracle": "Assert.assertFalse(result.hasNext());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testSelectNoTargetSkip() {\n    OResultSet result = db.query(\"select 1 as one, 2 as two, 2+3 skip 1\");\n  }", "original_test_prefix": "  @Test\n  public void testSelectNoTargetSkip() {\n    OResultSet result = db.query(\"select 1 as one, 2 as two, 2+3 skip 1\");\n    Assert.assertFalse(result.hasNext());\n    printExecutionPlan(result);\n\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.OSelectStatementExecutionTest#testSelectNoTargetSkip", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() {\n\n    db = new ODatabaseDocumentTx(\"memory:OSelectStatementExecutionTest\");\n    db.create();\n  }", "start_lineno": 49, "end_lineno": 54}]}
{"index": 341, "project_index": 176, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "vajadz\u012bbas_min\u0113\u0161ana", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void vajadz\u012bbas_min\u0113\u0161ana() {\n        loc\u012bt\u0101js.enablePrefixes = true;\n\n        Word v\u0101rds = loc\u012bt\u0101js.analyze(\"rakt\");\n        <AssertPlaceHolder>;\n        assertEquals(\"rakt\", v\u0101rds.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        v\u0101rds = loc\u012bt\u0101js.analyze(\"aizrakt\");\n        assertTrue(v\u0101rds.isRecognized());\n        assertEquals(\"aizrakt\", v\u0101rds.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        v\u0101rds = loc\u012bt\u0101js.analyze(\"j\u0101rok\");\n        assertTrue(v\u0101rds.isRecognized());\n        assertEquals(\"rakt\", v\u0101rds.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        v\u0101rds = loc\u012bt\u0101js.analyze(\"j\u0101aizrok\");\n        assertTrue(v\u0101rds.isRecognized());\n        assertEquals(\"aizrakt\", v\u0101rds.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n    }", "test_prefix_start_lineno": 1619, "test_prefix_end_lineno": 1640, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(v\u0101rds.isRecognized());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void vajadz\u012bbas_min\u0113\u0161ana() {\n        loc\u012bt\u0101js.enablePrefixes = true;\n\n        Word v\u0101rds = loc\u012bt\u0101js.analyze(\"rakt\");\n    }", "original_test_prefix": "    @Test\n    public void vajadz\u012bbas_min\u0113\u0161ana() {\n        loc\u012bt\u0101js.enablePrefixes = true;\n\n        Word v\u0101rds = loc\u012bt\u0101js.analyze(\"rakt\");\n        assertTrue(v\u0101rds.isRecognized());\n        assertEquals(\"rakt\", v\u0101rds.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        v\u0101rds = loc\u012bt\u0101js.analyze(\"aizrakt\");\n        assertTrue(v\u0101rds.isRecognized());\n        assertEquals(\"aizrakt\", v\u0101rds.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        v\u0101rds = loc\u012bt\u0101js.analyze(\"j\u0101rok\");\n        assertTrue(v\u0101rds.isRecognized());\n        assertEquals(\"rakt\", v\u0101rds.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        v\u0101rds = loc\u012bt\u0101js.analyze(\"j\u0101aizrok\");\n        assertTrue(v\u0101rds.isRecognized());\n        assertEquals(\"aizrakt\", v\u0101rds.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#vajadz\u012bbas_min\u0113\u0161ana", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 342, "project_index": 177, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "AbstractServiceSetupTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetupTest.java", "test_name": "testGetProperty", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetupTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetupTest.java", "test_prefix": "    @Test\n    public void testGetProperty() {\n        Map<String, String> env = new HashMap<String, String>();\n        env.put(\"CI_NAME\", \"bamboo\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 46, "test_prefix_end_lineno": 51, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/AbstractServiceSetup.java", "focal_method": "    protected final String getProperty(final String name) {\n        return env.get(name);\n    }", "focal_method_start_lineno": 75, "focal_method_end_lineno": 77, "ground_truth_oracle": "assertEquals(\"bamboo\", create(env).getProperty(\"CI_NAME\"));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetProperty() {\n        Map<String, String> env = new HashMap<String, String>();\n        env.put(\"CI_NAME\", \"bamboo\");\n    }", "original_test_prefix": "    @Test\n    public void testGetProperty() {\n        Map<String, String> env = new HashMap<String, String>();\n        env.put(\"CI_NAME\", \"bamboo\");\n        assertEquals(\"bamboo\", create(env).getProperty(\"CI_NAME\"));\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.AbstractServiceSetupTest#testGetProperty", "test_setup_list": []}
{"index": 343, "project_index": 178, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "StatementReferenceTest", "class_path": "src/test/java/gov/adlnet/xapi/StatementReferenceTest.java", "test_name": "testSetId", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/StatementReferenceTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        statementRef = new StatementReference(ID);\n    }", "test_setup_start_lineno": 22, "test_setup_end_lineno": 25, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/StatementReferenceTest.java", "test_prefix": "    @Test\n    public void testSetId() {\n        String expected = UUID.randomUUID().toString();\n        statementRef.setId(expected);\n        String actual = statementRef.getId();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 71, "test_prefix_end_lineno": 78, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/StatementReference.java", "focal_method": "    public String getId() {\n        return id;\n    }", "focal_method_start_lineno": 30, "focal_method_end_lineno": 32, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testSetId() {\n        String expected = UUID.randomUUID().toString();\n        statementRef.setId(expected);\n        String actual = statementRef.getId();\n    }", "original_test_prefix": "    @Test\n    public void testSetId() {\n        String expected = UUID.randomUUID().toString();\n        statementRef.setId(expected);\n        String actual = statementRef.getId();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.StatementReferenceTest#testSetId", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        statementRef = new StatementReference(ID);\n    }", "start_lineno": 22, "end_lineno": 25}]}
{"index": 344, "project_index": 179, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "AnnotatedMethodRetrieverTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java", "test_name": "testGetAtMostOneVoidMethodWithoutArgs", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/AnnotatedMethodRetrieverTest.java", "test_prefix": "    @Test\n    public void testGetAtMostOneVoidMethodWithoutArgs() {\n        Method method = new AnnotatedMethodRetriever(AnnotationTestClass.class, Prepare.class)\n                .withVoidReturnType()\n                .withoutArgs()\n                .find();\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 26, "test_prefix_end_lineno": 34, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/AnnotatedMethodRetriever.java", "focal_method": "    public Method find() {\n        List<Method> methods = findAll();\n        switch (methods.size()) {\n            case 0:\n                return null;\n            case 1:\n                return methods.iterator().next();\n            default:\n                throw new ReflectionException(format(\"Too many methods on class %s with annotation %s\", clazz.getName(),\n                        annotationClazz.getName()));\n        }\n    }", "focal_method_start_lineno": 68, "focal_method_end_lineno": 79, "ground_truth_oracle": "assertEquals(\"voidMethod\", method.getName());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testGetAtMostOneVoidMethodWithoutArgs() {\n        Method method = new AnnotatedMethodRetriever(AnnotationTestClass.class, Prepare.class)\n                .withVoidReturnType()\n                .withoutArgs()\n                .find();\n\n    }", "original_test_prefix": "    @Test\n    public void testGetAtMostOneVoidMethodWithoutArgs() {\n        Method method = new AnnotatedMethodRetriever(AnnotationTestClass.class, Prepare.class)\n                .withVoidReturnType()\n                .withoutArgs()\n                .find();\n\n        assertEquals(\"voidMethod\", method.getName());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.AnnotatedMethodRetrieverTest#testGetAtMostOneVoidMethodWithoutArgs", "test_setup_list": []}
{"index": 345, "project_index": 179, "class_index": 1, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "RegistryTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "test_name": "testGetAgents_withCount", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "test_prefix": "    @Test\n    public void testGetAgents_withCount() {\n        registry.addAgent(\"192.168.0.1\", \"192.168.0.1\");\n        registry.addAgent(\"192.168.0.2\", \"192.168.0.2\");\n        registry.addAgent(\"192.168.0.3\", \"192.168.0.3\");\n        <AssertPlaceHolder>;\n\n        List<AgentData> agents = registry.getAgents(1);\n        assertEquals(1, agents.size());\n        assertEquals(\"192.168.0.3\", agents.get(0).getPublicAddress());\n        assertEquals(\"192.168.0.3\", agents.get(0).getPrivateAddress());\n\n        agents = registry.getAgents(2);\n        assertEquals(2, agents.size());\n        assertEquals(\"192.168.0.2\", agents.get(0).getPublicAddress());\n        assertEquals(\"192.168.0.2\", agents.get(0).getPrivateAddress());\n        assertEquals(\"192.168.0.3\", agents.get(1).getPublicAddress());\n        assertEquals(\"192.168.0.3\", agents.get(1).getPrivateAddress());\n    }", "test_prefix_start_lineno": 76, "test_prefix_end_lineno": 94, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java", "focal_method": "    public int agentCount() {\n        return agents.size();\n    }", "focal_method_start_lineno": 97, "focal_method_end_lineno": 99, "ground_truth_oracle": "assertEquals(3, registry.agentCount());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testGetAgents_withCount() {\n        registry.addAgent(\"192.168.0.1\", \"192.168.0.1\");\n        registry.addAgent(\"192.168.0.2\", \"192.168.0.2\");\n        registry.addAgent(\"192.168.0.3\", \"192.168.0.3\");\n    }", "original_test_prefix": "    @Test\n    public void testGetAgents_withCount() {\n        registry.addAgent(\"192.168.0.1\", \"192.168.0.1\");\n        registry.addAgent(\"192.168.0.2\", \"192.168.0.2\");\n        registry.addAgent(\"192.168.0.3\", \"192.168.0.3\");\n        assertEquals(3, registry.agentCount());\n\n        List<AgentData> agents = registry.getAgents(1);\n        assertEquals(1, agents.size());\n        assertEquals(\"192.168.0.3\", agents.get(0).getPublicAddress());\n        assertEquals(\"192.168.0.3\", agents.get(0).getPrivateAddress());\n\n        agents = registry.getAgents(2);\n        assertEquals(2, agents.size());\n        assertEquals(\"192.168.0.2\", agents.get(0).getPublicAddress());\n        assertEquals(\"192.168.0.2\", agents.get(0).getPrivateAddress());\n        assertEquals(\"192.168.0.3\", agents.get(1).getPublicAddress());\n        assertEquals(\"192.168.0.3\", agents.get(1).getPrivateAddress());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.coordinator.registry.RegistryTest#testGetAgents_withCount", "test_setup_list": []}
{"index": 346, "project_index": 179, "class_index": 1, "test_index": 1, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "RegistryTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "test_name": "testRemoveWorker_viaSimulatorAddress", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/RegistryTest.java", "test_prefix": "    @Test\n    public void testRemoveWorker_viaSimulatorAddress() {\n        SimulatorAddress agentAddress = addAgent();\n        List<WorkerParameters> parametersList = newWorkerParametersList(agentAddress, 5);\n\n        registry.addWorkers(parametersList);\n        <AssertPlaceHolder>;\n\n        registry.removeWorker(workerAddress(1, 3));\n        assertEquals(4, registry.workerCount());\n    }", "test_prefix_start_lineno": 112, "test_prefix_end_lineno": 122, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/Registry.java", "focal_method": "    public int workerCount() {\n        return workers.size();\n    }", "focal_method_start_lineno": 181, "focal_method_end_lineno": 183, "ground_truth_oracle": "assertEquals(5, registry.workerCount());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testRemoveWorker_viaSimulatorAddress() {\n        SimulatorAddress agentAddress = addAgent();\n        List<WorkerParameters> parametersList = newWorkerParametersList(agentAddress, 5);\n\n        registry.addWorkers(parametersList);\n    }", "original_test_prefix": "    @Test\n    public void testRemoveWorker_viaSimulatorAddress() {\n        SimulatorAddress agentAddress = addAgent();\n        List<WorkerParameters> parametersList = newWorkerParametersList(agentAddress, 5);\n\n        registry.addWorkers(parametersList);\n        assertEquals(5, registry.workerCount());\n\n        registry.removeWorker(workerAddress(1, 3));\n        assertEquals(4, registry.workerCount());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.coordinator.registry.RegistryTest#testRemoveWorker_viaSimulatorAddress", "test_setup_list": []}
{"index": 347, "project_index": 180, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JMXJvmIdConnectionFactoryTest", "class_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_name": "testGetSetJmxMbeanConnectorFactory", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "test_setup_start_lineno": 54, "test_setup_end_lineno": 78, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_prefix": "    @Test\n    public void testGetSetJmxMbeanConnectorFactory () {\n        <AssertPlaceHolder>;\n\n        this.factory.setJmxMBeanConnectionFactory(this.mockJmxMbeanConnectorFactory);\n        assertSame(this.mockJmxMbeanConnectorFactory, this.factory.getJmxMBeanConnectionFactory());\n    }", "test_prefix_start_lineno": 113, "test_prefix_end_lineno": 119, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focal_method": "    public JMXMBeanConnectionFactory getJmxMBeanConnectionFactory() {\n        return jmxmBeanConnectionFactory;\n    }", "focal_method_start_lineno": 96, "focal_method_end_lineno": 98, "ground_truth_oracle": "assertTrue(this.factory.getJmxMBeanConnectionFactory() instanceof DefaultJmxMBeanConnectionFactory);", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetJmxMbeanConnectorFactory () {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetJmxMbeanConnectorFactory () {\n        assertTrue(this.factory.getJmxMBeanConnectionFactory() instanceof DefaultJmxMBeanConnectionFactory);\n\n        this.factory.setJmxMBeanConnectionFactory(this.mockJmxMbeanConnectorFactory);\n        assertSame(this.mockJmxMbeanConnectorFactory, this.factory.getJmxMBeanConnectionFactory());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.connection.impl.JMXJvmIdConnectionFactoryTest#testGetSetJmxMbeanConnectorFactory", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "start_lineno": 54, "end_lineno": 78}]}
{"index": 348, "project_index": 181, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "ACollectionHelperTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_name": "testGroupByCustomEquality", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/ACollectionHelperTest.java", "test_prefix": "    @Test\n    public void testGroupByCustomEquality() {\n        final AEquality equality = new AEquality() {\n            @Override public boolean equals(Object o1, Object o2) {\n                return ((Integer)o1)%2 == ((Integer)o2)%2;\n            }\n\n            @Override public int hashCode(Object o) {\n                return 0;\n            }\n        };\n\n        final AFunction1NoThrow<String, Integer> len = new AFunction1NoThrow<String, Integer>() {\n            @Override public Integer apply(String param) {\n                return param.length();\n            }\n        };\n\n        final Map<AEqualsWrapper<Integer>, List<String>> grouped = ACollectionHelper.groupBy(Arrays.asList(\"a\", \"bc\", \"d\", \"efg\", \"hi\", \"j\"), len, equality);\n        <AssertPlaceHolder>;\n        assertEquals(Arrays.asList(\"a\", \"d\", \"efg\", \"j\"), grouped.get(new AEqualsWrapper<>(equality, 1)));\n        assertEquals(Arrays.asList(\"bc\", \"hi\"),           grouped.get(new AEqualsWrapper<>(equality, 2)));\n    }", "test_prefix_start_lineno": 175, "test_prefix_end_lineno": 197, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/ACollectionHelper.java", "focal_method": "    public static <T, X, E extends Throwable> Map<AEqualsWrapper<X>, List<T>> groupBy(List<T> coll, AFunction1<? super T, ? extends X, E> f, AEquality keyEquality) throws E {\n        final Map<AEqualsWrapper<X>, List<T>> result = new HashMap<>();\n        for(T o: coll) {\n            final AEqualsWrapper<X> key = new AEqualsWrapper<>(keyEquality, f.apply(o));\n            List<T> perKey = result.get(key);\n            if(perKey == null) {\n                perKey = createEmptyListOfType (coll, false);\n                result.put (key, perKey);\n            }\n            perKey.add(o);\n        }\n        return result;\n    }", "focal_method_start_lineno": 498, "focal_method_end_lineno": 510, "ground_truth_oracle": "assertEquals(2, grouped.size ());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testGroupByCustomEquality() {\n        final AEquality equality = new AEquality() {\n            @Override public boolean equals(Object o1, Object o2) {\n                return ((Integer)o1)%2 == ((Integer)o2)%2;\n            }\n\n            @Override public int hashCode(Object o) {\n                return 0;\n            }\n        };\n\n        final AFunction1NoThrow<String, Integer> len = new AFunction1NoThrow<String, Integer>() {\n            @Override public Integer apply(String param) {\n                return param.length();\n            }\n        };\n\n        final Map<AEqualsWrapper<Integer>, List<String>> grouped = ACollectionHelper.groupBy(Arrays.asList(\"a\", \"bc\", \"d\", \"efg\", \"hi\", \"j\"), len, equality);\n    }", "original_test_prefix": "    @Test\n    public void testGroupByCustomEquality() {\n        final AEquality equality = new AEquality() {\n            @Override public boolean equals(Object o1, Object o2) {\n                return ((Integer)o1)%2 == ((Integer)o2)%2;\n            }\n\n            @Override public int hashCode(Object o) {\n                return 0;\n            }\n        };\n\n        final AFunction1NoThrow<String, Integer> len = new AFunction1NoThrow<String, Integer>() {\n            @Override public Integer apply(String param) {\n                return param.length();\n            }\n        };\n\n        final Map<AEqualsWrapper<Integer>, List<String>> grouped = ACollectionHelper.groupBy(Arrays.asList(\"a\", \"bc\", \"d\", \"efg\", \"hi\", \"j\"), len, equality);\n        assertEquals(2, grouped.size ());\n        assertEquals(Arrays.asList(\"a\", \"d\", \"efg\", \"j\"), grouped.get(new AEqualsWrapper<>(equality, 1)));\n        assertEquals(Arrays.asList(\"bc\", \"hi\"),           grouped.get(new AEqualsWrapper<>(equality, 2)));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.ACollectionHelperTest#testGroupByCustomEquality", "test_setup_list": []}
{"index": 349, "project_index": 182, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "ContinuousFrameTest", "class_path": "src/test/java/org/java_websocket/framing/ContinuousFrameTest.java", "test_name": "testExtends", "test_setup_file_path": "src/test/java/org/java_websocket/framing/ContinuousFrameTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/framing/ContinuousFrameTest.java", "test_prefix": "  @Test\n  public void testExtends() {\n    ContinuousFrame frame = new ContinuousFrame();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 57, "test_prefix_end_lineno": 61, "focal_method_file_path": "src/main/java/org/java_websocket/framing/ContinuousFrame.java", "focal_method": "  public ContinuousFrame() {\n    super(Opcode.CONTINUOUS);\n  }", "focal_method_start_lineno": 38, "focal_method_end_lineno": 40, "ground_truth_oracle": "assertEquals(\"Frame must extend dataframe\", true, frame instanceof DataFrame);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testExtends() {\n    ContinuousFrame frame = new ContinuousFrame();\n  }", "original_test_prefix": "  @Test\n  public void testExtends() {\n    ContinuousFrame frame = new ContinuousFrame();\n    assertEquals(\"Frame must extend dataframe\", true, frame instanceof DataFrame);\n  }", "test_with_params": false, "test_target": "org.java_websocket.framing.ContinuousFrameTest#testExtends", "test_setup_list": []}
{"index": 350, "project_index": 183, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActivityStateTest", "class_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_name": "testActivityState", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activity-state/unit-testing\";\n        String stateId =\"state\"+1234;\n        Agent agent = new Agent();\n        agent.setMbox(\"mailto:test@example.com\");\n        activityState = new ActivityState(activityId, stateId, agent);\n        assertNotNull(activityState);\n        activityState.setRegistration(REG_ID);\n        JsonObject state = new JsonObject();\n        state.addProperty(\"ActState\", \"Unit Test\");\n        activityState.setState(state);\n    }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 33, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_prefix": "    @Test\n    public void testActivityState() {\n        ActivityState activityState = new ActivityState();\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 40, "test_prefix_end_lineno": 44, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ActivityState.java", "focal_method": "    public ActivityState(){}", "focal_method_start_lineno": 14, "focal_method_end_lineno": 14, "ground_truth_oracle": "assertNotNull(activityState);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testActivityState() {\n        ActivityState activityState = new ActivityState();\n    }", "original_test_prefix": "    @Test\n    public void testActivityState() {\n        ActivityState activityState = new ActivityState();\n        assertNotNull(activityState);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActivityStateTest#testActivityState", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activity-state/unit-testing\";\n        String stateId =\"state\"+1234;\n        Agent agent = new Agent();\n        agent.setMbox(\"mailto:test@example.com\");\n        activityState = new ActivityState(activityId, stateId, agent);\n        assertNotNull(activityState);\n        activityState.setRegistration(REG_ID);\n        JsonObject state = new JsonObject();\n        state.addProperty(\"ActState\", \"Unit Test\");\n        activityState.setState(state);\n    }", "start_lineno": 21, "end_lineno": 33}]}
{"index": 351, "project_index": 183, "class_index": 0, "test_index": 1, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActivityStateTest", "class_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_name": "testGetState", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activity-state/unit-testing\";\n        String stateId =\"state\"+1234;\n        Agent agent = new Agent();\n        agent.setMbox(\"mailto:test@example.com\");\n        activityState = new ActivityState(activityId, stateId, agent);\n        assertNotNull(activityState);\n        activityState.setRegistration(REG_ID);\n        JsonObject state = new JsonObject();\n        state.addProperty(\"ActState\", \"Unit Test\");\n        activityState.setState(state);\n    }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 33, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_prefix": "    @Test\n    public void testGetState() {\n        JsonObject expected = new JsonObject();\n        expected.addProperty(\"ActState\", \"Unit Test\");\n        JsonObject actual = activityState.getState();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 127, "test_prefix_end_lineno": 134, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ActivityState.java", "focal_method": "    public JsonObject getState(){return this.state;}", "focal_method_start_lineno": 46, "focal_method_end_lineno": 46, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testGetState() {\n        JsonObject expected = new JsonObject();\n        expected.addProperty(\"ActState\", \"Unit Test\");\n        JsonObject actual = activityState.getState();\n    }", "original_test_prefix": "    @Test\n    public void testGetState() {\n        JsonObject expected = new JsonObject();\n        expected.addProperty(\"ActState\", \"Unit Test\");\n        JsonObject actual = activityState.getState();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActivityStateTest#testGetState", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activity-state/unit-testing\";\n        String stateId =\"state\"+1234;\n        Agent agent = new Agent();\n        agent.setMbox(\"mailto:test@example.com\");\n        activityState = new ActivityState(activityId, stateId, agent);\n        assertNotNull(activityState);\n        activityState.setRegistration(REG_ID);\n        JsonObject state = new JsonObject();\n        state.addProperty(\"ActState\", \"Unit Test\");\n        activityState.setState(state);\n    }", "start_lineno": 21, "end_lineno": 33}]}
{"index": 352, "project_index": 183, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "VerbsTest", "class_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_name": "testAttended", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_prefix": "    @Test\n    public void testAttended() {\n        Verb actual = Verbs.attended();\n        <AssertPlaceHolder>;\n        assertEquals(\"attended\", actual.toString());\n    }", "test_prefix_start_lineno": 34, "test_prefix_end_lineno": 39, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focal_method": "    public static Verb attended(){\n        return createVerb(\"attended\");\n    }", "focal_method_start_lineno": 25, "focal_method_end_lineno": 27, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testAttended() {\n        Verb actual = Verbs.attended();\n    }", "original_test_prefix": "    @Test\n    public void testAttended() {\n        Verb actual = Verbs.attended();\n        assertNotNull(actual);\n        assertEquals(\"attended\", actual.toString());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.VerbsTest#testAttended", "test_setup_list": []}
{"index": 353, "project_index": 184, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "ThreadSpawnerTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/ThreadSpawnerTest.java", "test_name": "testThreadSpawnerException_reportException", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/ThreadSpawnerTest.java", "test_setup": "@Before\n    public void before() {\n        setupFakeUserDir();\n        ExceptionReporter.reset();\n    }", "test_setup_start_lineno": 28, "test_setup_end_lineno": 32, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/ThreadSpawnerTest.java", "test_prefix": "    @Test\n    public void testThreadSpawnerException_reportException() {\n        File exceptionFile = new File(getUserDir(), \"1.exception\");\n\n        ThreadSpawner spawner = new ThreadSpawner(\"AnyTestCaseId\");\n        spawner.spawn(new Runnable() {\n            @Override\n            public void run() {\n                throw new CommandLineExitException(\"Expected exception\");\n            }\n        });\n        spawner.awaitCompletion();\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 99, "test_prefix_end_lineno": 113, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/ThreadSpawner.java", "focal_method": "    public void awaitCompletion() {\n        for (Thread thread : threads) {\n            try {\n                thread.join();\n            } catch (InterruptedException e) {\n                throw rethrow(e);\n            }\n        }\n        if (caughtException != null) {\n            throw rethrow(caughtException);\n        }\n    }", "focal_method_start_lineno": 124, "focal_method_end_lineno": 135, "ground_truth_oracle": "assertTrue(exceptionFile.exists());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testThreadSpawnerException_reportException() {\n        File exceptionFile = new File(getUserDir(), \"1.exception\");\n\n        ThreadSpawner spawner = new ThreadSpawner(\"AnyTestCaseId\");\n        spawner.spawn(new Runnable() {\n            @Override\n            public void run() {\n                throw new CommandLineExitException(\"Expected exception\");\n            }\n        });\n        spawner.awaitCompletion();\n\n    }", "original_test_prefix": "    @Test\n    public void testThreadSpawnerException_reportException() {\n        File exceptionFile = new File(getUserDir(), \"1.exception\");\n\n        ThreadSpawner spawner = new ThreadSpawner(\"AnyTestCaseId\");\n        spawner.spawn(new Runnable() {\n            @Override\n            public void run() {\n                throw new CommandLineExitException(\"Expected exception\");\n            }\n        });\n        spawner.awaitCompletion();\n\n        assertTrue(exceptionFile.exists());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.ThreadSpawnerTest#testThreadSpawnerException_reportException", "test_setup_list": [{"test_setup": "@Before\n    public void before() {\n        setupFakeUserDir();\n        ExceptionReporter.reset();\n    }", "start_lineno": 28, "end_lineno": 32}]}
{"index": 354, "project_index": 185, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "XPathFilterTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/parse/filter/XPathFilterTest.java", "test_name": "testScriptExtraction", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/parse/filter/XPathFilterTest.java", "test_setup": "@Before\n    public void setupParserBolt() {\n        bolt = new JSoupParserBolt();\n        setupParserBolt(bolt);\n    }", "test_setup_start_lineno": 28, "test_setup_end_lineno": 32, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/parse/filter/XPathFilterTest.java", "test_prefix": "    @Test\n\n    public void testScriptExtraction() throws IOException {\n\n        prepareParserBolt(\"test.parsefilters.json\");\n\n        parse(\"http://www.digitalpebble.com\", \"digitalpebble.com.html\");\n\n        <AssertPlaceHolder>;\n        List<Object> parsedTuple = output.getEmitted().get(0);\n        Metadata metadata = (Metadata) parsedTuple.get(2);\n        Assert.assertNotNull(metadata);\n        String[] scripts = metadata.getValues(\"js\");\n        Assert.assertNotNull(scripts);\n\n        Assert.assertEquals(2, scripts.length);\n        Assert.assertEquals(\"\", scripts[0].trim());\n        Assert.assertTrue(scripts[1].contains(\"urchinTracker();\"));\n    }", "test_prefix_start_lineno": 52, "test_prefix_end_lineno": 70, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focal_method": "    public String[] getValues(String key) {\n        String[] values = md.get(key);\n        if (values == null) return null;\n        if (values.length == 0) return null;\n        return values;\n    }", "focal_method_start_lineno": 104, "focal_method_end_lineno": 109, "ground_truth_oracle": "Assert.assertEquals(1, output.getEmitted().size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n\n    public void testScriptExtraction() throws IOException {\n\n        prepareParserBolt(\"test.parsefilters.json\");\n\n        parse(\"http://www.digitalpebble.com\", \"digitalpebble.com.html\");\n\n    }", "original_test_prefix": "    @Test\n\n    public void testScriptExtraction() throws IOException {\n\n        prepareParserBolt(\"test.parsefilters.json\");\n\n        parse(\"http://www.digitalpebble.com\", \"digitalpebble.com.html\");\n\n        Assert.assertEquals(1, output.getEmitted().size());\n        List<Object> parsedTuple = output.getEmitted().get(0);\n        Metadata metadata = (Metadata) parsedTuple.get(2);\n        Assert.assertNotNull(metadata);\n        String[] scripts = metadata.getValues(\"js\");\n        Assert.assertNotNull(scripts);\n\n        Assert.assertEquals(2, scripts.length);\n        Assert.assertEquals(\"\", scripts[0].trim());\n        Assert.assertTrue(scripts[1].contains(\"urchinTracker();\"));\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.parse.filter.XPathFilterTest#testScriptExtraction", "test_setup_list": [{"test_setup": "@Before\n    public void setupParserBolt() {\n        bolt = new JSoupParserBolt();\n        setupParserBolt(bolt);\n    }", "start_lineno": 28, "end_lineno": 32}]}
{"index": 355, "project_index": 186, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "raml-loader", "sub_repos": [], "sub_repo": "", "commit_sha": "591fd551dc7c3f89ccf9ebbc142dba68fedfd481", "build_system": "mvn", "class_name": "GithubTest", "class_path": "src/test/java/guru/nidi/loader/basic/GithubTest.java", "test_name": "publicGithubNotModified", "test_setup_file_path": "src/test/java/guru/nidi/loader/basic/GithubTest.java", "test_setup": "@BeforeClass\n    public static void init() {\n        assumeMyLocalMachine();\n    }", "test_setup_start_lineno": 34, "test_setup_end_lineno": 37, "test_prefix_file_path": "src/test/java/guru/nidi/loader/basic/GithubTest.java", "test_prefix": "    @Test\n    public void publicGithubNotModified() throws IOException {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 57, "test_prefix_end_lineno": 60, "focal_method_file_path": "src/main/java/guru/nidi/loader/url/GithubLoader.java", "focal_method": "    @Override\n    public InputStream fetchResource(String name, long ifModifiedSince) {\n        final String res = (resourceBase == null || resourceBase.length() == 0) ? \"\" : (resourceBase + \"/\");\n        try (final InputStream raw = fetcher.fetchFromUrl(client, base, res + name, ifModifiedSince)) {\n            if (raw == null) {\n                return null;\n            }\n            @SuppressWarnings(\"unchecked\")\n            final Map<String, String> desc = new ObjectMapper().readValue(raw, Map.class);\n            return fetcher.fetchFromUrl(client, desc.get(\"download_url\"), \"\", ifModifiedSince);\n        } catch (IOException e) {\n            throw new ResourceNotFoundException(res + name, e);\n        }\n    }", "focal_method_start_lineno": 85, "focal_method_end_lineno": 98, "ground_truth_oracle": "assertNull(GithubLoader.forPublic(USER, \"raml-tester\").fetchResource(\"src/test/resources/guru/nidi/ramltester/simple.raml\", new Date(130, 0, 1).getTime()));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void publicGithubNotModified() throws IOException {\n    }", "original_test_prefix": "    @Test\n    public void publicGithubNotModified() throws IOException {\n        assertNull(GithubLoader.forPublic(USER, \"raml-tester\").fetchResource(\"src/test/resources/guru/nidi/ramltester/simple.raml\", new Date(130, 0, 1).getTime()));\n    }", "test_with_params": false, "test_target": "guru.nidi.loader.basic.GithubTest#publicGithubNotModified", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void init() {\n        assumeMyLocalMachine();\n    }", "start_lineno": 34, "end_lineno": 37}]}
{"index": 356, "project_index": 187, "class_index": 0, "test_index": 0, "user_name": "cucumber-ltd", "repo_name": "cucumber-pro-plugin-jvm", "sub_repos": [], "sub_repo": "", "commit_sha": "a09ee0b1682d3cd8b68c240820e647d4515e931f", "build_system": "mvn", "class_name": "BambooEnvironmentVariablesTest", "class_path": "src/test/java/io/cucumber/pro/environment/BambooEnvironmentVariablesTest.java", "test_name": "duplicates_bamboo_prefixed_env_vars_with_prefixless_copy", "test_setup_file_path": "src/test/java/io/cucumber/pro/environment/BambooEnvironmentVariablesTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/cucumber/pro/environment/BambooEnvironmentVariablesTest.java", "test_prefix": "    @Test\n    public void duplicates_bamboo_prefixed_env_vars_with_prefixless_copy() {\n        HashMap<String, String> env = new HashMap<String, String>() {{\n            put(\"bamboo_FOO\", \"X\");\n        }};\n        Map<String, String> convertedEnv = new BambooEnvironmentVariables().convert(env);\n\n        <AssertPlaceHolder>;\n        assertEquals(\"X\", convertedEnv.get(\"FOO\"));\n    }", "test_prefix_start_lineno": 11, "test_prefix_end_lineno": 20, "focal_method_file_path": "src/main/java/io/cucumber/pro/environment/BambooEnvironmentVariables.java", "focal_method": "    public Map<String, String> convert(Map<String, String> env) {\n        Map<String, String> result = new HashMap<>();\n        for (String key : env.keySet()) {\n            Matcher matcher = BAMBOO_PATTERN.matcher(key);\n            if (matcher.lookingAt()) {\n                String value = env.get(key);\n                String strippedVar = matcher.group(1);\n                result.put(strippedVar, value);\n            }\n        }\n        result.putAll(env);\n        return result;\n    }", "focal_method_start_lineno": 15, "focal_method_end_lineno": 27, "ground_truth_oracle": "assertEquals(\"X\", convertedEnv.get(\"bamboo_FOO\"));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void duplicates_bamboo_prefixed_env_vars_with_prefixless_copy() {\n        HashMap<String, String> env = new HashMap<String, String>() {{\n            put(\"bamboo_FOO\", \"X\");\n        }};\n        Map<String, String> convertedEnv = new BambooEnvironmentVariables().convert(env);\n\n    }", "original_test_prefix": "    @Test\n    public void duplicates_bamboo_prefixed_env_vars_with_prefixless_copy() {\n        HashMap<String, String> env = new HashMap<String, String>() {{\n            put(\"bamboo_FOO\", \"X\");\n        }};\n        Map<String, String> convertedEnv = new BambooEnvironmentVariables().convert(env);\n\n        assertEquals(\"X\", convertedEnv.get(\"bamboo_FOO\"));\n        assertEquals(\"X\", convertedEnv.get(\"FOO\"));\n    }", "test_with_params": false, "test_target": "io.cucumber.pro.environment.BambooEnvironmentVariablesTest#duplicates_bamboo_prefixed_env_vars_with_prefixless_copy", "test_setup_list": []}
{"index": 357, "project_index": 188, "class_index": 0, "test_index": 0, "user_name": "rockagen", "repo_name": "commons-lib", "sub_repos": [], "sub_repo": "", "commit_sha": "f37141cf40be79d130db804c39ce61690541d5f1", "build_system": "mvn", "class_name": "CommUtilTest", "class_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_name": "testBC", "test_setup_file_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_prefix": "    @Test\n    public void testBC() {\n        <AssertPlaceHolder>;\n        Assert.assertEquals(\".<@<%\\\"\",CommUtil.toSBC(\"\u3002<@\u300a%\u201c\"));\n\n    }", "test_prefix_start_lineno": 74, "test_prefix_end_lineno": 79, "focal_method_file_path": "src/main/java/com/rockagen/commons/util/CommUtil.java", "focal_method": "    public static String toDBC(String sbcString) {\n        if(isBlank(sbcString)){\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < sbcString.length(); i++) {\n\n            int index = ArrayUtil.indexOf(SBC, sbcString.charAt(i));\n\n            if (index != -1) {\n                sb.append(DBC[index]);\n            } else {\n                sb.append(sbcString.charAt(i));\n            }\n        }\n        return sb.toString();\n\n    }", "focal_method_start_lineno": 982, "focal_method_end_lineno": 1000, "ground_truth_oracle": "Assert.assertEquals(\"\uff01\uff1f\u300a\u300b\u201c\u2018\uff24\",CommUtil.toDBC(\"!?<>\\\"'D\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testBC() {\n    }", "original_test_prefix": "    @Test\n    public void testBC() {\n        Assert.assertEquals(\"\uff01\uff1f\u300a\u300b\u201c\u2018\uff24\",CommUtil.toDBC(\"!?<>\\\"'D\"));\n        Assert.assertEquals(\".<@<%\\\"\",CommUtil.toSBC(\"\u3002<@\u300a%\u201c\"));\n\n    }", "test_with_params": false, "test_target": "com.rockagen.commons.util.CommUtilTest#testBC", "test_setup_list": []}
{"index": 358, "project_index": 189, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_name": "blank_swap_leaves_original_as_is", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_prefix": "  @Test\n  public void blank_swap_leaves_original_as_is()\n  {\n    Puzzle p = new Puzzle(getSolution());\n    p.swapBlank(4);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 86, "test_prefix_end_lineno": 92, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java", "focal_method": "  public int getBlankIndex()\n  {\n    for (int i = 0; i < cells.length; i++)\n    {\n      if (cells[i] == blank) { return i; }\n    }\n    return -1;\n  }", "focal_method_start_lineno": 80, "focal_method_end_lineno": 87, "ground_truth_oracle": "assertEquals(8, p.getBlankIndex());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void blank_swap_leaves_original_as_is()\n  {\n    Puzzle p = new Puzzle(getSolution());\n    p.swapBlank(4);\n  }", "original_test_prefix": "  @Test\n  public void blank_swap_leaves_original_as_is()\n  {\n    Puzzle p = new Puzzle(getSolution());\n    p.swapBlank(4);\n    assertEquals(8, p.getBlankIndex());\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleTest#blank_swap_leaves_original_as_is", "test_setup_list": []}
{"index": 359, "project_index": 189, "class_index": 1, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleStateTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_name": "state_can_be_solution", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_prefix": "  @Test\n  public void state_can_be_solution()\n  {\n    Puzzle p = getSolvedPuzzle();\n    PuzzleState s = new PuzzleState(p);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 39, "test_prefix_end_lineno": 45, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focal_method": "  public boolean isSolution()\n  {\n    return puzzle.isSolved();\n  }", "focal_method_start_lineno": 25, "focal_method_end_lineno": 28, "ground_truth_oracle": "assertTrue(s.isSolution());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void state_can_be_solution()\n  {\n    Puzzle p = getSolvedPuzzle();\n    PuzzleState s = new PuzzleState(p);\n  }", "original_test_prefix": "  @Test\n  public void state_can_be_solution()\n  {\n    Puzzle p = getSolvedPuzzle();\n    PuzzleState s = new PuzzleState(p);\n    assertTrue(s.isSolution());\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleStateTest#state_can_be_solution", "test_setup_list": []}
{"index": 360, "project_index": 190, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "JenkinsTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest.java", "test_name": "testGetName", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/JenkinsTest.java", "test_prefix": "    @Test\n    public void testGetName() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 61, "test_prefix_end_lineno": 64, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/Jenkins.java", "focal_method": "    @Override\n    public String getName() {\n        return JENKINS_NAME;\n    }", "focal_method_start_lineno": 55, "focal_method_end_lineno": 58, "ground_truth_oracle": "assertEquals(\"jenkins\", new Jenkins(env()).getName());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetName() {\n    }", "original_test_prefix": "    @Test\n    public void testGetName() {\n        assertEquals(\"jenkins\", new Jenkins(env()).getName());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.JenkinsTest#testGetName", "test_setup_list": []}
{"index": 361, "project_index": 190, "class_index": 1, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "WildcardsTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "test_name": "testMatchesAgainstText", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "test_prefix": "    @Test\n    public void testMatchesAgainstText() throws Exception {\n        <AssertPlaceHolder>;\n        assertFalse(Wildcards.matches(\"abc\", \"cba\"));\n    }", "test_prefix_start_lineno": 57, "test_prefix_end_lineno": 61, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/util/Wildcards.java", "focal_method": "    public static boolean matches(final String text, final String wildcard) {\n        String pattern = wildcard.replace(\"?\", \"\\\\w\").replace(\"*\", \"\\\\w*\");\n        return (text != null && text.matches(pattern));\n    }", "focal_method_start_lineno": 42, "focal_method_end_lineno": 45, "ground_truth_oracle": "assertTrue(Wildcards.matches(\"abc\", \"abc\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testMatchesAgainstText() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testMatchesAgainstText() throws Exception {\n        assertTrue(Wildcards.matches(\"abc\", \"abc\"));\n        assertFalse(Wildcards.matches(\"abc\", \"cba\"));\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.util.WildcardsTest#testMatchesAgainstText", "test_setup_list": []}
{"index": 362, "project_index": 191, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCompositeKeyTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_name": "testEqualNotSameKeys", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OCompositeKeyTest.java", "test_prefix": "  @Test\n  public void testEqualNotSameKeys() {\n    final OCompositeKey compositeKey = new OCompositeKey();\n\n    compositeKey.addKey(\"a\");\n    compositeKey.addKey(\"b\");\n\n    final OCompositeKey anotherCompositeKey = new OCompositeKey();\n    anotherCompositeKey.addKey(\"a\");\n    anotherCompositeKey.addKey(\"b\");\n    anotherCompositeKey.addKey(\"c\");\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 31, "test_prefix_end_lineno": 44, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OCompositeKey.java", "focal_method": "  @Override\n  public boolean equals(final Object o) {\n    if (this == o)\n      return true;\n    if (o == null || getClass() != o.getClass())\n      return false;\n\n    final OCompositeKey that = (OCompositeKey) o;\n\n    return keys.equals(that.keys);\n  }", "focal_method_start_lineno": 138, "focal_method_end_lineno": 148, "ground_truth_oracle": "assertFalse(compositeKey.equals(anotherCompositeKey));", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testEqualNotSameKeys() {\n    final OCompositeKey compositeKey = new OCompositeKey();\n\n    compositeKey.addKey(\"a\");\n    compositeKey.addKey(\"b\");\n\n    final OCompositeKey anotherCompositeKey = new OCompositeKey();\n    anotherCompositeKey.addKey(\"a\");\n    anotherCompositeKey.addKey(\"b\");\n    anotherCompositeKey.addKey(\"c\");\n\n  }", "original_test_prefix": "  @Test\n  public void testEqualNotSameKeys() {\n    final OCompositeKey compositeKey = new OCompositeKey();\n\n    compositeKey.addKey(\"a\");\n    compositeKey.addKey(\"b\");\n\n    final OCompositeKey anotherCompositeKey = new OCompositeKey();\n    anotherCompositeKey.addKey(\"a\");\n    anotherCompositeKey.addKey(\"b\");\n    anotherCompositeKey.addKey(\"c\");\n\n    assertFalse(compositeKey.equals(anotherCompositeKey));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OCompositeKeyTest#testEqualNotSameKeys", "test_setup_list": []}
{"index": 363, "project_index": 191, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLCreatePropertyTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java", "test_name": "testDefaultAndMinMaxUnsafeProperty", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLCreatePropertyTest.java", "test_prefix": "  @Test\n  public void testDefaultAndMinMaxUnsafeProperty() throws Exception {\n    final ODatabaseDocumentTx db = new ODatabaseDocumentTx(\"memory:OCommandExecutorSQLCreatePropertyTest\" + System.nanoTime());\n\n    db.create();\n\n    db.command(new OCommandSQL(\"CREATE CLASS company\")).execute();\n    db.command(new OCommandSQL(\"CREATE PROPERTY company.id INTEGER (DEFAULT 5, MIN 1, MAX 10) UNSAFE\")).execute();\n\n    OClass companyClass = db.getMetadata().getSchema().getClass(\"company\");\n    OProperty idProperty = companyClass.getProperty(PROP_ID);\n\n    <AssertPlaceHolder>;\n    assertEquals(idProperty.getFullName(), PROP_FULL_ID);\n    assertEquals(idProperty.getType(), OType.INTEGER);\n    assertEquals(idProperty.getLinkedType(), null);\n    assertFalse(idProperty.isMandatory());\n    assertFalse(idProperty.isNotNull());\n    assertFalse(idProperty.isReadonly());\n    assertEquals(idProperty.getDefaultValue(), \"5\");\n    assertEquals(idProperty.getMin(), \"1\");\n    assertEquals(idProperty.getMax(), \"10\");\n\n    db.close();\n  }", "test_prefix_start_lineno": 315, "test_prefix_end_lineno": 339, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/schema/OProperty.java", "focal_method": "  public String getName();", "focal_method_start_lineno": 41, "focal_method_end_lineno": 41, "ground_truth_oracle": "assertEquals(idProperty.getName(), PROP_ID);", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test\n  public void testDefaultAndMinMaxUnsafeProperty() throws Exception {\n    final ODatabaseDocumentTx db = new ODatabaseDocumentTx(\"memory:OCommandExecutorSQLCreatePropertyTest\" + System.nanoTime());\n\n    db.create();\n\n    db.command(new OCommandSQL(\"CREATE CLASS company\")).execute();\n    db.command(new OCommandSQL(\"CREATE PROPERTY company.id INTEGER (DEFAULT 5, MIN 1, MAX 10) UNSAFE\")).execute();\n\n    OClass companyClass = db.getMetadata().getSchema().getClass(\"company\");\n    OProperty idProperty = companyClass.getProperty(PROP_ID);\n\n  }", "original_test_prefix": "  @Test\n  public void testDefaultAndMinMaxUnsafeProperty() throws Exception {\n    final ODatabaseDocumentTx db = new ODatabaseDocumentTx(\"memory:OCommandExecutorSQLCreatePropertyTest\" + System.nanoTime());\n\n    db.create();\n\n    db.command(new OCommandSQL(\"CREATE CLASS company\")).execute();\n    db.command(new OCommandSQL(\"CREATE PROPERTY company.id INTEGER (DEFAULT 5, MIN 1, MAX 10) UNSAFE\")).execute();\n\n    OClass companyClass = db.getMetadata().getSchema().getClass(\"company\");\n    OProperty idProperty = companyClass.getProperty(PROP_ID);\n\n    assertEquals(idProperty.getName(), PROP_ID);\n    assertEquals(idProperty.getFullName(), PROP_FULL_ID);\n    assertEquals(idProperty.getType(), OType.INTEGER);\n    assertEquals(idProperty.getLinkedType(), null);\n    assertFalse(idProperty.isMandatory());\n    assertFalse(idProperty.isNotNull());\n    assertFalse(idProperty.isReadonly());\n    assertEquals(idProperty.getDefaultValue(), \"5\");\n    assertEquals(idProperty.getMin(), \"1\");\n    assertEquals(idProperty.getMax(), \"10\");\n\n    db.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLCreatePropertyTest#testDefaultAndMinMaxUnsafeProperty", "test_setup_list": []}
{"index": 364, "project_index": 191, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "CheckClassTypeStepTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/CheckClassTypeStepTest.java", "test_name": "shouldCheckSubclasses", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/CheckClassTypeStepTest.java", "test_setup": "", "test_setup_start_lineno": 25, "test_setup_end_lineno": 30, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/CheckClassTypeStepTest.java", "test_prefix": "    @Test\n    public void shouldCheckSubclasses() {\n        OBasicCommandContext context = new OBasicCommandContext();\n        context.setDatabase(database);\n        OClass parentClass = createClassInstance();\n        OClass childClass = createChildClassInstance(parentClass);\n        CheckClassTypeStep step = new CheckClassTypeStep(\n                childClass.getName(), parentClass.getName(), context, false);\n\n        OResultSet result = step.syncPull(context, 20);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 14, "test_prefix_end_lineno": 25, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  default Stream<OResult> stream() {\n    return StreamSupport.stream(this, false).onClose(() -> this.close());\n  }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 71, "ground_truth_oracle": "Assert.assertEquals(0, result.stream().count());", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void shouldCheckSubclasses() {\n        OBasicCommandContext context = new OBasicCommandContext();\n        context.setDatabase(database);\n        OClass parentClass = createClassInstance();\n        OClass childClass = createChildClassInstance(parentClass);\n        CheckClassTypeStep step = new CheckClassTypeStep(\n                childClass.getName(), parentClass.getName(), context, false);\n\n        OResultSet result = step.syncPull(context, 20);\n    }", "original_test_prefix": "    @Test\n    public void shouldCheckSubclasses() {\n        OBasicCommandContext context = new OBasicCommandContext();\n        context.setDatabase(database);\n        OClass parentClass = createClassInstance();\n        OClass childClass = createChildClassInstance(parentClass);\n        CheckClassTypeStep step = new CheckClassTypeStep(\n                childClass.getName(), parentClass.getName(), context, false);\n\n        OResultSet result = step.syncPull(context, 20);\n        Assert.assertEquals(0, result.stream().count());\n    }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.CheckClassTypeStepTest#shouldCheckSubclasses", "test_setup_list": []}
{"index": 365, "project_index": 191, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "client", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ORemoteLiveQueryPushTest", "class_path": "client/src/test/java/com/orientechnologies/orient/client/remote/ORemoteLiveQueryPushTest.java", "test_name": "testLiveEvents", "test_setup_file_path": "client/src/test/java/com/orientechnologies/orient/client/remote/ORemoteLiveQueryPushTest.java", "test_setup": "@Before\n  public void before() throws IOException {\n    MockitoAnnotations.initMocks(this);\n    storage = new OStorageRemote(\"none\", null, \"\", connectionManager, null);\n\n  }", "test_setup_start_lineno": 68, "test_setup_end_lineno": 73, "test_prefix_file_path": "client/src/test/java/com/orientechnologies/orient/client/remote/ORemoteLiveQueryPushTest.java", "test_prefix": "  @Test\n  public void testLiveEvents() {\n    MockLiveListener mock = new MockLiveListener();\n    storage.registerLiveListener(10, new OLiveQueryClientListener(database, mock));\n    List<OLiveQueryResult> events = new ArrayList<>();\n    events.add(new OLiveQueryResult(OLiveQueryResult.CREATE_EVENT, new OResultInternal(), null));\n    events.add(new OLiveQueryResult(OLiveQueryResult.UPDATE_EVENT, new OResultInternal(), new OResultInternal()));\n    events.add(new OLiveQueryResult(OLiveQueryResult.DELETE_EVENT, new OResultInternal(), null));\n\n    OLiveQueryPushRequest request = new OLiveQueryPushRequest(10, OLiveQueryPushRequest.END, events);\n    request.execute(storage);\n    <AssertPlaceHolder>;\n    assertEquals(mock.countUpdate, 1);\n    assertEquals(mock.countDelete, 1);\n  }", "test_prefix_start_lineno": 75, "test_prefix_end_lineno": 89, "focal_method_file_path": "client/src/main/java/com/orientechnologies/orient/client/remote/message/OLiveQueryPushRequest.java", "focal_method": "  @Override\n  public OBinaryPushResponse execute(ORemotePushHandler remote) {\n    remote.executeLiveQueryPush(this);\n    return null;\n  }", "focal_method_start_lineno": 93, "focal_method_end_lineno": 97, "ground_truth_oracle": "assertEquals(mock.countCreate, 1);", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "  @Test\n  public void testLiveEvents() {\n    MockLiveListener mock = new MockLiveListener();\n    storage.registerLiveListener(10, new OLiveQueryClientListener(database, mock));\n    List<OLiveQueryResult> events = new ArrayList<>();\n    events.add(new OLiveQueryResult(OLiveQueryResult.CREATE_EVENT, new OResultInternal(), null));\n    events.add(new OLiveQueryResult(OLiveQueryResult.UPDATE_EVENT, new OResultInternal(), new OResultInternal()));\n    events.add(new OLiveQueryResult(OLiveQueryResult.DELETE_EVENT, new OResultInternal(), null));\n\n    OLiveQueryPushRequest request = new OLiveQueryPushRequest(10, OLiveQueryPushRequest.END, events);\n    request.execute(storage);\n  }", "original_test_prefix": "  @Test\n  public void testLiveEvents() {\n    MockLiveListener mock = new MockLiveListener();\n    storage.registerLiveListener(10, new OLiveQueryClientListener(database, mock));\n    List<OLiveQueryResult> events = new ArrayList<>();\n    events.add(new OLiveQueryResult(OLiveQueryResult.CREATE_EVENT, new OResultInternal(), null));\n    events.add(new OLiveQueryResult(OLiveQueryResult.UPDATE_EVENT, new OResultInternal(), new OResultInternal()));\n    events.add(new OLiveQueryResult(OLiveQueryResult.DELETE_EVENT, new OResultInternal(), null));\n\n    OLiveQueryPushRequest request = new OLiveQueryPushRequest(10, OLiveQueryPushRequest.END, events);\n    request.execute(storage);\n    assertEquals(mock.countCreate, 1);\n    assertEquals(mock.countUpdate, 1);\n    assertEquals(mock.countDelete, 1);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.client.remote.ORemoteLiveQueryPushTest#testLiveEvents", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws IOException {\n    MockitoAnnotations.initMocks(this);\n    storage = new OStorageRemote(\"none\", null, \"\", connectionManager, null);\n\n  }", "start_lineno": 68, "end_lineno": 73}]}
{"index": 366, "project_index": 191, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODocumentSchemalessBinarySerializationTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java", "test_name": "testSimpleEmbeddedDoc", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java", "test_setup": "@Before\n  public void createSerializer() {\n    //we want new instance before method only for network serializers\n    if (serializerVersion == ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions())\n      serializer = new ORecordSerializerNetwork();\n    else if (serializerVersion == ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions() + 1)\n      serializer = new ORecordSerializerNetworkV37();\n  }", "test_setup_start_lineno": 67, "test_setup_end_lineno": 74, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessBinarySerializationTest.java", "test_prefix": "  @Test\n  public void testSimpleEmbeddedDoc() {\n    ODatabaseRecordThreadLocal.instance().remove();\n    ODocument document = new ODocument();\n    ODocument embedded = new ODocument();\n    embedded.field(\"name\", \"test\");\n    embedded.field(\"surname\", \"something\");\n    document.field(\"embed\", embedded, OType.EMBEDDED);\n\n    byte[] res = serializer.toStream(document, false);\n    ODocument extr = (ODocument) serializer.fromStream(res, new ODocument(), new String[] {});\n    <AssertPlaceHolder>;\n    ODocument emb = extr.field(\"embed\");\n    assertNotNull(emb);\n    assertEquals(emb.<Object>field(\"name\"), embedded.field(\"name\"));\n    assertEquals(emb.<Object>field(\"surname\"), embedded.field(\"surname\"));\n  }", "test_prefix_start_lineno": 456, "test_prefix_end_lineno": 472, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  public int fields() {\n    checkForLoading();\n    checkForFields();\n    return _fieldSize;\n  }", "focal_method_start_lineno": 2098, "focal_method_end_lineno": 2102, "ground_truth_oracle": "assertEquals(document.fields(), extr.fields());", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "  @Test\n  public void testSimpleEmbeddedDoc() {\n    ODatabaseRecordThreadLocal.instance().remove();\n    ODocument document = new ODocument();\n    ODocument embedded = new ODocument();\n    embedded.field(\"name\", \"test\");\n    embedded.field(\"surname\", \"something\");\n    document.field(\"embed\", embedded, OType.EMBEDDED);\n\n    byte[] res = serializer.toStream(document, false);\n    ODocument extr = (ODocument) serializer.fromStream(res, new ODocument(), new String[] {});\n  }", "original_test_prefix": "  @Test\n  public void testSimpleEmbeddedDoc() {\n    ODatabaseRecordThreadLocal.instance().remove();\n    ODocument document = new ODocument();\n    ODocument embedded = new ODocument();\n    embedded.field(\"name\", \"test\");\n    embedded.field(\"surname\", \"something\");\n    document.field(\"embed\", embedded, OType.EMBEDDED);\n\n    byte[] res = serializer.toStream(document, false);\n    ODocument extr = (ODocument) serializer.fromStream(res, new ODocument(), new String[] {});\n    assertEquals(document.fields(), extr.fields());\n    ODocument emb = extr.field(\"embed\");\n    assertNotNull(emb);\n    assertEquals(emb.<Object>field(\"name\"), embedded.field(\"name\"));\n    assertEquals(emb.<Object>field(\"surname\"), embedded.field(\"surname\"));\n  }", "test_with_params": true, "test_target": "com.orientechnologies.orient.core.record.impl.ODocumentSchemalessBinarySerializationTest#testSimpleEmbeddedDoc[*]", "test_setup_list": [{"test_setup": "@Before\n  public void createSerializer() {\n    //we want new instance before method only for network serializers\n    if (serializerVersion == ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions())\n      serializer = new ORecordSerializerNetwork();\n    else if (serializerVersion == ORecordSerializerBinary.INSTANCE.getNumberOfSupportedVersions() + 1)\n      serializer = new ORecordSerializerNetworkV37();\n  }", "start_lineno": 67, "end_lineno": 74}]}
{"index": 367, "project_index": 192, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "SpringBootUtilTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_name": "testPropertiesParsing", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_prefix": "    @Test\n    public void testPropertiesParsing() {\n\n        Properties props = SpringBootUtil.getPropertiesResource(SpringBootUtilTest.class.getResource(\"/util/test-application.properties\"));\n        <AssertPlaceHolder>;\n\n        assertEquals(\"8081\", props.getProperty(\"management.port\"));\n        assertEquals(\"jdbc:mysql://127.0.0.1:3306\", props.getProperty(\"spring.datasource.url\"));\n        assertEquals(\"value0\", props.getProperty(\"example.nested.items[0].value\"));\n        assertEquals(\"value1\", props.getProperty(\"example.nested.items[1].value\"));\n\n    }", "test_prefix_start_lineno": 63, "test_prefix_end_lineno": 74, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/SpringBootUtil.java", "focal_method": "    protected static Properties getPropertiesResource(URL resource) {\n        Properties answer = new Properties();\n        if (resource != null) {\n            try(InputStream stream = resource.openStream()) {\n                answer.load(stream);\n            } catch (IOException e) {\n                throw new IllegalStateException(\"Error while reading resource from URL \" + resource, e);\n            }\n        }\n        return answer;\n    }", "focal_method_start_lineno": 77, "focal_method_end_lineno": 87, "ground_truth_oracle": "assertNotEquals(0, props.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testPropertiesParsing() {\n\n        Properties props = SpringBootUtil.getPropertiesResource(SpringBootUtilTest.class.getResource(\"/util/test-application.properties\"));\n    }", "original_test_prefix": "    @Test\n    public void testPropertiesParsing() {\n\n        Properties props = SpringBootUtil.getPropertiesResource(SpringBootUtilTest.class.getResource(\"/util/test-application.properties\"));\n        assertNotEquals(0, props.size());\n\n        assertEquals(\"8081\", props.getProperty(\"management.port\"));\n        assertEquals(\"jdbc:mysql://127.0.0.1:3306\", props.getProperty(\"spring.datasource.url\"));\n        assertEquals(\"value0\", props.getProperty(\"example.nested.items[0].value\"));\n        assertEquals(\"value1\", props.getProperty(\"example.nested.items[1].value\"));\n\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.SpringBootUtilTest#testPropertiesParsing", "test_setup_list": []}
{"index": 368, "project_index": 192, "class_index": 1, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "ConfigsTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/ConfigsTest.java", "test_name": "getPropertyValueTest", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/ConfigsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/ConfigsTest.java", "test_prefix": "    @Test\n    public void getPropertyValueTest(){\n        properties.setProperty(KEY_1, value);\n        System.setProperty(KEY_2, value);\n\n        <AssertPlaceHolder>;\n        assertEquals(\"value\",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties, KEY_2));\n        assertEquals(null,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties, KEY_3));\n    }", "test_prefix_start_lineno": 80, "test_prefix_end_lineno": 88, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/Configs.java", "focal_method": "    public static String getSystemPropertyWithMavenPropertyAsFallback(Properties properties, String key) {\n        String val = System.getProperty(key);\n        if (val == null && properties != null) {\n            val = properties.getProperty(key);\n        }\n        return val;\n    }", "focal_method_start_lineno": 47, "focal_method_end_lineno": 53, "ground_truth_oracle": "assertEquals(\"value\",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties, KEY_1));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void getPropertyValueTest(){\n        properties.setProperty(KEY_1, value);\n        System.setProperty(KEY_2, value);\n\n    }", "original_test_prefix": "    @Test\n    public void getPropertyValueTest(){\n        properties.setProperty(KEY_1, value);\n        System.setProperty(KEY_2, value);\n\n        assertEquals(\"value\",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties, KEY_1));\n        assertEquals(\"value\",Configs.getSystemPropertyWithMavenPropertyAsFallback(properties, KEY_2));\n        assertEquals(null,Configs.getSystemPropertyWithMavenPropertyAsFallback(properties, KEY_3));\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.ConfigsTest#getPropertyValueTest", "test_setup_list": []}
{"index": 369, "project_index": 193, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "TokenizeTest", "class_path": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java", "test_name": "singleletters", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n        loc\u012bt\u0101js = new Analyzer();\n        //loc\u012bt\u0101js=null;\n    }", "test_setup_start_lineno": 40, "test_setup_end_lineno": 44, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java", "test_prefix": "    @Test\n    public void singleletters() {\n        LinkedList<Word> tokens;        \n        tokens = Splitting.tokenize(loc\u012bt\u0101js, \"bv  q  i\", false);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 580, "test_prefix_end_lineno": 585, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Splitting.java", "focal_method": "    public static LinkedList<Word> tokenize(Analyzer morphoAnalyzer, String chunk, boolean bruteSplit) {\n        if(bruteSplit)\n        {\n            LinkedList<Word> tokens = new LinkedList<Word>();\n            if (chunk == null) return tokens;\n            String[] parts_of_string = chunk.trim().split(\" \");\n            for(String part : parts_of_string) \n            {\n                if (part.length()>0)\n                    tokens.add( (morphoAnalyzer == null) ? \n                        new Word(part) :\n                        morphoAnalyzer.analyze(part));\n            }\n            return tokens;\n        }\n        else\n        {\n            return tokenize(morphoAnalyzer, chunk);\n        }\n    }", "focal_method_start_lineno": 186, "focal_method_end_lineno": 205, "ground_truth_oracle": "assertEquals(3, tokens.size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void singleletters() {\n        LinkedList<Word> tokens;        \n        tokens = Splitting.tokenize(loc\u012bt\u0101js, \"bv  q  i\", false);\n    }", "original_test_prefix": "    @Test\n    public void singleletters() {\n        LinkedList<Word> tokens;        \n        tokens = Splitting.tokenize(loc\u012bt\u0101js, \"bv  q  i\", false);\n        assertEquals(3, tokens.size());\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.TokenizeTest#singleletters", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n        loc\u012bt\u0101js = new Analyzer();\n        //loc\u012bt\u0101js=null;\n    }", "start_lineno": 40, "end_lineno": 44}]}
{"index": 370, "project_index": 194, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "PongFrameTest", "class_path": "src/test/java/org/java_websocket/framing/PongFrameTest.java", "test_name": "testExtends", "test_setup_file_path": "src/test/java/org/java_websocket/framing/PongFrameTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/framing/PongFrameTest.java", "test_prefix": "  @Test\n  public void testExtends() {\n    PongFrame frame = new PongFrame();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 66, "test_prefix_end_lineno": 70, "focal_method_file_path": "src/main/java/org/java_websocket/framing/PongFrame.java", "focal_method": "  public PongFrame() {\n    super(Opcode.PONG);\n  }", "focal_method_start_lineno": 38, "focal_method_end_lineno": 40, "ground_truth_oracle": "assertEquals(\"Frame must extend dataframe\", true, frame instanceof ControlFrame);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testExtends() {\n    PongFrame frame = new PongFrame();\n  }", "original_test_prefix": "  @Test\n  public void testExtends() {\n    PongFrame frame = new PongFrame();\n    assertEquals(\"Frame must extend dataframe\", true, frame instanceof ControlFrame);\n  }", "test_with_params": false, "test_target": "org.java_websocket.framing.PongFrameTest#testExtends", "test_setup_list": []}
{"index": 371, "project_index": 194, "class_index": 1, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "ProtocolTest", "class_path": "src/test/java/org/java_websocket/protocols/ProtocolTest.java", "test_name": "testCopyInstance", "test_setup_file_path": "src/test/java/org/java_websocket/protocols/ProtocolTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/protocols/ProtocolTest.java", "test_prefix": "  @Test\n  public void testCopyInstance() throws Exception {\n    IProtocol protocol0 = new Protocol(\"\");\n    IProtocol protoocl1 = protocol0.copyInstance();\n    <AssertPlaceHolder>;\n    IProtocol protocol2 = new Protocol(\"protocol\");\n    IProtocol protocol3 = protocol2.copyInstance();\n    assertEquals(protocol2, protocol3);\n  }", "test_prefix_start_lineno": 74, "test_prefix_end_lineno": 82, "focal_method_file_path": "src/main/java/org/java_websocket/protocols/IProtocol.java", "focal_method": "  IProtocol copyInstance();", "focal_method_start_lineno": 62, "focal_method_end_lineno": 62, "ground_truth_oracle": "assertEquals(protocol0, protoocl1);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testCopyInstance() throws Exception {\n    IProtocol protocol0 = new Protocol(\"\");\n    IProtocol protoocl1 = protocol0.copyInstance();\n  }", "original_test_prefix": "  @Test\n  public void testCopyInstance() throws Exception {\n    IProtocol protocol0 = new Protocol(\"\");\n    IProtocol protoocl1 = protocol0.copyInstance();\n    assertEquals(protocol0, protoocl1);\n    IProtocol protocol2 = new Protocol(\"protocol\");\n    IProtocol protocol3 = protocol2.copyInstance();\n    assertEquals(protocol2, protocol3);\n  }", "test_with_params": false, "test_target": "org.java_websocket.protocols.ProtocolTest#testCopyInstance", "test_setup_list": []}
{"index": 372, "project_index": 195, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "RpcConnectionManagerTest", "class_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_name": "testGet", "test_setup_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 91, "test_prefix_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_prefix": "    @Test\n    public void testGet() {\n        Connection pool = cm.get(poolKey);\n        <AssertPlaceHolder>;\n        cm.add(getAConn());\n        Assert.assertNotNull(cm.get(poolKey));\n    }", "test_prefix_start_lineno": 142, "test_prefix_end_lineno": 148, "focal_method_file_path": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focal_method": "    @Override\n    public Connection get(String poolKey) {\n        ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey));\n        return null == pool ? null : pool.get();\n    }", "focal_method_start_lineno": 229, "focal_method_end_lineno": 233, "ground_truth_oracle": "Assert.assertNull(pool);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testGet() {\n        Connection pool = cm.get(poolKey);\n    }", "original_test_prefix": "    @Test\n    public void testGet() {\n        Connection pool = cm.get(poolKey);\n        Assert.assertNull(pool);\n        cm.add(getAConn());\n        Assert.assertNotNull(cm.get(poolKey));\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.inner.connection.RpcConnectionManagerTest#testGet", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "start_lineno": 81, "end_lineno": 91}]}
{"index": 373, "project_index": 196, "class_index": 0, "test_index": 0, "user_name": "fluenda", "repo_name": "ParCEFone", "sub_repos": [], "sub_repo": "", "commit_sha": "5067b3315c1957f930f19549ec4b354e7b8c336d", "build_system": "mvn", "class_name": "CEFParserTest", "class_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_name": "validMessageValidationAllExtenstionsTest", "test_setup_file_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/fluenda/parcefone/parser/CEFParserTest.java", "test_prefix": "    @Test\n    public void validMessageValidationAllExtenstionsTest() throws Exception {\n        String sample1 = \"CEF:0|FireEye|CMS|7.2.1.244420|DM|domain-match|1|rt=Feb 09 2015 00:27:43 UTC cn3Label=cncPort cn3=53 cn2Label=sid cn2=80494706 shost=dev001srv02.example.com proto=udp cs5Label=cncHost cs5=mfdclk001.org dvchost=DEVFEYE1 spt=61395 dvc=10.100.25.16 smac=00:00:0c:07:ac:00 cn1Label=vlan cn1=0 externalId=851777 cs4Label=link cs4=https://DEVCMS01.example.com/event_stream/events_for_bot?ev_id\\\\=851777 dmac=00:1d:a2:af:32:a1 cs1Label=sname cs1=Trojan.Generic.DNS \";\n        CEFParser parser = new CEFParser();\n\n        <AssertPlaceHolder>;\n        Assert.assertTrue(parser.parse(sample1).getHeader().containsKey(\"deviceVendor\"));\n        Assert.assertEquals(InetAddress.getByName(\"10.100.25.16\"), parser.parse(sample1).getExtension(true).get(\"dvc\"));\n        Assert.assertTrue(parser.parse(sample1).getExtension(false).containsKey(\"act\"));\n        Assert.assertNull(parser.parse(sample1).getExtension(false).get(\"act\"));\n    }", "test_prefix_start_lineno": 280, "test_prefix_end_lineno": 291, "focal_method_file_path": "src/main/java/com/fluenda/parcefone/parser/CEFParser.java", "focal_method": "    public CommonEvent parse(String cefString, final boolean validate)  {\n        return this.parse(cefString, validate, Locale.ENGLISH);\n    }", "focal_method_start_lineno": 134, "focal_method_end_lineno": 136, "ground_truth_oracle": "Assert.assertNotNull(parser.parse(sample1, true));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void validMessageValidationAllExtenstionsTest() throws Exception {\n        String sample1 = \"CEF:0|FireEye|CMS|7.2.1.244420|DM|domain-match|1|rt=Feb 09 2015 00:27:43 UTC cn3Label=cncPort cn3=53 cn2Label=sid cn2=80494706 shost=dev001srv02.example.com proto=udp cs5Label=cncHost cs5=mfdclk001.org dvchost=DEVFEYE1 spt=61395 dvc=10.100.25.16 smac=00:00:0c:07:ac:00 cn1Label=vlan cn1=0 externalId=851777 cs4Label=link cs4=https://DEVCMS01.example.com/event_stream/events_for_bot?ev_id\\\\=851777 dmac=00:1d:a2:af:32:a1 cs1Label=sname cs1=Trojan.Generic.DNS \";\n        CEFParser parser = new CEFParser();\n\n    }", "original_test_prefix": "    @Test\n    public void validMessageValidationAllExtenstionsTest() throws Exception {\n        String sample1 = \"CEF:0|FireEye|CMS|7.2.1.244420|DM|domain-match|1|rt=Feb 09 2015 00:27:43 UTC cn3Label=cncPort cn3=53 cn2Label=sid cn2=80494706 shost=dev001srv02.example.com proto=udp cs5Label=cncHost cs5=mfdclk001.org dvchost=DEVFEYE1 spt=61395 dvc=10.100.25.16 smac=00:00:0c:07:ac:00 cn1Label=vlan cn1=0 externalId=851777 cs4Label=link cs4=https://DEVCMS01.example.com/event_stream/events_for_bot?ev_id\\\\=851777 dmac=00:1d:a2:af:32:a1 cs1Label=sname cs1=Trojan.Generic.DNS \";\n        CEFParser parser = new CEFParser();\n\n        Assert.assertNotNull(parser.parse(sample1, true));\n        Assert.assertTrue(parser.parse(sample1).getHeader().containsKey(\"deviceVendor\"));\n        Assert.assertEquals(InetAddress.getByName(\"10.100.25.16\"), parser.parse(sample1).getExtension(true).get(\"dvc\"));\n        Assert.assertTrue(parser.parse(sample1).getExtension(false).containsKey(\"act\"));\n        Assert.assertNull(parser.parse(sample1).getExtension(false).get(\"act\"));\n    }", "test_with_params": false, "test_target": "com.fluenda.parcefone.parser.CEFParserTest#validMessageValidationAllExtenstionsTest", "test_setup_list": []}
{"index": 374, "project_index": 197, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "ULTest", "class_path": "src/test/java/org/jcodec/containers/mxf/ULTest.java", "test_name": "testULFromString", "test_setup_file_path": "src/test/java/org/jcodec/containers/mxf/ULTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/containers/mxf/ULTest.java", "test_prefix": "    @Test\n    public void testULFromString() {\n        UL expected = new UL(new byte[]{(byte) 0xff, 0xb, 1, 2, (byte) 0xff, 0xb, 1, 2});\n        UL fromString = UL.newUL(\"ff.b.1.2.ff.b.1.2\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 8, "test_prefix_end_lineno": 13, "focal_method_file_path": "src/main/java/org/jcodec/containers/mxf/model/UL.java", "focal_method": "    public static UL newUL(String ul) {\n        checkNotNull(ul);\n        String[] split = StringUtils.splitS(ul, \".\");\n        byte b[] = new byte[split.length];\n        for (int i = 0; i < split.length; i++) {\n            int parseInt = Integer.parseInt(split[i], 16);\n            b[i] = (byte) parseInt;\n        }\n        return new UL(b);\n    }", "focal_method_start_lineno": 42, "focal_method_end_lineno": 51, "ground_truth_oracle": "Assert.assertEquals(expected, fromString);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testULFromString() {\n        UL expected = new UL(new byte[]{(byte) 0xff, 0xb, 1, 2, (byte) 0xff, 0xb, 1, 2});\n        UL fromString = UL.newUL(\"ff.b.1.2.ff.b.1.2\");\n    }", "original_test_prefix": "    @Test\n    public void testULFromString() {\n        UL expected = new UL(new byte[]{(byte) 0xff, 0xb, 1, 2, (byte) 0xff, 0xb, 1, 2});\n        UL fromString = UL.newUL(\"ff.b.1.2.ff.b.1.2\");\n        Assert.assertEquals(expected, fromString);\n    }", "test_with_params": false, "test_target": "org.jcodec.containers.mxf.ULTest#testULFromString", "test_setup_list": []}
{"index": 375, "project_index": 198, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AListTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java", "test_name": "testFromJavaUtil", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java", "test_prefix": "    @Test\n    public void testFromJavaUtil() {\n        final AList<String> l = AList.<String>nil().cons(\"a\").cons(\"b\").cons(\"c\");\n        final AList<String> l2 = AList.create(Arrays.asList(\"c\", \"b\", \"a\"));\n        final AList<String> l3 = AList.create((Iterable<String>) Arrays.asList(\"c\", \"b\", \"a\"));\n\n        <AssertPlaceHolder>;\n        assertEquals(l, l3);\n\n        assertEquals(AList.nil(), AList.create(Collections.emptyList()));\n        assertEquals(AList.nil(), AList.create(Collections.emptySet()));\n    }", "test_prefix_start_lineno": 54, "test_prefix_end_lineno": 65, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AList.java", "focal_method": "    public static <T> AList<T> create(Iterable<T> elements) {\n        if (elements instanceof AList) {\n            return (AList<T>) elements;\n        }\n        if(elements instanceof List) {\n            return create((List<T>) elements);\n        }\n        AList<T> result = nil();\n\n        for(T el: elements) {\n            result = result.cons(el);\n        }\n        return result.reverse();\n    }", "focal_method_start_lineno": 44, "focal_method_end_lineno": 57, "ground_truth_oracle": "assertEquals(l, l2);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testFromJavaUtil() {\n        final AList<String> l = AList.<String>nil().cons(\"a\").cons(\"b\").cons(\"c\");\n        final AList<String> l2 = AList.create(Arrays.asList(\"c\", \"b\", \"a\"));\n        final AList<String> l3 = AList.create((Iterable<String>) Arrays.asList(\"c\", \"b\", \"a\"));\n\n    }", "original_test_prefix": "    @Test\n    public void testFromJavaUtil() {\n        final AList<String> l = AList.<String>nil().cons(\"a\").cons(\"b\").cons(\"c\");\n        final AList<String> l2 = AList.create(Arrays.asList(\"c\", \"b\", \"a\"));\n        final AList<String> l3 = AList.create((Iterable<String>) Arrays.asList(\"c\", \"b\", \"a\"));\n\n        assertEquals(l, l2);\n        assertEquals(l, l3);\n\n        assertEquals(AList.nil(), AList.create(Collections.emptyList()));\n        assertEquals(AList.nil(), AList.create(Collections.emptySet()));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.immutable.AListTest#testFromJavaUtil", "test_setup_list": []}
{"index": 376, "project_index": 198, "class_index": 0, "test_index": 1, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AListTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java", "test_name": "testNil", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/immutable/AListTest.java", "test_prefix": "    @Test\n    public void testNil() {\n        <AssertPlaceHolder>;\n        assertTrue(AList.nil().asJavaUtilList().isEmpty());\n    }", "test_prefix_start_lineno": 34, "test_prefix_end_lineno": 38, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/immutable/AList.java", "focal_method": "    public int size() {\n        return size;\n    }", "focal_method_start_lineno": 136, "focal_method_end_lineno": 138, "ground_truth_oracle": "assertEquals(0, AList.nil().size());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testNil() {\n    }", "original_test_prefix": "    @Test\n    public void testNil() {\n        assertEquals(0, AList.nil().size());\n        assertTrue(AList.nil().asJavaUtilList().isEmpty());\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.immutable.AListTest#testNil", "test_setup_list": []}
{"index": 377, "project_index": 198, "class_index": 1, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AJsonSerHelperTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_name": "testDoubleWithFrac1", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_prefix": "    @Test\n    public void testDoubleWithFrac1() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(1.23, 1);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 60, "test_prefix_end_lineno": 69, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java", "focal_method": "    public void writeNumberLiteral (double value, int numFracDigits) throws IOException {\n        checkAcceptsValueAndPrefixComma ();\n        out.write (new DecimalFormat (PATTERNS[numFracDigits], DECIMAL_FORMAT_SYMBOLS).format (value));\n        afterValueWritten ();\n    }", "focal_method_start_lineno": 133, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertEquals(\"1.2\", result);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testDoubleWithFrac1() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(1.23, 1);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n    }", "original_test_prefix": "    @Test\n    public void testDoubleWithFrac1() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(1.23, 1);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n        assertEquals(\"1.2\", result);\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.io.AJsonSerHelperTest#testDoubleWithFrac1", "test_setup_list": []}
{"index": 378, "project_index": 198, "class_index": 2, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "ADiGraphTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "test_name": "testNodesWithoutEdges", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "test_prefix": "    @Test\n    public void testNodesWithoutEdges() {\n        final ADiGraph<String, ASimpleEdge<String>> graph = ADiGraph.create (Arrays.asList (\"a\", \"b\", \"c\"), Arrays.asList (edge (\"a\", \"b\")));\n\n        <AssertPlaceHolder>;\n\n        assertFalse (graph.hasCycles ());\n        assertTrue (graph.minimalCycles ().isEmpty ());\n\n        assertTrue (graph.isAcyclic ());\n        assertTrue (graph.isForest ());\n        assertFalse (graph.isTree ());\n\n        assertTrue (eqSet (graph.leafNodes (), \"b\", \"c\"));\n        assertTrue (eqSet (graph.nodes (), \"a\", \"b\", \"c\"));\n        assertTrue (eqSet (graph.rootNodes (), \"a\", \"c\"));\n\n        assertEquals (\"b\", graph.sortedNodesByReachability ().get (2));\n    }", "test_prefix_start_lineno": 164, "test_prefix_end_lineno": 182, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java", "focal_method": "    public Collection<E> edges () {\n        return new ArrayIterable<> (edges);\n    }", "focal_method_start_lineno": 83, "focal_method_end_lineno": 85, "ground_truth_oracle": "assertTrue (eqSet (graph.edges (), edge (\"a\", \"b\")));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testNodesWithoutEdges() {\n        final ADiGraph<String, ASimpleEdge<String>> graph = ADiGraph.create (Arrays.asList (\"a\", \"b\", \"c\"), Arrays.asList (edge (\"a\", \"b\")));\n\n    }", "original_test_prefix": "    @Test\n    public void testNodesWithoutEdges() {\n        final ADiGraph<String, ASimpleEdge<String>> graph = ADiGraph.create (Arrays.asList (\"a\", \"b\", \"c\"), Arrays.asList (edge (\"a\", \"b\")));\n\n        assertTrue (eqSet (graph.edges (), edge (\"a\", \"b\")));\n\n        assertFalse (graph.hasCycles ());\n        assertTrue (graph.minimalCycles ().isEmpty ());\n\n        assertTrue (graph.isAcyclic ());\n        assertTrue (graph.isForest ());\n        assertFalse (graph.isTree ());\n\n        assertTrue (eqSet (graph.leafNodes (), \"b\", \"c\"));\n        assertTrue (eqSet (graph.nodes (), \"a\", \"b\", \"c\"));\n        assertTrue (eqSet (graph.rootNodes (), \"a\", \"c\"));\n\n        assertEquals (\"b\", graph.sortedNodesByReachability ().get (2));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.graph.ADiGraphTest#testNodesWithoutEdges", "test_setup_list": []}
{"index": 379, "project_index": 199, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_name": "testFriendsWithName", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 63, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testFriendsWithName() throws Exception {\n\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (match {class:Person, where:(name = 'n1' and 1 + 1 = 2)}.out('Friend'){as:friend, where:(name = 'n2' and 1 + 1 = 2)} return friend)\"))\n        .execute();\n    <AssertPlaceHolder>;\n    assertEquals(\"n2\", qResult.get(0).field(\"name\"));\n  }", "test_prefix_start_lineno": 468, "test_prefix_end_lineno": 478, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(1, qResult.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testFriendsWithName() throws Exception {\n\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (match {class:Person, where:(name = 'n1' and 1 + 1 = 2)}.out('Friend'){as:friend, where:(name = 'n2' and 1 + 1 = 2)} return friend)\"))\n        .execute();\n  }", "original_test_prefix": "  @Test\n  public void testFriendsWithName() throws Exception {\n\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (match {class:Person, where:(name = 'n1' and 1 + 1 = 2)}.out('Friend'){as:friend, where:(name = 'n2' and 1 + 1 = 2)} return friend)\"))\n        .execute();\n    assertEquals(1, qResult.size());\n    assertEquals(\"n2\", qResult.get(0).field(\"name\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionTest#testFriendsWithName", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 29, "end_lineno": 63}]}
{"index": 380, "project_index": 199, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OPropertyMapIndexDefinitionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_name": "testCreateValueWrongParameter", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }\n\n@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "test_setup_start_lineno": 23, "test_setup_end_lineno": 27, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinitionTest.java", "test_prefix": "  @Test\n  public void testCreateValueWrongParameter() {\n    final Object result = propertyIndexByKey.createValue(Collections.singletonList(\"tt\"));\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 89, "test_prefix_end_lineno": 93, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OPropertyMapIndexDefinition.java", "focal_method": "  @Override\n  public Object createValue(List<?> params) {\n    if (!(params.get(0) instanceof Map))\n      return null;\n\n    final Collection<?> mapParams = extractMapParams((Map<?, ?>) params.get(0));\n    final List<Object> result = new ArrayList<Object>(mapParams.size());\n    for (final Object mapParam : mapParams) {\n      result.add(createSingleValue(mapParam));\n    }\n\n    return result;\n  }", "focal_method_start_lineno": 64, "focal_method_end_lineno": 76, "ground_truth_oracle": "Assert.assertNull(result);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testCreateValueWrongParameter() {\n    final Object result = propertyIndexByKey.createValue(Collections.singletonList(\"tt\"));\n  }", "original_test_prefix": "  @Test\n  public void testCreateValueWrongParameter() {\n    final Object result = propertyIndexByKey.createValue(Collections.singletonList(\"tt\"));\n    Assert.assertNull(result);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.index.OPropertyMapIndexDefinitionTest#testCreateValueWrongParameter", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    mapToTest.put(\"st1\", 1);\n    mapToTest.put(\"st2\", 2);\n  }", "start_lineno": 23, "end_lineno": 27}, {"test_setup": "@Before\n  public void beforeMethod() {\n    propertyIndexByKey = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.STRING,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByIntegerKey = new OPropertyMapIndexDefinition(\"testClass\", \"fTwo\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.KEY);\n    propertyIndexByValue = new OPropertyMapIndexDefinition(\"testClass\", \"fOne\", OType.INTEGER,\n        OPropertyMapIndexDefinition.INDEX_BY.VALUE);\n  }", "start_lineno": 29, "end_lineno": 37}]}
{"index": 381, "project_index": 200, "class_index": 0, "test_index": 0, "user_name": "basis-technology-corp", "repo_name": "tcl-regex-java", "sub_repos": [], "sub_repo": "", "commit_sha": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62", "build_system": "mvn", "class_name": "MatcherTest", "class_path": "src/test/java/apitests/MatcherTest.java", "test_name": "findPrefix", "test_setup_file_path": "src/test/java/apitests/MatcherTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/apitests/MatcherTest.java", "test_prefix": "    @Test\n    public void findPrefix() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"(?i)ab\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"abcdefg\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 122, "test_prefix_end_lineno": 127, "focal_method_file_path": "src/main/java/com/basistech/tclre/ReMatcher.java", "focal_method": "    boolean find();", "focal_method_start_lineno": 61, "focal_method_end_lineno": 61, "ground_truth_oracle": "assertTrue(matcher.find());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void findPrefix() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"(?i)ab\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"abcdefg\");\n    }", "original_test_prefix": "    @Test\n    public void findPrefix() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"(?i)ab\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"abcdefg\");\n        assertTrue(matcher.find());\n    }", "test_with_params": false, "test_target": "apitests.MatcherTest#findPrefix", "test_setup_list": []}
{"index": 382, "project_index": 201, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "CABACTest", "class_path": "src/test/java/org/jcodec/codecs/h264/CABACTest.java", "test_name": "testMBSkipFlag", "test_setup_file_path": "src/test/java/org/jcodec/codecs/h264/CABACTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/codecs/h264/CABACTest.java", "test_prefix": "    @Test\n    public void testMBSkipFlag() {\n        CABAC cabac = new CABAC(2);\n        MockMDecoder m = new MockMDecoder(new int[] { 0 }, new int[] { 11 });\n        <AssertPlaceHolder>;\n\n        m = new MockMDecoder(new int[] { 0 }, new int[] { 12 });\n        Assert.assertEquals(false, cabac.readMBSkipFlag(m, SliceType.P, true, false, 1));\n\n        m = new MockMDecoder(new int[] { 0 }, new int[] { 12 });\n        Assert.assertEquals(false, cabac.readMBSkipFlag(m, SliceType.P, false, true, 0));\n\n        m = new MockMDecoder(new int[] { 0 }, new int[] { 13 });\n        Assert.assertEquals(false, cabac.readMBSkipFlag(m, SliceType.P, true, true, 1));\n    }", "test_prefix_start_lineno": 148, "test_prefix_end_lineno": 162, "focal_method_file_path": "src/main/java/org/jcodec/codecs/h264/io/CABAC.java", "focal_method": "    public boolean readMBSkipFlag(MDecoder mDecoder, SliceType slType, boolean leftAvailable, boolean topAvailable,\n            int mbX) {\n        int base = slType == SliceType.P ? 11 : 24;\n\n        boolean ret = mDecoder.decodeBin(base + (leftAvailable && !skipFlagLeft ? 1 : 0)\n                + (topAvailable && !skipFlagsTop[mbX] ? 1 : 0)) == 1;\n\n        skipFlagLeft = skipFlagsTop[mbX] = ret;\n\n        return ret;\n    }", "focal_method_start_lineno": 703, "focal_method_end_lineno": 713, "ground_truth_oracle": "Assert.assertEquals(false, cabac.readMBSkipFlag(m, SliceType.P, false, false, 0));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testMBSkipFlag() {\n        CABAC cabac = new CABAC(2);\n        MockMDecoder m = new MockMDecoder(new int[] { 0 }, new int[] { 11 });\n    }", "original_test_prefix": "    @Test\n    public void testMBSkipFlag() {\n        CABAC cabac = new CABAC(2);\n        MockMDecoder m = new MockMDecoder(new int[] { 0 }, new int[] { 11 });\n        Assert.assertEquals(false, cabac.readMBSkipFlag(m, SliceType.P, false, false, 0));\n\n        m = new MockMDecoder(new int[] { 0 }, new int[] { 12 });\n        Assert.assertEquals(false, cabac.readMBSkipFlag(m, SliceType.P, true, false, 1));\n\n        m = new MockMDecoder(new int[] { 0 }, new int[] { 12 });\n        Assert.assertEquals(false, cabac.readMBSkipFlag(m, SliceType.P, false, true, 0));\n\n        m = new MockMDecoder(new int[] { 0 }, new int[] { 13 });\n        Assert.assertEquals(false, cabac.readMBSkipFlag(m, SliceType.P, true, true, 1));\n    }", "test_with_params": false, "test_target": "org.jcodec.codecs.h264.CABACTest#testMBSkipFlag", "test_setup_list": []}
{"index": 383, "project_index": 201, "class_index": 1, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "Yuv420pToRgbTest", "class_path": "src/test/java/org/jcodec/scale/Yuv420pToRgbTest.java", "test_name": "testYuv420pToRgbH2H", "test_setup_file_path": "src/test/java/org/jcodec/scale/Yuv420pToRgbTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/scale/Yuv420pToRgbTest.java", "test_prefix": "    @Test\n    public void testYuv420pToRgbH2H() {\n        Yuv420pToRgb transform = new Yuv420pToRgb();\n        Picture _in = Picture.createPictureHiBD(4, 4, new byte[][] { yH, uH, vH }, new byte[][] { yL, uL, vL },\n                ColorSpace.YUV420, 2);\n        Picture out = Picture.createCroppedHiBD(4, 4, 2, ColorSpace.RGB, null);\n        transform.transform(_in, out);\n\n        <AssertPlaceHolder>;\n        Assert.assertArrayEquals(rgbL, out.getLowBits()[0]);\n    }", "test_prefix_start_lineno": 60, "test_prefix_end_lineno": 70, "focal_method_file_path": "src/main/java/org/jcodec/common/model/Picture.java", "focal_method": "    public byte[] getPlaneData(int plane) {\n        return data[plane];\n    }", "focal_method_start_lineno": 133, "focal_method_end_lineno": 135, "ground_truth_oracle": "Assert.assertArrayEquals(rgbH, out.getPlaneData(0));", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testYuv420pToRgbH2H() {\n        Yuv420pToRgb transform = new Yuv420pToRgb();\n        Picture _in = Picture.createPictureHiBD(4, 4, new byte[][] { yH, uH, vH }, new byte[][] { yL, uL, vL },\n                ColorSpace.YUV420, 2);\n        Picture out = Picture.createCroppedHiBD(4, 4, 2, ColorSpace.RGB, null);\n        transform.transform(_in, out);\n\n    }", "original_test_prefix": "    @Test\n    public void testYuv420pToRgbH2H() {\n        Yuv420pToRgb transform = new Yuv420pToRgb();\n        Picture _in = Picture.createPictureHiBD(4, 4, new byte[][] { yH, uH, vH }, new byte[][] { yL, uL, vL },\n                ColorSpace.YUV420, 2);\n        Picture out = Picture.createCroppedHiBD(4, 4, 2, ColorSpace.RGB, null);\n        transform.transform(_in, out);\n\n        Assert.assertArrayEquals(rgbH, out.getPlaneData(0));\n        Assert.assertArrayEquals(rgbL, out.getLowBits()[0]);\n    }", "test_with_params": false, "test_target": "org.jcodec.scale.Yuv420pToRgbTest#testYuv420pToRgbH2H", "test_setup_list": []}
{"index": 384, "project_index": 202, "class_index": 0, "test_index": 0, "user_name": "rhwayfun", "repo_name": "spring-boot-rocketmq-starter", "sub_repos": [], "sub_repo": "", "commit_sha": "642a6745434e3f7ea2e6bca42d3b8f450590441c", "build_system": "mvn", "class_name": "RocketMqAutoConfigurationTest", "class_path": "src/test/java/io/github/rhwayfun/springboot/rocketmq/starter/config/RocketMqAutoConfigurationTest.java", "test_name": "defaultRocketMqProducer", "test_setup_file_path": "src/test/java/io/github/rhwayfun/springboot/rocketmq/starter/config/RocketMqAutoConfigurationTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/github/rhwayfun/springboot/rocketmq/starter/config/RocketMqAutoConfigurationTest.java", "test_prefix": "    @Test\n    public void defaultRocketMqProducer() {\n\n        load(\"spring.rocketmq.nameServer=\" + TEST_NAME_SERVER,\n                \"spring.rocketmq.producer-group-name=\" + TEST_PRODUCER_GROUP);\n\n        <AssertPlaceHolder>;\n        Assert.assertTrue(this.context.containsBean(\"mqProducer\"));\n\n        DefaultRocketMqProducer defaultRocketMqProducer = this.context.getBean(DefaultRocketMqProducer.class);\n        DefaultMQProducer defaultMQProducer = defaultRocketMqProducer.getProducer();\n\n        Assert.assertEquals(defaultMQProducer.getNamesrvAddr(), TEST_NAME_SERVER);\n        Assert.assertEquals(defaultMQProducer.getProducerGroup(), TEST_PRODUCER_GROUP);\n    }", "test_prefix_start_lineno": 40, "test_prefix_end_lineno": 54, "focal_method_file_path": "src/main/java/io/github/rhwayfun/springboot/rocketmq/starter/common/DefaultRocketMqProducer.java", "focal_method": "    public DefaultMQProducer getProducer() {\n        return producer;\n    }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 71, "ground_truth_oracle": "Assert.assertTrue(this.context.containsBean(\"defaultRocketMqProducer\"));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void defaultRocketMqProducer() {\n\n        load(\"spring.rocketmq.nameServer=\" + TEST_NAME_SERVER,\n                \"spring.rocketmq.producer-group-name=\" + TEST_PRODUCER_GROUP);\n\n    }", "original_test_prefix": "    @Test\n    public void defaultRocketMqProducer() {\n\n        load(\"spring.rocketmq.nameServer=\" + TEST_NAME_SERVER,\n                \"spring.rocketmq.producer-group-name=\" + TEST_PRODUCER_GROUP);\n\n        Assert.assertTrue(this.context.containsBean(\"defaultRocketMqProducer\"));\n        Assert.assertTrue(this.context.containsBean(\"mqProducer\"));\n\n        DefaultRocketMqProducer defaultRocketMqProducer = this.context.getBean(DefaultRocketMqProducer.class);\n        DefaultMQProducer defaultMQProducer = defaultRocketMqProducer.getProducer();\n\n        Assert.assertEquals(defaultMQProducer.getNamesrvAddr(), TEST_NAME_SERVER);\n        Assert.assertEquals(defaultMQProducer.getProducerGroup(), TEST_PRODUCER_GROUP);\n    }", "test_with_params": false, "test_target": "io.github.rhwayfun.springboot.rocketmq.starter.config.RocketMqAutoConfigurationTest#defaultRocketMqProducer", "test_setup_list": []}
{"index": 385, "project_index": 203, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "TextExtractorTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/parse/TextExtractorTest.java", "test_name": "testExclusionCase", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/parse/TextExtractorTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/parse/TextExtractorTest.java", "test_prefix": "    @Test\n    public void testExclusionCase() throws IOException {\n        Config conf = new Config();\n        conf.put(TextExtractor.EXCLUDE_PARAM_NAME, \"style\");\n\n        TextExtractor extractor = new TextExtractor(conf);\n\n        String content = \"<html>the<STYLE>main</STYLE>content of the page</html>\";\n\n        Document jsoupDoc = Parser.htmlParser().parseInput(content, \"http://stormcrawler.net\");\n        String text = extractor.text(jsoupDoc.body());\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 58, "test_prefix_end_lineno": 71, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/parse/TextExtractor.java", "focal_method": "    public String text(Element element) {\n        // not interested in getting any text?\n        if (noText) return \"\";\n\n        // no patterns at all - return the text from the whole document\n        if (inclusionPatterns.size() == 0 && excludedTags.size() == 0) {\n            return _text(element);\n        }\n\n        Elements matches = new Elements();\n\n        for (String pattern : inclusionPatterns) {\n            matches = element.select(pattern);\n            if (!matches.isEmpty()) break;\n        }\n\n        // if nothing matches or no patterns were defined use the whole doc\n        if (matches.isEmpty()) {\n            matches.add(element);\n        }\n\n        final StringBuilder accum = new StringBuilder();\n\n        for (Element node : matches) {\n            accum.append(_text(node)).append(\"\\n\");\n        }\n\n        return accum.toString().trim();\n    }", "focal_method_start_lineno": 74, "focal_method_end_lineno": 102, "ground_truth_oracle": "assertEquals(\"the content of the page\", text);", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void testExclusionCase() throws IOException {\n        Config conf = new Config();\n        conf.put(TextExtractor.EXCLUDE_PARAM_NAME, \"style\");\n\n        TextExtractor extractor = new TextExtractor(conf);\n\n        String content = \"<html>the<STYLE>main</STYLE>content of the page</html>\";\n\n        Document jsoupDoc = Parser.htmlParser().parseInput(content, \"http://stormcrawler.net\");\n        String text = extractor.text(jsoupDoc.body());\n\n    }", "original_test_prefix": "    @Test\n    public void testExclusionCase() throws IOException {\n        Config conf = new Config();\n        conf.put(TextExtractor.EXCLUDE_PARAM_NAME, \"style\");\n\n        TextExtractor extractor = new TextExtractor(conf);\n\n        String content = \"<html>the<STYLE>main</STYLE>content of the page</html>\";\n\n        Document jsoupDoc = Parser.htmlParser().parseInput(content, \"http://stormcrawler.net\");\n        String text = extractor.text(jsoupDoc.body());\n\n        assertEquals(\"the content of the page\", text);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.parse.TextExtractorTest#testExclusionCase", "test_setup_list": []}
{"index": 386, "project_index": 203, "class_index": 1, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "MetadataFilterTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MetadataFilterTest.java", "test_name": "testFilterNoMD", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MetadataFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MetadataFilterTest.java", "test_prefix": "    @Test\n    public void testFilterNoMD() throws MalformedURLException {\n        URLFilter filter = createFilter(\"key\", \"val\");\n        URL url = new URL(\"http://www.sourcedomain.com/\");\n        Metadata metadata = new Metadata();\n        String filterResult = filter.filter(url, metadata, url.toExternalForm());\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 39, "test_prefix_end_lineno": 46, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focal_method": "    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter);", "focal_method_start_lineno": 35, "focal_method_end_lineno": 35, "ground_truth_oracle": "Assert.assertEquals(url.toExternalForm(), filterResult);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testFilterNoMD() throws MalformedURLException {\n        URLFilter filter = createFilter(\"key\", \"val\");\n        URL url = new URL(\"http://www.sourcedomain.com/\");\n        Metadata metadata = new Metadata();\n        String filterResult = filter.filter(url, metadata, url.toExternalForm());\n    }", "original_test_prefix": "    @Test\n    public void testFilterNoMD() throws MalformedURLException {\n        URLFilter filter = createFilter(\"key\", \"val\");\n        URL url = new URL(\"http://www.sourcedomain.com/\");\n        Metadata metadata = new Metadata();\n        String filterResult = filter.filter(url, metadata, url.toExternalForm());\n        Assert.assertEquals(url.toExternalForm(), filterResult);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.MetadataFilterTest#testFilterNoMD", "test_setup_list": []}
{"index": 387, "project_index": 203, "class_index": 2, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "BasicIndexingTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_name": "testOtherHostCanonicalURL", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_setup": "@Before\n    public void setupIndexerBolt() {\n        bolt = new DummyIndexer();\n        setupIndexerBolt(bolt);\n    }", "test_setup_start_lineno": 35, "test_setup_end_lineno": 39, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/indexer/BasicIndexingTest.java", "test_prefix": "    @Test\n    public void testOtherHostCanonicalURL() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n        config.put(AbstractIndexerBolt.canonicalMetadataParamName, \"canonical\");\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"canonical\", \"http://www.google.com/\");\n\n        prepareIndexerBolt(config);\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 116, "test_prefix_end_lineno": 134, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focal_method": "    public void setValue(String key, String value) {\n        checkLockException();\n\n        md.put(key, new String[] {value});\n    }", "focal_method_start_lineno": 125, "focal_method_end_lineno": 129, "ground_truth_oracle": "Assert.assertEquals( \"Ignore if the canonical URL references other host\", \"http://www.digitalpebble.com\", fields.get(\"url\"));", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "    @Test\n    public void testOtherHostCanonicalURL() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n        config.put(AbstractIndexerBolt.canonicalMetadataParamName, \"canonical\");\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"canonical\", \"http://www.google.com/\");\n\n        prepareIndexerBolt(config);\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n    }", "original_test_prefix": "    @Test\n    public void testOtherHostCanonicalURL() throws Exception {\n        Map config = new HashMap();\n        config.put(AbstractIndexerBolt.urlFieldParamName, \"url\");\n        config.put(AbstractIndexerBolt.canonicalMetadataParamName, \"canonical\");\n\n        Metadata metadata = new Metadata();\n        metadata.setValue(\"canonical\", \"http://www.google.com/\");\n\n        prepareIndexerBolt(config);\n\n        index(URL, metadata);\n        Map<String, String> fields = ((DummyIndexer) bolt).returnFields();\n\n        Assert.assertEquals( \"Ignore if the canonical URL references other host\", \"http://www.digitalpebble.com\", fields.get(\"url\"));\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.indexer.BasicIndexingTest#testOtherHostCanonicalURL", "test_setup_list": [{"test_setup": "@Before\n    public void setupIndexerBolt() {\n        bolt = new DummyIndexer();\n        setupIndexerBolt(bolt);\n    }", "start_lineno": 35, "end_lineno": 39}]}
{"index": 388, "project_index": 204, "class_index": 0, "test_index": 0, "user_name": "javadev", "repo_name": "moneytostr-russian", "sub_repos": [], "sub_repo": "", "commit_sha": "d39c8729e15292d4f3d38ddbae68977f170f482b", "build_system": "mvn", "class_name": "MoneyToStrTest", "class_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_name": "checkEURRUSCustom", "test_setup_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "test_setup_start_lineno": 106, "test_setup_end_lineno": 174, "test_prefix_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_prefix": "    @Test\n    public void checkEURRUSCustom() {\n        <AssertPlaceHolder>;\n        assertEquals(\n                \"\u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\"\n                        + \"\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0435\u0432\u0440\u043e 12 \u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\",\n                moneyToStrCustom.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0447\u0435\u0442\u044b\u0440\u0435 ??? \u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\"\n                        + \"\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0435\u0432\u0440\u043e 12 \u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\",\n                moneyToStrCustom.convert(V_234978637287197540L, V_12L));\n    }", "test_prefix_start_lineno": 434, "test_prefix_end_lineno": 445, "focal_method_file_path": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focal_method": "    public String convert(Double theMoney) {\n        if (theMoney == null) {\n            throw new IllegalArgumentException(\"theMoney is null\");\n        }\n        Long intPart = theMoney.longValue();\n        Long fractPart = Math.round((theMoney - intPart) * NUM100);\n        if (currency == Currency.PER1000) {\n            fractPart = Math.round((theMoney - intPart) * NUM1000);\n        }\n        return convert(intPart, fractPart);\n    }", "focal_method_start_lineno": 442, "focal_method_end_lineno": 452, "ground_truth_oracle": "assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0435\u0432\u0440\u043e 00 \u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", moneyToStrCustom.convert(V_300D));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void checkEURRUSCustom() {\n    }", "original_test_prefix": "    @Test\n    public void checkEURRUSCustom() {\n        assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0435\u0432\u0440\u043e 00 \u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", moneyToStrCustom.convert(V_300D));\n        assertEquals(\n                \"\u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\"\n                        + \"\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0435\u0432\u0440\u043e 12 \u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\",\n                moneyToStrCustom.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0447\u0435\u0442\u044b\u0440\u0435 ??? \u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\"\n                        + \"\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0435\u0432\u0440\u043e 12 \u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\",\n                moneyToStrCustom.convert(V_234978637287197540L, V_12L));\n    }", "test_with_params": false, "test_target": "com.github.moneytostr.MoneyToStrTest#checkEURRUSCustom", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "start_lineno": 106, "end_lineno": 174}]}
{"index": 389, "project_index": 204, "class_index": 0, "test_index": 1, "user_name": "javadev", "repo_name": "moneytostr-russian", "sub_repos": [], "sub_repo": "", "commit_sha": "d39c8729e15292d4f3d38ddbae68977f170f482b", "build_system": "mvn", "class_name": "MoneyToStrTest", "class_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_name": "checkEURRUS", "test_setup_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "test_setup_start_lineno": 106, "test_setup_end_lineno": 174, "test_prefix_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_prefix": "    @Test\n    public void checkEURRUS() {\n        <AssertPlaceHolder>;\n        assertEquals(\n                \"\u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\"\n                        + \"\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0435\u0432\u0440\u043e 12 \u0446\u0435\u043d\u0442\u043e\u0432\",\n                moneyToStrEURRUS.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0447\u0435\u0442\u044b\u0440\u0435 ??? \u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\"\n                        + \"\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0435\u0432\u0440\u043e 12 \u0446\u0435\u043d\u0442\u043e\u0432\",\n                moneyToStrEURRUS.convert(V_234978637287197540L, V_12L));\n    }", "test_prefix_start_lineno": 356, "test_prefix_end_lineno": 367, "focal_method_file_path": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focal_method": "    public String convert(Double theMoney) {\n        if (theMoney == null) {\n            throw new IllegalArgumentException(\"theMoney is null\");\n        }\n        Long intPart = theMoney.longValue();\n        Long fractPart = Math.round((theMoney - intPart) * NUM100);\n        if (currency == Currency.PER1000) {\n            fractPart = Math.round((theMoney - intPart) * NUM1000);\n        }\n        return convert(intPart, fractPart);\n    }", "focal_method_start_lineno": 442, "focal_method_end_lineno": 452, "ground_truth_oracle": "assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0435\u0432\u0440\u043e 00 \u0446\u0435\u043d\u0442\u043e\u0432\", moneyToStrEURRUS.convert(V_300D));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void checkEURRUS() {\n    }", "original_test_prefix": "    @Test\n    public void checkEURRUS() {\n        assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0435\u0432\u0440\u043e 00 \u0446\u0435\u043d\u0442\u043e\u0432\", moneyToStrEURRUS.convert(V_300D));\n        assertEquals(\n                \"\u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\"\n                        + \"\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0435\u0432\u0440\u043e 12 \u0446\u0435\u043d\u0442\u043e\u0432\",\n                moneyToStrEURRUS.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0435\u0441\u0442\u0438 \u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c \u0447\u0435\u0442\u044b\u0440\u0435 ??? \u0434\u0435\u0432\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0432\u043e\u0441\u0435\u043c\u044c \u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0448\u0435\u0441\u0442\u044c\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u0430\"\n                        + \"\u0442\u044c \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\u043e\u0432 \u0434\u0432\u0435\u0441\u0442\u0438 \u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442 \u0441\u0435\u043c\u044c \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432 \u0441\u0442\u043e \u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0435\u043c\u044c \u0442\u044b\u0441\u044f\u0447 \u043f\u044f\u0442\u044c\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0435\u0432\u0440\u043e 12 \u0446\u0435\u043d\u0442\u043e\u0432\",\n                moneyToStrEURRUS.convert(V_234978637287197540L, V_12L));\n    }", "test_with_params": false, "test_target": "com.github.moneytostr.MoneyToStrTest#checkEURRUS", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "start_lineno": 106, "end_lineno": 174}]}
{"index": 390, "project_index": 204, "class_index": 0, "test_index": 2, "user_name": "javadev", "repo_name": "moneytostr-russian", "sub_repos": [], "sub_repo": "", "commit_sha": "d39c8729e15292d4f3d38ddbae68977f170f482b", "build_system": "mvn", "class_name": "MoneyToStrTest", "class_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_name": "checkRURUKR", "test_setup_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "test_setup_start_lineno": 106, "test_setup_end_lineno": 174, "test_prefix_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_prefix": "    @Test\n    public void checkRURUKR() {\n        <AssertPlaceHolder>;\n        assertEquals(\n                \"\u0434\u0435\u0432\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0432\u0456\u0441\u0456\u043c \u0442\u0440\u0438\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0448\u0456\u0441\u0442\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u044f\u0440\u0434\u0456\u0432 \u0434\u0432\u0456\u0441\u0442\u0456 \u0432\u0456\u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0441\u0442\u043e\"\n                        + \" \u0434\u0435\u0432\u2019\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0456\u043c \u0442\u0438\u0441\u044f\u0447 \u043f\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0440\u0443\u0431\u043b\u0456\u0432 12 \u043a\u043e\u043f\u0456\u0439\u043e\u043a\",\n                moneyToStrRUR.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0456\u0441\u0442\u0456 \u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0447\u043e\u0442\u0438\u0440\u0438 ??? \u0434\u0435\u0432\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0432\u0456\u0441\u0456\u043c \u0442\u0440\u0438\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0448\u0456\u0441\u0442\u0441\u043e\u0442 \"\n                        + \"\u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u044f\u0440\u0434\u0456\u0432 \u0434\u0432\u0456\u0441\u0442\u0456 \u0432\u0456\u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0441\u0442\u043e \"\n                        + \"\u0434\u0435\u0432\u2019\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0456\u043c \u0442\u0438\u0441\u044f\u0447 \"\n                        + \"\u043f\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0440\u0443\u0431\u043b\u0456\u0432 12 \u043a\u043e\u043f\u0456\u0439\u043e\u043a\",\n                moneyToStrRUR.convert(V_234978637287197540L, V_12L));\n    }", "test_prefix_start_lineno": 280, "test_prefix_end_lineno": 293, "focal_method_file_path": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focal_method": "    public String convert(Double theMoney) {\n        if (theMoney == null) {\n            throw new IllegalArgumentException(\"theMoney is null\");\n        }\n        Long intPart = theMoney.longValue();\n        Long fractPart = Math.round((theMoney - intPart) * NUM100);\n        if (currency == Currency.PER1000) {\n            fractPart = Math.round((theMoney - intPart) * NUM1000);\n        }\n        return convert(intPart, fractPart);\n    }", "focal_method_start_lineno": 442, "focal_method_end_lineno": 452, "ground_truth_oracle": "assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0440\u0443\u0431\u043b\u0456\u0432 00 \u043a\u043e\u043f\u0456\u0439\u043e\u043a\", moneyToStrRUR.convert(V_300D));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void checkRURUKR() {\n    }", "original_test_prefix": "    @Test\n    public void checkRURUKR() {\n        assertEquals(\"\u0442\u0440\u0438\u0441\u0442\u0430 \u0440\u0443\u0431\u043b\u0456\u0432 00 \u043a\u043e\u043f\u0456\u0439\u043e\u043a\", moneyToStrRUR.convert(V_300D));\n        assertEquals(\n                \"\u0434\u0435\u0432\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0432\u0456\u0441\u0456\u043c \u0442\u0440\u0438\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0448\u0456\u0441\u0442\u0441\u043e\u0442 \u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u044f\u0440\u0434\u0456\u0432 \u0434\u0432\u0456\u0441\u0442\u0456 \u0432\u0456\u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0441\u0442\u043e\"\n                        + \" \u0434\u0435\u0432\u2019\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0456\u043c \u0442\u0438\u0441\u044f\u0447 \u043f\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0440\u0443\u0431\u043b\u0456\u0432 12 \u043a\u043e\u043f\u0456\u0439\u043e\u043a\",\n                moneyToStrRUR.convert(V_978637287197540L, V_12L));\n        assertEquals(\n                \"\u0434\u0432\u0456\u0441\u0442\u0456 \u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0447\u043e\u0442\u0438\u0440\u0438 ??? \u0434\u0435\u0432\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0432\u0456\u0441\u0456\u043c \u0442\u0440\u0438\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0448\u0456\u0441\u0442\u0441\u043e\u0442 \"\n                        + \"\u0442\u0440\u0438\u0434\u0446\u044f\u0442\u044c \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u044f\u0440\u0434\u0456\u0432 \u0434\u0432\u0456\u0441\u0442\u0456 \u0432\u0456\u0441\u0456\u043c\u0434\u0435\u0441\u044f\u0442 \u0441\u0456\u043c \u043c\u0456\u043b\u044c\u0439\u043e\u043d\u0456\u0432 \u0441\u0442\u043e \"\n                        + \"\u0434\u0435\u0432\u2019\u044f\u043d\u043e\u0441\u0442\u043e \u0441\u0456\u043c \u0442\u0438\u0441\u044f\u0447 \"\n                        + \"\u043f\u2019\u044f\u0442\u0441\u043e\u0442 \u0441\u043e\u0440\u043e\u043a \u0440\u0443\u0431\u043b\u0456\u0432 12 \u043a\u043e\u043f\u0456\u0439\u043e\u043a\",\n                moneyToStrRUR.convert(V_234978637287197540L, V_12L));\n    }", "test_with_params": false, "test_target": "com.github.moneytostr.MoneyToStrTest#checkRURUKR", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "start_lineno": 106, "end_lineno": 174}]}
{"index": 391, "project_index": 205, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_name": "puzzle_can_swap_blank", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_prefix": "  @Test\n  public void puzzle_can_swap_blank()\n  {\n    Puzzle p = new Puzzle(getSolution());\n    Puzzle c = p.swapBlank(4);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 76, "test_prefix_end_lineno": 82, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java", "focal_method": "  public int getBlankIndex()\n  {\n    for (int i = 0; i < cells.length; i++)\n    {\n      if (cells[i] == blank) { return i; }\n    }\n    return -1;\n  }", "focal_method_start_lineno": 80, "focal_method_end_lineno": 87, "ground_truth_oracle": "assertEquals(4, c.getBlankIndex());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void puzzle_can_swap_blank()\n  {\n    Puzzle p = new Puzzle(getSolution());\n    Puzzle c = p.swapBlank(4);\n  }", "original_test_prefix": "  @Test\n  public void puzzle_can_swap_blank()\n  {\n    Puzzle p = new Puzzle(getSolution());\n    Puzzle c = p.swapBlank(4);\n    assertEquals(4, c.getBlankIndex());\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleTest#puzzle_can_swap_blank", "test_setup_list": []}
{"index": 392, "project_index": 206, "class_index": 0, "test_index": 0, "user_name": "myabc", "repo_name": "markdownj", "sub_repos": ["core"], "sub_repo": "core", "commit_sha": "f8ed00caeb69fc602aa2209812d953c26c2a4263", "build_system": "mvn", "class_name": "EdgeCases", "class_path": "core/src/test/java/org/markdownj/test/EdgeCases.java", "test_name": "testSpaces", "test_setup_file_path": "core/src/test/java/org/markdownj/test/EdgeCases.java", "test_setup": "@Before\n    public void createProcessor() {\n        m = new MarkdownProcessor();\n    }", "test_setup_start_lineno": 47, "test_setup_end_lineno": 50, "test_prefix_file_path": "core/src/test/java/org/markdownj/test/EdgeCases.java", "test_prefix": "    @Test\n    public void testSpaces() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 57, "test_prefix_end_lineno": 60, "focal_method_file_path": "core/src/main/java/org/markdownj/MarkdownProcessor.java", "focal_method": "    public String markdown(String txt) {\n        if (txt == null) {\n            txt = \"\";\n        }\n        TextEditor text = new TextEditor(txt);\n\n        // Standardize line endings:\n        text.replaceAll(\"\\\\r\\\\n\", \"\\n\");     // DOS to Unix\n        text.replaceAll(\"\\\\r\", \"\\n\");        // Mac to Unix\n        text.replaceAll(\"^[ \\\\t]+$\", \"\");\n\n        // Make sure $text ends with a couple of newlines:\n        text.append(\"\\n\\n\");\n\n        text.detabify();\n        text.deleteAll(\"^[ ]+$\");\n        hashHTMLBlocks(text);\n        stripLinkDefinitions(text);\n        text = runBlockGamut(text);\n        unEscapeSpecialChars(text);\n\n        text.append(\"\\n\");\n        return text.toString();\n    }", "focal_method_start_lineno": 75, "focal_method_end_lineno": 98, "ground_truth_oracle": "assertEquals(\"\\n\", m.markdown(\" \"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testSpaces() {\n    }", "original_test_prefix": "    @Test\n    public void testSpaces() {\n        assertEquals(\"\\n\", m.markdown(\" \"));\n    }", "test_with_params": false, "test_target": "org.markdownj.test.EdgeCases#testSpaces", "test_setup_list": [{"test_setup": "@Before\n    public void createProcessor() {\n        m = new MarkdownProcessor();\n    }", "start_lineno": 47, "end_lineno": 50}]}
{"index": 393, "project_index": 207, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "GeneralTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/GeneralTest.java", "test_name": "testGetName", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/GeneralTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/GeneralTest.java", "test_prefix": "    @Test\n    public void testGetName() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 60, "test_prefix_end_lineno": 63, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/General.java", "focal_method": "    @Override\n    public String getName() {\n        return getProperty(CI_NAME);\n    }", "focal_method_start_lineno": 52, "focal_method_end_lineno": 55, "ground_truth_oracle": "assertEquals(\"ci_service\", new General(env()).getName());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetName() {\n    }", "original_test_prefix": "    @Test\n    public void testGetName() {\n        assertEquals(\"ci_service\", new General(env()).getName());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.GeneralTest#testGetName", "test_setup_list": []}
{"index": 394, "project_index": 207, "class_index": 1, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "TravisTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest.java", "test_name": "testGetPullRequest", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/TravisTest.java", "test_prefix": "    @Test\n    public void testGetPullRequest() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 75, "test_prefix_end_lineno": 78, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/Travis.java", "focal_method": "    @Override\n    public String getPullRequest() {\n        return getProperty(TRAVIS_PULL_REQUEST);\n    }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 72, "ground_truth_oracle": "assertEquals(\"pull10\", new Travis(env()).getPullRequest());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetPullRequest() {\n    }", "original_test_prefix": "    @Test\n    public void testGetPullRequest() {\n        assertEquals(\"pull10\", new Travis(env()).getPullRequest());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.TravisTest#testGetPullRequest", "test_setup_list": []}
{"index": 395, "project_index": 208, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "PerMessageDeflateExtensionTest", "class_path": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "test_name": "testGetInflater", "test_setup_file_path": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "test_prefix": "  @Test\n  public void testGetInflater() {\n    PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 161, "test_prefix_end_lineno": 165, "focal_method_file_path": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java", "focal_method": "  public Inflater getInflater() {\n    return inflater;\n  }", "focal_method_start_lineno": 57, "focal_method_end_lineno": 59, "ground_truth_oracle": "assertEquals(deflateExtension.getInflater().getRemaining(), new Inflater(true).getRemaining());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testGetInflater() {\n    PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension();\n  }", "original_test_prefix": "  @Test\n  public void testGetInflater() {\n    PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension();\n    assertEquals(deflateExtension.getInflater().getRemaining(), new Inflater(true).getRemaining());\n  }", "test_with_params": false, "test_target": "org.java_websocket.extensions.PerMessageDeflateExtensionTest#testGetInflater", "test_setup_list": []}
{"index": 396, "project_index": 208, "class_index": 1, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "CharsetfunctionsTest", "class_path": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "test_name": "testIsValidUTF8", "test_setup_file_path": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/util/CharsetfunctionsTest.java", "test_prefix": "  @Test\n  public void testIsValidUTF8() {\n    <AssertPlaceHolder>;\n\n    Assert.assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{100})));\n  }", "test_prefix_start_lineno": 55, "test_prefix_end_lineno": 60, "focal_method_file_path": "src/main/java/org/java_websocket/util/Charsetfunctions.java", "focal_method": "  public static boolean isValidUTF8(ByteBuffer data) {\n    return isValidUTF8(data, 0);\n  }", "focal_method_start_lineno": 150, "focal_method_end_lineno": 152, "ground_truth_oracle": "Assert.assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{(byte) 128})));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testIsValidUTF8() {\n  }", "original_test_prefix": "  @Test\n  public void testIsValidUTF8() {\n    Assert.assertFalse(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{(byte) 128})));\n\n    Assert.assertTrue(Charsetfunctions.isValidUTF8(ByteBuffer.wrap(new byte[]{100})));\n  }", "test_with_params": false, "test_target": "org.java_websocket.util.CharsetfunctionsTest#testIsValidUTF8", "test_setup_list": []}
{"index": 397, "project_index": 209, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "ts", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void ts() {\n        Word nop\u016bsts = loc\u012bt\u0101js.analyze(\"p\u016bsts\");\n        <AssertPlaceHolder>;\n\n        Word gr\u016bsts = loc\u012bt\u0101js.analyze(\"gr\u016bsts\");\n        assertTrue(gr\u016bsts.isRecognized());\n\n        Word mests = loc\u012bt\u0101js.analyze(\"mests\");\n        assertTrue(mests.isRecognized());\n\n        Word elsts = loc\u012bt\u0101js.analyze(\"elsts\");\n        assertTrue(elsts.isRecognized());\n\n        Word m\u0113zts = loc\u012bt\u0101js.analyze(\"m\u0113zts\");\n        assertTrue(m\u0113zts.isRecognized());\n\n        Word nests = loc\u012bt\u0101js.analyze(\"nests\");\n        assertTrue(nests.isRecognized());\n    }", "test_prefix_start_lineno": 886, "test_prefix_end_lineno": 905, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(nop\u016bsts.isRecognized());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void ts() {\n        Word nop\u016bsts = loc\u012bt\u0101js.analyze(\"p\u016bsts\");\n    }", "original_test_prefix": "    @Test\n    public void ts() {\n        Word nop\u016bsts = loc\u012bt\u0101js.analyze(\"p\u016bsts\");\n        assertTrue(nop\u016bsts.isRecognized());\n\n        Word gr\u016bsts = loc\u012bt\u0101js.analyze(\"gr\u016bsts\");\n        assertTrue(gr\u016bsts.isRecognized());\n\n        Word mests = loc\u012bt\u0101js.analyze(\"mests\");\n        assertTrue(mests.isRecognized());\n\n        Word elsts = loc\u012bt\u0101js.analyze(\"elsts\");\n        assertTrue(elsts.isRecognized());\n\n        Word m\u0113zts = loc\u012bt\u0101js.analyze(\"m\u0113zts\");\n        assertTrue(m\u0113zts.isRecognized());\n\n        Word nests = loc\u012bt\u0101js.analyze(\"nests\");\n        assertTrue(nests.isRecognized());\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#ts", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 398, "project_index": 210, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JMXRemoteUrlConnectionFactoryTest", "class_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java", "test_name": "testGetSetLog", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMBeanConnectionFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMBeanConnection = Mockito.mock(JMXMBeanConnection.class);\n        this.mockLog = Mockito.mock(Logger.class);\n\n        this.factory = new JMXRemoteUrlConnectionFactory(this.mockJmxServiceUrl);\n\n        Mockito.when(this.mockConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMBeanConnectionFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMBeanConnection);\n    }", "test_setup_start_lineno": 48, "test_setup_end_lineno": 63, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactoryTest.java", "test_prefix": "    @Test\n    public void testGetSetLog() throws Exception {\n        <AssertPlaceHolder>;\n        assertNotSame(this.mockLog, this.factory.getLog());\n\n        this.factory.setLog(this.mockLog);\n        assertSame(this.mockLog, this.factory.getLog());\n    }", "test_prefix_start_lineno": 86, "test_prefix_end_lineno": 93, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXRemoteUrlConnectionFactory.java", "focal_method": "    public Logger getLog() {\n        return log;\n    }", "focal_method_start_lineno": 71, "focal_method_end_lineno": 73, "ground_truth_oracle": "assertNotNull(this.factory.getLog());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetLog() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetLog() throws Exception {\n        assertNotNull(this.factory.getLog());\n        assertNotSame(this.mockLog, this.factory.getLog());\n\n        this.factory.setLog(this.mockLog);\n        assertSame(this.mockLog, this.factory.getLog());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.connection.impl.JMXRemoteUrlConnectionFactoryTest#testGetSetLog", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMBeanConnectionFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMBeanConnection = Mockito.mock(JMXMBeanConnection.class);\n        this.mockLog = Mockito.mock(Logger.class);\n\n        this.factory = new JMXRemoteUrlConnectionFactory(this.mockJmxServiceUrl);\n\n        Mockito.when(this.mockConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMBeanConnectionFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMBeanConnection);\n    }", "start_lineno": 48, "end_lineno": 63}]}
{"index": 399, "project_index": 211, "class_index": 0, "test_index": 0, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "InstallFeatureUtilTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/InstallFeatureUtilTest.java", "test_name": "testCombineToSet", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/InstallFeatureUtilTest.java", "test_setup": "", "test_setup_start_lineno": 43, "test_setup_end_lineno": 48, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/InstallFeatureUtilTest.java", "test_prefix": "    @Test\n    public void testCombineToSet() throws Exception {\n        Set<String> a = new HashSet<String>();\n        a.add(\"1\");\n        a.add(\"2\");\n        List<String> b = new ArrayList<String>();\n        b.add(\"1\");\n        b.add(\"3\");\n        List<String> c = new ArrayList<String>();\n        c.add(\"4\");\n        c.add(\"5\");\n        Set<String> result = InstallFeatureUtil.combineToSet(a, b, c);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 122, "test_prefix_end_lineno": 135, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/InstallFeatureUtil.java", "focal_method": "    @SafeVarargs\n    public static Set<String> combineToSet(Collection<String>... collections) {\n        Set<String> result = new HashSet<String>();\n        Set<String> lowercaseSet = new HashSet<String>();\n        for (Collection<String> collection : collections) {\n            if (collection != null) {\n                for (String value : collection) {\n                    if (!lowercaseSet.contains(value.toLowerCase())) {\n                        lowercaseSet.add(value.toLowerCase());\n                        result.add(value);\n                    }\n                }\n            }\n        }\n        return result;\n    }", "focal_method_start_lineno": 272, "focal_method_end_lineno": 287, "ground_truth_oracle": "assertEquals(5, result.size());", "ground_truth_oracle_lineno": 10, "test_prefix_wo_placeholder": "    @Test\n    public void testCombineToSet() throws Exception {\n        Set<String> a = new HashSet<String>();\n        a.add(\"1\");\n        a.add(\"2\");\n        List<String> b = new ArrayList<String>();\n        b.add(\"1\");\n        b.add(\"3\");\n        List<String> c = new ArrayList<String>();\n        c.add(\"4\");\n        c.add(\"5\");\n        Set<String> result = InstallFeatureUtil.combineToSet(a, b, c);\n    }", "original_test_prefix": "    @Test\n    public void testCombineToSet() throws Exception {\n        Set<String> a = new HashSet<String>();\n        a.add(\"1\");\n        a.add(\"2\");\n        List<String> b = new ArrayList<String>();\n        b.add(\"1\");\n        b.add(\"3\");\n        List<String> c = new ArrayList<String>();\n        c.add(\"4\");\n        c.add(\"5\");\n        Set<String> result = InstallFeatureUtil.combineToSet(a, b, c);\n        assertEquals(5, result.size());\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.InstallFeatureUtilTest#testCombineToSet", "test_setup_list": []}
{"index": 400, "project_index": 212, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "ClassCustomSerializerTest", "class_path": "src/test/java/com/alipay/remoting/rpc/serializer/ClassCustomSerializerTest.java", "test_name": "testNormalCustomSerializer", "test_setup_file_path": "src/test/java/com/alipay/remoting/rpc/serializer/ClassCustomSerializerTest.java", "test_setup": "@Before\n    public void init() {\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        server.addConnectionEventProcessor(ConnectionEventType.CLOSE, serverDisConnectProcessor);\n        server.registerUserProcessor(serverUserProcessor);\n\n        client = new RpcClient();\n        client.addConnectionEventProcessor(ConnectionEventType.CONNECT, clientConnectProcessor);\n        client.addConnectionEventProcessor(ConnectionEventType.CLOSE, clientDisConnectProcessor);\n        client.registerUserProcessor(clientUserProcessor);\n        client.init();\n    }", "test_setup_start_lineno": 76, "test_setup_end_lineno": 89, "test_prefix_file_path": "src/test/java/com/alipay/remoting/rpc/serializer/ClassCustomSerializerTest.java", "test_prefix": "    @Test\n    public void testNormalCustomSerializer() throws Exception {\n        NormalRequestBodyCustomSerializer s1 = new NormalRequestBodyCustomSerializer();\n        NormalStringCustomSerializer s2 = new NormalStringCustomSerializer();\n        CustomSerializerManager.registerCustomSerializer(RequestBody.class.getName(), s1);\n        CustomSerializerManager.registerCustomSerializer(String.class.getName(), s2);\n\n        RequestBody body = new RequestBody(1, \"hello world!\");\n        String ret = (String) client.invokeSync(addr, body, 1000);\n        <AssertPlaceHolder>;\n        Assert.assertTrue(s1.isSerialized());\n        Assert.assertTrue(s1.isDeserialized());\n        Assert.assertTrue(s2.isSerialized());\n        Assert.assertTrue(s2.isDeserialized());\n    }", "test_prefix_start_lineno": 106, "test_prefix_end_lineno": 120, "focal_method_file_path": "src/main/java/com/alipay/remoting/rpc/RpcClient.java", "focal_method": "    @Override\n    public Object invokeSync(final String address, final Object request, final int timeoutMillis)\n                                                                                                 throws RemotingException,\n                                                                                                 InterruptedException {\n        ensureStarted();\n        return this.rpcRemoting.invokeSync(address, request, null, timeoutMillis);\n    }", "focal_method_start_lineno": 214, "focal_method_end_lineno": 220, "ground_truth_oracle": "Assert.assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR + \"RANDOM\", ret);", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void testNormalCustomSerializer() throws Exception {\n        NormalRequestBodyCustomSerializer s1 = new NormalRequestBodyCustomSerializer();\n        NormalStringCustomSerializer s2 = new NormalStringCustomSerializer();\n        CustomSerializerManager.registerCustomSerializer(RequestBody.class.getName(), s1);\n        CustomSerializerManager.registerCustomSerializer(String.class.getName(), s2);\n\n        RequestBody body = new RequestBody(1, \"hello world!\");\n        String ret = (String) client.invokeSync(addr, body, 1000);\n    }", "original_test_prefix": "    @Test\n    public void testNormalCustomSerializer() throws Exception {\n        NormalRequestBodyCustomSerializer s1 = new NormalRequestBodyCustomSerializer();\n        NormalStringCustomSerializer s2 = new NormalStringCustomSerializer();\n        CustomSerializerManager.registerCustomSerializer(RequestBody.class.getName(), s1);\n        CustomSerializerManager.registerCustomSerializer(String.class.getName(), s2);\n\n        RequestBody body = new RequestBody(1, \"hello world!\");\n        String ret = (String) client.invokeSync(addr, body, 1000);\n        Assert.assertEquals(RequestBody.DEFAULT_SERVER_RETURN_STR + \"RANDOM\", ret);\n        Assert.assertTrue(s1.isSerialized());\n        Assert.assertTrue(s1.isDeserialized());\n        Assert.assertTrue(s2.isSerialized());\n        Assert.assertTrue(s2.isDeserialized());\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.rpc.serializer.ClassCustomSerializerTest#testNormalCustomSerializer", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        server.addConnectionEventProcessor(ConnectionEventType.CLOSE, serverDisConnectProcessor);\n        server.registerUserProcessor(serverUserProcessor);\n\n        client = new RpcClient();\n        client.addConnectionEventProcessor(ConnectionEventType.CONNECT, clientConnectProcessor);\n        client.addConnectionEventProcessor(ConnectionEventType.CLOSE, clientDisConnectProcessor);\n        client.registerUserProcessor(clientUserProcessor);\n        client.init();\n    }", "start_lineno": 76, "end_lineno": 89}]}
{"index": 401, "project_index": 212, "class_index": 1, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "RpcConfigManagerTest", "class_path": "src/test/java/com/alipay/remoting/rpc/RpcConfigManagerTest.java", "test_name": "testSystemSettings", "test_setup_file_path": "src/test/java/com/alipay/remoting/rpc/RpcConfigManagerTest.java", "test_setup": "@BeforeClass\n    public static void initClass() {\n    }\n\n@Before\n    public void init() {\n    }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 31, "test_prefix_file_path": "src/test/java/com/alipay/remoting/rpc/RpcConfigManagerTest.java", "test_prefix": "    @Test\n    public void testSystemSettings() {\n        <AssertPlaceHolder>;\n\n        Assert.assertFalse(RpcConfigManager.server_ssl_enable());\n        Assert.assertFalse(RpcConfigManager.server_ssl_need_client_auth());\n        Assert.assertNull(RpcConfigManager.server_ssl_keystore_pass());\n        Assert.assertNull(RpcConfigManager.server_ssl_keystore());\n        Assert.assertNull(RpcConfigManager.server_ssl_keystore_type());\n        Assert.assertEquals(KeyManagerFactory.getDefaultAlgorithm(),\n            RpcConfigManager.server_ssl_kmf_algorithm());\n\n        Assert.assertFalse(RpcConfigManager.client_ssl_enable());\n        Assert.assertNull(RpcConfigManager.client_ssl_keystore_pass());\n        Assert.assertNull(RpcConfigManager.client_ssl_keystore());\n        Assert.assertNull(RpcConfigManager.client_ssl_keystore_type());\n        Assert.assertEquals(TrustManagerFactory.getDefaultAlgorithm(),\n            RpcConfigManager.client_ssl_tmf_algorithm());\n    }", "test_prefix_start_lineno": 45, "test_prefix_end_lineno": 63, "focal_method_file_path": "src/main/java/com/alipay/remoting/rpc/RpcConfigManager.java", "focal_method": "    public static boolean dispatch_msg_list_in_default_executor() {\n        return ConfigManager.getBool(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR,\n            RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR_DEFAULT);\n    }", "focal_method_start_lineno": 29, "focal_method_end_lineno": 32, "ground_truth_oracle": "Assert.assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testSystemSettings() {\n    }", "original_test_prefix": "    @Test\n    public void testSystemSettings() {\n        Assert.assertTrue(RpcConfigManager.dispatch_msg_list_in_default_executor());\n\n        Assert.assertFalse(RpcConfigManager.server_ssl_enable());\n        Assert.assertFalse(RpcConfigManager.server_ssl_need_client_auth());\n        Assert.assertNull(RpcConfigManager.server_ssl_keystore_pass());\n        Assert.assertNull(RpcConfigManager.server_ssl_keystore());\n        Assert.assertNull(RpcConfigManager.server_ssl_keystore_type());\n        Assert.assertEquals(KeyManagerFactory.getDefaultAlgorithm(),\n            RpcConfigManager.server_ssl_kmf_algorithm());\n\n        Assert.assertFalse(RpcConfigManager.client_ssl_enable());\n        Assert.assertNull(RpcConfigManager.client_ssl_keystore_pass());\n        Assert.assertNull(RpcConfigManager.client_ssl_keystore());\n        Assert.assertNull(RpcConfigManager.client_ssl_keystore_type());\n        Assert.assertEquals(TrustManagerFactory.getDefaultAlgorithm(),\n            RpcConfigManager.client_ssl_tmf_algorithm());\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.rpc.RpcConfigManagerTest#testSystemSettings", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void initClass() {\n    }", "start_lineno": 29, "end_lineno": 31}, {"test_setup": "@Before\n    public void init() {\n    }", "start_lineno": 33, "end_lineno": 35}]}
{"index": 402, "project_index": 213, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "etl", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OETLJsonExtractorTest", "class_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLJsonExtractorTest.java", "test_name": "testEmptyCollection", "test_setup_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLJsonExtractorTest.java", "test_setup": "", "test_setup_start_lineno": 47, "test_setup_end_lineno": 57, "test_prefix_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLJsonExtractorTest.java", "test_prefix": "  @Test\n  public void testEmptyCollection() {\n    configure(\"{source: { content: { value: [] }  }, extractor : { json: {} }, loader: { test: {} } }\");\n    proc.execute();\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 36, "test_prefix_end_lineno": 42, "focal_method_file_path": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focal_method": "  public void execute() {\n    configure();\n    begin();\n    runExtractorAndPipeline();\n    end();\n  }", "focal_method_start_lineno": 172, "focal_method_end_lineno": 177, "ground_truth_oracle": "assertEquals(0, getResult().size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testEmptyCollection() {\n    configure(\"{source: { content: { value: [] }  }, extractor : { json: {} }, loader: { test: {} } }\");\n    proc.execute();\n\n  }", "original_test_prefix": "  @Test\n  public void testEmptyCollection() {\n    configure(\"{source: { content: { value: [] }  }, extractor : { json: {} }, loader: { test: {} } }\");\n    proc.execute();\n\n    assertEquals(0, getResult().size());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.etl.extractor.OETLJsonExtractorTest#testEmptyCollection", "test_setup_list": []}
{"index": 403, "project_index": 213, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_name": "testOptional3", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 63, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testOptional3() throws Exception {\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (\"\n                    + \"match {class:Person, as:a, where:(name = 'n1' and 1 + 1 = 2)}.out('Friend'){as:friend, where:(name = 'n2' and 1 + 1 = 2)},\"\n                    + \"{as:a}.out(){as:b, where:(nonExisting = 12), optional:true},\"\n                    + \"{as:friend}.out(){as:b, optional:true}\"\n                    + \" return friend)\"))\n        .execute();\n    <AssertPlaceHolder>;\n    assertEquals(\"n2\", qResult.get(0).field(\"name\"));\n\n  }", "test_prefix_start_lineno": 1351, "test_prefix_end_lineno": 1365, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(1, qResult.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testOptional3() throws Exception {\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (\"\n                    + \"match {class:Person, as:a, where:(name = 'n1' and 1 + 1 = 2)}.out('Friend'){as:friend, where:(name = 'n2' and 1 + 1 = 2)},\"\n                    + \"{as:a}.out(){as:b, where:(nonExisting = 12), optional:true},\"\n                    + \"{as:friend}.out(){as:b, optional:true}\"\n                    + \" return friend)\"))\n        .execute();\n  }", "original_test_prefix": "  @Test\n  public void testOptional3() throws Exception {\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (\"\n                    + \"match {class:Person, as:a, where:(name = 'n1' and 1 + 1 = 2)}.out('Friend'){as:friend, where:(name = 'n2' and 1 + 1 = 2)},\"\n                    + \"{as:a}.out(){as:b, where:(nonExisting = 12), optional:true},\"\n                    + \"{as:friend}.out(){as:b, optional:true}\"\n                    + \" return friend)\"))\n        .execute();\n    assertEquals(1, qResult.size());\n    assertEquals(\"n2\", qResult.get(0).field(\"name\"));\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionTest#testOptional3", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 29, "end_lineno": 63}]}
{"index": 404, "project_index": 213, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODirtyManagerTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java", "test_name": "testLink", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/impl/ODirtyManagerTest.java", "test_prefix": "  @Test\n  public void testLink() {\n    ODocument doc = new ODocument();\n    doc.field(\"test\", \"ddd\");\n    ODocument doc2 = new ODocument();\n    doc.field(\"test1\", doc2);\n    ODirtyManager manager = ORecordInternal.getDirtyManager(doc);\n    <AssertPlaceHolder>;\n    assertEquals(1, manager.getPointed(doc).size());\n    assertEquals(doc2, manager.getPointed(doc).get(0));\n  }", "test_prefix_start_lineno": 45, "test_prefix_end_lineno": 55, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODirtyManager.java", "focal_method": "  public Set<ORecord> getNewRecords() {\n    return getReal().newRecords;\n  }", "focal_method_start_lineno": 63, "focal_method_end_lineno": 65, "ground_truth_oracle": "assertEquals(2, manager.getNewRecords().size());", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "  @Test\n  public void testLink() {\n    ODocument doc = new ODocument();\n    doc.field(\"test\", \"ddd\");\n    ODocument doc2 = new ODocument();\n    doc.field(\"test1\", doc2);\n    ODirtyManager manager = ORecordInternal.getDirtyManager(doc);\n  }", "original_test_prefix": "  @Test\n  public void testLink() {\n    ODocument doc = new ODocument();\n    doc.field(\"test\", \"ddd\");\n    ODocument doc2 = new ODocument();\n    doc.field(\"test1\", doc2);\n    ODirtyManager manager = ORecordInternal.getDirtyManager(doc);\n    assertEquals(2, manager.getNewRecords().size());\n    assertEquals(1, manager.getPointed(doc).size());\n    assertEquals(doc2, manager.getPointed(doc).get(0));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.record.impl.ODirtyManagerTest#testLink", "test_setup_list": []}
{"index": 405, "project_index": 213, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "FloatSerializerTest", "class_path": "core/src/test/java/com/orientechnologies/common/serialization/types/FloatSerializerTest.java", "test_name": "testFieldSize", "test_setup_file_path": "core/src/test/java/com/orientechnologies/common/serialization/types/FloatSerializerTest.java", "test_setup": "@Before\n  public void beforeClass() {\n    floatSerializer = new OFloatSerializer();\n  }", "test_setup_start_lineno": 38, "test_setup_end_lineno": 41, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/common/serialization/types/FloatSerializerTest.java", "test_prefix": "  @Test\n  public void testFieldSize() {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 43, "test_prefix_end_lineno": 46, "focal_method_file_path": "core/src/main/java/com/orientechnologies/common/serialization/types/OFloatSerializer.java", "focal_method": "  public int getObjectSize(Float object, Object... hints) {\n    return FLOAT_SIZE;\n  }", "focal_method_start_lineno": 45, "focal_method_end_lineno": 47, "ground_truth_oracle": "Assert.assertEquals(floatSerializer.getObjectSize(null), FIELD_SIZE);", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testFieldSize() {\n  }", "original_test_prefix": "  @Test\n  public void testFieldSize() {\n    Assert.assertEquals(floatSerializer.getObjectSize(null), FIELD_SIZE);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.common.serialization.types.FloatSerializerTest#testFieldSize", "test_setup_list": [{"test_setup": "@Before\n  public void beforeClass() {\n    floatSerializer = new OFloatSerializer();\n  }", "start_lineno": 38, "end_lineno": 41}]}
{"index": 406, "project_index": 213, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "MetadataPushTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/metadata/MetadataPushTest.java", "test_name": "testSequencesUpdate", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/metadata/MetadataPushTest.java", "test_setup": "@Before\n  public void before() throws Exception {\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(MetadataPushTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(MetadataPushTest.class.getSimpleName(), \"admin\", \"admin\");\n\n    secondOrientDB = new OrientDB(\"remote:localhost\", OrientDBConfig.defaultConfig());\n    secondDatabase = orientDB.open(MetadataPushTest.class.getSimpleName(), \"admin\", \"admin\");\n\n  }", "test_setup_start_lineno": 35, "test_setup_end_lineno": 49, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/metadata/MetadataPushTest.java", "test_prefix": "  @Test\n  public void testSequencesUpdate() throws InterruptedException {\n    database.activateOnCurrentThread();\n    database.command(\"CREATE SEQUENCE test TYPE CACHED\");\n\n    Thread.sleep(500);\n    secondDatabase.activateOnCurrentThread();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 108, "test_prefix_end_lineno": 116, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/metadata/sequence/OSequenceLibrary.java", "focal_method": "  OSequence getSequence(String iName);", "focal_method_start_lineno": 38, "focal_method_end_lineno": 38, "ground_truth_oracle": "assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(\"test\"));", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testSequencesUpdate() throws InterruptedException {\n    database.activateOnCurrentThread();\n    database.command(\"CREATE SEQUENCE test TYPE CACHED\");\n\n    Thread.sleep(500);\n    secondDatabase.activateOnCurrentThread();\n  }", "original_test_prefix": "  @Test\n  public void testSequencesUpdate() throws InterruptedException {\n    database.activateOnCurrentThread();\n    database.command(\"CREATE SEQUENCE test TYPE CACHED\");\n\n    Thread.sleep(500);\n    secondDatabase.activateOnCurrentThread();\n    assertNotNull(secondDatabase.getMetadata().getSequenceLibrary().getSequence(\"test\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.metadata.MetadataPushTest#testSequencesUpdate", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws Exception {\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(MetadataPushTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(MetadataPushTest.class.getSimpleName(), \"admin\", \"admin\");\n\n    secondOrientDB = new OrientDB(\"remote:localhost\", OrientDBConfig.defaultConfig());\n    secondDatabase = orientDB.open(MetadataPushTest.class.getSimpleName(), \"admin\", \"admin\");\n\n  }", "start_lineno": 35, "end_lineno": 49}]}
{"index": 407, "project_index": 213, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OSQLMethodKeysTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodKeysTest.java", "test_name": "testWithOResult", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodKeysTest.java", "test_setup": "@Before\n  public void setup() {\n    function = new OSQLMethodKeys();\n  }", "test_setup_start_lineno": 16, "test_setup_end_lineno": 19, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodKeysTest.java", "test_prefix": "  @Test\n  public void testWithOResult() {\n\n    OResultInternal resultInternal = new OResultInternal();\n    resultInternal.setProperty(\"name\", \"Foo\");\n    resultInternal.setProperty(\"surname\", \"Bar\");\n\n    Object result = function.execute(null, null, null, resultInternal, null);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 21, "test_prefix_end_lineno": 30, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/method/misc/OSQLMethodKeys.java", "focal_method": "  @Override\n  public Object execute(Object iThis, OIdentifiable iCurrentRecord, OCommandContext iContext, Object ioResult, Object[] iParams) {\n    if (ioResult instanceof Map) {\n      return ((Map<?, ?>) ioResult).keySet();\n    }\n    if (ioResult instanceof ODocument) {\n      return Arrays.asList(((ODocument) ioResult).fieldNames());\n    }\n    if (ioResult instanceof OResult) {\n      OResult res = (OResult) ioResult;\n      return res.getPropertyNames();\n    }\n    if (ioResult instanceof Collection) {\n      List result = new ArrayList();\n      for (Object o : (Collection) ioResult) {\n        result.addAll((Collection) execute(iThis, iCurrentRecord, iContext, o, iParams));\n      }\n      return result;\n    }\n    return null;\n  }", "focal_method_start_lineno": 42, "focal_method_end_lineno": 62, "ground_truth_oracle": "assertEquals(new LinkedHashSet(Arrays.asList(\"name\", \"surname\")), result);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testWithOResult() {\n\n    OResultInternal resultInternal = new OResultInternal();\n    resultInternal.setProperty(\"name\", \"Foo\");\n    resultInternal.setProperty(\"surname\", \"Bar\");\n\n    Object result = function.execute(null, null, null, resultInternal, null);\n  }", "original_test_prefix": "  @Test\n  public void testWithOResult() {\n\n    OResultInternal resultInternal = new OResultInternal();\n    resultInternal.setProperty(\"name\", \"Foo\");\n    resultInternal.setProperty(\"surname\", \"Bar\");\n\n    Object result = function.execute(null, null, null, resultInternal, null);\n    assertEquals(new LinkedHashSet(Arrays.asList(\"name\", \"surname\")), result);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.method.misc.OSQLMethodKeysTest#testWithOResult", "test_setup_list": [{"test_setup": "@Before\n  public void setup() {\n    function = new OSQLMethodKeys();\n  }", "start_lineno": 16, "end_lineno": 19}]}
{"index": 408, "project_index": 213, "class_index": 6, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "etl", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OETLCSVExtractorTest", "class_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_name": "testNullValueInCellEmptyString", "test_setup_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_setup": "", "test_setup_start_lineno": 47, "test_setup_end_lineno": 57, "test_prefix_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_prefix": "  @Test\n  public void testNullValueInCellEmptyString() {\n    String cfgJson = \"{source: { content: { value: 'id,title,text\\n1,\\\"\\\",Hello'} }, extractor : { csv: {} },  loader : { test: {} } }\";\n\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n    <AssertPlaceHolder>;\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertThat(doc.<String>field(\"title\")).isNull();\n\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }", "test_prefix_start_lineno": 314, "test_prefix_end_lineno": 328, "focal_method_file_path": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focal_method": "  public void execute() {\n    configure();\n    begin();\n    runExtractorAndPipeline();\n    end();\n  }", "focal_method_start_lineno": 172, "focal_method_end_lineno": 177, "ground_truth_oracle": "assertFalse(res.isEmpty());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testNullValueInCellEmptyString() {\n    String cfgJson = \"{source: { content: { value: 'id,title,text\\n1,\\\"\\\",Hello'} }, extractor : { csv: {} },  loader : { test: {} } }\";\n\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n  }", "original_test_prefix": "  @Test\n  public void testNullValueInCellEmptyString() {\n    String cfgJson = \"{source: { content: { value: 'id,title,text\\n1,\\\"\\\",Hello'} }, extractor : { csv: {} },  loader : { test: {} } }\";\n\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertThat(doc.<String>field(\"title\")).isNull();\n\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.etl.extractor.OETLCSVExtractorTest#testNullValueInCellEmptyString", "test_setup_list": []}
{"index": 409, "project_index": 214, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "ObjectQueryPreparerTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java", "test_name": "testPrepareObjectNoSetters", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.preparer = new ObjectQueryPreparer();\n\n        this.mockLog = Mockito.mock(Logger.class);\n        this.mockParameterReplacer = Mockito.mock(ParameterReplacer.class);\n\n        this.testTarget001 = new TestClass001();\n        this.testTarget002 = new TestClass002();\n        this.testTarget003 = new TestClass003();\n    }", "test_setup_start_lineno": 61, "test_setup_end_lineno": 71, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryPreparerTest.java", "test_prefix": "    @Test\n    public void testPrepareObjectNoSetters() throws Exception {\n        this.initPreparer();\n\n        ObjectQueryInfo result = this.preparer.prepareObjectQuery(this.testTarget003);\n\n        <AssertPlaceHolder>;\n        Mockito.verify(this.mockLog)\n                .warn(\"ignoring attempt to prepare to poll an MBean object with no attributes: onamePattern={}\",\n                       new Object[] { this.TEST_ONAME_STR003 });\n    }", "test_prefix_start_lineno": 166, "test_prefix_end_lineno": 176, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryPreparer.java", "focal_method": "    public ObjectQueryInfo prepareObjectQuery(Object obj) throws MalformedObjectNameException {\n\n        ObjectQueryInfo result;\n\n        //\n        // Extract the mbean info from the object (TBD: cache this information ahead of time)\n        //\n        String onamePattern = MBeanAnnotationUtil.getLocationONamePattern(obj);\n\n        if (onamePattern != null) {\n            //\n            // Locate the setters and continue only if at least one was found.\n            //\n            Map<String, Method> attributeSetters = MBeanAnnotationUtil.getAttributes(obj);\n\n            if (attributeSetters.size() > 0) {\n                String onameString;\n\n                if (obj instanceof MBeanLocationParameterSource) {\n                    onameString = this.parameterReplacer\n                            .replaceObjectNameParameters(onamePattern, (MBeanLocationParameterSource) obj);\n                } else {\n                    onameString = onamePattern;\n                }\n\n                ObjectName oname = new ObjectName(onameString);\n\n                result = new ObjectQueryInfo(obj, oname, attributeSetters);\n            } else {\n                this.logNoAttributeThrottle.warn(log,\n                        \"ignoring attempt to prepare to poll an MBean object with no attributes: onamePattern={}\",\n                        onamePattern);\n                result = null;\n            }\n        } else {\n            log.warn(\"ignoring attempt to prepare to poll object that has no MBeanLocation\");\n            result = null;\n        }\n\n        return result;\n    }", "focal_method_start_lineno": 69, "focal_method_end_lineno": 109, "ground_truth_oracle": "assertNull(result);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testPrepareObjectNoSetters() throws Exception {\n        this.initPreparer();\n\n        ObjectQueryInfo result = this.preparer.prepareObjectQuery(this.testTarget003);\n\n    }", "original_test_prefix": "    @Test\n    public void testPrepareObjectNoSetters() throws Exception {\n        this.initPreparer();\n\n        ObjectQueryInfo result = this.preparer.prepareObjectQuery(this.testTarget003);\n\n        assertNull(result);\n        Mockito.verify(this.mockLog)\n                .warn(\"ignoring attempt to prepare to poll an MBean object with no attributes: onamePattern={}\",\n                       new Object[] { this.TEST_ONAME_STR003 });\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.ObjectQueryPreparerTest#testPrepareObjectNoSetters", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.preparer = new ObjectQueryPreparer();\n\n        this.mockLog = Mockito.mock(Logger.class);\n        this.mockParameterReplacer = Mockito.mock(ParameterReplacer.class);\n\n        this.testTarget001 = new TestClass001();\n        this.testTarget002 = new TestClass002();\n        this.testTarget003 = new TestClass003();\n    }", "start_lineno": 61, "end_lineno": 71}]}
{"index": 410, "project_index": 215, "class_index": 0, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "nanolets", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "TestNanolets", "class_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_name": "testError404UriHandlerGetMimeType", "test_setup_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 96, "test_prefix_file_path": "nanolets/src/test/java/org/nanohttpd/junit/router/TestNanolets.java", "test_prefix": "    @Test\n    public void testError404UriHandlerGetMimeType() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 411, "test_prefix_end_lineno": 414, "focal_method_file_path": "nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java", "focal_method": "        @Override\n        public String getMimeType() {\n            return \"text/html\";\n        }", "focal_method_start_lineno": 257, "focal_method_end_lineno": 260, "ground_truth_oracle": "Assert.assertEquals(\"Error404UriHandler mime type should be text/html\", \"text/html\", new RouterNanoHTTPD.Error404UriHandler().getMimeType());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testError404UriHandlerGetMimeType() {\n    }", "original_test_prefix": "    @Test\n    public void testError404UriHandlerGetMimeType() {\n        Assert.assertEquals(\"Error404UriHandler mime type should be text/html\", \"text/html\", new RouterNanoHTTPD.Error404UriHandler().getMimeType());\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.router.TestNanolets#testError404UriHandlerGetMimeType", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUp() throws Exception {\n        stdIn = new PipedOutputStream();\n        System.setIn(new PipedInputStream(stdIn));\n        serverStartThread = new Thread(new Runnable() {\n\n            @Override\n            public void run() {\n                String[] args = {};\n                AppNanolets.main(args);\n            }\n        });\n        serverStartThread.start();\n        // give the server some tine to start.\n        Thread.sleep(200);\n    }", "start_lineno": 81, "end_lineno": 96}]}
{"index": 411, "project_index": 215, "class_index": 1, "test_index": 0, "user_name": "NanoHttpd", "repo_name": "nanohttpd", "sub_repos": ["core", "webserver", "samples", "websocket", "markdown-plugin", "nanolets", "fileupload"], "sub_repo": "core", "commit_sha": "efb2ebf85a2b06f7c508aba9eaad5377e3a01e81", "build_system": "mvn", "class_name": "GZipIntegrationTest", "class_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java", "test_name": "chunkedContentIsEncodedProperly", "test_setup_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java", "test_setup": "", "test_setup_start_lineno": 54, "test_setup_end_lineno": 63, "test_prefix_file_path": "core/src/test/java/org/nanohttpd/junit/protocols/http/integration/GZipIntegrationTest.java", "test_prefix": "    @Test\n    public void chunkedContentIsEncodedProperly() throws IOException {\n        InputStream data = new ByteArrayInputStream(\"This is a test\".getBytes(\"UTF-8\"));\n        testServer.response = Response.newChunkedResponse(Status.OK, \"text/plain\", data);\n        HttpGet request = new HttpGet(\"http://localhost:8192/\");\n        request.addHeader(\"Accept-encoding\", \"gzip\");\n        HttpResponse response = new DecompressingHttpClient(httpclient).execute(request);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 132, "test_prefix_end_lineno": 140, "focal_method_file_path": "core/src/main/java/org/nanohttpd/protocols/http/response/Response.java", "focal_method": "    public static Response newChunkedResponse(IStatus status, String mimeType, InputStream data) {\n        return new Response(status, mimeType, data, -1);\n    }", "focal_method_start_lineno": 390, "focal_method_end_lineno": 392, "ground_truth_oracle": "assertEquals(\"This is a test\", EntityUtils.toString(response.getEntity()));", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void chunkedContentIsEncodedProperly() throws IOException {\n        InputStream data = new ByteArrayInputStream(\"This is a test\".getBytes(\"UTF-8\"));\n        testServer.response = Response.newChunkedResponse(Status.OK, \"text/plain\", data);\n        HttpGet request = new HttpGet(\"http://localhost:8192/\");\n        request.addHeader(\"Accept-encoding\", \"gzip\");\n        HttpResponse response = new DecompressingHttpClient(httpclient).execute(request);\n    }", "original_test_prefix": "    @Test\n    public void chunkedContentIsEncodedProperly() throws IOException {\n        InputStream data = new ByteArrayInputStream(\"This is a test\".getBytes(\"UTF-8\"));\n        testServer.response = Response.newChunkedResponse(Status.OK, \"text/plain\", data);\n        HttpGet request = new HttpGet(\"http://localhost:8192/\");\n        request.addHeader(\"Accept-encoding\", \"gzip\");\n        HttpResponse response = new DecompressingHttpClient(httpclient).execute(request);\n        assertEquals(\"This is a test\", EntityUtils.toString(response.getEntity()));\n    }", "test_with_params": false, "test_target": "org.nanohttpd.junit.protocols.http.integration.GZipIntegrationTest#chunkedContentIsEncodedProperly", "test_setup_list": []}
{"index": 412, "project_index": 216, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "LabelTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "test_name": "external", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "test_prefix": "    @Test\n    void external() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 39, "test_prefix_end_lineno": 42, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Attributes.java", "focal_method": "    @SafeVarargs\n    static <F extends For> Attributes<F> attrs(Attributes<? extends F>... attributes) {\n        return attrs(asList(attributes));\n    }", "focal_method_start_lineno": 34, "focal_method_end_lineno": 37, "ground_truth_oracle": "assertEquals(attrs(attr(\"xlabel\", label.external())), attrs(label.external()));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void external() {\n    }", "original_test_prefix": "    @Test\n    void external() {\n        assertEquals(attrs(attr(\"xlabel\", label.external())), attrs(label.external()));\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.LabelTest#external", "test_setup_list": []}
{"index": 413, "project_index": 217, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "PropertyBindingSupport_nestedPropertiesTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_nestedPropertiesTest.java", "test_name": "testReconstructObjectGraph", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_nestedPropertiesTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_nestedPropertiesTest.java", "test_prefix": "    @Test\n    public void testReconstructObjectGraph() {\n        TestCase testCase = new TestCase(\"id\")\n                .setProperty(\"nullArm.finger.length\", 10);\n\n        Person person = new Person();\n        Set<String> usedProperties = bindAll(person, testCase);\n\n        <AssertPlaceHolder>;\n        assertNotNull(person.nullArm.finger);\n        assertEquals(10, person.nullArm.finger.length);\n        assertEquals(asSet(\"nullArm.finger.length\"), usedProperties);\n    }", "test_prefix_start_lineno": 54, "test_prefix_end_lineno": 66, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java", "focal_method": "    public static Set<String> bindAll(Object instance, TestCase testCase) {\n        Set<String> usedProperties = new HashSet<>();\n\n        for (Map.Entry<String, String> entry : testCase.getProperties().entrySet()) {\n            String fullPropertyPath = entry.getKey().trim();\n            String value = entry.getValue().trim();\n\n            if (bind0(instance, fullPropertyPath, value)) {\n                usedProperties.add(fullPropertyPath);\n            }\n        }\n\n        return usedProperties;\n    }", "focal_method_start_lineno": 64, "focal_method_end_lineno": 77, "ground_truth_oracle": "assertNotNull(person.nullArm);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testReconstructObjectGraph() {\n        TestCase testCase = new TestCase(\"id\")\n                .setProperty(\"nullArm.finger.length\", 10);\n\n        Person person = new Person();\n        Set<String> usedProperties = bindAll(person, testCase);\n\n    }", "original_test_prefix": "    @Test\n    public void testReconstructObjectGraph() {\n        TestCase testCase = new TestCase(\"id\")\n                .setProperty(\"nullArm.finger.length\", 10);\n\n        Person person = new Person();\n        Set<String> usedProperties = bindAll(person, testCase);\n\n        assertNotNull(person.nullArm);\n        assertNotNull(person.nullArm.finger);\n        assertEquals(10, person.nullArm.finger.length);\n        assertEquals(asSet(\"nullArm.finger.length\"), usedProperties);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.PropertyBindingSupport_nestedPropertiesTest#testReconstructObjectGraph", "test_setup_list": []}
{"index": 414, "project_index": 217, "class_index": 1, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "WorkerQueryTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java", "test_name": "targetType_whenMember", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java", "test_setup": "@Before\n    public void before() {\n        list = new LinkedList<WorkerData>();\n        agent1 = agentAddress(1);\n        agent2 = agentAddress(2);\n    }", "test_setup_start_lineno": 25, "test_setup_end_lineno": 30, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/coordinator/registry/WorkerQueryTest.java", "test_prefix": "    @Test\n    public void targetType_whenMember() {\n        list.add(new WorkerData(newParameters(agent1, 1, \"javaclient\", \"maven=3.6\")));\n        list.add(new WorkerData(newParameters(agent1, 2, \"member\", \"maven=3.7\")));\n        list.add(new WorkerData(newParameters(agent1, 3, \"litemember\", \"maven=3.8\")));\n        list.add(new WorkerData(newParameters(agent1, 4, \"member\", \"maven=3.7\")));\n\n        List<WorkerData> result = new WorkerQuery()\n                .setTargetType(TargetType.MEMBER)\n                .execute(list);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 121, "test_prefix_end_lineno": 132, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/coordinator/registry/WorkerQuery.java", "focal_method": "    public List<WorkerData> execute(List<WorkerData> input) {\n        switch (targetType) {\n            case ALL:\n                return select(input, null);\n            case MEMBER:\n                return select(input, true);\n            case CLIENT:\n                return select(input, false);\n            case PREFER_CLIENT:\n                List<WorkerData> result = select(input, false);\n                return !result.isEmpty() ? result : select(input, true);\n            default:\n                throw new IllegalStateException(\"Unrecognized targetType: \" + targetType);\n        }\n    }", "focal_method_start_lineno": 112, "focal_method_end_lineno": 126, "ground_truth_oracle": "assertEquals(asList(list.get(1), list.get(3)), result);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void targetType_whenMember() {\n        list.add(new WorkerData(newParameters(agent1, 1, \"javaclient\", \"maven=3.6\")));\n        list.add(new WorkerData(newParameters(agent1, 2, \"member\", \"maven=3.7\")));\n        list.add(new WorkerData(newParameters(agent1, 3, \"litemember\", \"maven=3.8\")));\n        list.add(new WorkerData(newParameters(agent1, 4, \"member\", \"maven=3.7\")));\n\n        List<WorkerData> result = new WorkerQuery()\n                .setTargetType(TargetType.MEMBER)\n                .execute(list);\n    }", "original_test_prefix": "    @Test\n    public void targetType_whenMember() {\n        list.add(new WorkerData(newParameters(agent1, 1, \"javaclient\", \"maven=3.6\")));\n        list.add(new WorkerData(newParameters(agent1, 2, \"member\", \"maven=3.7\")));\n        list.add(new WorkerData(newParameters(agent1, 3, \"litemember\", \"maven=3.8\")));\n        list.add(new WorkerData(newParameters(agent1, 4, \"member\", \"maven=3.7\")));\n\n        List<WorkerData> result = new WorkerQuery()\n                .setTargetType(TargetType.MEMBER)\n                .execute(list);\n        assertEquals(asList(list.get(1), list.get(3)), result);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.coordinator.registry.WorkerQueryTest#targetType_whenMember", "test_setup_list": [{"test_setup": "@Before\n    public void before() {\n        list = new LinkedList<WorkerData>();\n        agent1 = agentAddress(1);\n        agent2 = agentAddress(2);\n    }", "start_lineno": 25, "end_lineno": 30}]}
{"index": 415, "project_index": 218, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "MergeResourceTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/MergeResourceTest.java", "test_name": "testMergeDeploymentMetadataWithNoSpec", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/MergeResourceTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/MergeResourceTest.java", "test_prefix": "    @Test\n    public void testMergeDeploymentMetadataWithNoSpec() throws Exception {\n        Deployment resource = new DeploymentBuilder().withNewMetadata().withName(\"cheese\").\n                addToAnnotations(\"overwriteKey\", \"originalValue\").\n                addToAnnotations(\"unchangedKey\", \"shouldNotChange\").\n                addToAnnotations(\"unchangedBlankKey\", \"\").\n                addToAnnotations(\"deletedKey\", \"shouldBeDeleted\").\n                endMetadata().\n                withNewSpec().withNewTemplate().withNewSpec().addNewContainer().withImage(\"cheese-image\").endContainer().endSpec().endTemplate().endSpec().\n                build();\n\n        Deployment override = new DeploymentBuilder().withNewMetadata().withName(\"cheese\").\n                addToAnnotations(\"overwriteKey\", \"newValue\").\n                addToAnnotations(\"deletedKey\", \"\").\n                endMetadata().\n                build();\n\n        HasMetadata answer = KubernetesResourceUtil.mergeResources(resource, override, log, false);\n        <AssertPlaceHolder>;\n\n        log.info(\"Override metadata on Deployment with no spec generated: \" + ResourceUtil.toYaml(answer));\n        Map<String, String> annotations = answer.getMetadata().getAnnotations();\n\n        assertDataModified(annotations, \"Deployment.metadata.annotations\");\n        assertDataNotModified(resource.getMetadata().getAnnotations(), \"Original Deployment.metadata.annotations\");\n    }", "test_prefix_start_lineno": 87, "test_prefix_end_lineno": 114, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/kubernetes/KubernetesResourceUtil.java", "focal_method": "    public static HasMetadata mergeResources(HasMetadata item1, HasMetadata item2, Logger log, boolean switchOnLocalCustomisation) {\n        if (item1 instanceof Deployment && item2 instanceof Deployment) {\n            return mergeDeployments((Deployment) item1, (Deployment) item2, log, switchOnLocalCustomisation);\n        }\n        if (item1 instanceof ConfigMap && item2 instanceof ConfigMap) {\n            ConfigMap cm1 = (ConfigMap) item1;\n            ConfigMap cm2 = (ConfigMap) item2;\n            return mergeConfigMaps(cm1, cm2, log, switchOnLocalCustomisation);\n        }\n        mergeMetadata(item1, item2);\n        return item1;\n    }", "focal_method_start_lineno": 950, "focal_method_end_lineno": 961, "ground_truth_oracle": "assertNotNull(answer);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testMergeDeploymentMetadataWithNoSpec() throws Exception {\n        Deployment resource = new DeploymentBuilder().withNewMetadata().withName(\"cheese\").\n                addToAnnotations(\"overwriteKey\", \"originalValue\").\n                addToAnnotations(\"unchangedKey\", \"shouldNotChange\").\n                addToAnnotations(\"unchangedBlankKey\", \"\").\n                addToAnnotations(\"deletedKey\", \"shouldBeDeleted\").\n                endMetadata().\n                withNewSpec().withNewTemplate().withNewSpec().addNewContainer().withImage(\"cheese-image\").endContainer().endSpec().endTemplate().endSpec().\n                build();\n\n        Deployment override = new DeploymentBuilder().withNewMetadata().withName(\"cheese\").\n                addToAnnotations(\"overwriteKey\", \"newValue\").\n                addToAnnotations(\"deletedKey\", \"\").\n                endMetadata().\n                build();\n\n        HasMetadata answer = KubernetesResourceUtil.mergeResources(resource, override, log, false);\n    }", "original_test_prefix": "    @Test\n    public void testMergeDeploymentMetadataWithNoSpec() throws Exception {\n        Deployment resource = new DeploymentBuilder().withNewMetadata().withName(\"cheese\").\n                addToAnnotations(\"overwriteKey\", \"originalValue\").\n                addToAnnotations(\"unchangedKey\", \"shouldNotChange\").\n                addToAnnotations(\"unchangedBlankKey\", \"\").\n                addToAnnotations(\"deletedKey\", \"shouldBeDeleted\").\n                endMetadata().\n                withNewSpec().withNewTemplate().withNewSpec().addNewContainer().withImage(\"cheese-image\").endContainer().endSpec().endTemplate().endSpec().\n                build();\n\n        Deployment override = new DeploymentBuilder().withNewMetadata().withName(\"cheese\").\n                addToAnnotations(\"overwriteKey\", \"newValue\").\n                addToAnnotations(\"deletedKey\", \"\").\n                endMetadata().\n                build();\n\n        HasMetadata answer = KubernetesResourceUtil.mergeResources(resource, override, log, false);\n        assertNotNull(answer);\n\n        log.info(\"Override metadata on Deployment with no spec generated: \" + ResourceUtil.toYaml(answer));\n        Map<String, String> annotations = answer.getMetadata().getAnnotations();\n\n        assertDataModified(annotations, \"Deployment.metadata.annotations\");\n        assertDataNotModified(resource.getMetadata().getAnnotations(), \"Original Deployment.metadata.annotations\");\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.MergeResourceTest#testMergeDeploymentMetadataWithNoSpec", "test_setup_list": []}
{"index": 416, "project_index": 219, "class_index": 0, "test_index": 0, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "DevUtilTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_name": "testReadFileToString", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }\n\n@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "test_setup_start_lineno": 56, "test_setup_end_lineno": 59, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_prefix": "    @Test\n    public void testReadFileToString() throws Exception {\n        File tempFile = new File(serverDirectory, \"temp.txt\");\n        Files.write(tempFile.toPath(), \"temp\".getBytes());\n        String fileString = util.readFile(tempFile);\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 329, "test_prefix_end_lineno": 336, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focal_method": "    public String readFile(File file) throws IOException {\n        return FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n    }", "focal_method_start_lineno": 4015, "focal_method_end_lineno": 4017, "ground_truth_oracle": "assertTrue(fileString.equals(\"temp\"));", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testReadFileToString() throws Exception {\n        File tempFile = new File(serverDirectory, \"temp.txt\");\n        Files.write(tempFile.toPath(), \"temp\".getBytes());\n        String fileString = util.readFile(tempFile);\n\n    }", "original_test_prefix": "    @Test\n    public void testReadFileToString() throws Exception {\n        File tempFile = new File(serverDirectory, \"temp.txt\");\n        Files.write(tempFile.toPath(), \"temp\".getBytes());\n        String fileString = util.readFile(tempFile);\n\n        assertTrue(fileString.equals(\"temp\"));\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.DevUtilTest#testReadFileToString", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }", "start_lineno": 56, "end_lineno": 59}, {"test_setup": "@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "start_lineno": 61, "end_lineno": 68}]}
{"index": 417, "project_index": 219, "class_index": 0, "test_index": 1, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "DevUtilTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_name": "testDeleteFile", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }\n\n@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "test_setup_start_lineno": 56, "test_setup_end_lineno": 59, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_prefix": "    @Test\n    public void testDeleteFile() throws Exception {\n        File tempSrcFile = new File(srcDir, \"temp.txt\");\n        Files.write(tempSrcFile.toPath(), \"temp\".getBytes());\n        File tempTargetFile = new File(targetDir, \"server.xml\");\n        Files.write(tempTargetFile.toPath(), \"temp\".getBytes());\n\n        <AssertPlaceHolder>;\n        assertTrue(tempTargetFile.exists());\n\n        util.deleteFile(tempSrcFile, srcDir, targetDir, \"server.xml\");\n\n        assertFalse(tempTargetFile.exists());\n    }", "test_prefix_start_lineno": 349, "test_prefix_end_lineno": 364, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focal_method": "    protected void deleteFile(File deletedFile, File dir, File targetDir, String targetFileName) throws IOException {\n        File targetFile = getTargetFile(deletedFile, dir, targetDir, targetFileName);\n        if (targetFile.exists()) {\n            if (targetFile.isDirectory()) {\n                try {\n                    FileUtils.deleteDirectory(targetFile);\n                    info(\"The directory \" + targetFile.getCanonicalPath() + \" was deleted.\");\n                } catch (IllegalArgumentException e) {\n                    debug(\"Could not delete the directory \" + targetFile.getCanonicalPath() + \". \" + e.getMessage());\n                } catch (IOException e) {\n                    error(\"An error encountered while deleting the directory \" + targetFile.getCanonicalPath()\n                            + \". \" + e.getMessage());\n                }\n            } else {\n                if (targetFile.delete()) {\n                    info(\"The file \" + targetFile.getCanonicalPath() + \" was deleted.\");\n                } else {\n                    error(\"Could not delete the file \" + targetFile.getCanonicalPath() + \".\");\n                }\n            }\n        }\n    }", "focal_method_start_lineno": 4126, "focal_method_end_lineno": 4147, "ground_truth_oracle": "assertTrue(tempSrcFile.exists());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testDeleteFile() throws Exception {\n        File tempSrcFile = new File(srcDir, \"temp.txt\");\n        Files.write(tempSrcFile.toPath(), \"temp\".getBytes());\n        File tempTargetFile = new File(targetDir, \"server.xml\");\n        Files.write(tempTargetFile.toPath(), \"temp\".getBytes());\n\n    }", "original_test_prefix": "    @Test\n    public void testDeleteFile() throws Exception {\n        File tempSrcFile = new File(srcDir, \"temp.txt\");\n        Files.write(tempSrcFile.toPath(), \"temp\".getBytes());\n        File tempTargetFile = new File(targetDir, \"server.xml\");\n        Files.write(tempTargetFile.toPath(), \"temp\".getBytes());\n\n        assertTrue(tempSrcFile.exists());\n        assertTrue(tempTargetFile.exists());\n\n        util.deleteFile(tempSrcFile, srcDir, targetDir, \"server.xml\");\n\n        assertFalse(tempTargetFile.exists());\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.DevUtilTest#testDeleteFile", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }", "start_lineno": 56, "end_lineno": 59}, {"test_setup": "@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "start_lineno": 61, "end_lineno": 68}]}
{"index": 418, "project_index": 220, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "ticket37", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void ticket37() {\n\n        loc\u012bt\u0101js.enablePrefixes = true;\n        Word panest = loc\u012bt\u0101js.analyze(\"panest\");\n        <AssertPlaceHolder>;\n        assertEquals(\"vmnn0t1000n\", panest.wordforms.get(0).getTag());\n    }", "test_prefix_start_lineno": 486, "test_prefix_end_lineno": 493, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(panest.isRecognized());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void ticket37() {\n\n        loc\u012bt\u0101js.enablePrefixes = true;\n        Word panest = loc\u012bt\u0101js.analyze(\"panest\");\n    }", "original_test_prefix": "    @Test\n    public void ticket37() {\n\n        loc\u012bt\u0101js.enablePrefixes = true;\n        Word panest = loc\u012bt\u0101js.analyze(\"panest\");\n        assertTrue(panest.isRecognized());\n        assertEquals(\"vmnn0t1000n\", panest.wordforms.get(0).getTag());\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#ticket37", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 419, "project_index": 220, "class_index": 0, "test_index": 1, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "apvidv\u0101rdi", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void apvidv\u0101rdi() {\n        Word w = loc\u012bt\u0101js.analyze(\"\u012bst\u0101is\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 2369, "test_prefix_end_lineno": 2373, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertFalse(w.isRecognized());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void apvidv\u0101rdi() {\n        Word w = loc\u012bt\u0101js.analyze(\"\u012bst\u0101is\");\n    }", "original_test_prefix": "    @Test\n    public void apvidv\u0101rdi() {\n        Word w = loc\u012bt\u0101js.analyze(\"\u012bst\u0101is\");\n        assertFalse(w.isRecognized());\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#apvidv\u0101rdi", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 420, "project_index": 220, "class_index": 1, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "TokenizeTest", "class_path": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java", "test_name": "p\u0113di\u0146as", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n        loc\u012bt\u0101js = new Analyzer();\n        //loc\u012bt\u0101js=null;\n    }", "test_setup_start_lineno": 40, "test_setup_end_lineno": 44, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/TokenizeTest.java", "test_prefix": "    @Test\n    public void p\u0113di\u0146as() {\n        LinkedList<LinkedList<Word>> sentences;\n        sentences = Splitting.tokenizeSentences(loc\u012bt\u0101js, \"Paruna saka: \\\"Zivs mekl\u0113 kur dzi\u013c\u0101k, cilv\u0113ks, kur lab\u0101k.\\\" \");\n        <AssertPlaceHolder>;\n\n        sentences = Splitting.tokenizeSentences(loc\u012bt\u0101js, \"\\\"Kurzemes V\u0101rds\\\" uzklaus\u012bja viedok\u013cus par darba mekl\u0113\u0161anu \u0101rzem\u0113s un probl\u0113m\u0101m, kas t\u0101d\u0113\u013c rodas viet\u0113jiem uz\u0146\u0113m\u0113jiem.\");\n        assertEquals(1, sentences.size());\n    }", "test_prefix_start_lineno": 660, "test_prefix_end_lineno": 668, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Splitting.java", "focal_method": "    public static LinkedList<LinkedList<Word>> tokenizeSentences(\n            Analyzer morphoAnalyzer, String paragraph) {\n        return tokenizeSentences(morphoAnalyzer, paragraph, DEFAULT_SENTENCE_LENGTH_CAP);\n    }", "focal_method_start_lineno": 207, "focal_method_end_lineno": 210, "ground_truth_oracle": "assertEquals(1, sentences.size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void p\u0113di\u0146as() {\n        LinkedList<LinkedList<Word>> sentences;\n        sentences = Splitting.tokenizeSentences(loc\u012bt\u0101js, \"Paruna saka: \\\"Zivs mekl\u0113 kur dzi\u013c\u0101k, cilv\u0113ks, kur lab\u0101k.\\\" \");\n    }", "original_test_prefix": "    @Test\n    public void p\u0113di\u0146as() {\n        LinkedList<LinkedList<Word>> sentences;\n        sentences = Splitting.tokenizeSentences(loc\u012bt\u0101js, \"Paruna saka: \\\"Zivs mekl\u0113 kur dzi\u013c\u0101k, cilv\u0113ks, kur lab\u0101k.\\\" \");\n        assertEquals(1, sentences.size());\n\n        sentences = Splitting.tokenizeSentences(loc\u012bt\u0101js, \"\\\"Kurzemes V\u0101rds\\\" uzklaus\u012bja viedok\u013cus par darba mekl\u0113\u0161anu \u0101rzem\u0113s un probl\u0113m\u0101m, kas t\u0101d\u0113\u013c rodas viet\u0113jiem uz\u0146\u0113m\u0113jiem.\");\n        assertEquals(1, sentences.size());\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.TokenizeTest#p\u0113di\u0146as", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n        loc\u012bt\u0101js = new Analyzer();\n        //loc\u012bt\u0101js=null;\n    }", "start_lineno": 40, "end_lineno": 44}]}
{"index": 421, "project_index": 221, "class_index": 0, "test_index": 0, "user_name": "open-korean-text", "repo_name": "open-korean-text", "sub_repos": [], "sub_repo": "", "commit_sha": "95bf003beb3b357fcb16f94d4f595613cf7c5276", "build_system": "mvn", "class_name": "OpenKoreanProcessorJavaTest", "class_path": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "test_name": "testAddWordsToDictionary", "test_setup_file_path": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/openkoreantext/processor/OpenKoreanProcessorJavaTest.java", "test_prefix": "  @Test\n  public void testAddWordsToDictionary() {\n    String text = \"\uadf8\ub77c\ubbc4 \ub2f9\uc2e0 \uba3c\uc800 \uc5bc\ub801 \uac00\uc774\uc18c\";\n\n    Seq<KoreanTokenizer.KoreanToken> tokens = OpenKoreanTextProcessorJava.tokenize(text);\n    <AssertPlaceHolder>;\n    assertEquals(OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens).get(4).getPos(), KoreanPosJava.Noun);\n\n    ArrayList<String> conjs = new ArrayList<>();\n    conjs.add(\"\uadf8\ub77c\ubbc4\");\n    OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Conjunction, conjs);\n\n    ArrayList<String> advs = new ArrayList<>();\n    advs.add(\"\uc5bc\ub801\");\n    OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Adverb, advs);\n\n    tokens = OpenKoreanTextProcessorJava.tokenize(text);\n    assertEquals(\"[\uadf8\ub77c\ubbc4, \ub2f9\uc2e0, \uba3c\uc800, \uc5bc\ub801, \uac00\uc774\uc18c]\", OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n    assertEquals(OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens).get(3).getPos(), KoreanPosJava.Adverb);\n  }", "test_prefix_start_lineno": 89, "test_prefix_end_lineno": 111, "focal_method_file_path": "src/main/java/org/openkoreantext/processor/KoreanTokenJava.java", "focal_method": "  public KoreanPosJava getPos() {\n    return pos;\n  }", "focal_method_start_lineno": 45, "focal_method_end_lineno": 47, "ground_truth_oracle": "assertEquals(\"[\uadf8, \ub77c, \ubbc4, \ub2f9\uc2e0, \uba3c\uc800, \uc5bc\ub801, \uac00\uc774\uc18c]\", OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testAddWordsToDictionary() {\n    String text = \"\uadf8\ub77c\ubbc4 \ub2f9\uc2e0 \uba3c\uc800 \uc5bc\ub801 \uac00\uc774\uc18c\";\n\n    Seq<KoreanTokenizer.KoreanToken> tokens = OpenKoreanTextProcessorJava.tokenize(text);\n  }", "original_test_prefix": "  @Test\n  public void testAddWordsToDictionary() {\n    String text = \"\uadf8\ub77c\ubbc4 \ub2f9\uc2e0 \uba3c\uc800 \uc5bc\ub801 \uac00\uc774\uc18c\";\n\n    Seq<KoreanTokenizer.KoreanToken> tokens = OpenKoreanTextProcessorJava.tokenize(text);\n    assertEquals(\"[\uadf8, \ub77c, \ubbc4, \ub2f9\uc2e0, \uba3c\uc800, \uc5bc\ub801, \uac00\uc774\uc18c]\", OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n    assertEquals(OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens).get(4).getPos(), KoreanPosJava.Noun);\n\n    ArrayList<String> conjs = new ArrayList<>();\n    conjs.add(\"\uadf8\ub77c\ubbc4\");\n    OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Conjunction, conjs);\n\n    ArrayList<String> advs = new ArrayList<>();\n    advs.add(\"\uc5bc\ub801\");\n    OpenKoreanTextProcessorJava.addWordsToDictionary(KoreanPosJava.Adverb, advs);\n\n    tokens = OpenKoreanTextProcessorJava.tokenize(text);\n    assertEquals(\"[\uadf8\ub77c\ubbc4, \ub2f9\uc2e0, \uba3c\uc800, \uc5bc\ub801, \uac00\uc774\uc18c]\", OpenKoreanTextProcessorJava.tokensToJavaStringList(tokens).toString());\n    assertEquals(OpenKoreanTextProcessorJava.tokensToJavaKoreanTokenList(tokens).get(3).getPos(), KoreanPosJava.Adverb);\n  }", "test_with_params": false, "test_target": "org.openkoreantext.processor.OpenKoreanProcessorJavaTest#testAddWordsToDictionary", "test_setup_list": []}
{"index": 422, "project_index": 222, "class_index": 0, "test_index": 0, "user_name": "Yubico", "repo_name": "yubico-java-client", "sub_repos": ["v2client", "jaas", "demo-server"], "sub_repo": "v2client", "commit_sha": "e21fb672e290a118f7420daaf81ccb96d319d52c", "build_system": "mvn", "class_name": "YubicoClientTest", "class_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_name": "testLongOTP", "test_setup_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 69, "test_prefix_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_prefix": "    @Test\n    public void testLongOTP() {\n        String otp = \"cccccccccccccccccccccccccccccccccccccccccccccccccc\";\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 123, "test_prefix_end_lineno": 127, "focal_method_file_path": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focal_method": "    public static boolean isValidOTPFormat(String otp) {\n        if (otp == null){\n            return false;\n        }        \n        int len = otp.length();\n        for (char c : otp.toCharArray()) {\n            if (c < 0x20 || c > 0x7E) {\n                return false;\n            }\n        }\n        return OTP_MIN_LEN <= len && len <= OTP_MAX_LEN;\n    }", "focal_method_start_lineno": 222, "focal_method_end_lineno": 233, "ground_truth_oracle": "assertFalse(YubicoClient.isValidOTPFormat(otp));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testLongOTP() {\n        String otp = \"cccccccccccccccccccccccccccccccccccccccccccccccccc\";\n    }", "original_test_prefix": "    @Test\n    public void testLongOTP() {\n        String otp = \"cccccccccccccccccccccccccccccccccccccccccccccccccc\";\n        assertFalse(YubicoClient.isValidOTPFormat(otp));\n    }", "test_with_params": false, "test_target": "com.yubico.client.v2.YubicoClientTest#testLongOTP", "test_setup_list": [{"test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "start_lineno": 66, "end_lineno": 69}]}
{"index": 423, "project_index": 223, "class_index": 0, "test_index": 0, "user_name": "tradier", "repo_name": "dropwizard-raven", "sub_repos": [], "sub_repo": "", "commit_sha": "117c78b4879ba930d0187ae2874773646213d3d2", "build_system": "mvn", "class_name": "DroppingRavenLoggingFilterTest", "class_path": "src/test/java/com/tradier/raven/filters/DroppingRavenLoggingFilterTest.java", "test_name": "verifyFilterAllowsNonSentryLoggers", "test_setup_file_path": "src/test/java/com/tradier/raven/filters/DroppingRavenLoggingFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/tradier/raven/filters/DroppingRavenLoggingFilterTest.java", "test_prefix": "  @Test\n  public void verifyFilterAllowsNonSentryLoggers() {\n    final DroppingRavenLoggingFilter filter = new DroppingRavenLoggingFilter();\n    filter.start();\n\n    final LoggingEvent evt = new LoggingEvent();\n    evt.setLoggerName(\"com.tradier.raven\");\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 21, "test_prefix_end_lineno": 29, "focal_method_file_path": "src/main/java/com/tradier/raven/filters/DroppingRavenLoggingFilter.java", "focal_method": "  @Override\n  public FilterReply decide(ILoggingEvent event) {\n    if (event.getLoggerName().startsWith(\"com.getsentry.raven\")) {\n      return FilterReply.DENY;\n    } else {\n      return FilterReply.NEUTRAL;\n    }\n  }", "focal_method_start_lineno": 8, "focal_method_end_lineno": 15, "ground_truth_oracle": "assertEquals(FilterReply.NEUTRAL, filter.decide(evt));", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void verifyFilterAllowsNonSentryLoggers() {\n    final DroppingRavenLoggingFilter filter = new DroppingRavenLoggingFilter();\n    filter.start();\n\n    final LoggingEvent evt = new LoggingEvent();\n    evt.setLoggerName(\"com.tradier.raven\");\n  }", "original_test_prefix": "  @Test\n  public void verifyFilterAllowsNonSentryLoggers() {\n    final DroppingRavenLoggingFilter filter = new DroppingRavenLoggingFilter();\n    filter.start();\n\n    final LoggingEvent evt = new LoggingEvent();\n    evt.setLoggerName(\"com.tradier.raven\");\n    assertEquals(FilterReply.NEUTRAL, filter.decide(evt));\n  }", "test_with_params": false, "test_target": "com.tradier.raven.filters.DroppingRavenLoggingFilterTest#verifyFilterAllowsNonSentryLoggers", "test_setup_list": []}
{"index": 424, "project_index": 224, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "StringUtilsTest", "class_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_name": "testIsEmpty", "test_setup_file_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_prefix": "  @Test\n  public void testIsEmpty() throws Exception\n  {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 96, "test_prefix_end_lineno": 100, "focal_method_file_path": "src/main/java/org/teachingextensions/approvals/lite/util/StringUtils.java", "focal_method": "  public static boolean isEmpty(String string) {\n    return !isNonZero(string);\n  }", "focal_method_start_lineno": 74, "focal_method_end_lineno": 76, "ground_truth_oracle": "assertFalse(StringUtils.isEmpty(\" a \"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testIsEmpty() throws Exception\n  {\n  }", "original_test_prefix": "  @Test\n  public void testIsEmpty() throws Exception\n  {\n    assertFalse(StringUtils.isEmpty(\" a \"));\n  }", "test_with_params": false, "test_target": "org.teachingextensions.approvals.lite.util.StringUtilsTest#testIsEmpty", "test_setup_list": []}
{"index": 425, "project_index": 225, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "PropertyBindingSupport_bind0_NumericalTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "test_name": "bind_short_whitespace", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "test_prefix": "    @Test\n    public void bind_short_whitespace() {\n        <AssertPlaceHolder>;\n        assertEquals(10, testObject.shortField);\n    }", "test_prefix_start_lineno": 57, "test_prefix_end_lineno": 61, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java", "focal_method": "    static boolean bind0(Object object, String property, String value) {\n        value = value.trim();\n\n        String[] path = property.split(\"\\\\.\");\n\n        object = findTargetObject(object, property, path);\n        if (object == null) {\n            return false;\n        }\n\n        Field field = findField(object.getClass(), path[path.length - 1]);\n        if (field == null || isProbeField(field)) {\n            return false;\n        }\n\n        try {\n            setField(field, object, value);\n            return true;\n        } catch (Exception e) {\n            throw new BindException(format(\"Failed to bind value [%s] to property [%s.%s] of type [%s]\",\n                    value, object.getClass().getName(), property, field.getType()), e);\n        }\n    }", "focal_method_start_lineno": 100, "focal_method_end_lineno": 122, "ground_truth_oracle": "assertTrue(bind0(testObject, \"shortField\", \" 10\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void bind_short_whitespace() {\n    }", "original_test_prefix": "    @Test\n    public void bind_short_whitespace() {\n        assertTrue(bind0(testObject, \"shortField\", \" 10\"));\n        assertEquals(10, testObject.shortField);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.PropertyBindingSupport_bind0_NumericalTest#bind_short_whitespace", "test_setup_list": []}
{"index": 426, "project_index": 225, "class_index": 1, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "TestContainer_BasicTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/TestContainer_BasicTest.java", "test_name": "testConstructor_withTestClassInstance", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/TestContainer_BasicTest.java", "test_setup": "", "test_setup_start_lineno": 27, "test_setup_end_lineno": 31, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/worker/testcontainer/TestContainer_BasicTest.java", "test_prefix": "    @Test\n    public void testConstructor_withTestClassInstance() {\n        SuccessTest test = new SuccessTest();\n        testContainer = new TestContainer(testContext, test, new TestCase(\"foo\"));\n\n        <AssertPlaceHolder>;\n        assertTrue(testContainer.getTestInstance() instanceof SuccessTest);\n    }", "test_prefix_start_lineno": 31, "test_prefix_end_lineno": 38, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/worker/testcontainer/TestContainer.java", "focal_method": "    public Object getTestInstance() {\n        return testInstance;\n    }", "focal_method_start_lineno": 145, "focal_method_end_lineno": 147, "ground_truth_oracle": "assertEquals(test, testContainer.getTestInstance());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testConstructor_withTestClassInstance() {\n        SuccessTest test = new SuccessTest();\n        testContainer = new TestContainer(testContext, test, new TestCase(\"foo\"));\n\n    }", "original_test_prefix": "    @Test\n    public void testConstructor_withTestClassInstance() {\n        SuccessTest test = new SuccessTest();\n        testContainer = new TestContainer(testContext, test, new TestCase(\"foo\"));\n\n        assertEquals(test, testContainer.getTestInstance());\n        assertTrue(testContainer.getTestInstance() instanceof SuccessTest);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.worker.testcontainer.TestContainer_BasicTest#testConstructor_withTestClassInstance", "test_setup_list": []}
{"index": 427, "project_index": 226, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OSQLFunctionAstarTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/graph/OSQLFunctionAstarTest.java", "test_name": "test6Execute", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/functions/graph/OSQLFunctionAstarTest.java", "test_setup": "@Before public void setUp() throws Exception {\n\n    setUpDatabase();\n\n    functionAstar = new OSQLFunctionAstar();\n  }", "test_setup_start_lineno": 56, "test_setup_end_lineno": 61, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/functions/OSQLFunctionAstarTest.java", "test_prefix": "  @Test public void test6Execute() throws Exception {\n    Map<String, Object> options = new HashMap<String, Object>();\n    options.put(OSQLFunctionAstar.PARAM_DIRECTION, \"out\");\n    options.put(OSQLFunctionAstar.PARAM_PARALLEL, true);\n    options.put(OSQLFunctionAstar.PARAM_EDGE_TYPE_NAMES, new String[] { \"has_path\" });\n    options.put(OSQLFunctionAstar.PARAM_VERTEX_AXIS_NAMES, new String[] { \"lat\", \"lon\" });\n    final List<OrientVertex> result = functionAstar\n        .execute(null, null, null, new Object[] { v6, v1, \"'weight'\", options }, new OBasicCommandContext());\n    <AssertPlaceHolder>;\n    assertEquals(6, result.size());\n    assertEquals(v6, result.get(0));\n    assertEquals(v5, result.get(1));\n    assertEquals(v2, result.get(2));\n    assertEquals(v3, result.get(3));\n    assertEquals(v4, result.get(4));\n    assertEquals(v1, result.get(5));\n  }", "test_prefix_start_lineno": 253, "test_prefix_end_lineno": 269, "focal_method_file_path": "graphdb/src/main/java/com/tinkerpop/blueprints/impls/orient/OrientBaseGraph.java", "focal_method": "  public long countEdges(final String iClassName) {\n    makeActive();\n\n    if (isUseLightweightEdges())\n      throw new UnsupportedOperationException(\"Graph set to use Lightweight Edges, count against edges is not supported\");\n\n    return getRawGraph().countClass(iClassName);\n  }", "focal_method_start_lineno": 1809, "focal_method_end_lineno": 1816, "ground_truth_oracle": "assertEquals(16, graph.countEdges(\"has_path\"));", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "  @Test public void test6Execute() throws Exception {\n    Map<String, Object> options = new HashMap<String, Object>();\n    options.put(OSQLFunctionAstar.PARAM_DIRECTION, \"out\");\n    options.put(OSQLFunctionAstar.PARAM_PARALLEL, true);\n    options.put(OSQLFunctionAstar.PARAM_EDGE_TYPE_NAMES, new String[] { \"has_path\" });\n    options.put(OSQLFunctionAstar.PARAM_VERTEX_AXIS_NAMES, new String[] { \"lat\", \"lon\" });\n    final List<OrientVertex> result = functionAstar\n        .execute(null, null, null, new Object[] { v6, v1, \"'weight'\", options }, new OBasicCommandContext());\n  }", "original_test_prefix": "  @Test public void test6Execute() throws Exception {\n    Map<String, Object> options = new HashMap<String, Object>();\n    options.put(OSQLFunctionAstar.PARAM_DIRECTION, \"out\");\n    options.put(OSQLFunctionAstar.PARAM_PARALLEL, true);\n    options.put(OSQLFunctionAstar.PARAM_EDGE_TYPE_NAMES, new String[] { \"has_path\" });\n    options.put(OSQLFunctionAstar.PARAM_VERTEX_AXIS_NAMES, new String[] { \"lat\", \"lon\" });\n    final List<OrientVertex> result = functionAstar\n        .execute(null, null, null, new Object[] { v6, v1, \"'weight'\", options }, new OBasicCommandContext());\n    assertEquals(16, graph.countEdges(\"has_path\"));\n    assertEquals(6, result.size());\n    assertEquals(v6, result.get(0));\n    assertEquals(v5, result.get(1));\n    assertEquals(v2, result.get(2));\n    assertEquals(v3, result.get(3));\n    assertEquals(v4, result.get(4));\n    assertEquals(v1, result.get(5));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.functions.OSQLFunctionAstarTest#test6Execute", "test_setup_list": [{"test_setup": "@Before public void setUp() throws Exception {\n\n    setUpDatabase();\n\n    functionAstar = new OSQLFunctionAstar();\n  }", "start_lineno": 56, "end_lineno": 61}]}
{"index": 428, "project_index": 226, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "server", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "RemoteTransactionSupportTest", "class_path": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java", "test_name": "testQueryUpdateCreatedInTxTransaction", "test_setup_file_path": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java", "test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.CLASS_MINIMUM_CLUSTERS.setValue(1);\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteTransactionSupportTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(RemoteTransactionSupportTest.class.getSimpleName(), \"admin\", \"admin\");\n    database.createClass(\"SomeTx\");\n    database.createClass(\"SomeTx2\");\n\n    OClass klass = database.createClass(\"IndexedTx\");\n    klass.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.NOTUNIQUE);\n\n    OClass uniqueClass = database.createClass(\"UniqueIndexedTx\");\n    uniqueClass.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.UNIQUE);\n\n  }", "test_setup_start_lineno": 50, "test_setup_end_lineno": 70, "test_prefix_file_path": "server/src/test/java/com/orientechnologies/orient/server/tx/RemoteTransactionSupportTest.java", "test_prefix": "  @Test\n  public void testQueryUpdateCreatedInTxTransaction() throws InterruptedException {\n    database.begin();\n    ODocument doc1 = new ODocument(\"SomeTx\");\n    doc1.setProperty(\"name\", \"Jane\");\n    OIdentifiable id = database.save(doc1);\n\n    ODocument docx = new ODocument(\"SomeTx2\");\n    docx.setProperty(\"name\", \"Jane\");\n    database.save(docx);\n\n    OResultSet result = database.command(\"update SomeTx set name='July' where name = 'Jane' \");\n    <AssertPlaceHolder>;\n    assertEquals((long) result.next().getProperty(\"count\"), 1L);\n    ODocument doc2 = database.load(id.getIdentity());\n    assertEquals(doc2.getProperty(\"name\"), \"July\");\n    assertFalse(result.hasNext());\n    result.close();\n  }", "test_prefix_start_lineno": 103, "test_prefix_end_lineno": 121, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  @Override\n  boolean hasNext();", "focal_method_start_lineno": 20, "focal_method_end_lineno": 21, "ground_truth_oracle": "assertTrue(result.hasNext());", "ground_truth_oracle_lineno": 8, "test_prefix_wo_placeholder": "  @Test\n  public void testQueryUpdateCreatedInTxTransaction() throws InterruptedException {\n    database.begin();\n    ODocument doc1 = new ODocument(\"SomeTx\");\n    doc1.setProperty(\"name\", \"Jane\");\n    OIdentifiable id = database.save(doc1);\n\n    ODocument docx = new ODocument(\"SomeTx2\");\n    docx.setProperty(\"name\", \"Jane\");\n    database.save(docx);\n\n    OResultSet result = database.command(\"update SomeTx set name='July' where name = 'Jane' \");\n  }", "original_test_prefix": "  @Test\n  public void testQueryUpdateCreatedInTxTransaction() throws InterruptedException {\n    database.begin();\n    ODocument doc1 = new ODocument(\"SomeTx\");\n    doc1.setProperty(\"name\", \"Jane\");\n    OIdentifiable id = database.save(doc1);\n\n    ODocument docx = new ODocument(\"SomeTx2\");\n    docx.setProperty(\"name\", \"Jane\");\n    database.save(docx);\n\n    OResultSet result = database.command(\"update SomeTx set name='July' where name = 'Jane' \");\n    assertTrue(result.hasNext());\n    assertEquals((long) result.next().getProperty(\"count\"), 1L);\n    ODocument doc2 = database.load(id.getIdentity());\n    assertEquals(doc2.getProperty(\"name\"), \"July\");\n    assertFalse(result.hasNext());\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.server.tx.RemoteTransactionSupportTest#testQueryUpdateCreatedInTxTransaction", "test_setup_list": [{"test_setup": "@Before\n  public void before() throws Exception {\n    OGlobalConfiguration.CLASS_MINIMUM_CLUSTERS.setValue(1);\n    server = new OServer(false);\n    server.setServerRootDirectory(SERVER_DIRECTORY);\n    server.startup(getClass().getResourceAsStream(\"orientdb-server-config.xml\"));\n    server.activate();\n\n    orientDB = new OrientDB(\"remote:localhost\", \"root\", \"root\", OrientDBConfig.defaultConfig());\n    orientDB.create(RemoteTransactionSupportTest.class.getSimpleName(), ODatabaseType.MEMORY);\n    database = orientDB.open(RemoteTransactionSupportTest.class.getSimpleName(), \"admin\", \"admin\");\n    database.createClass(\"SomeTx\");\n    database.createClass(\"SomeTx2\");\n\n    OClass klass = database.createClass(\"IndexedTx\");\n    klass.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.NOTUNIQUE);\n\n    OClass uniqueClass = database.createClass(\"UniqueIndexedTx\");\n    uniqueClass.createProperty(\"name\", OType.STRING).createIndex(OClass.INDEX_TYPE.UNIQUE);\n\n  }", "start_lineno": 50, "end_lineno": 70}]}
{"index": 429, "project_index": 226, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OScriptExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "test_name": "testReturnInIf2", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OScriptExecutionTest\");\n    db.create();\n  }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 25, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OScriptExecutionTest.java", "test_prefix": "  @Test\n  public void testReturnInIf2() {\n    String className = \"testReturnInIf2\";\n    db.createClass(className);\n    String script = \"\";\n    script += \"INSERT INTO \" + className + \" SET name = 'foo';\";\n    script += \"LET $1 = SELECT count(*) as count FROM \" + className + \" WHERE name ='foo';\";\n    script += \"IF($1.size() > 0 ){\";\n    script += \"   RETURN 'OK';\";\n    script += \"}\";\n    script += \"RETURN 'FAIL';\";\n    OResultSet result = db.execute(\"SQL\", script);\n\n    OResult item = result.next();\n\n    <AssertPlaceHolder>;\n    result.close();\n  }", "test_prefix_start_lineno": 77, "test_prefix_end_lineno": 94, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResult.java", "focal_method": "  <T> T getProperty(String name);", "focal_method_start_lineno": 29, "focal_method_end_lineno": 29, "ground_truth_oracle": "Assert.assertEquals(\"OK\", item.getProperty(\"value\"));", "ground_truth_oracle_lineno": 11, "test_prefix_wo_placeholder": "  @Test\n  public void testReturnInIf2() {\n    String className = \"testReturnInIf2\";\n    db.createClass(className);\n    String script = \"\";\n    script += \"INSERT INTO \" + className + \" SET name = 'foo';\";\n    script += \"LET $1 = SELECT count(*) as count FROM \" + className + \" WHERE name ='foo';\";\n    script += \"IF($1.size() > 0 ){\";\n    script += \"   RETURN 'OK';\";\n    script += \"}\";\n    script += \"RETURN 'FAIL';\";\n    OResultSet result = db.execute(\"SQL\", script);\n\n    OResult item = result.next();\n\n  }", "original_test_prefix": "  @Test\n  public void testReturnInIf2() {\n    String className = \"testReturnInIf2\";\n    db.createClass(className);\n    String script = \"\";\n    script += \"INSERT INTO \" + className + \" SET name = 'foo';\";\n    script += \"LET $1 = SELECT count(*) as count FROM \" + className + \" WHERE name ='foo';\";\n    script += \"IF($1.size() > 0 ){\";\n    script += \"   RETURN 'OK';\";\n    script += \"}\";\n    script += \"RETURN 'FAIL';\";\n    OResultSet result = db.execute(\"SQL\", script);\n\n    OResult item = result.next();\n\n    Assert.assertEquals(\"OK\", item.getProperty(\"value\"));\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.OScriptExecutionTest#testReturnInIf2", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() {\n    db = new ODatabaseDocumentTx(\"memory:OScriptExecutionTest\");\n    db.create();\n  }", "start_lineno": 21, "end_lineno": 25}]}
{"index": 430, "project_index": 226, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODocumentTrackingNestedCollectionsTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/ODocumentTrackingNestedCollectionsTest.java", "test_name": "testChangesValuesNestedTrackingSet", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/ODocumentTrackingNestedCollectionsTest.java", "test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + ODocumentTrackingNestedCollectionsTest.class.getSimpleName());\n    db.create();\n  }", "test_setup_start_lineno": 24, "test_setup_end_lineno": 28, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/db/record/ODocumentTrackingNestedCollectionsTest.java", "test_prefix": "  @Test\n  public void testChangesValuesNestedTrackingSet() {\n\n    ODocument document = new ODocument();\n    Set objects = new HashSet();\n\n    document.field(\"objects\", objects);\n    Set subObjects = new HashSet();\n    objects.add(subObjects);\n\n    ODocument nestedDoc = new ODocument();\n    subObjects.add(nestedDoc);\n\n    document.save(db.getClusterNameById(db.getDefaultClusterId()));\n\n    objects = document.field(\"objects\");\n    subObjects = (Set) objects.iterator().next();\n    subObjects.add(\"one\");\n\n    OMultiValueChangeTimeLine<Object, Object> timeLine = document.getCollectionTimeLine(\"objects\");\n\n    <AssertPlaceHolder>;\n    assertTrue(timeLine.getMultiValueChangeEvents().get(0) instanceof ONestedMultiValueChangeEvent);\n    ONestedMultiValueChangeEvent nesetedEvent = (ONestedMultiValueChangeEvent) timeLine.getMultiValueChangeEvents().get(0);\n    assertEquals(1, nesetedEvent.getTimeLine().getMultiValueChangeEvents().size());\n    List<OMultiValueChangeEvent<?, ?>> multiValueChangeEvents = nesetedEvent.getTimeLine().getMultiValueChangeEvents();\n    assertEquals(\"one\", multiValueChangeEvents.get(0).getValue());\n\n  }", "test_prefix_start_lineno": 69, "test_prefix_end_lineno": 97, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/record/OMultiValueChangeTimeLine.java", "focal_method": "    public List<OMultiValueChangeEvent<K, V>> getMultiValueChangeEvents() {\n        return Collections.unmodifiableList(multiValueChangeEvents);\n    }", "focal_method_start_lineno": 40, "focal_method_end_lineno": 42, "ground_truth_oracle": "assertEquals(1, timeLine.getMultiValueChangeEvents().size());", "ground_truth_oracle_lineno": 12, "test_prefix_wo_placeholder": "  @Test\n  public void testChangesValuesNestedTrackingSet() {\n\n    ODocument document = new ODocument();\n    Set objects = new HashSet();\n\n    document.field(\"objects\", objects);\n    Set subObjects = new HashSet();\n    objects.add(subObjects);\n\n    ODocument nestedDoc = new ODocument();\n    subObjects.add(nestedDoc);\n\n    document.save(db.getClusterNameById(db.getDefaultClusterId()));\n\n    objects = document.field(\"objects\");\n    subObjects = (Set) objects.iterator().next();\n    subObjects.add(\"one\");\n\n    OMultiValueChangeTimeLine<Object, Object> timeLine = document.getCollectionTimeLine(\"objects\");\n\n  }", "original_test_prefix": "  @Test\n  public void testChangesValuesNestedTrackingSet() {\n\n    ODocument document = new ODocument();\n    Set objects = new HashSet();\n\n    document.field(\"objects\", objects);\n    Set subObjects = new HashSet();\n    objects.add(subObjects);\n\n    ODocument nestedDoc = new ODocument();\n    subObjects.add(nestedDoc);\n\n    document.save(db.getClusterNameById(db.getDefaultClusterId()));\n\n    objects = document.field(\"objects\");\n    subObjects = (Set) objects.iterator().next();\n    subObjects.add(\"one\");\n\n    OMultiValueChangeTimeLine<Object, Object> timeLine = document.getCollectionTimeLine(\"objects\");\n\n    assertEquals(1, timeLine.getMultiValueChangeEvents().size());\n    assertTrue(timeLine.getMultiValueChangeEvents().get(0) instanceof ONestedMultiValueChangeEvent);\n    ONestedMultiValueChangeEvent nesetedEvent = (ONestedMultiValueChangeEvent) timeLine.getMultiValueChangeEvents().get(0);\n    assertEquals(1, nesetedEvent.getTimeLine().getMultiValueChangeEvents().size());\n    List<OMultiValueChangeEvent<?, ?>> multiValueChangeEvents = nesetedEvent.getTimeLine().getMultiValueChangeEvents();\n    assertEquals(\"one\", multiValueChangeEvents.get(0).getValue());\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.db.record.ODocumentTrackingNestedCollectionsTest#testChangesValuesNestedTrackingSet", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    db = new ODatabaseDocumentTx(\"memory:\" + ODocumentTrackingNestedCollectionsTest.class.getSimpleName());\n    db.create();\n  }", "start_lineno": 24, "end_lineno": 28}]}
{"index": 431, "project_index": 226, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_name": "testFriendsWithNameArrows", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 29, "test_setup_end_lineno": 63, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testFriendsWithNameArrows() throws Exception {\n\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (match {class:Person, where:(name = 'n1' and 1 + 1 = 2)}-Friend->{as:friend, where:(name = 'n2' and 1 + 1 = 2)} return friend)\"))\n        .execute();\n    <AssertPlaceHolder>;\n    assertEquals(\"n2\", qResult.get(0).field(\"name\"));\n  }", "test_prefix_start_lineno": 480, "test_prefix_end_lineno": 490, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/command/OCommandRequest.java", "focal_method": "  <RET> RET execute(Object... iArgs);", "focal_method_start_lineno": 30, "focal_method_end_lineno": 30, "ground_truth_oracle": "assertEquals(1, qResult.size());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testFriendsWithNameArrows() throws Exception {\n\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (match {class:Person, where:(name = 'n1' and 1 + 1 = 2)}-Friend->{as:friend, where:(name = 'n2' and 1 + 1 = 2)} return friend)\"))\n        .execute();\n  }", "original_test_prefix": "  @Test\n  public void testFriendsWithNameArrows() throws Exception {\n\n    List<ODocument> qResult = db\n        .command(\n            new OCommandSQL(\n                \"select friend.name as name from (match {class:Person, where:(name = 'n1' and 1 + 1 = 2)}-Friend->{as:friend, where:(name = 'n2' and 1 + 1 = 2)} return friend)\"))\n        .execute();\n    assertEquals(1, qResult.size());\n    assertEquals(\"n2\", qResult.get(0).field(\"name\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionTest#testFriendsWithNameArrows", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 29, "end_lineno": 63}]}
{"index": 432, "project_index": 227, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "PictureTest", "class_path": "src/test/java/org/jcodec/common/model/PictureTest.java", "test_name": "testToAndFrom", "test_setup_file_path": "src/test/java/org/jcodec/common/model/PictureTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/common/model/PictureTest.java", "test_prefix": "    @Test\n    public void testToAndFrom() throws Exception {\n        int[] Y = randomIntArray(4096, 4, 1019);\n        int[] U = randomIntArray(2048, 4, 1019);\n        int[] V = randomIntArray(2048, 4, 1019);\n        PictureHiBD pictureHbd = PictureHiBD.createPictureWithDepth(64, 64, new int[][] { Y, U, V }, ColorSpace.YUV422, 10);\n        Picture picture = Picture.fromPictureHiBD(pictureHbd);\n\n        PictureHiBD resultHbd = picture.toPictureHiBD();\n        \n        <AssertPlaceHolder>;\n        Assert.assertArrayEquals(U, resultHbd.getPlaneData(1));\n        Assert.assertArrayEquals(V, resultHbd.getPlaneData(2));\n    }", "test_prefix_start_lineno": 10, "test_prefix_end_lineno": 23, "focal_method_file_path": "src/main/java/org/jcodec/common/model/PictureHiBD.java", "focal_method": "    public int[] getPlaneData(int plane) {\n        return data[plane];\n    }", "focal_method_start_lineno": 93, "focal_method_end_lineno": 95, "ground_truth_oracle": "Assert.assertArrayEquals(Y, resultHbd.getPlaneData(0));", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void testToAndFrom() throws Exception {\n        int[] Y = randomIntArray(4096, 4, 1019);\n        int[] U = randomIntArray(2048, 4, 1019);\n        int[] V = randomIntArray(2048, 4, 1019);\n        PictureHiBD pictureHbd = PictureHiBD.createPictureWithDepth(64, 64, new int[][] { Y, U, V }, ColorSpace.YUV422, 10);\n        Picture picture = Picture.fromPictureHiBD(pictureHbd);\n\n        PictureHiBD resultHbd = picture.toPictureHiBD();\n        \n    }", "original_test_prefix": "    @Test\n    public void testToAndFrom() throws Exception {\n        int[] Y = randomIntArray(4096, 4, 1019);\n        int[] U = randomIntArray(2048, 4, 1019);\n        int[] V = randomIntArray(2048, 4, 1019);\n        PictureHiBD pictureHbd = PictureHiBD.createPictureWithDepth(64, 64, new int[][] { Y, U, V }, ColorSpace.YUV422, 10);\n        Picture picture = Picture.fromPictureHiBD(pictureHbd);\n\n        PictureHiBD resultHbd = picture.toPictureHiBD();\n        \n        Assert.assertArrayEquals(Y, resultHbd.getPlaneData(0));\n        Assert.assertArrayEquals(U, resultHbd.getPlaneData(1));\n        Assert.assertArrayEquals(V, resultHbd.getPlaneData(2));\n    }", "test_with_params": false, "test_target": "org.jcodec.common.model.PictureTest#testToAndFrom", "test_setup_list": []}
{"index": 433, "project_index": 228, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "AJsonSerHelperTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_name": "testDoubleWithFrac0", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/io/AJsonSerHelperTest.java", "test_prefix": "    @Test\n    public void testDoubleWithFrac0() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(1.23, 0);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 49, "test_prefix_end_lineno": 58, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/io/AJsonSerHelper.java", "focal_method": "    public void writeNumberLiteral (double value, int numFracDigits) throws IOException {\n        checkAcceptsValueAndPrefixComma ();\n        out.write (new DecimalFormat (PATTERNS[numFracDigits], DECIMAL_FORMAT_SYMBOLS).format (value));\n        afterValueWritten ();\n    }", "focal_method_start_lineno": 133, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertEquals(\"1\", result);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testDoubleWithFrac0() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(1.23, 0);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n    }", "original_test_prefix": "    @Test\n    public void testDoubleWithFrac0() throws IOException {\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        final AJsonSerHelper ser = new AJsonSerHelper(baos);\n\n        ser.writeNumberLiteral(1.23, 0);\n\n        final String result = new String(baos.toByteArray(), \"utf-8\");\n        assertEquals(\"1\", result);\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.io.AJsonSerHelperTest#testDoubleWithFrac0", "test_setup_list": []}
{"index": 434, "project_index": 229, "class_index": 0, "test_index": 0, "user_name": "ExpediaGroup", "repo_name": "beeju", "sub_repos": [], "sub_repo": "", "commit_sha": "2263c4aac9a96e93328cdff7b5d31e1a795d885e", "build_system": "mvn", "class_name": "BeejuCoreTest", "class_path": "src/test/java/com/hotels/beeju/core/BeejuCoreTest.java", "test_name": "deleteDirectory", "test_setup_file_path": "src/test/java/com/hotels/beeju/core/BeejuCoreTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/hotels/beeju/core/BeejuCoreTest.java", "test_prefix": "  @Test\n  public void deleteDirectory() throws IOException {\n    BeejuCore testCore = new BeejuCore();\n    testCore.cleanUp();\n    <AssertPlaceHolder>;\n    assertFalse(Files.exists(testCore.tempDir()));\n  }", "test_prefix_start_lineno": 125, "test_prefix_end_lineno": 131, "focal_method_file_path": "src/main/java/com/hotels/beeju/core/BeejuCore.java", "focal_method": "  public Path warehouseDir() {\n    return warehouseDir;\n  }", "focal_method_start_lineno": 288, "focal_method_end_lineno": 290, "ground_truth_oracle": "assertFalse(Files.exists(testCore.warehouseDir()));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void deleteDirectory() throws IOException {\n    BeejuCore testCore = new BeejuCore();\n    testCore.cleanUp();\n  }", "original_test_prefix": "  @Test\n  public void deleteDirectory() throws IOException {\n    BeejuCore testCore = new BeejuCore();\n    testCore.cleanUp();\n    assertFalse(Files.exists(testCore.warehouseDir()));\n    assertFalse(Files.exists(testCore.tempDir()));\n  }", "test_with_params": false, "test_target": "com.hotels.beeju.core.BeejuCoreTest#deleteDirectory", "test_setup_list": []}
{"index": 435, "project_index": 230, "class_index": 0, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "MaxDepthFilterTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MaxDepthFilterTest.java", "test_name": "testCustomDepthZero", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MaxDepthFilterTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/filtering/MaxDepthFilterTest.java", "test_prefix": "    @Test\n    public void testCustomDepthZero() throws MalformedURLException {\n        URLFilter filter = createFilter(\"maxDepth\", 3);\n        URL url = new URL(\"http://www.sourcedomain.com/\");\n        Metadata metadata = new Metadata();\n        metadata.setValue(MetadataTransfer.maxDepthKeyName, \"0\");\n        String filterResult = filter.filter(url, metadata, url.toExternalForm());\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 59, "test_prefix_end_lineno": 67, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/filtering/URLFilter.java", "focal_method": "    public String filter(URL sourceUrl, Metadata sourceMetadata, String urlToFilter);", "focal_method_start_lineno": 35, "focal_method_end_lineno": 35, "ground_truth_oracle": "Assert.assertEquals(null, filterResult);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testCustomDepthZero() throws MalformedURLException {\n        URLFilter filter = createFilter(\"maxDepth\", 3);\n        URL url = new URL(\"http://www.sourcedomain.com/\");\n        Metadata metadata = new Metadata();\n        metadata.setValue(MetadataTransfer.maxDepthKeyName, \"0\");\n        String filterResult = filter.filter(url, metadata, url.toExternalForm());\n    }", "original_test_prefix": "    @Test\n    public void testCustomDepthZero() throws MalformedURLException {\n        URLFilter filter = createFilter(\"maxDepth\", 3);\n        URL url = new URL(\"http://www.sourcedomain.com/\");\n        Metadata metadata = new Metadata();\n        metadata.setValue(MetadataTransfer.maxDepthKeyName, \"0\");\n        String filterResult = filter.filter(url, metadata, url.toExternalForm());\n        Assert.assertEquals(null, filterResult);\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.filtering.MaxDepthFilterTest#testCustomDepthZero", "test_setup_list": []}
{"index": 436, "project_index": 230, "class_index": 1, "test_index": 0, "user_name": "DigitalPebble", "repo_name": "storm-crawler", "sub_repos": ["core", "external/aws", "external/elasticsearch", "external/langid", "external/solr", "external/sql", "external/tika", "external/urlfrontier", "external/warc", "archetype"], "sub_repo": "core", "commit_sha": "8f1f15acf6def59fb0803cad8de42d6b2e8c69c3", "build_system": "mvn", "class_name": "StackOverflowTest", "class_path": "core/src/test/java/com/digitalpebble/stormcrawler/parse/StackOverflowTest.java", "test_name": "testNamespaceExtraction", "test_setup_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/parse/StackOverflowTest.java", "test_setup": "@Before\n    public void setupParserBolt() {\n        bolt = new JSoupParserBolt();\n        setupParserBolt(bolt);\n    }", "test_setup_start_lineno": 31, "test_setup_end_lineno": 35, "test_prefix_file_path": "core/src/test/java/com/digitalpebble/stormcrawler/parse/StackOverflowTest.java", "test_prefix": "    @Test\n    public void testNamespaceExtraction() throws IOException {\n        prepareParserBolt(\"test.parsefilters.json\");\n        Metadata metadata = new Metadata();\n        parse(\"http://polloxniner.blogspot.com\", \"stackexception.html\", metadata);\n        <AssertPlaceHolder>;\n\n        List<Object> obj = output.getEmitted().get(0);\n        Metadata m = (Metadata) obj.get(2);\n        assertNotNull(m.getFirstValue(\"title\"));\n    }", "test_prefix_start_lineno": 46, "test_prefix_end_lineno": 56, "focal_method_file_path": "core/src/main/java/com/digitalpebble/stormcrawler/Metadata.java", "focal_method": "    public Metadata() {\n        md = new HashMap<>();\n    }", "focal_method_start_lineno": 45, "focal_method_end_lineno": 47, "ground_truth_oracle": "Assert.assertEquals(1, output.getEmitted().size());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testNamespaceExtraction() throws IOException {\n        prepareParserBolt(\"test.parsefilters.json\");\n        Metadata metadata = new Metadata();\n        parse(\"http://polloxniner.blogspot.com\", \"stackexception.html\", metadata);\n    }", "original_test_prefix": "    @Test\n    public void testNamespaceExtraction() throws IOException {\n        prepareParserBolt(\"test.parsefilters.json\");\n        Metadata metadata = new Metadata();\n        parse(\"http://polloxniner.blogspot.com\", \"stackexception.html\", metadata);\n        Assert.assertEquals(1, output.getEmitted().size());\n\n        List<Object> obj = output.getEmitted().get(0);\n        Metadata m = (Metadata) obj.get(2);\n        assertNotNull(m.getFirstValue(\"title\"));\n    }", "test_with_params": false, "test_target": "com.digitalpebble.stormcrawler.parse.StackOverflowTest#testNamespaceExtraction", "test_setup_list": [{"test_setup": "@Before\n    public void setupParserBolt() {\n        bolt = new JSoupParserBolt();\n        setupParserBolt(bolt);\n    }", "start_lineno": 31, "end_lineno": 35}]}
{"index": 437, "project_index": 231, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "vair\u0101ki", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void vair\u0101ki() {\n\n        Word vair\u0101ki = loc\u012bt\u0101js.analyze(\"vair\u0101ki\");\n        <AssertPlaceHolder>;\n\n        assertEquals(AttributeNames.v_Adjective, vair\u0101ki.wordforms.get(0).getValue(AttributeNames.i_PartOfSpeech));\n    }", "test_prefix_start_lineno": 562, "test_prefix_end_lineno": 570, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(vair\u0101ki.isRecognized());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void vair\u0101ki() {\n\n        Word vair\u0101ki = loc\u012bt\u0101js.analyze(\"vair\u0101ki\");\n    }", "original_test_prefix": "    @Test\n    public void vair\u0101ki() {\n\n        Word vair\u0101ki = loc\u012bt\u0101js.analyze(\"vair\u0101ki\");\n        assertTrue(vair\u0101ki.isRecognized());\n\n        assertEquals(AttributeNames.v_Adjective, vair\u0101ki.wordforms.get(0).getValue(AttributeNames.i_PartOfSpeech));\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#vair\u0101ki", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 438, "project_index": 231, "class_index": 0, "test_index": 1, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "nop\u016bzdam\u0101s", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void nop\u016bzdam\u0101s() {\n\n        Word nop\u016bzdam\u0101s = loc\u012bt\u0101js.analyze(\"p\u016bzdam\u0101s\");\n        <AssertPlaceHolder>;\n\n        Word nop\u016bsdam\u0101s = loc\u012bt\u0101js.analyze(\"p\u016bsdam\u0101s\");\n        assertFalse(nop\u016bsdam\u0101s.isRecognized());\n\n        Word gr\u016bzdams = loc\u012bt\u0101js.analyze(\"gr\u016bzdams\");\n        assertTrue(gr\u016bzdams.isRecognized());\n\n        Word mezdams = loc\u012bt\u0101js.analyze(\"mezdams\");\n        assertTrue(mezdams.isRecognized());\n\n        Word elsdams = loc\u012bt\u0101js.analyze(\"elsdams\");\n        assertTrue(elsdams.isRecognized());\n\n        Word milzdams = loc\u012bt\u0101js.analyze(\"milzdams\");\n        assertTrue(milzdams.isRecognized());\n\n        Word nesdams = loc\u012bt\u0101js.analyze(\"nesdams\");\n        assertTrue(nesdams.isRecognized());\n    }", "test_prefix_start_lineno": 861, "test_prefix_end_lineno": 884, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(nop\u016bzdam\u0101s.isRecognized());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void nop\u016bzdam\u0101s() {\n\n        Word nop\u016bzdam\u0101s = loc\u012bt\u0101js.analyze(\"p\u016bzdam\u0101s\");\n    }", "original_test_prefix": "    @Test\n    public void nop\u016bzdam\u0101s() {\n\n        Word nop\u016bzdam\u0101s = loc\u012bt\u0101js.analyze(\"p\u016bzdam\u0101s\");\n        assertTrue(nop\u016bzdam\u0101s.isRecognized());\n\n        Word nop\u016bsdam\u0101s = loc\u012bt\u0101js.analyze(\"p\u016bsdam\u0101s\");\n        assertFalse(nop\u016bsdam\u0101s.isRecognized());\n\n        Word gr\u016bzdams = loc\u012bt\u0101js.analyze(\"gr\u016bzdams\");\n        assertTrue(gr\u016bzdams.isRecognized());\n\n        Word mezdams = loc\u012bt\u0101js.analyze(\"mezdams\");\n        assertTrue(mezdams.isRecognized());\n\n        Word elsdams = loc\u012bt\u0101js.analyze(\"elsdams\");\n        assertTrue(elsdams.isRecognized());\n\n        Word milzdams = loc\u012bt\u0101js.analyze(\"milzdams\");\n        assertTrue(milzdams.isRecognized());\n\n        Word nesdams = loc\u012bt\u0101js.analyze(\"nesdams\");\n        assertTrue(nesdams.isRecognized());\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#nop\u016bzdam\u0101s", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 439, "project_index": 231, "class_index": 0, "test_index": 2, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "riebties", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void riebties() {\n\n        loc\u012bt\u0101js.enableGuessing = true;\n        Word riebties = loc\u012bt\u0101js.analyze(\"riebties\");\n        <AssertPlaceHolder>;\n        assertEquals(\"riebties\", riebties.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n    }", "test_prefix_start_lineno": 777, "test_prefix_end_lineno": 785, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(riebties.isRecognized());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void riebties() {\n\n        loc\u012bt\u0101js.enableGuessing = true;\n        Word riebties = loc\u012bt\u0101js.analyze(\"riebties\");\n    }", "original_test_prefix": "    @Test\n    public void riebties() {\n\n        loc\u012bt\u0101js.enableGuessing = true;\n        Word riebties = loc\u012bt\u0101js.analyze(\"riebties\");\n        assertTrue(riebties.isRecognized());\n        assertEquals(\"riebties\", riebties.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#riebties", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 440, "project_index": 232, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "StatementResultTest", "class_path": "src/test/java/gov/adlnet/xapi/StatementResultTest.java", "test_name": "testGetMore", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/StatementResultTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        statementResult = new StatementResult();\n        statements = new ArrayList<Statement>();\n        Statement e = new Statement();\n        statements.add(e );\n        statementResult.setStatements(statements);\n        statementResult.setMore(MORE);\n    }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 29, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/StatementResultTest.java", "test_prefix": "    @Test\n    public void testGetMore() {\n        String expected = MORE;\n        String actual = statementResult.getMore();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 57, "test_prefix_end_lineno": 63, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/StatementResult.java", "focal_method": "    public String getMore() {\n        return more;\n    }", "focal_method_start_lineno": 15, "focal_method_end_lineno": 17, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetMore() {\n        String expected = MORE;\n        String actual = statementResult.getMore();\n    }", "original_test_prefix": "    @Test\n    public void testGetMore() {\n        String expected = MORE;\n        String actual = statementResult.getMore();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.StatementResultTest#testGetMore", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        statementResult = new StatementResult();\n        statements = new ArrayList<Statement>();\n        Statement e = new Statement();\n        statements.add(e );\n        statementResult.setStatements(statements);\n        statementResult.setMore(MORE);\n    }", "start_lineno": 21, "end_lineno": 29}]}
{"index": 441, "project_index": 232, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "VerbsTest", "class_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_name": "testMastered", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/VerbsTest.java", "test_prefix": "    @Test\n    public void testMastered() {\n        Verb actual = Verbs.mastered();\n        <AssertPlaceHolder>;\n        assertEquals(\"mastered\", actual.toString());\n    }", "test_prefix_start_lineno": 104, "test_prefix_end_lineno": 109, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Verbs.java", "focal_method": "    public static Verb mastered(){\n        return createVerb(\"mastered\");\n    }", "focal_method_start_lineno": 55, "focal_method_end_lineno": 57, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testMastered() {\n        Verb actual = Verbs.mastered();\n    }", "original_test_prefix": "    @Test\n    public void testMastered() {\n        Verb actual = Verbs.mastered();\n        assertNotNull(actual);\n        assertEquals(\"mastered\", actual.toString());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.VerbsTest#testMastered", "test_setup_list": []}
{"index": 442, "project_index": 232, "class_index": 2, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActorTest", "class_path": "src/test/java/gov/adlnet/xapi/ActorTest.java", "test_name": "testGetMbox", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActorTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        agent = new Agent(NAME, MBOX);\n\n    }", "test_setup_start_lineno": 27, "test_setup_end_lineno": 31, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActorTest.java", "test_prefix": "    @Test\n    public void testGetMbox() {\n        String expected = MBOX;\n        String actual = agent.getMbox();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 38, "test_prefix_end_lineno": 44, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Actor.java", "focal_method": "    public String getMbox() {\n        return mbox;\n    }", "focal_method_start_lineno": 15, "focal_method_end_lineno": 17, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetMbox() {\n        String expected = MBOX;\n        String actual = agent.getMbox();\n    }", "original_test_prefix": "    @Test\n    public void testGetMbox() {\n        String expected = MBOX;\n        String actual = agent.getMbox();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActorTest#testGetMbox", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        agent = new Agent(NAME, MBOX);\n\n    }", "start_lineno": 27, "end_lineno": 31}]}
{"index": 443, "project_index": 233, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "AppveyorTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/AppveyorTest.java", "test_name": "testGetBuildUrl", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/AppveyorTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/service/AppveyorTest.java", "test_prefix": "    @Test\n    public void testGetBuildUrl() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 70, "test_prefix_end_lineno": 73, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/service/Appveyor.java", "focal_method": "    @Override\n    public String getBuildUrl() {\n        return \"https://ci.appveyor.com/project/\" + getProperty(APPVEYOR_REPO_NAME) + \"/build/\" + getProperty(APPVEYOR_BUILD_NUMBER);\n    }", "focal_method_start_lineno": 66, "focal_method_end_lineno": 69, "ground_truth_oracle": "assertEquals(\"https://ci.appveyor.com/project/owner/project/build/77\", new Appveyor(env()).getBuildUrl());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetBuildUrl() {\n    }", "original_test_prefix": "    @Test\n    public void testGetBuildUrl() {\n        assertEquals(\"https://ci.appveyor.com/project/owner/project/build/77\", new Appveyor(env()).getBuildUrl());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.service.AppveyorTest#testGetBuildUrl", "test_setup_list": []}
{"index": 444, "project_index": 234, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "StringUtilsTest", "class_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_name": "testEmptyIsEmpty", "test_setup_file_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/approvals/lite/util/StringUtilsTest.java", "test_prefix": "  @Test\n  public void testEmptyIsEmpty() throws Exception\n  {\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 91, "test_prefix_end_lineno": 95, "focal_method_file_path": "src/main/java/org/teachingextensions/approvals/lite/util/StringUtils.java", "focal_method": "  public static boolean isEmpty(String string) {\n    return !isNonZero(string);\n  }", "focal_method_start_lineno": 74, "focal_method_end_lineno": 76, "ground_truth_oracle": "assertTrue(StringUtils.isEmpty(\" \"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "  @Test\n  public void testEmptyIsEmpty() throws Exception\n  {\n  }", "original_test_prefix": "  @Test\n  public void testEmptyIsEmpty() throws Exception\n  {\n    assertTrue(StringUtils.isEmpty(\" \"));\n  }", "test_with_params": false, "test_target": "org.teachingextensions.approvals.lite.util.StringUtilsTest#testEmptyIsEmpty", "test_setup_list": []}
{"index": 445, "project_index": 235, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "PerMessageDeflateExtensionTest", "class_path": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "test_name": "testGetDeflater", "test_setup_file_path": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "test_prefix": "  @Test\n  public void testGetDeflater() {\n    PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension();\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 174, "test_prefix_end_lineno": 179, "focal_method_file_path": "src/main/java/org/java_websocket/extensions/permessage_deflate/PerMessageDeflateExtension.java", "focal_method": "  public Deflater getDeflater() {\n    return deflater;\n  }", "focal_method_start_lineno": 65, "focal_method_end_lineno": 67, "ground_truth_oracle": "assertEquals(deflateExtension.getDeflater().finished(), new Deflater(Deflater.DEFAULT_COMPRESSION, true).finished());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testGetDeflater() {\n    PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension();\n  }", "original_test_prefix": "  @Test\n  public void testGetDeflater() {\n    PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension();\n    assertEquals(deflateExtension.getDeflater().finished(), new Deflater(Deflater.DEFAULT_COMPRESSION, true).finished());\n  }", "test_with_params": false, "test_target": "org.java_websocket.extensions.PerMessageDeflateExtensionTest#testGetDeflater", "test_setup_list": []}
{"index": 446, "project_index": 236, "class_index": 0, "test_index": 0, "user_name": "sofastack", "repo_name": "sofa-bolt", "sub_repos": [], "sub_repo": "", "commit_sha": "42e4e3d756b7655c0d4a058989c66d9eb09591fa", "build_system": "mvn", "class_name": "RpcConnectionManagerTest", "class_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_name": "testGetAllWithPoolKey", "test_setup_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "test_setup_start_lineno": 81, "test_setup_end_lineno": 91, "test_prefix_file_path": "src/test/java/com/alipay/remoting/inner/connection/RpcConnectionManagerTest.java", "test_prefix": "    @Test\n    public void testGetAllWithPoolKey() {\n        cm.add(getAConn());\n        cm.add(getAConn());\n        cm.add(getAConn());\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 150, "test_prefix_end_lineno": 156, "focal_method_file_path": "src/main/java/com/alipay/remoting/DefaultConnectionManager.java", "focal_method": "    @Override\n    public List<Connection> getAll(String poolKey) {\n        ConnectionPool pool = this.getConnectionPool(this.connTasks.get(poolKey));\n        return null == pool ? new ArrayList<Connection>() : pool.getAll();\n    }", "focal_method_start_lineno": 238, "focal_method_end_lineno": 242, "ground_truth_oracle": "Assert.assertEquals(3, cm.getAll(poolKey).size());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testGetAllWithPoolKey() {\n        cm.add(getAConn());\n        cm.add(getAConn());\n        cm.add(getAConn());\n    }", "original_test_prefix": "    @Test\n    public void testGetAllWithPoolKey() {\n        cm.add(getAConn());\n        cm.add(getAConn());\n        cm.add(getAConn());\n        Assert.assertEquals(3, cm.getAll(poolKey).size());\n    }", "test_with_params": false, "test_target": "com.alipay.remoting.inner.connection.RpcConnectionManagerTest#testGetAllWithPoolKey", "test_setup_list": [{"test_setup": "@Before\n    public void init() {\n        cm = new DefaultClientConnectionManager(connectionSelectStrategy, connectionFactory,\n            connectionEventHandler, connectionEventListener);\n        cm.setAddressParser(addressParser);\n        cm.startup();\n        server = new BoltServer(port);\n        server.start();\n        server.addConnectionEventProcessor(ConnectionEventType.CONNECT, serverConnectProcessor);\n        this.addressParser.initUrlArgs(url);\n    }", "start_lineno": 81, "end_lineno": 91}]}
{"index": 447, "project_index": 237, "class_index": 0, "test_index": 0, "user_name": "retog", "repo_name": "wymiwyg-commons-core", "sub_repos": [], "sub_repo": "", "commit_sha": "5b5ba4fef4e810b8cea0ac08ce105fa402eaee3c", "build_system": "mvn", "class_name": "MultiPathNodeTest", "class_path": "src/test/java/org/wymiwyg/commons/util/dirbrowser/test/MultiPathNodeTest.java", "test_name": "commonPath", "test_setup_file_path": "src/test/java/org/wymiwyg/commons/util/dirbrowser/test/MultiPathNodeTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/wymiwyg/commons/util/dirbrowser/test/MultiPathNodeTest.java", "test_prefix": "    @Test\n    public void commonPath() {\n        MultiPathNode node = new MultiPathNode(nodeWithPath(\"foo/bar/a/b/end\"),\n                nodeWithPath(\"hello/foo/bar/a/b/end\"),\n                nodeWithPath(\"foo/bar/test/a/b/end\"));\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 35, "test_prefix_end_lineno": 41, "focal_method_file_path": "src/main/java/org/wymiwyg/commons/util/dirbrowser/MultiPathNode.java", "focal_method": "    public String getPath() {\n        String currentLongest = nodes[0].getPath();\n        for (int i = 1; i < nodes.length; i++) {\n            currentLongest = getLongestCommonSuffix(currentLongest, nodes[i].getPath());\n        }\n        return currentLongest;\n    }", "focal_method_start_lineno": 212, "focal_method_end_lineno": 218, "ground_truth_oracle": "Assert.assertEquals(\"a/b/end\", node.getPath());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void commonPath() {\n        MultiPathNode node = new MultiPathNode(nodeWithPath(\"foo/bar/a/b/end\"),\n                nodeWithPath(\"hello/foo/bar/a/b/end\"),\n                nodeWithPath(\"foo/bar/test/a/b/end\"));\n    }", "original_test_prefix": "    @Test\n    public void commonPath() {\n        MultiPathNode node = new MultiPathNode(nodeWithPath(\"foo/bar/a/b/end\"),\n                nodeWithPath(\"hello/foo/bar/a/b/end\"),\n                nodeWithPath(\"foo/bar/test/a/b/end\"));\n        Assert.assertEquals(\"a/b/end\", node.getPath());\n    }", "test_with_params": false, "test_target": "org.wymiwyg.commons.util.dirbrowser.test.MultiPathNodeTest#commonPath", "test_setup_list": []}
{"index": 448, "project_index": 238, "class_index": 0, "test_index": 0, "user_name": "Yubico", "repo_name": "yubico-java-client", "sub_repos": ["v2client", "jaas", "demo-server"], "sub_repo": "v2client", "commit_sha": "e21fb672e290a118f7420daaf81ccb96d319d52c", "build_system": "mvn", "class_name": "YubicoClientTest", "class_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_name": "testValidOTPPublicId", "test_setup_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "test_setup_start_lineno": 66, "test_setup_end_lineno": 69, "test_prefix_file_path": "v2client/src/test/java/com/yubico/client/v2/YubicoClientTest.java", "test_prefix": "    @Test\n    public void testValidOTPPublicId() {\n        String testOtp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        String testPublicId = \"cccccccfhcbe\";\n        String resultPublicId = YubicoClient.getPublicId(testOtp);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 216, "test_prefix_end_lineno": 222, "focal_method_file_path": "v2client/src/main/java/com/yubico/client/v2/YubicoClient.java", "focal_method": "    public static String getPublicId(String otp) {\n        if ((otp == null) || (otp.length() < OTP_MIN_LEN)){\n            //not a valid OTP format, throw an exception\n            throw new IllegalArgumentException(\"The OTP is too short to be valid\");\n        }\n        \n        Integer len = otp.length();\n\n        /* The OTP part is always the last 32 bytes of otp. Whatever is before that\n         * (if anything) is the public ID of the YubiKey. The ID can be set to ''\n         * through personalization.\n         */\n        return otp.substring(0, len - 32).toLowerCase();\n    }", "focal_method_start_lineno": 197, "focal_method_end_lineno": 210, "ground_truth_oracle": "assertEquals(testPublicId, resultPublicId);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testValidOTPPublicId() {\n        String testOtp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        String testPublicId = \"cccccccfhcbe\";\n        String resultPublicId = YubicoClient.getPublicId(testOtp);\n    }", "original_test_prefix": "    @Test\n    public void testValidOTPPublicId() {\n        String testOtp = \"cccccccfhcbelrhifnjrrddcgrburluurftrgfdrdifj\";\n        String testPublicId = \"cccccccfhcbe\";\n        String resultPublicId = YubicoClient.getPublicId(testOtp);\n        assertEquals(testPublicId, resultPublicId);\n    }", "test_with_params": false, "test_target": "com.yubico.client.v2.YubicoClientTest#testValidOTPPublicId", "test_setup_list": [{"test_setup": "@Before\n    public void setup() {\n        client = YubicoClient.getClient(this.clientId, apiKey);\n    }", "start_lineno": 66, "end_lineno": 69}]}
{"index": 449, "project_index": 239, "class_index": 0, "test_index": 0, "user_name": "OpenLiberty", "repo_name": "ci.common", "sub_repos": [], "sub_repo": "", "commit_sha": "c41190e3047e920f39c3bb91a3e4045d65f36155", "build_system": "mvn", "class_name": "DevUtilTest", "class_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_name": "testGetFileFromConfigDirectory", "test_setup_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }\n\n@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "test_setup_start_lineno": 56, "test_setup_end_lineno": 59, "test_prefix_file_path": "src/test/java/io/openliberty/tools/common/plugins/util/DevUtilTest.java", "test_prefix": "    @Test\n    public void testGetFileFromConfigDirectory() throws Exception {\n        DevUtil util = new DevTestUtil(null, null, null, this.configDirectory, null, false, false);\n\n        File tempTextFile = new File(configDirectory, \"temp.txt\");\n        Files.write(tempTextFile.toPath(), \"temp\".getBytes());\n\n        File configFile = util.getFileFromConfigDirectory(\"temp.txt\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 390, "test_prefix_end_lineno": 399, "focal_method_file_path": "src/main/java/io/openliberty/tools/common/plugins/util/DevUtil.java", "focal_method": "    protected File getFileFromConfigDirectory(String file) {\n        File f = new File(configDirectory, file);\n        if (configDirectory != null && f.exists()) {\n            return f;\n        }\n        return null;\n    }", "focal_method_start_lineno": 4277, "focal_method_end_lineno": 4283, "ground_truth_oracle": "assertTrue(configFile.exists());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testGetFileFromConfigDirectory() throws Exception {\n        DevUtil util = new DevTestUtil(null, null, null, this.configDirectory, null, false, false);\n\n        File tempTextFile = new File(configDirectory, \"temp.txt\");\n        Files.write(tempTextFile.toPath(), \"temp\".getBytes());\n\n        File configFile = util.getFileFromConfigDirectory(\"temp.txt\");\n    }", "original_test_prefix": "    @Test\n    public void testGetFileFromConfigDirectory() throws Exception {\n        DevUtil util = new DevTestUtil(null, null, null, this.configDirectory, null, false, false);\n\n        File tempTextFile = new File(configDirectory, \"temp.txt\");\n        Files.write(tempTextFile.toPath(), \"temp\".getBytes());\n\n        File configFile = util.getFileFromConfigDirectory(\"temp.txt\");\n        assertTrue(configFile.exists());\n    }", "test_with_params": false, "test_target": "io.openliberty.tools.common.plugins.util.DevUtilTest#testGetFileFromConfigDirectory", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpClass() throws Exception {\n        src = new File(\"src/test/resources/servers\");\n    }", "start_lineno": 56, "end_lineno": 59}, {"test_setup": "@Before\n    public void setUp() throws IOException {\n        serverDirectory = Files.createTempDirectory(\"serverDirectory\").toFile();\n        configDirectory = Files.createTempDirectory(\"configDirectory\").toFile();\n        srcDir = Files.createTempDirectory(\"src\").toFile();\n        targetDir = Files.createTempDirectory(\"target\").toFile();\n        util = getNewDevUtil(serverDirectory);\n    }", "start_lineno": 61, "end_lineno": 68}]}
{"index": 450, "project_index": 240, "class_index": 0, "test_index": 0, "user_name": "fluenda", "repo_name": "ParCEFone", "sub_repos": [], "sub_repo": "", "commit_sha": "5067b3315c1957f930f19549ec4b354e7b8c336d", "build_system": "mvn", "class_name": "MacAddressTest", "class_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_name": "testAddressHashCode", "test_setup_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/fluenda/parcefone/event/MacAddressTest.java", "test_prefix": "    @Test\n    public void testAddressHashCode() {\n        final MacAddress macAddress = new MacAddress(MULTICAST_ADDRESS);\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 119, "test_prefix_end_lineno": 123, "focal_method_file_path": "src/main/java/com/fluenda/parcefone/event/MacAddress.java", "focal_method": "    @Override\n    public int hashCode() {\n        return Arrays.hashCode(address);\n    }", "focal_method_start_lineno": 129, "focal_method_end_lineno": 132, "ground_truth_oracle": "assertNotEquals(0, macAddress.hashCode());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testAddressHashCode() {\n        final MacAddress macAddress = new MacAddress(MULTICAST_ADDRESS);\n    }", "original_test_prefix": "    @Test\n    public void testAddressHashCode() {\n        final MacAddress macAddress = new MacAddress(MULTICAST_ADDRESS);\n        assertNotEquals(0, macAddress.hashCode());\n    }", "test_with_params": false, "test_target": "com.fluenda.parcefone.event.MacAddressTest#testAddressHashCode", "test_setup_list": []}
{"index": 451, "project_index": 241, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMultiKeyTest", "class_path": "core/src/test/java/com/orientechnologies/common/util/OMultiKeyTest.java", "test_name": "testEqualsDifferentClass", "test_setup_file_path": "core/src/test/java/com/orientechnologies/common/util/OMultiKeyTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/common/util/OMultiKeyTest.java", "test_prefix": "  @Test\n  public void testEqualsDifferentClass() {\n    final OMultiKey multiKey = new OMultiKey(Collections.singletonList(\"a\"));\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 41, "test_prefix_end_lineno": 45, "focal_method_file_path": "core/src/main/java/com/orientechnologies/common/util/OMultiKey.java", "focal_method": "    @Override\n    public boolean equals(final Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        final OMultiKey oMultiKey = (OMultiKey) o;\n\n        if(keys.size() != oMultiKey.keys.size())\n            return false;\n\n        for (final Object inKey : keys) {\n            if (!oMultiKey.keys.contains(inKey))\n                return false;\n        }\n        return true;\n    }", "focal_method_start_lineno": 65, "focal_method_end_lineno": 80, "ground_truth_oracle": "assertFalse(multiKey.equals(\"a\"));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testEqualsDifferentClass() {\n    final OMultiKey multiKey = new OMultiKey(Collections.singletonList(\"a\"));\n  }", "original_test_prefix": "  @Test\n  public void testEqualsDifferentClass() {\n    final OMultiKey multiKey = new OMultiKey(Collections.singletonList(\"a\"));\n    assertFalse(multiKey.equals(\"a\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.common.util.OMultiKeyTest#testEqualsDifferentClass", "test_setup_list": []}
{"index": 452, "project_index": 241, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "BytesContainerTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/BytesContainerTest.java", "test_name": "testSimple", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/BytesContainerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/BytesContainerTest.java", "test_prefix": "  @Test\n  public void testSimple() {\n    BytesContainer bytesContainer = new BytesContainer();\n    <AssertPlaceHolder>;\n    assertEquals(bytesContainer.offset, 0);\n  }", "test_prefix_start_lineno": 12, "test_prefix_end_lineno": 17, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/serialization/serializer/record/binary/BytesContainer.java", "focal_method": "  public BytesContainer() {\n    bytes = new byte[64];\n  }", "focal_method_start_lineno": 32, "focal_method_end_lineno": 34, "ground_truth_oracle": "assertNotNull(bytesContainer.bytes);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testSimple() {\n    BytesContainer bytesContainer = new BytesContainer();\n  }", "original_test_prefix": "  @Test\n  public void testSimple() {\n    BytesContainer bytesContainer = new BytesContainer();\n    assertNotNull(bytesContainer.bytes);\n    assertEquals(bytesContainer.offset, 0);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.record.impl.BytesContainerTest#testSimple", "test_setup_list": []}
{"index": 453, "project_index": 241, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OCommandExecutorSQLSelectTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_name": "testSkipOrdered", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "test_setup_start_lineno": 51, "test_setup_end_lineno": 180, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/OCommandExecutorSQLSelectTest.java", "test_prefix": "  @Test\n  public void testSkipOrdered() {\n    OSQLSynchQuery sql = new OSQLSynchQuery(\"SELECT from alphabet ORDER BY letter SKIP 7\");\n    List<ODocument> results = db.query(sql);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 801, "test_prefix_end_lineno": 806, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focal_method": "  @Override\n  public <RET extends List<?>> RET query(OQuery<?> iCommand, Object... iArgs) {\n    checkOpenness();\n    return internal.query(iCommand, iArgs);\n  }", "focal_method_start_lineno": 754, "focal_method_end_lineno": 758, "ground_truth_oracle": "assertEquals(19, results.size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testSkipOrdered() {\n    OSQLSynchQuery sql = new OSQLSynchQuery(\"SELECT from alphabet ORDER BY letter SKIP 7\");\n    List<ODocument> results = db.query(sql);\n  }", "original_test_prefix": "  @Test\n  public void testSkipOrdered() {\n    OSQLSynchQuery sql = new OSQLSynchQuery(\"SELECT from alphabet ORDER BY letter SKIP 7\");\n    List<ODocument> results = db.query(sql);\n    assertEquals(19, results.size());\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.OCommandExecutorSQLSelectTest#testSkipOrdered", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class foo\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.name STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.bar INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.address EMBEDDED\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.comp STRING\")).execute();\n    db.command(new OCommandSQL(\"CREATE property foo.osite INTEGER\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE index foo_name on foo (name) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_bar on foo (bar) NOTUNIQUE\")).execute();\n    db.command(new OCommandSQL(\"CREATE index foo_comp_osite on foo (comp, osite) NOTUNIQUE\")).execute();\n\n    db.command(\n        new OCommandSQL(\"insert into foo (name, bar, address) values ('a', 1, {'street':'1st street', 'city':'NY', '@type':'d'})\"))\n        .execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (name, bar) values ('c', 3)\")).execute();\n\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into foo (comp, osite) values ('b', 2)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class bar\")).execute();\n\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('a', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('b', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('c', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('d', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('e', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('f', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('g', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('h', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('i', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('j', 5)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('k', 1)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('l', 2)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('m', 3)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('n', 4)\")).execute();\n    db.command(new OCommandSQL(\"insert into bar (name, foo) values ('o', 5)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class ridsorttest clusters 1\")).execute();\n    db.command(new OCommandSQL(\"CREATE property ridsorttest.name INTEGER\")).execute();\n    db.command(new OCommandSQL(\"CREATE index ridsorttest_name on ridsorttest (name) NOTUNIQUE\")).execute();\n\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (5)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (3)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (4)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (1)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (8)\")).execute();\n    db.command(new OCommandSQL(\"insert into ridsorttest (name) values (6)\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('foo', ['foo1', 'foo2'])\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest (name, coll) values ('bar', ['bar1', 'bar2'])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class unwindtest2\")).execute();\n    db.command(new OCommandSQL(\"insert into unwindtest2 (name, coll) values ('foo', [])\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class `edge`\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestFromInSquare\")).execute();\n    db.command(new OCommandSQL(\"insert into TestFromInSquare set tags = {' from ':'foo',' to ':'bar'}\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestMultipleClusters\")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters1 \")).execute();\n    db.command(new OCommandSQL(\"alter class TestMultipleClusters addcluster testmultipleclusters2 \")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters set name = 'aaa'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters1 set name = 'foo'\")).execute();\n    db.command(new OCommandSQL(\"insert into cluster:testmultipleclusters2 set name = 'bar'\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestUrl\")).execute();\n    db.command(new OCommandSQL(\"insert into TestUrl content { \\\"url\\\": \\\"http://www.google.com\\\" }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParams\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='foo', active = true\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParams  set name = 'foo', surname ='bar', active = false\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestParamsEmbedded\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":0,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n    db.command(new OCommandSQL(\"insert into TestParamsEmbedded set emb = {  \\n\" + \"            \\\"count\\\":1,\\n\"\n        + \"            \\\"testupdate\\\":\\\"1441258203385\\\"\\n\" + \"         }\")).execute();\n\n    db.command(new OCommandSQL(\"CREATE class TestBacktick\")).execute();\n    db.command(new OCommandSQL(\"insert into TestBacktick  set foo = 1, bar = 2, `foo-bar` = 10\")).execute();\n\n    // /*** from issue #2743\n    OSchema schema = db.getMetadata().getSchema();\n    if (!schema.existsClass(\"alphabet\")) {\n      schema.createClass(\"alphabet\", 1, null);\n    }\n\n    ORecordIteratorClass<ODocument> iter = db.browseClass(\"alphabet\");\n    while (iter.hasNext()) {\n      iter.next().delete();\n    }\n\n    // add 26 entries: { \"letter\": \"A\", \"number\": 0 }, ... { \"letter\": \"Z\", \"number\": 25 }\n\n    String rowModel = \"{\\\"letter\\\": \\\"%s\\\", \\\"number\\\": %d}\";\n    for (int i = 0; i < 26; ++i) {\n      String l = String.valueOf((char) ('A' + i));\n      String json = String.format(rowModel, l, i);\n      ODocument doc = db.newInstance(\"alphabet\");\n      doc.fromJSON(json);\n      doc.save();\n    }\n\n    db.command(new OCommandSQL(\"create class OCommandExecutorSQLSelectTest_aggregations\")).execute();\n    db.command(new OCommandSQL(\n        \"insert into OCommandExecutorSQLSelectTest_aggregations set data = [{\\\"size\\\": 0}, {\\\"size\\\": 0}, {\\\"size\\\": 30}, {\\\"size\\\": 50}, {\\\"size\\\": 50}]\"))\n        .execute();\n\n    initExpandSkipLimit(db);\n    initMassiveOrderSkipLimit(db);\n    initDatesSet(db);\n\n    initMatchesWithRegex(db);\n    initDistinctLimit(db);\n    initLinkListSequence(db);\n    initMaxLongNumber(db);\n    initFilterAndOrderByTest(db);\n    initComplexFilterInSquareBrackets(db);\n    initCollateOnLinked(db);\n  }", "start_lineno": 51, "end_lineno": 180}]}
{"index": 454, "project_index": 241, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionNewTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_name": "testFriendsOfFriendsArrows", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 32, "test_setup_end_lineno": 66, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_prefix": "  @Test\n  public void testFriendsOfFriendsArrows() throws Exception {\n    OResultSet qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{}-Friend->{as:friend} return $matches)\");\n\n    <AssertPlaceHolder>;\n    OResult item = qResult.next();\n    Assert.assertEquals(\"n4\", item.getProperty(\"name\"));\n    Assert.assertFalse(qResult.hasNext());\n    qResult.close();\n  }", "test_prefix_start_lineno": 547, "test_prefix_end_lineno": 557, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  @Override\n  boolean hasNext();", "focal_method_start_lineno": 20, "focal_method_end_lineno": 21, "ground_truth_oracle": "Assert.assertTrue(qResult.hasNext());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testFriendsOfFriendsArrows() throws Exception {\n    OResultSet qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{}-Friend->{as:friend} return $matches)\");\n\n  }", "original_test_prefix": "  @Test\n  public void testFriendsOfFriendsArrows() throws Exception {\n    OResultSet qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{}-Friend->{as:friend} return $matches)\");\n\n    Assert.assertTrue(qResult.hasNext());\n    OResult item = qResult.next();\n    Assert.assertEquals(\"n4\", item.getProperty(\"name\"));\n    Assert.assertFalse(qResult.hasNext());\n    qResult.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionNewTest#testFriendsOfFriendsArrows", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 32, "end_lineno": 66}]}
{"index": 455, "project_index": 241, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "lucene", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "LuceneSpatialWithinTest", "class_path": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialWithinTest.java", "test_name": "testWithinNoIndex", "test_setup_file_path": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialWithinTest.java", "test_setup": "", "test_setup_start_lineno": 45, "test_setup_end_lineno": 75, "test_prefix_file_path": "lucene/src/test/java/com/orientechnologies/spatial/functions/LuceneSpatialWithinTest.java", "test_prefix": "  @Test\n  public void testWithinNoIndex() {\n\n    List<ODocument> execute = db.command(new OCommandSQL(\n        \"select ST_Within(smallc,smallc) as smallinsmall,ST_Within(smallc, bigc) As smallinbig, ST_Within(bigc,smallc) As biginsmall \"\n            + \"from (SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) As smallc,ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) As bigc)\"))\n        .execute();\n    ODocument next = execute.iterator().next();\n\n    <AssertPlaceHolder>;\n    Assert.assertEquals(next.field(\"smallinbig\"), true);\n    Assert.assertEquals(next.field(\"biginsmall\"), false);\n\n  }", "test_prefix_start_lineno": 36, "test_prefix_end_lineno": 49, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  @Override\n  public <RET> RET field(final String iFieldName) {\n    RET value = this.rawField(iFieldName);\n\n    if (!iFieldName.startsWith(\"@\") && _lazyLoad && value instanceof ORID && (((ORID) value).isPersistent() || ((ORID) value)\n        .isNew()) && ODatabaseRecordThreadLocal.instance().isDefined()) {\n      // CREATE THE DOCUMENT OBJECT IN LAZY WAY\n      RET newValue = getDatabase().load((ORID) value);\n      if (newValue != null) {\n        unTrack((ORID) value);\n        track((OIdentifiable) newValue);\n        value = newValue;\n        if (this.isTrackingChanges()) {\n          ORecordInternal.setDirtyManager((ORecord) value, this.getDirtyManager());\n        }\n        if (!iFieldName.contains(\".\")) {\n          ODocumentEntry entry = _fields.get(iFieldName);\n          removeCollectionChangeListener(entry, entry.value);\n          entry.value = value;\n          addCollectionChangeListener(entry);\n        }\n      }\n    }\n\n    return value;\n  }", "focal_method_start_lineno": 1201, "focal_method_end_lineno": 1226, "ground_truth_oracle": "Assert.assertEquals(next.field(\"smallinsmall\"), true);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testWithinNoIndex() {\n\n    List<ODocument> execute = db.command(new OCommandSQL(\n        \"select ST_Within(smallc,smallc) as smallinsmall,ST_Within(smallc, bigc) As smallinbig, ST_Within(bigc,smallc) As biginsmall \"\n            + \"from (SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) As smallc,ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) As bigc)\"))\n        .execute();\n    ODocument next = execute.iterator().next();\n\n  }", "original_test_prefix": "  @Test\n  public void testWithinNoIndex() {\n\n    List<ODocument> execute = db.command(new OCommandSQL(\n        \"select ST_Within(smallc,smallc) as smallinsmall,ST_Within(smallc, bigc) As smallinbig, ST_Within(bigc,smallc) As biginsmall \"\n            + \"from (SELECT ST_Buffer(ST_GeomFromText('POINT(50 50)'), 20) As smallc,ST_Buffer(ST_GeomFromText('POINT(50 50)'), 40) As bigc)\"))\n        .execute();\n    ODocument next = execute.iterator().next();\n\n    Assert.assertEquals(next.field(\"smallinsmall\"), true);\n    Assert.assertEquals(next.field(\"smallinbig\"), true);\n    Assert.assertEquals(next.field(\"biginsmall\"), false);\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.spatial.functions.LuceneSpatialWithinTest#testWithinNoIndex", "test_setup_list": []}
{"index": 456, "project_index": 242, "class_index": 0, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JMXJvmIdConnectionFactoryTest", "class_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_name": "testCreateConnectionUsingSystemProperties", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "test_setup_start_lineno": 54, "test_setup_end_lineno": 78, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_prefix": "    @Test\n    public void testCreateConnectionUsingSystemProperties() throws Exception {\n        this.initFactory();\n\n        Mockito.when(this.mockAttacher.attach(\"x-jvmid-x\")).thenReturn(this.mockVirtualMachine);\n        Mockito.when(this.mockVirtualMachine.getAgentProperties()).thenReturn(this.mockAgentProperties);\n        Mockito.when(this.mockVirtualMachine.getSystemProperties()).thenReturn(this.mockSystemProperties);\n\n        Mockito.when(\n                this.mockAgentProperties\n                        .getProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY))\n                .thenReturn(null)\n                .thenReturn(\"x-url-x\");\n        Mockito.when(this.mockSystemProperties.getProperty(\"java.home\")).thenReturn(\"x-java-home-x\");\n\n        MBeanAccessConnection result = this.factory.createConnection();\n\n        <AssertPlaceHolder>;\n        Mockito.verify(this.mockVirtualMachine)\n                .loadAgent(\"x-java-home-x\" + File.separator + \"lib\" + File.separator + \"management-agent.jar\");\n    }", "test_prefix_start_lineno": 140, "test_prefix_end_lineno": 160, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focal_method": "    @Override\n    public MBeanAccessConnection createConnection() throws IOException {\n        JMXMBeanConnection result = null;\n\n        try {\n            VirtualMachine vm = this.attacher.attach(jvmId);\n            String url = vm.getAgentProperties().getProperty(COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY);\n\n            if ( url == null ) {\n                String javaHome = vm.getSystemProperties().getProperty(\"java.home\");\n                String agent = javaHome + File.separator + \"lib\" + File.separator + \"management-agent.jar\";\n                vm.loadAgent(agent);\n\n                url = vm.getAgentProperties().getProperty(COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY);\n            }\n\n            if ( url != null ) {\n                JMXServiceURL jmxUrl = this.jmxServiceUrlFactory.createJMXServiceUrl(url);\n                JMXConnector connector = this.jmxConnectorFactoryDelegate.connect(jmxUrl);\n                result = this.jmxmBeanConnectionFactory.create(connector);\n            } else {\n                log.warn(\"failed to find the local connection url for jvm: jvmId={}\", this.jvmId);\n            }\n        } catch ( AgentInitializationException | AgentLoadException | AttachNotSupportedException exc ) {\n            log.warn(\"failed to connect to jvm: jvmId={}\", this.jvmId, exc);\n        }\n\n        return result;\n    }", "focal_method_start_lineno": 104, "focal_method_end_lineno": 132, "ground_truth_oracle": "assertSame(result, this.mockJmxMbeanConnection);", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "    @Test\n    public void testCreateConnectionUsingSystemProperties() throws Exception {\n        this.initFactory();\n\n        Mockito.when(this.mockAttacher.attach(\"x-jvmid-x\")).thenReturn(this.mockVirtualMachine);\n        Mockito.when(this.mockVirtualMachine.getAgentProperties()).thenReturn(this.mockAgentProperties);\n        Mockito.when(this.mockVirtualMachine.getSystemProperties()).thenReturn(this.mockSystemProperties);\n\n        Mockito.when(\n                this.mockAgentProperties\n                        .getProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY))\n                .thenReturn(null)\n                .thenReturn(\"x-url-x\");\n        Mockito.when(this.mockSystemProperties.getProperty(\"java.home\")).thenReturn(\"x-java-home-x\");\n\n        MBeanAccessConnection result = this.factory.createConnection();\n\n    }", "original_test_prefix": "    @Test\n    public void testCreateConnectionUsingSystemProperties() throws Exception {\n        this.initFactory();\n\n        Mockito.when(this.mockAttacher.attach(\"x-jvmid-x\")).thenReturn(this.mockVirtualMachine);\n        Mockito.when(this.mockVirtualMachine.getAgentProperties()).thenReturn(this.mockAgentProperties);\n        Mockito.when(this.mockVirtualMachine.getSystemProperties()).thenReturn(this.mockSystemProperties);\n\n        Mockito.when(\n                this.mockAgentProperties\n                        .getProperty(JMXJvmIdConnectionFactory.COM_SUN_LOCAL_CONNECTOR_ADDRESS_PROPERTY))\n                .thenReturn(null)\n                .thenReturn(\"x-url-x\");\n        Mockito.when(this.mockSystemProperties.getProperty(\"java.home\")).thenReturn(\"x-java-home-x\");\n\n        MBeanAccessConnection result = this.factory.createConnection();\n\n        assertSame(result, this.mockJmxMbeanConnection);\n        Mockito.verify(this.mockVirtualMachine)\n                .loadAgent(\"x-java-home-x\" + File.separator + \"lib\" + File.separator + \"management-agent.jar\");\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.connection.impl.JMXJvmIdConnectionFactoryTest#testCreateConnectionUsingSystemProperties", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "start_lineno": 54, "end_lineno": 78}]}
{"index": 457, "project_index": 242, "class_index": 0, "test_index": 1, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JMXJvmIdConnectionFactoryTest", "class_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_name": "testGetSetJmxServiceFactory", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "test_setup_start_lineno": 54, "test_setup_end_lineno": 78, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactoryTest.java", "test_prefix": "    @Test\n    public void testGetSetJmxServiceFactory () {\n        <AssertPlaceHolder>;\n\n        this.factory.setJmxServiceUrlFactory(this.mockJmxServiceUrlFactory);\n        assertSame(this.mockJmxServiceUrlFactory, this.factory.getJmxServiceUrlFactory());\n    }", "test_prefix_start_lineno": 97, "test_prefix_end_lineno": 103, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/connection/impl/JMXJvmIdConnectionFactory.java", "focal_method": "    public JMXServiceUrlFactory getJmxServiceUrlFactory() {\n        return jmxServiceUrlFactory;\n    }", "focal_method_start_lineno": 80, "focal_method_end_lineno": 82, "ground_truth_oracle": "assertTrue(this.factory.getJmxServiceUrlFactory() instanceof DefaultJmxServiceUrlFactory);", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetJmxServiceFactory () {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetJmxServiceFactory () {\n        assertTrue(this.factory.getJmxServiceUrlFactory() instanceof DefaultJmxServiceUrlFactory);\n\n        this.factory.setJmxServiceUrlFactory(this.mockJmxServiceUrlFactory);\n        assertSame(this.mockJmxServiceUrlFactory, this.factory.getJmxServiceUrlFactory());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.connection.impl.JMXJvmIdConnectionFactoryTest#testGetSetJmxServiceFactory", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.factory = new JMXJvmIdConnectionFactory(\"x-jvmid-x\");\n\n        this.mockVirtualMachine = Mockito.mock(VirtualMachine.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n        this.mockAttacher = Mockito.mock(VirtualMachineAttacher.class);\n        this.mockJmxServiceUrlFactory = Mockito.mock(JMXServiceUrlFactory.class);\n        this.mockJmxConnectorFactoryDelegate = Mockito.mock(JMXConnectorFactoryDelegate.class);\n        this.mockJmxMbeanConnectorFactory = Mockito.mock(JMXMBeanConnectionFactory.class);\n\n        this.mockJmxServiceUrl = Mockito.mock(JMXServiceURL.class);\n        this.mockJmxConnector = Mockito.mock(JMXConnector.class);\n        this.mockJmxMbeanConnection = Mockito.mock(JMXMBeanConnection.class);\n\n        this.mockAgentProperties = Mockito.mock(Properties.class);\n        this.mockSystemProperties = Mockito.mock(Properties.class);\n\n        Mockito.when(this.mockJmxServiceUrlFactory.createJMXServiceUrl(\"x-url-x\")).thenReturn(this.mockJmxServiceUrl);\n        Mockito.when(this.mockJmxConnectorFactoryDelegate.connect(this.mockJmxServiceUrl))\n                .thenReturn(this.mockJmxConnector);\n        Mockito.when(this.mockJmxMbeanConnectorFactory.create(this.mockJmxConnector))\n                .thenReturn(this.mockJmxMbeanConnection);\n    }", "start_lineno": 54, "end_lineno": 78}]}
{"index": 458, "project_index": 242, "class_index": 1, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "ParameterReplacerTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/ParameterReplacerTest.java", "test_name": "testReplaceObjectNameParameters", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/ParameterReplacerTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        mockSource = Mockito.mock(MBeanLocationParameterSource.class);\n\n        replacer = new ParameterReplacer();\n    }", "test_setup_start_lineno": 36, "test_setup_end_lineno": 41, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/ParameterReplacerTest.java", "test_prefix": "    @Test\n    public void testReplaceObjectNameParameters() throws Exception {\n        Mockito.when(this.mockSource.getParameter(\"x-param1-x\")).thenReturn(\"x-value1-x\");\n        Mockito.when(this.mockSource.getParameter(\"x-param2-x\")).thenReturn(\"x-value2-x\");\n        Mockito.when(this.mockSource.getParameter(\"x-param3-x\")).thenReturn(\"x-value3-x\");\n\n        String result;\n\n        result = this.replacer.replaceObjectNameParameters(\"X${x-param1-x}X\", mockSource);\n        <AssertPlaceHolder>;\n\n        result = this.replacer.replaceObjectNameParameters(\"X${x-param1-x}X${x-param2-x}X\", mockSource);\n        assertEquals(\"Xx-value1-xXx-value2-xX\", result);\n\n        result = this.replacer.replaceObjectNameParameters(\"X${x-param1-x}X${x-param2-x}X${x-param3-x}X\", mockSource);\n        assertEquals(\"Xx-value1-xXx-value2-xXx-value3-xX\", result);\n    }", "test_prefix_start_lineno": 48, "test_prefix_end_lineno": 67, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/ParameterReplacer.java", "focal_method": "    public String replaceObjectNameParameters (String pattern, MBeanLocationParameterSource parameterSource) {\n        Matcher matcher = replaceParamPattern.matcher(pattern);\n        StringBuffer result = new StringBuffer();\n\n        while ( matcher.find() ) {\n            String name = matcher.group(\"paramName\");\n            String value = parameterSource.getParameter(name);\n\n            if ( value != null ) {\n                matcher.appendReplacement(result, value);\n            } else {\n                matcher.appendReplacement(result, Matcher.quoteReplacement(matcher.group()));\n            }\n        }\n\n        matcher.appendTail(result);\n\n        return  result.toString();\n    }", "focal_method_start_lineno": 41, "focal_method_end_lineno": 59, "ground_truth_oracle": "assertEquals(\"Xx-value1-xX\", result);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testReplaceObjectNameParameters() throws Exception {\n        Mockito.when(this.mockSource.getParameter(\"x-param1-x\")).thenReturn(\"x-value1-x\");\n        Mockito.when(this.mockSource.getParameter(\"x-param2-x\")).thenReturn(\"x-value2-x\");\n        Mockito.when(this.mockSource.getParameter(\"x-param3-x\")).thenReturn(\"x-value3-x\");\n\n        String result;\n\n        result = this.replacer.replaceObjectNameParameters(\"X${x-param1-x}X\", mockSource);\n    }", "original_test_prefix": "    @Test\n    public void testReplaceObjectNameParameters() throws Exception {\n        Mockito.when(this.mockSource.getParameter(\"x-param1-x\")).thenReturn(\"x-value1-x\");\n        Mockito.when(this.mockSource.getParameter(\"x-param2-x\")).thenReturn(\"x-value2-x\");\n        Mockito.when(this.mockSource.getParameter(\"x-param3-x\")).thenReturn(\"x-value3-x\");\n\n        String result;\n\n        result = this.replacer.replaceObjectNameParameters(\"X${x-param1-x}X\", mockSource);\n        assertEquals(\"Xx-value1-xX\", result);\n\n        result = this.replacer.replaceObjectNameParameters(\"X${x-param1-x}X${x-param2-x}X\", mockSource);\n        assertEquals(\"Xx-value1-xXx-value2-xX\", result);\n\n        result = this.replacer.replaceObjectNameParameters(\"X${x-param1-x}X${x-param2-x}X${x-param3-x}X\", mockSource);\n        assertEquals(\"Xx-value1-xXx-value2-xXx-value3-xX\", result);\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.ParameterReplacerTest#testReplaceObjectNameParameters", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        mockSource = Mockito.mock(MBeanLocationParameterSource.class);\n\n        replacer = new ParameterReplacer();\n    }", "start_lineno": 36, "end_lineno": 41}]}
{"index": 459, "project_index": 242, "class_index": 2, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "ObjectQueryInfoTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryInfoTest.java", "test_name": "testImmutableQueryInfo", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryInfoTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/ObjectQueryInfoTest.java", "test_prefix": "    @Test\n    public void testImmutableQueryInfo() throws Exception {\n        Map<String, Method> setters = new HashMap<>();\n        setters.put(\"x-att1-x\", null);\n        setters.put(\"x-att2-x\", null);\n\n        Object target = new Object();\n        ObjectName oname = new ObjectName(\"x-domain-x:x-key-x=x-value-x\");\n\n        ObjectQueryInfo objectQueryInfo = new ObjectQueryInfo(target, oname, setters);\n\n        <AssertPlaceHolder>;\n        assertSame(oname, objectQueryInfo.getObjectName());\n        assertSame(setters, objectQueryInfo.getAttributeSetters());\n        assertEquals(setters.keySet(), objectQueryInfo.getAttributeNames());\n    }", "test_prefix_start_lineno": 36, "test_prefix_end_lineno": 51, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/ObjectQueryInfo.java", "focal_method": "    public Object getTarget() {\n        return target;\n    }", "focal_method_start_lineno": 38, "focal_method_end_lineno": 40, "ground_truth_oracle": "assertSame(target, objectQueryInfo.getTarget());", "ground_truth_oracle_lineno": 6, "test_prefix_wo_placeholder": "    @Test\n    public void testImmutableQueryInfo() throws Exception {\n        Map<String, Method> setters = new HashMap<>();\n        setters.put(\"x-att1-x\", null);\n        setters.put(\"x-att2-x\", null);\n\n        Object target = new Object();\n        ObjectName oname = new ObjectName(\"x-domain-x:x-key-x=x-value-x\");\n\n        ObjectQueryInfo objectQueryInfo = new ObjectQueryInfo(target, oname, setters);\n\n    }", "original_test_prefix": "    @Test\n    public void testImmutableQueryInfo() throws Exception {\n        Map<String, Method> setters = new HashMap<>();\n        setters.put(\"x-att1-x\", null);\n        setters.put(\"x-att2-x\", null);\n\n        Object target = new Object();\n        ObjectName oname = new ObjectName(\"x-domain-x:x-key-x=x-value-x\");\n\n        ObjectQueryInfo objectQueryInfo = new ObjectQueryInfo(target, oname, setters);\n\n        assertSame(target, objectQueryInfo.getTarget());\n        assertSame(oname, objectQueryInfo.getObjectName());\n        assertSame(setters, objectQueryInfo.getAttributeSetters());\n        assertEquals(setters.keySet(), objectQueryInfo.getAttributeNames());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.ObjectQueryInfoTest#testImmutableQueryInfo", "test_setup_list": []}
{"index": 460, "project_index": 242, "class_index": 3, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "AttributeInjectorTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/AttributeInjectorTest.java", "test_name": "testCopyOutWithLongForIntFields", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/AttributeInjectorTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.injector = new AttributeInjector();\n\n        this.target = new TestTarget();\n        this.attributeList = new LinkedList<>();\n        this.attributeSetters = new HashMap<>();\n\n        this.objectName = new ObjectName(\"x-domain-x:x-key-x=x-value-x\");\n\n        this.attributeList.add(new Attribute(\"x-att-str-name-x\", \"x-att-str-value-x\"));\n        this.attributeList.add(new Attribute(\"x-att-int-name-x\", 7));\n        this.attributeList.add(new Attribute(\"x-att-Integer-name-x\", 11));\n\n        this.attributeSetters.put(\"x-att-str-name-x\", TestTarget.class.getMethod(\"setStringValue\", String.class));\n        this.attributeSetters.put(\"x-att-int-name-x\", TestTarget.class.getMethod(\"setIntValue\", int.class));\n        this.attributeSetters.put(\"x-att-Integer-name-x\", TestTarget.class.getMethod(\"setIntegerValue\", Integer.class));\n        this.attributeSetters.put(\"x-throw-x\", TestTarget.class.getMethod(\"throwWhenCalled\", String.class));\n        this.attributeSetters.put(\"x-inaccessible-x\", TestTarget.class.getDeclaredMethod(\"inaccessible\", String.class));\n\n        this.injector.setLog(this.mockLogger);\n    }", "test_setup_start_lineno": 50, "test_setup_end_lineno": 73, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/AttributeInjectorTest.java", "test_prefix": "    @Test\n    public void testCopyOutWithLongForIntFields() throws Exception {\n        this.attributeList.clear();\n\n        this.attributeList.add(new Attribute(\"x-att-int-name-x\", 17L));\n        this.attributeList.add(new Attribute(\"x-att-Integer-name-x\", 22L));\n\n        this.injector.copyOutAttributes(this.target, this.attributeList, this.attributeSetters, this.objectName);\n\n        <AssertPlaceHolder>;\n        assertEquals(Integer.valueOf(22), this.target.integerValue);\n    }", "test_prefix_start_lineno": 95, "test_prefix_end_lineno": 106, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/AttributeInjector.java", "focal_method": "    public void copyOutAttributes(Object target, List<Attribute> jmxAttributeValues,\n                                  Map<String, Method> attributeSetters, ObjectName objectName) {\n\n        this.copyOutAttributes(target, jmxAttributeValues, attributeSetters, \"oname\", objectName);\n    }", "focal_method_start_lineno": 56, "focal_method_end_lineno": 60, "ground_truth_oracle": "assertEquals(17, this.target.intValue);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testCopyOutWithLongForIntFields() throws Exception {\n        this.attributeList.clear();\n\n        this.attributeList.add(new Attribute(\"x-att-int-name-x\", 17L));\n        this.attributeList.add(new Attribute(\"x-att-Integer-name-x\", 22L));\n\n        this.injector.copyOutAttributes(this.target, this.attributeList, this.attributeSetters, this.objectName);\n\n    }", "original_test_prefix": "    @Test\n    public void testCopyOutWithLongForIntFields() throws Exception {\n        this.attributeList.clear();\n\n        this.attributeList.add(new Attribute(\"x-att-int-name-x\", 17L));\n        this.attributeList.add(new Attribute(\"x-att-Integer-name-x\", 22L));\n\n        this.injector.copyOutAttributes(this.target, this.attributeList, this.attributeSetters, this.objectName);\n\n        assertEquals(17, this.target.intValue);\n        assertEquals(Integer.valueOf(22), this.target.integerValue);\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.AttributeInjectorTest#testCopyOutWithLongForIntFields", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.injector = new AttributeInjector();\n\n        this.target = new TestTarget();\n        this.attributeList = new LinkedList<>();\n        this.attributeSetters = new HashMap<>();\n\n        this.objectName = new ObjectName(\"x-domain-x:x-key-x=x-value-x\");\n\n        this.attributeList.add(new Attribute(\"x-att-str-name-x\", \"x-att-str-value-x\"));\n        this.attributeList.add(new Attribute(\"x-att-int-name-x\", 7));\n        this.attributeList.add(new Attribute(\"x-att-Integer-name-x\", 11));\n\n        this.attributeSetters.put(\"x-att-str-name-x\", TestTarget.class.getMethod(\"setStringValue\", String.class));\n        this.attributeSetters.put(\"x-att-int-name-x\", TestTarget.class.getMethod(\"setIntValue\", int.class));\n        this.attributeSetters.put(\"x-att-Integer-name-x\", TestTarget.class.getMethod(\"setIntegerValue\", Integer.class));\n        this.attributeSetters.put(\"x-throw-x\", TestTarget.class.getMethod(\"throwWhenCalled\", String.class));\n        this.attributeSetters.put(\"x-inaccessible-x\", TestTarget.class.getDeclaredMethod(\"inaccessible\", String.class));\n\n        this.injector.setLog(this.mockLogger);\n    }", "start_lineno": 50, "end_lineno": 73}]}
{"index": 461, "project_index": 242, "class_index": 4, "test_index": 0, "user_name": "amlinv", "repo_name": "stat-collection-utils", "sub_repos": [], "sub_repo": "", "commit_sha": "44da9965afbd2e92ce17ce2271d3bf21f69e2e97", "build_system": "mvn", "class_name": "JmxAttributePollerTest", "class_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_name": "testGetSetLog", "test_setup_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "test_setup_start_lineno": 77, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/com/amlinv/jmxutil/polling/JmxAttributePollerTest.java", "test_prefix": "    @Test\n    public void testGetSetLog() throws Exception {\n        <AssertPlaceHolder>;\n        assertNotSame(this.mockLogger, this.poller.getLog());\n\n        this.poller.setLog(this.mockLogger);\n        assertSame(this.mockLogger, this.poller.getLog());\n    }", "test_prefix_start_lineno": 134, "test_prefix_end_lineno": 141, "focal_method_file_path": "src/main/java/com/amlinv/jmxutil/polling/JmxAttributePoller.java", "focal_method": "    public Logger getLog() {\n        return log;\n    }", "focal_method_start_lineno": 95, "focal_method_end_lineno": 97, "ground_truth_oracle": "assertNotNull(this.poller.getLog());", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testGetSetLog() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testGetSetLog() throws Exception {\n        assertNotNull(this.poller.getLog());\n        assertNotSame(this.mockLogger, this.poller.getLog());\n\n        this.poller.setLog(this.mockLogger);\n        assertSame(this.mockLogger, this.poller.getLog());\n    }", "test_with_params": false, "test_target": "com.amlinv.jmxutil.polling.JmxAttributePollerTest#testGetSetLog", "test_setup_list": [{"test_setup": "@Before\n    public void setupTest() throws Exception {\n        this.polled001 = new TestDataClass001();\n\n        this.polledObjects = new LinkedList<>();\n        this.polledObjects.add(\"x-no-data-x\");\n        this.polledObjects.add(polled001);\n\n        this.mockMBeanAccessConnectionFactory = Mockito.mock(MBeanAccessConnectionFactory.class);\n        this.mockScheduler = Mockito.mock(Scheduler.class);\n\n        this.mockBatchCapableAccessConnection = Mockito.mock(MBeanBatchCapableAccessConnection.class);\n        this.mockAccessConnection = Mockito.mock(MBeanAccessConnection.class);\n        this.mockAttributeInjector = Mockito.mock(AttributeInjector.class);\n        this.mockBatchPollProcessor = Mockito.mock(BatchPollProcessor.class);\n        this.mockObjectQueryPreparer = Mockito.mock(ObjectQueryPreparer.class);\n        this.mockTestHooks = Mockito.mock(JmxAttributePoller.ConcurrencyTestHooks.class);\n\n        this.mockLogger = Mockito.mock(Logger.class);\n\n        this.poller = new JmxAttributePoller(this.polledObjects);\n\n        this.processes = new LinkedList<>();\n        this.executionSlips = new LinkedList<>();\n\n        Answer<SchedulerProcessExecutionSlip> startProcessAnswer = createProcessExecutionSlipAnswer(null, null);\n        Mockito.when(this.mockScheduler.startProcess(Mockito.any(SchedulerProcess.class)))\n                .thenAnswer(startProcessAnswer);\n\n        this.testObjectName001 = new ObjectName(this.TEST_ONAME_001_STR);\n\n        this.accessConnectionFactoryDesc = \"x-access-conn-factory-desc-x\";\n        Mockito.when(this.mockMBeanAccessConnectionFactory.getTargetDescription())\n                .thenReturn(this.accessConnectionFactoryDesc);\n    }", "start_lineno": 77, "end_lineno": 111}]}
{"index": 462, "project_index": 243, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "ResourceUtilTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/ResourceUtilTest.java", "test_name": "simple", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/ResourceUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/ResourceUtilTest.java", "test_prefix": "    @Test\n    public void simple() {\n        JsonParser parser = new JsonParser();\n        JsonObject first = parser.parse(\"{first: bla, second: blub}\").getAsJsonObject();\n        JsonObject same = parser.parse(\"{second: blub, first: bla   }\").getAsJsonObject();\n        JsonObject different = parser.parse(\"{second: blub, first: bla2   }\").getAsJsonObject();\n        <AssertPlaceHolder>;\n        assertFalse(ResourceUtil.jsonEquals(first, different));\n    }", "test_prefix_start_lineno": 31, "test_prefix_end_lineno": 39, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/ResourceUtil.java", "focal_method": "    public static boolean jsonEquals(JsonObject first, JsonObject second) {\n        final ObjectMapper mapper = new ObjectMapper();\n\n        try {\n            final JsonNode tree1 = mapper.readTree(first.toString());\n            final JsonNode tree2 = mapper.readTree(second.toString());\n            return tree1.equals(tree2);\n        } catch (IOException e) {\n            return false;\n        }\n    }", "focal_method_start_lineno": 39, "focal_method_end_lineno": 49, "ground_truth_oracle": "assertTrue(ResourceUtil.jsonEquals(first, same));", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void simple() {\n        JsonParser parser = new JsonParser();\n        JsonObject first = parser.parse(\"{first: bla, second: blub}\").getAsJsonObject();\n        JsonObject same = parser.parse(\"{second: blub, first: bla   }\").getAsJsonObject();\n        JsonObject different = parser.parse(\"{second: blub, first: bla2   }\").getAsJsonObject();\n    }", "original_test_prefix": "    @Test\n    public void simple() {\n        JsonParser parser = new JsonParser();\n        JsonObject first = parser.parse(\"{first: bla, second: blub}\").getAsJsonObject();\n        JsonObject same = parser.parse(\"{second: blub, first: bla   }\").getAsJsonObject();\n        JsonObject different = parser.parse(\"{second: blub, first: bla2   }\").getAsJsonObject();\n        assertTrue(ResourceUtil.jsonEquals(first, same));\n        assertFalse(ResourceUtil.jsonEquals(first, different));\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.ResourceUtilTest#simple", "test_setup_list": []}
{"index": 463, "project_index": 244, "class_index": 0, "test_index": 0, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "ADiGraphTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "test_name": "testEmpty", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "test_prefix": "    @Test\n    public void testEmpty() {\n        final ADiGraph<String, ASimpleEdge<String>> graph = ADiGraph.create (Collections.<ASimpleEdge<String>>emptyList ());\n\n        <AssertPlaceHolder>;\n\n        assertTrue (graph.minimalCycles ().isEmpty ());\n        assertFalse (graph.hasCycles ());\n\n        assertFalse (graph.hasEdge (\"a\", \"b\"));\n\n        assertFalse (graph.hasPath (\"a\", \"b\"));\n\n        assertTrue (graph.incomingEdges (\"a\").isEmpty ());\n        assertTrue (graph.incomingPaths (\"a\").isEmpty ());\n\n        assertTrue (graph.outgoingEdges (\"a\").isEmpty ());\n        assertTrue (graph.outgoingPaths (\"a\").isEmpty ());\n\n        assertTrue (graph.isAcyclic ());\n        assertTrue (graph.isForest ());\n        assertFalse (graph.isTree ());\n\n        assertTrue (graph.leafNodes ().isEmpty ());\n        assertTrue (graph.nodes ().isEmpty ());\n        assertTrue (graph.rootNodes ().isEmpty ());\n\n        assertTrue (graph.sortedNodesByReachability ().isEmpty ());\n    }", "test_prefix_start_lineno": 184, "test_prefix_end_lineno": 212, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java", "focal_method": "    public Collection<E> edges () {\n        return new ArrayIterable<> (edges);\n    }", "focal_method_start_lineno": 83, "focal_method_end_lineno": 85, "ground_truth_oracle": "assertTrue (graph.edges ().isEmpty ());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testEmpty() {\n        final ADiGraph<String, ASimpleEdge<String>> graph = ADiGraph.create (Collections.<ASimpleEdge<String>>emptyList ());\n\n    }", "original_test_prefix": "    @Test\n    public void testEmpty() {\n        final ADiGraph<String, ASimpleEdge<String>> graph = ADiGraph.create (Collections.<ASimpleEdge<String>>emptyList ());\n\n        assertTrue (graph.edges ().isEmpty ());\n\n        assertTrue (graph.minimalCycles ().isEmpty ());\n        assertFalse (graph.hasCycles ());\n\n        assertFalse (graph.hasEdge (\"a\", \"b\"));\n\n        assertFalse (graph.hasPath (\"a\", \"b\"));\n\n        assertTrue (graph.incomingEdges (\"a\").isEmpty ());\n        assertTrue (graph.incomingPaths (\"a\").isEmpty ());\n\n        assertTrue (graph.outgoingEdges (\"a\").isEmpty ());\n        assertTrue (graph.outgoingPaths (\"a\").isEmpty ());\n\n        assertTrue (graph.isAcyclic ());\n        assertTrue (graph.isForest ());\n        assertFalse (graph.isTree ());\n\n        assertTrue (graph.leafNodes ().isEmpty ());\n        assertTrue (graph.nodes ().isEmpty ());\n        assertTrue (graph.rootNodes ().isEmpty ());\n\n        assertTrue (graph.sortedNodesByReachability ().isEmpty ());\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.graph.ADiGraphTest#testEmpty", "test_setup_list": []}
{"index": 464, "project_index": 244, "class_index": 0, "test_index": 1, "user_name": "arnohaase", "repo_name": "a-foundation", "sub_repos": ["a-foundation"], "sub_repo": "a-foundation", "commit_sha": "f3eef2ca89d67775f202a4c28140230a6229291e", "build_system": "mvn", "class_name": "ADiGraphTest", "class_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "test_name": "testTree", "test_setup_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "a-foundation/src/test/java/com/ajjpj/afoundation/collection/graph/ADiGraphTest.java", "test_prefix": "    @Test\n    public void testTree() {\n        final ADiGraph<String, ASimpleEdge<String>> graph = ADiGraph.create (Arrays.asList (edge (\"a\", \"b\"), edge (\"a\", \"c\")));\n\n        <AssertPlaceHolder>;\n        assertTrue (graph.isAcyclic ());\n        assertTrue (graph.isForest ());\n        assertTrue (graph.isTree ());\n\n        assertTrue (eqSet (graph.leafNodes (), \"b\", \"c\"));\n        assertTrue (eqSet (graph.rootNodes (), \"a\"));\n\n        assertEquals (\"a\", graph.sortedNodesByReachability ().get (0));\n    }", "test_prefix_start_lineno": 120, "test_prefix_end_lineno": 133, "focal_method_file_path": "a-foundation/src/main/java/com/ajjpj/afoundation/collection/graph/ADiGraph.java", "focal_method": "    public boolean hasCycles() {\n        return ! minimalCycles ().isEmpty ();\n    }", "focal_method_start_lineno": 301, "focal_method_end_lineno": 303, "ground_truth_oracle": "assertFalse (graph.hasCycles ());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testTree() {\n        final ADiGraph<String, ASimpleEdge<String>> graph = ADiGraph.create (Arrays.asList (edge (\"a\", \"b\"), edge (\"a\", \"c\")));\n\n    }", "original_test_prefix": "    @Test\n    public void testTree() {\n        final ADiGraph<String, ASimpleEdge<String>> graph = ADiGraph.create (Arrays.asList (edge (\"a\", \"b\"), edge (\"a\", \"c\")));\n\n        assertFalse (graph.hasCycles ());\n        assertTrue (graph.isAcyclic ());\n        assertTrue (graph.isForest ());\n        assertTrue (graph.isTree ());\n\n        assertTrue (eqSet (graph.leafNodes (), \"b\", \"c\"));\n        assertTrue (eqSet (graph.rootNodes (), \"a\"));\n\n        assertEquals (\"a\", graph.sortedNodesByReachability ().get (0));\n    }", "test_with_params": false, "test_target": "com.ajjpj.afoundation.collection.graph.ADiGraphTest#testTree", "test_setup_list": []}
{"index": 465, "project_index": 245, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "drivers/driver-hazelcast4plus", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "BuildInfoUtilsTest", "class_path": "drivers/driver-hazelcast4plus/src/test/java/com/hazelcast/simulator/utils/BuildInfoUtilsTest.java", "test_name": "testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse", "test_setup_file_path": "drivers/driver-hazelcast4plus/src/test/java/com/hazelcast/simulator/utils/BuildInfoUtilsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "drivers/driver-hazelcast4plus/src/test/java/com/hazelcast/simulator/utils/BuildInfoUtilsTest.java", "test_prefix": "    @Test\n    public void testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 37, "test_prefix_end_lineno": 40, "focal_method_file_path": "drivers/driver-hazelcast4plus/src/main/java/com/hazelcast/simulator/utils/BuildInfoUtils.java", "focal_method": "    static boolean isMinVersion(String minVersion, String version) {\n        if (version == null) {\n            return false;\n        }\n        return VersionUtils.isMinVersion(minVersion, getVersion());\n    }", "focal_method_start_lineno": 58, "focal_method_end_lineno": 63, "ground_truth_oracle": "assertFalse(isMinVersion(\"3.6\", null));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse() {\n    }", "original_test_prefix": "    @Test\n    public void testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse() {\n        assertFalse(isMinVersion(\"3.6\", null));\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.BuildInfoUtilsTest#testIsMinVersion_whenVersionCannotBeFound_thenReturnFalse", "test_setup_list": []}
{"index": 466, "project_index": 246, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "WildcardsTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "test_name": "testMatchesAgainstNull", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/util/WildcardsTest.java", "test_prefix": "    @Test\n    public void testMatchesAgainstNull() throws Exception {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 36, "test_prefix_end_lineno": 39, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/util/Wildcards.java", "focal_method": "    public static boolean matches(final String text, final String wildcard) {\n        String pattern = wildcard.replace(\"?\", \"\\\\w\").replace(\"*\", \"\\\\w*\");\n        return (text != null && text.matches(pattern));\n    }", "focal_method_start_lineno": 42, "focal_method_end_lineno": 45, "ground_truth_oracle": "assertFalse(Wildcards.matches(null, \"*\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void testMatchesAgainstNull() throws Exception {\n    }", "original_test_prefix": "    @Test\n    public void testMatchesAgainstNull() throws Exception {\n        assertFalse(Wildcards.matches(null, \"*\"));\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.util.WildcardsTest#testMatchesAgainstNull", "test_setup_list": []}
{"index": 467, "project_index": 247, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "Draft_6455Test", "class_path": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java", "test_name": "testToString", "test_setup_file_path": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/drafts/Draft_6455Test.java", "test_prefix": "  @Test\n  public void testToString() throws Exception {\n    Draft_6455 draft_6455 = new Draft_6455();\n    <AssertPlaceHolder>;\n    draft_6455.acceptHandshakeAsServer(handshakedataProtocolExtension);\n    assertEquals(\"Draft_6455 extension: DefaultExtension protocol:  max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455 = new Draft_6455(Collections.<IExtension>emptyList(),\n        Collections.<IProtocol>singletonList(new Protocol(\"chat\")));\n    assertEquals(\"Draft_6455 extension: DefaultExtension max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455.acceptHandshakeAsServer(handshakedataProtocolExtension);\n    assertEquals(\"Draft_6455 extension: DefaultExtension protocol: chat max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455 = new Draft_6455(Collections.<IExtension>singletonList(new TestExtension()),\n        Collections.<IProtocol>singletonList(new Protocol(\"chat\")));\n    assertEquals(\"Draft_6455 extension: DefaultExtension max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455.acceptHandshakeAsServer(handshakedataProtocolExtension);\n    assertEquals(\"Draft_6455 extension: TestExtension protocol: chat max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455 = new Draft_6455(Collections.<IExtension>emptyList(),\n        Collections.<IProtocol>singletonList(new Protocol(\"chat\")), 10);\n    assertEquals(\"Draft_6455 extension: DefaultExtension max frame size: 10\",\n        draft_6455.toString());\n    draft_6455.acceptHandshakeAsServer(handshakedataProtocolExtension);\n    assertEquals(\"Draft_6455 extension: DefaultExtension protocol: chat max frame size: 10\",\n        draft_6455.toString());\n  }", "test_prefix_start_lineno": 207, "test_prefix_end_lineno": 236, "focal_method_file_path": "src/main/java/org/java_websocket/drafts/Draft_6455.java", "focal_method": "  @Override\n  public String toString() {\n    String result = super.toString();\n    if (getExtension() != null) {\n      result += \" extension: \" + getExtension().toString();\n    }\n    if (getProtocol() != null) {\n      result += \" protocol: \" + getProtocol().toString();\n    }\n    result += \" max frame size: \" + this.maxFrameSize;\n    return result;\n  }", "focal_method_start_lineno": 1092, "focal_method_end_lineno": 1103, "ground_truth_oracle": "assertEquals(\"Draft_6455 extension: DefaultExtension max frame size: 2147483647\", draft_6455.toString());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testToString() throws Exception {\n    Draft_6455 draft_6455 = new Draft_6455();\n  }", "original_test_prefix": "  @Test\n  public void testToString() throws Exception {\n    Draft_6455 draft_6455 = new Draft_6455();\n    assertEquals(\"Draft_6455 extension: DefaultExtension max frame size: 2147483647\", draft_6455.toString());\n    draft_6455.acceptHandshakeAsServer(handshakedataProtocolExtension);\n    assertEquals(\"Draft_6455 extension: DefaultExtension protocol:  max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455 = new Draft_6455(Collections.<IExtension>emptyList(),\n        Collections.<IProtocol>singletonList(new Protocol(\"chat\")));\n    assertEquals(\"Draft_6455 extension: DefaultExtension max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455.acceptHandshakeAsServer(handshakedataProtocolExtension);\n    assertEquals(\"Draft_6455 extension: DefaultExtension protocol: chat max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455 = new Draft_6455(Collections.<IExtension>singletonList(new TestExtension()),\n        Collections.<IProtocol>singletonList(new Protocol(\"chat\")));\n    assertEquals(\"Draft_6455 extension: DefaultExtension max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455.acceptHandshakeAsServer(handshakedataProtocolExtension);\n    assertEquals(\"Draft_6455 extension: TestExtension protocol: chat max frame size: 2147483647\",\n        draft_6455.toString());\n    draft_6455 = new Draft_6455(Collections.<IExtension>emptyList(),\n        Collections.<IProtocol>singletonList(new Protocol(\"chat\")), 10);\n    assertEquals(\"Draft_6455 extension: DefaultExtension max frame size: 10\",\n        draft_6455.toString());\n    draft_6455.acceptHandshakeAsServer(handshakedataProtocolExtension);\n    assertEquals(\"Draft_6455 extension: DefaultExtension protocol: chat max frame size: 10\",\n        draft_6455.toString());\n  }", "test_with_params": false, "test_target": "org.java_websocket.drafts.Draft_6455Test#testToString", "test_setup_list": []}
{"index": 468, "project_index": 248, "class_index": 0, "test_index": 0, "user_name": "rockagen", "repo_name": "commons-lib", "sub_repos": [], "sub_repo": "", "commit_sha": "f37141cf40be79d130db804c39ce61690541d5f1", "build_system": "mvn", "class_name": "CommUtilTest", "class_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_name": "testBitValue", "test_setup_file_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/rockagen/commons/util/CommUtilTest.java", "test_prefix": "    @Test\n    public void testBitValue(){\n        String bs=\"0256\";\n        BitSet b=CommUtil.bitSet(bs.getBytes());\n        \n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 109, "test_prefix_end_lineno": 115, "focal_method_file_path": "src/main/java/com/rockagen/commons/util/CommUtil.java", "focal_method": "    public static String hexdump(final byte[] bytes) {\n        if (bytes == null || bytes.length < 1)\n            return \"[no data]\";\n        int length = bytes.length;\n\n        int temp;\n        char[] hex = new char[length * 2];\n        for (int i = 0; i < length; i++) {\n\n            // UnsignedByte\n            temp = bytes[i] & 0xFF;\n\n            hex[i * 2] = HEXARRAY[temp >>> 4];\n            hex[i * 2 + 1] = HEXARRAY[temp & 0x0F];\n\n        }\n        return new String(hex);\n    }", "focal_method_start_lineno": 1178, "focal_method_end_lineno": 1195, "ground_truth_oracle": "Assert.assertEquals(\"3032353600000000\", CommUtil.hexdump(CommUtil.bitValue(b)));", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testBitValue(){\n        String bs=\"0256\";\n        BitSet b=CommUtil.bitSet(bs.getBytes());\n        \n    }", "original_test_prefix": "    @Test\n    public void testBitValue(){\n        String bs=\"0256\";\n        BitSet b=CommUtil.bitSet(bs.getBytes());\n        \n        Assert.assertEquals(\"3032353600000000\", CommUtil.hexdump(CommUtil.bitValue(b)));\n    }", "test_with_params": false, "test_target": "com.rockagen.commons.util.CommUtilTest#testBitValue", "test_setup_list": []}
{"index": 469, "project_index": 249, "class_index": 0, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-rough", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "FillStyleTest", "class_path": "graphviz-rough/src/test/java/guru/nidi/graphviz/rough/FillStyleTest.java", "test_name": "crosshatch", "test_setup_file_path": "graphviz-rough/src/test/java/guru/nidi/graphviz/rough/FillStyleTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-rough/src/test/java/guru/nidi/graphviz/rough/FillStyleTest.java", "test_prefix": "    @Test\n    void crosshatch() {\n        <AssertPlaceHolder>;\n        assertEquals(map(\"fillStyle\", \"cross-hatch\", \"hachureAngle\", 45.0), FillStyle.crossHatch().angle(45).values);\n        assertEquals(map(\"fillStyle\", \"cross-hatch\", \"hachureGap\", 5.0), FillStyle.crossHatch().gap(5).values);\n        assertEquals(map(\"fillStyle\", \"cross-hatch\", \"fillWeight\", 10.0), FillStyle.crossHatch().width(10).values);\n    }", "test_prefix_start_lineno": 34, "test_prefix_end_lineno": 40, "focal_method_file_path": "graphviz-rough/src/main/java/guru/nidi/graphviz/rough/FillStyle.java", "focal_method": "    public static CrossHatch crossHatch() {\n        return new CrossHatch();\n    }", "focal_method_start_lineno": 180, "focal_method_end_lineno": 182, "ground_truth_oracle": "assertEquals(map(\"fillStyle\", \"cross-hatch\"), FillStyle.crossHatch().values);", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void crosshatch() {\n    }", "original_test_prefix": "    @Test\n    void crosshatch() {\n        assertEquals(map(\"fillStyle\", \"cross-hatch\"), FillStyle.crossHatch().values);\n        assertEquals(map(\"fillStyle\", \"cross-hatch\", \"hachureAngle\", 45.0), FillStyle.crossHatch().angle(45).values);\n        assertEquals(map(\"fillStyle\", \"cross-hatch\", \"hachureGap\", 5.0), FillStyle.crossHatch().gap(5).values);\n        assertEquals(map(\"fillStyle\", \"cross-hatch\", \"fillWeight\", 10.0), FillStyle.crossHatch().width(10).values);\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.rough.FillStyleTest#crosshatch", "test_setup_list": []}
{"index": 470, "project_index": 249, "class_index": 1, "test_index": 0, "user_name": "nidi3", "repo_name": "graphviz-java", "sub_repos": ["graphviz-java", "graphviz-java-min-deps", "graphviz-java-all-j2v8", "graphviz-rough", "graphviz-kotlin"], "sub_repo": "graphviz-java", "commit_sha": "dcbd021a903a4114dd087ef9acec5650b92c89b2", "build_system": "mvn", "class_name": "LabelTest", "class_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "test_name": "markdown", "test_setup_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "graphviz-java/src/test/java/guru/nidi/graphviz/attribute/LabelTest.java", "test_prefix": "    @Test\n    void markdown() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 113, "test_prefix_end_lineno": 117, "focal_method_file_path": "graphviz-java/src/main/java/guru/nidi/graphviz/attribute/Label.java", "focal_method": "    public static Label markdown(String value) {\n        return html(replaceMd(replaceMd(replaceMd(replaceMd(replaceMd(replaceMd(replaceMd(value.replace(\"\\n\", \"<br/>\"),\n                \"\\\\*\\\\*\", \"b\"),\n                \"\\\\*\", \"i\"),\n                \"~~\", \"s\"),\n                \"__\", \"sub\"),\n                \"_\", \"u\"),\n                \"\\\\^\\\\^\", \"sup\"),\n                \"\\\\^\", \"o\")\n                .replaceAll(\"\\\\\\\\([*~_^])\", \"$1\"));\n    }", "focal_method_start_lineno": 171, "focal_method_end_lineno": 181, "ground_truth_oracle": "assertEquals(\"a<br/>b <b>b<i>ol</i>d</b> <s>s</s> <sub>sub</sub> <sup>sup</sup> <o>o</o> *\", Label.markdown(\"a\\nb **b*ol*d** ~~s~~ __sub__ ^^sup^^ ^o^ \\\\*\").value);", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    void markdown() {\n    }", "original_test_prefix": "    @Test\n    void markdown() {\n        assertEquals(\"a<br/>b <b>b<i>ol</i>d</b> <s>s</s> <sub>sub</sub> <sup>sup</sup> <o>o</o> *\", Label.markdown(\"a\\nb **b*ol*d** ~~s~~ __sub__ ^^sup^^ ^o^ \\\\*\").value);\n    }", "test_with_params": false, "test_target": "guru.nidi.graphviz.attribute.LabelTest#markdown", "test_setup_list": []}
{"index": 471, "project_index": 250, "class_index": 0, "test_index": 0, "user_name": "jcodec", "repo_name": "jcodec", "sub_repos": [], "sub_repo": "", "commit_sha": "6ad0b21222becf19b9465346423eb435dfc32f31", "build_system": "mvn", "class_name": "MkvBlockTest", "class_path": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java", "test_name": "testReadingXiphV2", "test_setup_file_path": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/jcodec/containers/mkv/MkvBlockTest.java", "test_prefix": "    @Test\n    public void testReadingXiphV2() throws Exception {\n        ByteBuffer bb = ByteBuffer.wrap(new byte[]{(byte)0x82, 0x00, (byte)0xAE, 0x02, 0x04, (byte)187, (byte)255, (byte)255, 120, (byte)255, 0, 60});\n        int startPosition = 5;\n        bb.position(startPosition);\n        MkvBlock be = new MkvBlock(Block.id);\n        be.offset = 0x149B0;\n        be.dataOffset = 0x149B3;\n        be.dataLen = 0x353;\n        int[] sizes = new int[bb.get(4)+1];\n        be.headerSize = MkvBlock.readXiphLaceSizes(bb, sizes, (int)be.dataLen, startPosition);\n        <AssertPlaceHolder>;\n        Assert.assertArrayEquals(new int[]{187, 630, 255, 60, (int)(be.dataLen) - (187 + 630 + 255 + 60 + be.headerSize) }, sizes);\n    }", "test_prefix_start_lineno": 105, "test_prefix_end_lineno": 118, "focal_method_file_path": "src/main/java/org/jcodec/containers/mkv/boxes/MkvBlock.java", "focal_method": "    public static int readXiphLaceSizes(ByteBuffer bb, int[] sizes, int size, int preLacingHeaderSize) {\n        int startPos = bb.position();\n        int lastIndex = sizes.length - 1;\n        sizes[lastIndex] = size;\n\n        for (int l = 0; l < lastIndex; l++) {\n            int laceSize = 255;\n            while (laceSize == 255) {\n                laceSize = bb.get() & 0xFF;\n                sizes[l] += laceSize;\n            }\n            // Update the size of the last block\n            sizes[lastIndex] -= sizes[l];\n        }\n\n        int headerSize = (bb.position() - startPos) + preLacingHeaderSize;\n        sizes[lastIndex] -= headerSize;\n\n        return headerSize;\n    }", "focal_method_start_lineno": 156, "focal_method_end_lineno": 175, "ground_truth_oracle": "Assert.assertEquals(12, be.headerSize);", "ground_truth_oracle_lineno": 9, "test_prefix_wo_placeholder": "    @Test\n    public void testReadingXiphV2() throws Exception {\n        ByteBuffer bb = ByteBuffer.wrap(new byte[]{(byte)0x82, 0x00, (byte)0xAE, 0x02, 0x04, (byte)187, (byte)255, (byte)255, 120, (byte)255, 0, 60});\n        int startPosition = 5;\n        bb.position(startPosition);\n        MkvBlock be = new MkvBlock(Block.id);\n        be.offset = 0x149B0;\n        be.dataOffset = 0x149B3;\n        be.dataLen = 0x353;\n        int[] sizes = new int[bb.get(4)+1];\n        be.headerSize = MkvBlock.readXiphLaceSizes(bb, sizes, (int)be.dataLen, startPosition);\n    }", "original_test_prefix": "    @Test\n    public void testReadingXiphV2() throws Exception {\n        ByteBuffer bb = ByteBuffer.wrap(new byte[]{(byte)0x82, 0x00, (byte)0xAE, 0x02, 0x04, (byte)187, (byte)255, (byte)255, 120, (byte)255, 0, 60});\n        int startPosition = 5;\n        bb.position(startPosition);\n        MkvBlock be = new MkvBlock(Block.id);\n        be.offset = 0x149B0;\n        be.dataOffset = 0x149B3;\n        be.dataLen = 0x353;\n        int[] sizes = new int[bb.get(4)+1];\n        be.headerSize = MkvBlock.readXiphLaceSizes(bb, sizes, (int)be.dataLen, startPosition);\n        Assert.assertEquals(12, be.headerSize);\n        Assert.assertArrayEquals(new int[]{187, 630, 255, 60, (int)(be.dataLen) - (187 + 630 + 255 + 60 + be.headerSize) }, sizes);\n    }", "test_with_params": false, "test_target": "org.jcodec.containers.mkv.MkvBlockTest#testReadingXiphV2", "test_setup_list": []}
{"index": 472, "project_index": 251, "class_index": 0, "test_index": 0, "user_name": "PeterisP", "repo_name": "morphology", "sub_repos": [], "sub_repo": "", "commit_sha": "c0b04dc7292e3be8b62f5ef2490f70b61f7f9cfe", "build_system": "mvn", "class_name": "MorphologyTest", "class_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_name": "rakiens", "test_setup_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "test_setup_start_lineno": 104, "test_setup_end_lineno": 111, "test_prefix_file_path": "src/test/java/lv/semti/morphology/Testi/MorphologyTest.java", "test_prefix": "    @Test\n    public void rakiens() {\n        Word w = loc\u012bt\u0101js.analyze(\"racis\");\n        <AssertPlaceHolder>;\n        assertEquals(\"rakt\", w.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        w = loc\u012bt\u0101js.analyze(\"rakis\");\n        assertFalse(w.isRecognized());\n\n        w = loc\u012bt\u0101js.analyze(\"veicis\");\n        assertTrue(w.isRecognized());\n        assertEquals(\"veikt\", w.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        List<Wordform> formas = loc\u012bt\u0101js.generateInflections(\"rakt\", false);\n        AttributeValues testset = new AttributeValues();\n        testset.addAttribute(AttributeNames.i_PartOfSpeech, AttributeNames.v_Noun);\n        testset.addAttribute(AttributeNames.i_Case, AttributeNames.v_Nominative);\n        testset.addAttribute(AttributeNames.i_Gender, AttributeNames.v_Masculine);\n        testset.addAttribute(AttributeNames.i_Number, AttributeNames.v_Singular);\n        assertInflection(formas, testset, \"raciens\");\n    }", "test_prefix_start_lineno": 2297, "test_prefix_end_lineno": 2317, "focal_method_file_path": "src/main/java/lv/semti/morphology/analyzer/Word.java", "focal_method": "    public boolean isRecognized(){\n        return !wordforms.isEmpty();\n    }", "focal_method_start_lineno": 135, "focal_method_end_lineno": 137, "ground_truth_oracle": "assertTrue(w.isRecognized());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void rakiens() {\n        Word w = loc\u012bt\u0101js.analyze(\"racis\");\n    }", "original_test_prefix": "    @Test\n    public void rakiens() {\n        Word w = loc\u012bt\u0101js.analyze(\"racis\");\n        assertTrue(w.isRecognized());\n        assertEquals(\"rakt\", w.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        w = loc\u012bt\u0101js.analyze(\"rakis\");\n        assertFalse(w.isRecognized());\n\n        w = loc\u012bt\u0101js.analyze(\"veicis\");\n        assertTrue(w.isRecognized());\n        assertEquals(\"veikt\", w.wordforms.get(0).getValue(AttributeNames.i_Lemma));\n\n        List<Wordform> formas = loc\u012bt\u0101js.generateInflections(\"rakt\", false);\n        AttributeValues testset = new AttributeValues();\n        testset.addAttribute(AttributeNames.i_PartOfSpeech, AttributeNames.v_Noun);\n        testset.addAttribute(AttributeNames.i_Case, AttributeNames.v_Nominative);\n        testset.addAttribute(AttributeNames.i_Gender, AttributeNames.v_Masculine);\n        testset.addAttribute(AttributeNames.i_Number, AttributeNames.v_Singular);\n        assertInflection(formas, testset, \"raciens\");\n    }", "test_with_params": false, "test_target": "lv.semti.morphology.Testi.MorphologyTest#rakiens", "test_setup_list": [{"test_setup": "@BeforeClass\n    public static void setUpBeforeClass() {\n        try {\n            loc\u012bt\u0101js = new Analyzer(false);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "start_lineno": 104, "end_lineno": 111}, {"test_setup": "@Before\n    public void defaultsettings() {\n        loc\u012bt\u0101js.defaultSettings();\n        loc\u012bt\u0101js.setCacheSize(0);\n        loc\u012bt\u0101js.clearCache();\n    }", "start_lineno": 113, "end_lineno": 118}]}
{"index": 473, "project_index": 252, "class_index": 0, "test_index": 0, "user_name": "basis-technology-corp", "repo_name": "tcl-regex-java", "sub_repos": [], "sub_repo": "", "commit_sha": "d2cb9b680fdac842c5c33bd1e600aad3a901ff62", "build_system": "mvn", "class_name": "SmpTest", "class_path": "src/test/java/com/basistech/tclre/SmpTest.java", "test_name": "find", "test_setup_file_path": "src/test/java/com/basistech/tclre/SmpTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/basistech/tclre/SmpTest.java", "test_prefix": "    @Test\n    public void find() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"\\uD800\\uDF80\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80\");\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 52, "test_prefix_end_lineno": 57, "focal_method_file_path": "src/main/java/com/basistech/tclre/ReMatcher.java", "focal_method": "    boolean find();", "focal_method_start_lineno": 61, "focal_method_end_lineno": 61, "ground_truth_oracle": "assertTrue(matcher.find());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void find() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"\\uD800\\uDF80\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80\");\n    }", "original_test_prefix": "    @Test\n    public void find() throws Exception {\n        RePattern pattern = HsrePattern.compile(\"\\uD800\\uDF80\", PatternFlags.ADVANCED);\n        ReMatcher matcher = pattern.matcher(\"\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80.\\uD800\\uDF80\");\n        assertTrue(matcher.find());\n    }", "test_with_params": false, "test_target": "com.basistech.tclre.SmpTest#find", "test_setup_list": []}
{"index": 474, "project_index": 253, "class_index": 0, "test_index": 0, "user_name": "javadev", "repo_name": "moneytostr-russian", "sub_repos": [], "sub_repo": "", "commit_sha": "d39c8729e15292d4f3d38ddbae68977f170f482b", "build_system": "mvn", "class_name": "MoneyToStrTest", "class_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_name": "checkPER1000", "test_setup_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "test_setup_start_lineno": 106, "test_setup_end_lineno": 174, "test_prefix_file_path": "src/test/java/com/github/moneytostr/MoneyToStrTest.java", "test_prefix": "    @Test\n    public void checkPER1000() {\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 458, "test_prefix_end_lineno": 463, "focal_method_file_path": "src/main/java/com/github/moneytostr/MoneyToStr.java", "focal_method": "    public String convert(Double theMoney) {\n        if (theMoney == null) {\n            throw new IllegalArgumentException(\"theMoney is null\");\n        }\n        Long intPart = theMoney.longValue();\n        Long fractPart = Math.round((theMoney - intPart) * NUM100);\n        if (currency == Currency.PER1000) {\n            fractPart = Math.round((theMoney - intPart) * NUM1000);\n        }\n        return convert(intPart, fractPart);\n    }", "focal_method_start_lineno": 442, "focal_method_end_lineno": 452, "ground_truth_oracle": "assertEquals( \"\u0434\u0432\u0435\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0446\u0435\u043b\u044b\u0445, \u0442\u0440\u0438\u0441\u0442\u0430 \u0441\u043e\u0440\u043e\u043a \u0448\u0435\u0441\u0442\u044c \u0442\u044b\u0441\u044f\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER1000.convert(12.346));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void checkPER1000() {\n    }", "original_test_prefix": "    @Test\n    public void checkPER1000() {\n        assertEquals( \"\u0434\u0432\u0435\u043d\u0430\u0434\u0446\u0430\u0442\u044c \u0446\u0435\u043b\u044b\u0445, \u0442\u0440\u0438\u0441\u0442\u0430 \u0441\u043e\u0440\u043e\u043a \u0448\u0435\u0441\u0442\u044c \u0442\u044b\u0441\u044f\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", moneyToStrPER1000.convert(12.346));\n    }", "test_with_params": false, "test_target": "com.github.moneytostr.MoneyToStrTest#checkPER1000", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() {\n        moneyToStrUAH =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUAHENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.UAH,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRUR =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrRURENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.ENG,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSD =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.UKR,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrUSDENG =\n                new MoneyToStr(\n                        MoneyToStr.Currency.USD, MoneyToStr.Language.ENG, MoneyToStr.Pennies.TEXT);\n        moneyToStrEURRUS =\n                new MoneyToStr(\n                        MoneyToStr.Currency.EUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER);\n        moneyToStrPER100 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER100,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrPER1000 =\n                new MoneyToStr(\n                        MoneyToStr.Currency.PER1000,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.TEXT);\n        moneyToStrCustom =\n                new MoneyToStr(\n                        MoneyToStr.Currency.RUR,\n                        MoneyToStr.Language.RUS,\n                        MoneyToStr.Pennies.NUMBER,\n                        new String[] {\n                            \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"\u0435\u0432\u0440\u043e\", \"M\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u0430\", \"\u0435\u0432\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432\", \"M\"\n                        });\n    }", "start_lineno": 106, "end_lineno": 174}]}
{"index": 475, "project_index": 254, "class_index": 0, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OSelectStatementExecutionTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java", "test_name": "testFetchFromSingleRid", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() {\n\n    db = new ODatabaseDocumentTx(\"memory:OSelectStatementExecutionTest\");\n    db.create();\n  }", "test_setup_start_lineno": 49, "test_setup_end_lineno": 54, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/executor/OSelectStatementExecutionTest.java", "test_prefix": "  @Test\n  public void testFetchFromSingleRid() {\n    OResultSet result = db.query(\"select from #0:1\");\n    printExecutionPlan(result);\n    <AssertPlaceHolder>;\n    Assert.assertNotNull(result.next());\n    Assert.assertFalse(result.hasNext());\n    result.close();\n  }", "test_prefix_start_lineno": 971, "test_prefix_end_lineno": 979, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/executor/OResultSet.java", "focal_method": "  @Override\n  boolean hasNext();", "focal_method_start_lineno": 20, "focal_method_end_lineno": 21, "ground_truth_oracle": "Assert.assertTrue(result.hasNext());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "  @Test\n  public void testFetchFromSingleRid() {\n    OResultSet result = db.query(\"select from #0:1\");\n    printExecutionPlan(result);\n  }", "original_test_prefix": "  @Test\n  public void testFetchFromSingleRid() {\n    OResultSet result = db.query(\"select from #0:1\");\n    printExecutionPlan(result);\n    Assert.assertTrue(result.hasNext());\n    Assert.assertNotNull(result.next());\n    Assert.assertFalse(result.hasNext());\n    result.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.executor.OSelectStatementExecutionTest#testFetchFromSingleRid", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() {\n\n    db = new ODatabaseDocumentTx(\"memory:OSelectStatementExecutionTest\");\n    db.create();\n  }", "start_lineno": 49, "end_lineno": 54}]}
{"index": 476, "project_index": 254, "class_index": 1, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "ODocumentSchemalessSerializationTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessSerializationTest.java", "test_name": "testSimpleEmbeddedDoc", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessSerializationTest.java", "test_setup": "@Before\n  public void before() {\n    serializer = new ORecordSerializerSchemaAware2CSV();\n    defaultSerializer = ODatabaseDocumentTx.getDefaultSerializer();\n    ODatabaseDocumentTx.setDefaultSerializer(serializer);\n    ODatabaseRecordThreadLocal.instance().remove();\n  }", "test_setup_start_lineno": 24, "test_setup_end_lineno": 30, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/record/impl/ODocumentSchemalessSerializationTest.java", "test_prefix": "  @Test\n  public void testSimpleEmbeddedDoc() {\n    ODocument document = new ODocument();\n    ODocument embedded = new ODocument();\n    embedded.field(\"name\", \"test\");\n    embedded.field(\"surname\", \"something\");\n    document.field(\"embed\", embedded);\n\n    byte[] res = serializer.toStream(document, false);\n    ODocument extr = (ODocument) serializer.fromStream(res, new ODocument(), new String[] {});\n    <AssertPlaceHolder>;\n    ODocument emb = extr.field(\"embed\");\n    assertNotNull(emb);\n    assertEquals(emb.<String>field(\"name\"), embedded.field(\"name\"));\n    assertEquals(emb.<String>field(\"surname\"), embedded.field(\"surname\"));\n\n  }", "test_prefix_start_lineno": 218, "test_prefix_end_lineno": 234, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/record/impl/ODocument.java", "focal_method": "  public int fields() {\n    checkForLoading();\n    checkForFields();\n    return _fieldSize;\n  }", "focal_method_start_lineno": 2098, "focal_method_end_lineno": 2102, "ground_truth_oracle": "assertEquals(document.fields(), extr.fields());", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testSimpleEmbeddedDoc() {\n    ODocument document = new ODocument();\n    ODocument embedded = new ODocument();\n    embedded.field(\"name\", \"test\");\n    embedded.field(\"surname\", \"something\");\n    document.field(\"embed\", embedded);\n\n    byte[] res = serializer.toStream(document, false);\n    ODocument extr = (ODocument) serializer.fromStream(res, new ODocument(), new String[] {});\n  }", "original_test_prefix": "  @Test\n  public void testSimpleEmbeddedDoc() {\n    ODocument document = new ODocument();\n    ODocument embedded = new ODocument();\n    embedded.field(\"name\", \"test\");\n    embedded.field(\"surname\", \"something\");\n    document.field(\"embed\", embedded);\n\n    byte[] res = serializer.toStream(document, false);\n    ODocument extr = (ODocument) serializer.fromStream(res, new ODocument(), new String[] {});\n    assertEquals(document.fields(), extr.fields());\n    ODocument emb = extr.field(\"embed\");\n    assertNotNull(emb);\n    assertEquals(emb.<String>field(\"name\"), embedded.field(\"name\"));\n    assertEquals(emb.<String>field(\"surname\"), embedded.field(\"surname\"));\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.record.impl.ODocumentSchemalessSerializationTest#testSimpleEmbeddedDoc", "test_setup_list": [{"test_setup": "@Before\n  public void before() {\n    serializer = new ORecordSerializerSchemaAware2CSV();\n    defaultSerializer = ODatabaseDocumentTx.getDefaultSerializer();\n    ODatabaseDocumentTx.setDefaultSerializer(serializer);\n    ODatabaseRecordThreadLocal.instance().remove();\n  }", "start_lineno": 24, "end_lineno": 30}]}
{"index": 477, "project_index": 254, "class_index": 2, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "graphdb", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OMatchStatementExecutionNewTest", "class_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_name": "testWhileArrows", "test_setup_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "test_setup_start_lineno": 32, "test_setup_end_lineno": 66, "test_prefix_file_path": "graphdb/src/test/java/com/orientechnologies/orient/graph/sql/OMatchStatementExecutionNewTest.java", "test_prefix": "  @Test\n  public void testWhileArrows() throws Exception {\n    OResultSet qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{as:friend, while: ($depth < 1)} return friend)\");\n    <AssertPlaceHolder>;\n    qResult.close();\n\n    qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{as:friend, while: ($depth < 2), where: ($depth=1) } return friend)\");\n    Assert.assertEquals(2, size(qResult));\n    qResult.close();\n\n    qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{as:friend, while: ($depth < 4), where: ($depth=1) } return friend)\");\n    Assert.assertEquals(2, size(qResult));\n    qResult.close();\n\n    qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{as:friend, while: (true) } return friend)\");\n    Assert.assertEquals(6, size(qResult));\n    qResult.close();\n  }", "test_prefix_start_lineno": 649, "test_prefix_end_lineno": 670, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/db/document/ODatabaseDocumentTx.java", "focal_method": "  @Override\n  public OResultSet query(String query, Object... args) {\n    checkOpenness();\n    return internal.query(query, args);\n  }", "focal_method_start_lineno": 1353, "focal_method_end_lineno": 1357, "ground_truth_oracle": "Assert.assertEquals(3, size(qResult));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testWhileArrows() throws Exception {\n    OResultSet qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{as:friend, while: ($depth < 1)} return friend)\");\n  }", "original_test_prefix": "  @Test\n  public void testWhileArrows() throws Exception {\n    OResultSet qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{as:friend, while: ($depth < 1)} return friend)\");\n    Assert.assertEquals(3, size(qResult));\n    qResult.close();\n\n    qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{as:friend, while: ($depth < 2), where: ($depth=1) } return friend)\");\n    Assert.assertEquals(2, size(qResult));\n    qResult.close();\n\n    qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{as:friend, while: ($depth < 4), where: ($depth=1) } return friend)\");\n    Assert.assertEquals(2, size(qResult));\n    qResult.close();\n\n    qResult = db.query(\n        \"select friend.name as name from (match {class:Person, where:(name = 'n1')}-Friend->{as:friend, while: (true) } return friend)\");\n    Assert.assertEquals(6, size(qResult));\n    qResult.close();\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.graph.sql.OMatchStatementExecutionNewTest#testWhileArrows", "test_setup_list": [{"test_setup": "@BeforeClass\n  public static void beforeClass() throws Exception {\n    db = new ODatabaseDocumentTx(DB_STORAGE + \":\" + DB_NAME);\n    db.create();\n    getProfilerInstance().startRecording();\n\n    db.command(new OCommandSQL(\"CREATE class Person extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE class Friend extends E\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n1'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n2'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n3'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n4'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n5'\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX Person set name = 'n6'\")).execute();\n\n    String[][] friendList = new String[][] { { \"n1\", \"n2\" }, { \"n1\", \"n3\" }, { \"n2\", \"n4\" }, { \"n4\", \"n5\" }, { \"n4\", \"n6\" } };\n\n    for (String[] pair : friendList) {\n      db.command(\n          new OCommandSQL(\"CREATE EDGE Friend from (select from Person where name = ?) to (select from Person where name = ?)\"))\n          .execute(pair[0], pair[1]);\n    }\n\n    db.command(new OCommandSQL(\"CREATE class MathOp extends V\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 1, b = 3, c = 2\")).execute();\n    db.command(new OCommandSQL(\"CREATE VERTEX MathOp set a = 5, b = 3, c = 2\")).execute();\n\n    initOrgChart();\n\n    initTriangleTest();\n\n    initEdgeIndexTest();\n\n    initDiamondTest();\n  }", "start_lineno": 32, "end_lineno": 66}]}
{"index": 478, "project_index": 254, "class_index": 3, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "lucene", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "LuceneNullTest", "class_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneNullTest.java", "test_name": "testNotNullChangeToNullWithLists", "test_setup_file_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneNullTest.java", "test_setup": "", "test_setup_start_lineno": 45, "test_setup_end_lineno": 75, "test_prefix_file_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneNullTest.java", "test_prefix": "  @Test\n  public void testNotNullChangeToNullWithLists() {\n\n    db.command(new OCommandSQL(\"create class Test extends V\")).execute();\n    db.command(new OCommandSQL(\"create property Test.names EMBEDDEDLIST STRING\")).execute();\n    db.command(new OCommandSQL(\"create index Test.names on Test (names) fulltext engine lucene\")).execute();\n\n    ODocument doc = new ODocument(\"Test\");\n\n    db.begin();\n    doc.field(\"names\", new String[] { \"foo\" });\n    db.save(doc);\n    db.commit();\n\n    db.begin();\n\n    doc.removeField(\"names\");\n\n    db.save(doc);\n    db.commit();\n\n    OIndex<?> index = db.getMetadata().getIndexManager().getIndex(\"Test.names\");\n    <AssertPlaceHolder>;\n\n  }", "test_prefix_start_lineno": 39, "test_prefix_end_lineno": 63, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java", "focal_method": "  long getSize();", "focal_method_start_lineno": 115, "focal_method_end_lineno": 115, "ground_truth_oracle": "Assert.assertEquals(index.getSize(), 1);", "ground_truth_oracle_lineno": 13, "test_prefix_wo_placeholder": "  @Test\n  public void testNotNullChangeToNullWithLists() {\n\n    db.command(new OCommandSQL(\"create class Test extends V\")).execute();\n    db.command(new OCommandSQL(\"create property Test.names EMBEDDEDLIST STRING\")).execute();\n    db.command(new OCommandSQL(\"create index Test.names on Test (names) fulltext engine lucene\")).execute();\n\n    ODocument doc = new ODocument(\"Test\");\n\n    db.begin();\n    doc.field(\"names\", new String[] { \"foo\" });\n    db.save(doc);\n    db.commit();\n\n    db.begin();\n\n    doc.removeField(\"names\");\n\n    db.save(doc);\n    db.commit();\n\n    OIndex<?> index = db.getMetadata().getIndexManager().getIndex(\"Test.names\");\n  }", "original_test_prefix": "  @Test\n  public void testNotNullChangeToNullWithLists() {\n\n    db.command(new OCommandSQL(\"create class Test extends V\")).execute();\n    db.command(new OCommandSQL(\"create property Test.names EMBEDDEDLIST STRING\")).execute();\n    db.command(new OCommandSQL(\"create index Test.names on Test (names) fulltext engine lucene\")).execute();\n\n    ODocument doc = new ODocument(\"Test\");\n\n    db.begin();\n    doc.field(\"names\", new String[] { \"foo\" });\n    db.save(doc);\n    db.commit();\n\n    db.begin();\n\n    doc.removeField(\"names\");\n\n    db.save(doc);\n    db.commit();\n\n    OIndex<?> index = db.getMetadata().getIndexManager().getIndex(\"Test.names\");\n    Assert.assertEquals(index.getSize(), 1);\n\n  }", "test_with_params": false, "test_target": "com.orientechnologies.lucene.test.LuceneNullTest#testNotNullChangeToNullWithLists", "test_setup_list": []}
{"index": 479, "project_index": 254, "class_index": 4, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "lucene", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "LuceneManualIndexTest", "class_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneManualIndexTest.java", "test_name": "testManualIndex", "test_setup_file_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneManualIndexTest.java", "test_setup": "@Before\n  public void init() {\n    db.command(new OCommandSQL(\"create index manual FULLTEXT ENGINE LUCENE STRING,STRING\")).execute();\n\n    db.command(new OCommandSQL(\"insert into index:manual (key,rid) values(['Enrico','London'],#5:0) \")).execute();\n    db.command(new OCommandSQL(\"insert into index:manual (key,rid) values(['Luca','Rome'],#5:0) \")).execute();\n    db.command(new OCommandSQL(\"insert into index:manual (key,rid) values(['Luigi','Rome'],#5:0) \")).execute();\n\n  }", "test_setup_start_lineno": 41, "test_setup_end_lineno": 49, "test_prefix_file_path": "lucene/src/test/java/com/orientechnologies/lucene/test/LuceneManualIndexTest.java", "test_prefix": "  @Test\n  public void testManualIndex() {\n\n    OIndex<?> manual = db.getMetadata().getIndexManager().getIndex(\"manual\");\n\n    <AssertPlaceHolder>;\n\n    List<ODocument> docs = db.command(new OSQLSynchQuery(\"select from index:manual where key LUCENE 'Enrico'\")).execute();\n    Assert.assertEquals(docs.size(), 1);\n  }", "test_prefix_start_lineno": 78, "test_prefix_end_lineno": 87, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/index/OIndex.java", "focal_method": "  long getSize();", "focal_method_start_lineno": 115, "focal_method_end_lineno": 115, "ground_truth_oracle": "Assert.assertEquals(manual.getSize(), 4);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void testManualIndex() {\n\n    OIndex<?> manual = db.getMetadata().getIndexManager().getIndex(\"manual\");\n\n  }", "original_test_prefix": "  @Test\n  public void testManualIndex() {\n\n    OIndex<?> manual = db.getMetadata().getIndexManager().getIndex(\"manual\");\n\n    Assert.assertEquals(manual.getSize(), 4);\n\n    List<ODocument> docs = db.command(new OSQLSynchQuery(\"select from index:manual where key LUCENE 'Enrico'\")).execute();\n    Assert.assertEquals(docs.size(), 1);\n  }", "test_with_params": false, "test_target": "com.orientechnologies.lucene.test.LuceneManualIndexTest#testManualIndex", "test_setup_list": [{"test_setup": "@Before\n  public void init() {\n    db.command(new OCommandSQL(\"create index manual FULLTEXT ENGINE LUCENE STRING,STRING\")).execute();\n\n    db.command(new OCommandSQL(\"insert into index:manual (key,rid) values(['Enrico','London'],#5:0) \")).execute();\n    db.command(new OCommandSQL(\"insert into index:manual (key,rid) values(['Luca','Rome'],#5:0) \")).execute();\n    db.command(new OCommandSQL(\"insert into index:manual (key,rid) values(['Luigi','Rome'],#5:0) \")).execute();\n\n  }", "start_lineno": 41, "end_lineno": 49}]}
{"index": 480, "project_index": 254, "class_index": 5, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "core", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OFilterOptimizerTest", "class_path": "core/src/test/java/com/orientechnologies/orient/core/sql/filter/OFilterOptimizerTest.java", "test_name": "testOptimizePartialOptimizationMethod", "test_setup_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/filter/OFilterOptimizerTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/com/orientechnologies/orient/core/sql/filter/OFilterOptimizerTest.java", "test_prefix": "  @Test\n  public void testOptimizePartialOptimizationMethod() throws Exception {\n    final OSQLFilter filter = OSQLEngine.getInstance().parseCondition(\"a = 3 and b.asFloat() > 3.14\", null, \"WHERE\");\n\n    final OSQLFilterCondition condition = filter.getRootCondition();\n\n    final OIndexSearchResult searchResult = new OIndexSearchResult(((OSQLFilterCondition) condition.getLeft()).getOperator(),\n        ((OSQLFilterItemField) ((OSQLFilterCondition) condition.getLeft()).getLeft()).getFieldChain(), 3);\n\n    optimizer.optimize(filter, searchResult);\n\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 67, "test_prefix_end_lineno": 79, "focal_method_file_path": "core/src/main/java/com/orientechnologies/orient/core/sql/filter/OSQLFilterCondition.java", "focal_method": "  @Override\n  public String toString() {\n    StringBuilder buffer = new StringBuilder(128);\n\n    buffer.append('(');\n    buffer.append(left);\n    if (operator != null) {\n      buffer.append(' ');\n      buffer.append(operator);\n      buffer.append(' ');\n      if (right instanceof String) {\n        buffer.append('\\'');\n      }\n      buffer.append(right);\n      if (right instanceof String) {\n        buffer.append('\\'');\n      }\n      buffer.append(')');\n    }\n\n    return buffer.toString();\n  }", "focal_method_start_lineno": 224, "focal_method_end_lineno": 245, "ground_truth_oracle": "Assert.assertEquals(filter.getRootCondition().toString(), \"(b.asfloat > 3.14)\");", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testOptimizePartialOptimizationMethod() throws Exception {\n    final OSQLFilter filter = OSQLEngine.getInstance().parseCondition(\"a = 3 and b.asFloat() > 3.14\", null, \"WHERE\");\n\n    final OSQLFilterCondition condition = filter.getRootCondition();\n\n    final OIndexSearchResult searchResult = new OIndexSearchResult(((OSQLFilterCondition) condition.getLeft()).getOperator(),\n        ((OSQLFilterItemField) ((OSQLFilterCondition) condition.getLeft()).getLeft()).getFieldChain(), 3);\n\n    optimizer.optimize(filter, searchResult);\n\n  }", "original_test_prefix": "  @Test\n  public void testOptimizePartialOptimizationMethod() throws Exception {\n    final OSQLFilter filter = OSQLEngine.getInstance().parseCondition(\"a = 3 and b.asFloat() > 3.14\", null, \"WHERE\");\n\n    final OSQLFilterCondition condition = filter.getRootCondition();\n\n    final OIndexSearchResult searchResult = new OIndexSearchResult(((OSQLFilterCondition) condition.getLeft()).getOperator(),\n        ((OSQLFilterItemField) ((OSQLFilterCondition) condition.getLeft()).getLeft()).getFieldChain(), 3);\n\n    optimizer.optimize(filter, searchResult);\n\n    Assert.assertEquals(filter.getRootCondition().toString(), \"(b.asfloat > 3.14)\");\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.core.sql.filter.OFilterOptimizerTest#testOptimizePartialOptimizationMethod", "test_setup_list": []}
{"index": 481, "project_index": 254, "class_index": 6, "test_index": 0, "user_name": "orientechnologies", "repo_name": "orientdb", "sub_repos": ["test-commons", "core", "client", "object", "tools", "server", "security", "graphdb", "tests", "distributed", "lucene", "jdbc", "etl", "distribution", "distribution-tp2", "crashtests"], "sub_repo": "etl", "commit_sha": "2cabb46c9581572b7f46724864f02d9c688070c5", "build_system": "mvn", "class_name": "OETLCSVExtractorTest", "class_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_name": "testQuotedEmptyString", "test_setup_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_setup": "", "test_setup_start_lineno": 47, "test_setup_end_lineno": 57, "test_prefix_file_path": "etl/src/test/java/com/orientechnologies/orient/etl/extractor/OETLCSVExtractorTest.java", "test_prefix": "  @Test\n  public void testQuotedEmptyString() {\n    String cfgJson = \"{source: { content: { value: 'id,title,text\\n1,\\\"\\\",Hello'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n    <AssertPlaceHolder>;\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertThat(doc.<String>field(\"title\")).isNull();\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }", "test_prefix_start_lineno": 330, "test_prefix_end_lineno": 342, "focal_method_file_path": "etl/src/main/java/com/orientechnologies/orient/etl/OETLProcessor.java", "focal_method": "  public void execute() {\n    configure();\n    begin();\n    runExtractorAndPipeline();\n    end();\n  }", "focal_method_start_lineno": 172, "focal_method_end_lineno": 177, "ground_truth_oracle": "assertFalse(res.isEmpty());", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "  @Test\n  public void testQuotedEmptyString() {\n    String cfgJson = \"{source: { content: { value: 'id,title,text\\n1,\\\"\\\",Hello'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n  }", "original_test_prefix": "  @Test\n  public void testQuotedEmptyString() {\n    String cfgJson = \"{source: { content: { value: 'id,title,text\\n1,\\\"\\\",Hello'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    configure(cfgJson);\n    proc.execute();\n\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertThat(doc.<String>field(\"title\")).isNull();\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }", "test_with_params": false, "test_target": "com.orientechnologies.orient.etl.extractor.OETLCSVExtractorTest#testQuotedEmptyString", "test_setup_list": []}
{"index": 482, "project_index": 255, "class_index": 0, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "PerformanceStatsTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/worker/performance/PerformanceStatsTest.java", "test_name": "testAdd_withoutAddOperationCountAndThroughput_toEmptyState", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/worker/performance/PerformanceStatsTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/worker/performance/PerformanceStatsTest.java", "test_prefix": "    @Test\n    public void testAdd_withoutAddOperationCountAndThroughput_toEmptyState() {\n        PerformanceStats addState = new PerformanceStats();\n\n        addState.add(new PerformanceStats(100, 5.0, 10.0, 450.0d, 400, 500), false);\n\n        <AssertPlaceHolder>;\n        assertEquals(5.0, addState.getIntervalThroughput(), 0.00001);\n        assertEquals(10.0, addState.getTotalThroughput(), 0.00001);\n        assertEquals(400, addState.getIntervalLatency999PercentileNanos());\n        assertEquals(450.0d, addState.getIntervalLatencyAvgNanos(), 0.00001);\n        assertEquals(500, addState.getIntervalLatencyMaxNanos());\n    }", "test_prefix_start_lineno": 86, "test_prefix_end_lineno": 98, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/worker/performance/PerformanceStats.java", "focal_method": "    public long getOperationCount() {\n        return operationCount;\n    }", "focal_method_start_lineno": 154, "focal_method_end_lineno": 156, "ground_truth_oracle": "assertEquals(100, addState.getOperationCount());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testAdd_withoutAddOperationCountAndThroughput_toEmptyState() {\n        PerformanceStats addState = new PerformanceStats();\n\n        addState.add(new PerformanceStats(100, 5.0, 10.0, 450.0d, 400, 500), false);\n\n    }", "original_test_prefix": "    @Test\n    public void testAdd_withoutAddOperationCountAndThroughput_toEmptyState() {\n        PerformanceStats addState = new PerformanceStats();\n\n        addState.add(new PerformanceStats(100, 5.0, 10.0, 450.0d, 400, 500), false);\n\n        assertEquals(100, addState.getOperationCount());\n        assertEquals(5.0, addState.getIntervalThroughput(), 0.00001);\n        assertEquals(10.0, addState.getTotalThroughput(), 0.00001);\n        assertEquals(400, addState.getIntervalLatency999PercentileNanos());\n        assertEquals(450.0d, addState.getIntervalLatencyAvgNanos(), 0.00001);\n        assertEquals(500, addState.getIntervalLatencyMaxNanos());\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.worker.performance.PerformanceStatsTest#testAdd_withoutAddOperationCountAndThroughput_toEmptyState", "test_setup_list": []}
{"index": 483, "project_index": 255, "class_index": 1, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "ScriptExecutorTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/worker/ScriptExecutorTest.java", "test_name": "javascript", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/worker/ScriptExecutorTest.java", "test_setup": "@Before\n    public void setup() {\n        driver = mock(Driver.class);\n        scriptExecutor = new ScriptExecutor(driver);\n    }", "test_setup_start_lineno": 17, "test_setup_end_lineno": 21, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/worker/ScriptExecutorTest.java", "test_prefix": "    @Test\n    public void javascript() {\n        ExecuteScriptOperation scriptOperation = new ExecuteScriptOperation(\"js:java.lang.System.out.println();\", false);\n        StubPromise promise = new StubPromise();\n\n        scriptExecutor.execute(scriptOperation, promise);\n\n        promise.assertCompletesEventually();\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 33, "test_prefix_end_lineno": 42, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/worker/ScriptExecutor.java", "focal_method": "    public void execute(final ExecuteScriptOperation operation, final Promise promise) {\n        if (operation.isFireAndForget()) {\n            promise.answer(\"ok\");\n        }\n\n        String fullCommand = operation.getCommand();\n        int indexColon = fullCommand.indexOf(\":\");\n        String extension = fullCommand.substring(0, indexColon);\n        final String command = fullCommand.substring(indexColon + 1);\n\n        final Callable<String> task;\n        if (extension.equals(\"bash\")) {\n            task = newBashScriptCallable(command);\n        } else {\n            task = newGenericScriptCallable(extension, command);\n        }\n\n        new Thread(() -> {\n            try {\n                String result = task.call();\n                promise.answer(result);\n            } catch (Exception e) {\n                LOGGER.warn(\"Failed to execute script: \" + command, e);\n                promise.answer(e);\n            }\n        }).start();\n    }", "focal_method_start_lineno": 42, "focal_method_end_lineno": 68, "ground_truth_oracle": "assertTrue(promise.getAnswer() instanceof String);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void javascript() {\n        ExecuteScriptOperation scriptOperation = new ExecuteScriptOperation(\"js:java.lang.System.out.println();\", false);\n        StubPromise promise = new StubPromise();\n\n        scriptExecutor.execute(scriptOperation, promise);\n\n        promise.assertCompletesEventually();\n    }", "original_test_prefix": "    @Test\n    public void javascript() {\n        ExecuteScriptOperation scriptOperation = new ExecuteScriptOperation(\"js:java.lang.System.out.println();\", false);\n        StubPromise promise = new StubPromise();\n\n        scriptExecutor.execute(scriptOperation, promise);\n\n        promise.assertCompletesEventually();\n        assertTrue(promise.getAnswer() instanceof String);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.worker.ScriptExecutorTest#javascript", "test_setup_list": [{"test_setup": "@Before\n    public void setup() {\n        driver = mock(Driver.class);\n        scriptExecutor = new ScriptExecutor(driver);\n    }", "start_lineno": 17, "end_lineno": 21}]}
{"index": 484, "project_index": 255, "class_index": 2, "test_index": 0, "user_name": "hazelcast", "repo_name": "hazelcast-simulator", "sub_repos": ["archetype", "simulator", "drivers/driver-hazelcast4plus", "drivers/driver-hazelcast3", "drivers/driver-ignite2", "drivers/driver-infinispan9", "drivers/driver-infinispan10", "drivers/driver-infinispan11", "drivers/driver-couchbase", "drivers/driver-memcached", "drivers/driver-mongodb", "drivers/driver-lettuce5", "drivers/driver-lettucecluster5", "drivers/driver-jedis3"], "sub_repo": "simulator", "commit_sha": "7f0c13f66a81ce27911109e4118f7405483931dc", "build_system": "mvn", "class_name": "PropertyBindingSupport_bind0_NumericalTest", "class_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "test_name": "bind_Integer", "test_setup_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "simulator/src/test/java/com/hazelcast/simulator/utils/PropertyBindingSupport_bind0_NumericalTest.java", "test_prefix": "    @Test\n    public void bind_Integer() {\n        <AssertPlaceHolder>;\n        assertNull(testObject.integerField);\n\n        assertTrue(bind0(testObject, \"integerField\", \"10\"));\n        assertEquals(new Integer(10), testObject.integerField);\n    }", "test_prefix_start_lineno": 95, "test_prefix_end_lineno": 102, "focal_method_file_path": "simulator/src/main/java/com/hazelcast/simulator/utils/PropertyBindingSupport.java", "focal_method": "    static boolean bind0(Object object, String property, String value) {\n        value = value.trim();\n\n        String[] path = property.split(\"\\\\.\");\n\n        object = findTargetObject(object, property, path);\n        if (object == null) {\n            return false;\n        }\n\n        Field field = findField(object.getClass(), path[path.length - 1]);\n        if (field == null || isProbeField(field)) {\n            return false;\n        }\n\n        try {\n            setField(field, object, value);\n            return true;\n        } catch (Exception e) {\n            throw new BindException(format(\"Failed to bind value [%s] to property [%s.%s] of type [%s]\",\n                    value, object.getClass().getName(), property, field.getType()), e);\n        }\n    }", "focal_method_start_lineno": 100, "focal_method_end_lineno": 122, "ground_truth_oracle": "assertTrue(bind0(testObject, \"integerField\", \"null\"));", "ground_truth_oracle_lineno": 0, "test_prefix_wo_placeholder": "    @Test\n    public void bind_Integer() {\n    }", "original_test_prefix": "    @Test\n    public void bind_Integer() {\n        assertTrue(bind0(testObject, \"integerField\", \"null\"));\n        assertNull(testObject.integerField);\n\n        assertTrue(bind0(testObject, \"integerField\", \"10\"));\n        assertEquals(new Integer(10), testObject.integerField);\n    }", "test_with_params": false, "test_target": "com.hazelcast.simulator.utils.PropertyBindingSupport_bind0_NumericalTest#bind_Integer", "test_setup_list": []}
{"index": 485, "project_index": 256, "class_index": 0, "test_index": 0, "user_name": "cucumber-ltd", "repo_name": "cucumber-pro-plugin-jvm", "sub_repos": [], "sub_repo": "", "commit_sha": "a09ee0b1682d3cd8b68c240820e647d4515e931f", "build_system": "mvn", "class_name": "YamlConfigLoaderTest", "class_path": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java", "test_name": "removes_underscores_from_keys", "test_setup_file_path": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/io/cucumber/pro/config/loaders/YamlConfigLoaderTest.java", "test_prefix": "    @Test\n    public void removes_underscores_from_keys() {\n        Config config = new Config();\n        ConfigLoader configLoader = new YamlConfigLoader(new StringReader(\"\" +\n                \"cucumber:\\n\" +\n                \"  f_or_mat_: progress\\n\"));\n        configLoader.load(config);\n\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 18, "test_prefix_end_lineno": 27, "focal_method_file_path": "src/main/java/io/cucumber/pro/config/Config.java", "focal_method": "    public String getString(String key) {\n        return getIn(normalize(key), false).getString();\n    }", "focal_method_start_lineno": 17, "focal_method_end_lineno": 19, "ground_truth_oracle": "assertEquals(\"progress\", config.getString(\"cucumber.format\"));", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void removes_underscores_from_keys() {\n        Config config = new Config();\n        ConfigLoader configLoader = new YamlConfigLoader(new StringReader(\"\" +\n                \"cucumber:\\n\" +\n                \"  f_or_mat_: progress\\n\"));\n        configLoader.load(config);\n\n    }", "original_test_prefix": "    @Test\n    public void removes_underscores_from_keys() {\n        Config config = new Config();\n        ConfigLoader configLoader = new YamlConfigLoader(new StringReader(\"\" +\n                \"cucumber:\\n\" +\n                \"  f_or_mat_: progress\\n\"));\n        configLoader.load(config);\n\n        assertEquals(\"progress\", config.getString(\"cucumber.format\"));\n    }", "test_with_params": false, "test_target": "io.cucumber.pro.config.loaders.YamlConfigLoaderTest#removes_underscores_from_keys", "test_setup_list": []}
{"index": 486, "project_index": 257, "class_index": 0, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ContentActivitiesTest", "class_path": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java", "test_name": "testSetOther", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        category = new ArrayList<Activity>();\n        category.add(new Activity(ID));\n\n        grouping = new ArrayList<Activity>();\n        grouping.add(new Activity(ID));\n\n        other = new ArrayList<Activity>();\n        other.add(new Activity(ID));\n\n        parent = new ArrayList<Activity>();\n        parent.add(new Activity(ID));\n\n        contextActivities = new ContextActivities();\n        contextActivities.setCategory(category);\n        contextActivities.setGrouping(grouping);\n        contextActivities.setOther(other);\n        contextActivities.setParent(parent);\n    }", "test_setup_start_lineno": 28, "test_setup_end_lineno": 47, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ContentActivitiesTest.java", "test_prefix": "    @Test\n    public void testSetOther() {\n        String newID = \"New.\" + ID;\n        ArrayList<Activity> expected = other;\n        expected.add(new Activity(newID));\n        contextActivities.setOther(expected);\n        ArrayList<Activity> actual = contextActivities.getOther();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n        assertEquals(ID, actual.get(0).getId());\n    }", "test_prefix_start_lineno": 130, "test_prefix_end_lineno": 140, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ContextActivities.java", "focal_method": "    public ArrayList<Activity> getOther() {\n        return other;\n    }", "focal_method_start_lineno": 36, "focal_method_end_lineno": 38, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 5, "test_prefix_wo_placeholder": "    @Test\n    public void testSetOther() {\n        String newID = \"New.\" + ID;\n        ArrayList<Activity> expected = other;\n        expected.add(new Activity(newID));\n        contextActivities.setOther(expected);\n        ArrayList<Activity> actual = contextActivities.getOther();\n    }", "original_test_prefix": "    @Test\n    public void testSetOther() {\n        String newID = \"New.\" + ID;\n        ArrayList<Activity> expected = other;\n        expected.add(new Activity(newID));\n        contextActivities.setOther(expected);\n        ArrayList<Activity> actual = contextActivities.getOther();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n        assertEquals(ID, actual.get(0).getId());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ContentActivitiesTest#testSetOther", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        category = new ArrayList<Activity>();\n        category.add(new Activity(ID));\n\n        grouping = new ArrayList<Activity>();\n        grouping.add(new Activity(ID));\n\n        other = new ArrayList<Activity>();\n        other.add(new Activity(ID));\n\n        parent = new ArrayList<Activity>();\n        parent.add(new Activity(ID));\n\n        contextActivities = new ContextActivities();\n        contextActivities.setCategory(category);\n        contextActivities.setGrouping(grouping);\n        contextActivities.setOther(other);\n        contextActivities.setParent(parent);\n    }", "start_lineno": 28, "end_lineno": 47}]}
{"index": 487, "project_index": 257, "class_index": 1, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "StatementTest", "class_path": "src/test/java/gov/adlnet/xapi/StatementTest.java", "test_name": "testSetVerb", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/StatementTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        agent = new Agent();\n        agent.setMbox(MBOX);\n        Verb v = new Verb(\"http://example.com/tested\");\n        Activity act = new Activity(TEST_IRI + UUID.randomUUID().toString());\n        statement = new Statement(agent, v, act);\n        statement.setId(ID);\n        \n        Attachment attachment = new Attachment();\n        Attachment expected = new Attachment();\n        String att = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        expected.addAttachment(att, contentType);\n        attachment.setUsageType(new URI(\"http://test.com\"));\n\n        ArrayList<Attachment> expectedList = new ArrayList<Attachment>();\n        expectedList.add(attachment);\n        statement.setAttachments(expectedList);\n        \n        Context context = new Context();\n        context.setLanguage(\"en-US\");\n        statement.setContext(context);\n\n        Result result = new Result();\n        result.setSuccess(true);\n        statement.setResult(result);\n        \n        String time = String.valueOf(System.currentTimeMillis());\n        statement.setStored(time);\n        statement.setTimestamp(time);\n        statement.setAuthority(agent);\n        statement.setVersion(\"1.0\");\n    }", "test_setup_start_lineno": 36, "test_setup_end_lineno": 69, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/StatementTest.java", "test_prefix": "    @Test\n    public void testSetVerb() {\n        Verb expected = new Verb(\"http://example.com/tested\");\n        statement.setVerb(expected);\n        Verb actual = statement.getVerb();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 244, "test_prefix_end_lineno": 251, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Statement.java", "focal_method": "    public Verb getVerb() {\n        return verb;\n    }", "focal_method_start_lineno": 74, "focal_method_end_lineno": 76, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testSetVerb() {\n        Verb expected = new Verb(\"http://example.com/tested\");\n        statement.setVerb(expected);\n        Verb actual = statement.getVerb();\n    }", "original_test_prefix": "    @Test\n    public void testSetVerb() {\n        Verb expected = new Verb(\"http://example.com/tested\");\n        statement.setVerb(expected);\n        Verb actual = statement.getVerb();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.StatementTest#testSetVerb", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        agent = new Agent();\n        agent.setMbox(MBOX);\n        Verb v = new Verb(\"http://example.com/tested\");\n        Activity act = new Activity(TEST_IRI + UUID.randomUUID().toString());\n        statement = new Statement(agent, v, act);\n        statement.setId(ID);\n        \n        Attachment attachment = new Attachment();\n        Attachment expected = new Attachment();\n        String att = \"This is a text/plain test.\";\n        String contentType = \"text/plain\";\n        expected.addAttachment(att, contentType);\n        attachment.setUsageType(new URI(\"http://test.com\"));\n\n        ArrayList<Attachment> expectedList = new ArrayList<Attachment>();\n        expectedList.add(attachment);\n        statement.setAttachments(expectedList);\n        \n        Context context = new Context();\n        context.setLanguage(\"en-US\");\n        statement.setContext(context);\n\n        Result result = new Result();\n        result.setSuccess(true);\n        statement.setResult(result);\n        \n        String time = String.valueOf(System.currentTimeMillis());\n        statement.setStored(time);\n        statement.setTimestamp(time);\n        statement.setAuthority(agent);\n        statement.setVersion(\"1.0\");\n    }", "start_lineno": 36, "end_lineno": 69}]}
{"index": 488, "project_index": 257, "class_index": 2, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ResultTest", "class_path": "src/test/java/gov/adlnet/xapi/ResultTest.java", "test_name": "testSetScore", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ResultTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        result = new Result();\n        result.setCompletion(true);\n        result.setDuration(DURATION);\n        result.setResponse(RESPONSE);\n        Score score = new Score();\n        result.setScore(score);\n        result.setSuccess(true);\n        JsonObject extensions = new JsonObject();\n        extensions.addProperty(IRI, \"Result Extension\");\n        result.setExtensions(extensions);\n    }", "test_setup_start_lineno": 22, "test_setup_end_lineno": 34, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ResultTest.java", "test_prefix": "    @Test\n    public void testSetScore() {\n        Score score = new Score();\n        result.setScore(score);\n        Score actual = result.getScore();\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 47, "test_prefix_end_lineno": 53, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Result.java", "focal_method": "    public Score getScore() {\n        return score;\n    }", "focal_method_start_lineno": 14, "focal_method_end_lineno": 16, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testSetScore() {\n        Score score = new Score();\n        result.setScore(score);\n        Score actual = result.getScore();\n    }", "original_test_prefix": "    @Test\n    public void testSetScore() {\n        Score score = new Score();\n        result.setScore(score);\n        Score actual = result.getScore();\n        assertNotNull(actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ResultTest#testSetScore", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        result = new Result();\n        result.setCompletion(true);\n        result.setDuration(DURATION);\n        result.setResponse(RESPONSE);\n        Score score = new Score();\n        result.setScore(score);\n        result.setSuccess(true);\n        JsonObject extensions = new JsonObject();\n        extensions.addProperty(IRI, \"Result Extension\");\n        result.setExtensions(extensions);\n    }", "start_lineno": 22, "end_lineno": 34}]}
{"index": 489, "project_index": 257, "class_index": 3, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "ActivityStateTest", "class_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_name": "testSetState", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activity-state/unit-testing\";\n        String stateId =\"state\"+1234;\n        Agent agent = new Agent();\n        agent.setMbox(\"mailto:test@example.com\");\n        activityState = new ActivityState(activityId, stateId, agent);\n        assertNotNull(activityState);\n        activityState.setRegistration(REG_ID);\n        JsonObject state = new JsonObject();\n        state.addProperty(\"ActState\", \"Unit Test\");\n        activityState.setState(state);\n    }", "test_setup_start_lineno": 21, "test_setup_end_lineno": 33, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/ActivityStateTest.java", "test_prefix": "    @Test\n    public void testSetState() {\n        JsonObject expected = new JsonObject();\n        expected.addProperty(\"ActState\", \"Unit Test New\");\n        activityState.setState(expected);\n        JsonObject actual = activityState.getState();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 136, "test_prefix_end_lineno": 144, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/ActivityState.java", "focal_method": "    public JsonObject getState(){return this.state;}", "focal_method_start_lineno": 46, "focal_method_end_lineno": 46, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 4, "test_prefix_wo_placeholder": "    @Test\n    public void testSetState() {\n        JsonObject expected = new JsonObject();\n        expected.addProperty(\"ActState\", \"Unit Test New\");\n        activityState.setState(expected);\n        JsonObject actual = activityState.getState();\n    }", "original_test_prefix": "    @Test\n    public void testSetState() {\n        JsonObject expected = new JsonObject();\n        expected.addProperty(\"ActState\", \"Unit Test New\");\n        activityState.setState(expected);\n        JsonObject actual = activityState.getState();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.ActivityStateTest#testSetState", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        String activityId = \"http://example.com/activity-state/unit-testing\";\n        String stateId =\"state\"+1234;\n        Agent agent = new Agent();\n        agent.setMbox(\"mailto:test@example.com\");\n        activityState = new ActivityState(activityId, stateId, agent);\n        assertNotNull(activityState);\n        activityState.setRegistration(REG_ID);\n        JsonObject state = new JsonObject();\n        state.addProperty(\"ActState\", \"Unit Test\");\n        activityState.setState(state);\n    }", "start_lineno": 21, "end_lineno": 33}]}
{"index": 490, "project_index": 257, "class_index": 4, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "AttachmentResultTest", "class_path": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "test_name": "testSetXapiStatements", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        Agent a = new Agent();\n        a.setMbox(MBOX);\n        Verb v = new Verb(VERB);\n        Activity act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n\n        ArrayList<Statement> statementList = new ArrayList<Statement>();\n        statementList.add(statement);\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n        statementList.add(statement);\n\n        statements = new StatementResult();\n        statements.setStatements(statementList);\n\n        type = \"text/plain\";\n        attachment = \"This is a text/plain test.\".getBytes(\"UTF-8\");\n\n        AttachmentAndType att = new AttachmentAndType(attachment, type);\n        attachments = new HashMap<String, AttachmentAndType>();\n        attachments.put(HASH, att);\n    }", "test_setup_start_lineno": 41, "test_setup_end_lineno": 67, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/AttachmentResultTest.java", "test_prefix": "    @Test\n    public void testSetXapiStatements() {\n        AttachmentResult a = new AttachmentResult(RESPONSE_MESSAGE, statements, attachments);\n        <AssertPlaceHolder>;\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        Agent agent = new Agent();\n        agent.setMbox(MBOX);\n        Verb v = new Verb(VERB);\n        Activity act = new Activity(ACTIVITY_ID);\n        statement = new Statement(agent, v, act);\n\n        ArrayList<Statement> statementList = new ArrayList<Statement>();\n        statementList.add(statement);\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        act = new Activity(ACTIVITY_ID);\n        statement = new Statement(agent, v, act);\n        statementList.add(statement);\n\n        StatementResult inputStatements = new StatementResult();\n        inputStatements.setStatements(statementList);\n        a.setXapiStatements(inputStatements);\n        ArrayList<Statement> actual = a.getXapiStatements().getStatements();\n        assertEquals(2, actual.size());\n    }", "test_prefix_start_lineno": 125, "test_prefix_end_lineno": 150, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/util/AttachmentResult.java", "focal_method": "    public AttachmentResult(String inputMessage, StatementResult inputStatements,\n            Map<String, AttachmentAndType> inputAttachments) {\n\n        responseMessage = inputMessage;\n        statements = inputStatements;\n        attachments = inputAttachments;\n    }", "focal_method_start_lineno": 22, "focal_method_end_lineno": 28, "ground_truth_oracle": "assertNotNull(a);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testSetXapiStatements() {\n        AttachmentResult a = new AttachmentResult(RESPONSE_MESSAGE, statements, attachments);\n    }", "original_test_prefix": "    @Test\n    public void testSetXapiStatements() {\n        AttachmentResult a = new AttachmentResult(RESPONSE_MESSAGE, statements, attachments);\n        assertNotNull(a);\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        Agent agent = new Agent();\n        agent.setMbox(MBOX);\n        Verb v = new Verb(VERB);\n        Activity act = new Activity(ACTIVITY_ID);\n        statement = new Statement(agent, v, act);\n\n        ArrayList<Statement> statementList = new ArrayList<Statement>();\n        statementList.add(statement);\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        act = new Activity(ACTIVITY_ID);\n        statement = new Statement(agent, v, act);\n        statementList.add(statement);\n\n        StatementResult inputStatements = new StatementResult();\n        inputStatements.setStatements(statementList);\n        a.setXapiStatements(inputStatements);\n        ArrayList<Statement> actual = a.getXapiStatements().getStatements();\n        assertEquals(2, actual.size());\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.AttachmentResultTest#testSetXapiStatements", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        Agent a = new Agent();\n        a.setMbox(MBOX);\n        Verb v = new Verb(VERB);\n        Activity act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n\n        ArrayList<Statement> statementList = new ArrayList<Statement>();\n        statementList.add(statement);\n\n        ACTIVITY_ID = \"http://example.com/\" + UUID.randomUUID().toString();\n        act = new Activity(ACTIVITY_ID);\n        statement = new Statement(a, v, act);\n        statementList.add(statement);\n\n        statements = new StatementResult();\n        statements.setStatements(statementList);\n\n        type = \"text/plain\";\n        attachment = \"This is a text/plain test.\".getBytes(\"UTF-8\");\n\n        AttachmentAndType att = new AttachmentAndType(attachment, type);\n        attachments = new HashMap<String, AttachmentAndType>();\n        attachments.put(HASH, att);\n    }", "start_lineno": 41, "end_lineno": 67}]}
{"index": 491, "project_index": 257, "class_index": 5, "test_index": 0, "user_name": "adlnet", "repo_name": "jxapi", "sub_repos": [], "sub_repo": "", "commit_sha": "a83f91c3a2239be9d0a5795aa9cdaa1efaa0b9f3", "build_system": "mvn", "class_name": "GroupTest", "class_path": "src/test/java/gov/adlnet/xapi/GroupTest.java", "test_name": "testGetObjectType", "test_setup_file_path": "src/test/java/gov/adlnet/xapi/GroupTest.java", "test_setup": "@Before\n    public void setUp() throws Exception {\n        members = new ArrayList<Agent>();\n        members.add(new Agent(NAME, MBOX));\n        group = new Group(members);\n    }", "test_setup_start_lineno": 25, "test_setup_end_lineno": 30, "test_prefix_file_path": "src/test/java/gov/adlnet/xapi/GroupTest.java", "test_prefix": "    @Test\n    public void testGetObjectType() {\n        String expected = \"Group\";\n        String actual = group.getObjectType();\n        <AssertPlaceHolder>;\n        assertEquals(expected, actual);\n    }", "test_prefix_start_lineno": 38, "test_prefix_end_lineno": 44, "focal_method_file_path": "src/main/java/gov/adlnet/xapi/model/Group.java", "focal_method": "    @Override\n    public String getObjectType() {\n        return GROUP;\n    }", "focal_method_start_lineno": 16, "focal_method_end_lineno": 19, "ground_truth_oracle": "assertNotNull(actual);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testGetObjectType() {\n        String expected = \"Group\";\n        String actual = group.getObjectType();\n    }", "original_test_prefix": "    @Test\n    public void testGetObjectType() {\n        String expected = \"Group\";\n        String actual = group.getObjectType();\n        assertNotNull(actual);\n        assertEquals(expected, actual);\n    }", "test_with_params": false, "test_target": "gov.adlnet.xapi.GroupTest#testGetObjectType", "test_setup_list": [{"test_setup": "@Before\n    public void setUp() throws Exception {\n        members = new ArrayList<Agent>();\n        members.add(new Agent(NAME, MBOX));\n        group = new Group(members);\n    }", "start_lineno": 25, "end_lineno": 30}]}
{"index": 492, "project_index": 258, "class_index": 0, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_name": "puzzle_not_solved", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleTest.java", "test_prefix": "  @Test\n  public void puzzle_not_solved()\n  {\n    int[] cells = getSolution();\n    cells = swap(cells, 3, 4);\n    Puzzle p = new Puzzle(cells);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 46, "test_prefix_end_lineno": 53, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/Puzzle.java", "focal_method": "  public boolean isSolved()\n  {\n    return getDistanceToGoal() == 0;\n  }", "focal_method_start_lineno": 76, "focal_method_end_lineno": 79, "ground_truth_oracle": "assertFalse(p.isSolved());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "  @Test\n  public void puzzle_not_solved()\n  {\n    int[] cells = getSolution();\n    cells = swap(cells, 3, 4);\n    Puzzle p = new Puzzle(cells);\n  }", "original_test_prefix": "  @Test\n  public void puzzle_not_solved()\n  {\n    int[] cells = getSolution();\n    cells = swap(cells, 3, 4);\n    Puzzle p = new Puzzle(cells);\n    assertFalse(p.isSolved());\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleTest#puzzle_not_solved", "test_setup_list": []}
{"index": 493, "project_index": 258, "class_index": 1, "test_index": 0, "user_name": "TeachingKidsProgramming", "repo_name": "TeachingKidsProgramming.Source.Java", "sub_repos": [], "sub_repo": "", "commit_sha": "c3c808d792c25c14f03c2b3d97adbbd08cacbe24", "build_system": "mvn", "class_name": "PuzzleStateTest", "class_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_name": "actual_cost", "test_setup_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/teachingextensions/logo/PuzzleStateTest.java", "test_prefix": "  @Test\n  public void actual_cost()\n  {\n    PuzzleState s = new PuzzleState(getSolvedPuzzle());\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 87, "test_prefix_end_lineno": 92, "focal_method_file_path": "src/main/java/org/teachingextensions/logo/utils/PuzzleUtils/PuzzleState.java", "focal_method": "  public int getActualCost()\n  {\n    return this.history.size();\n  }", "focal_method_start_lineno": 68, "focal_method_end_lineno": 71, "ground_truth_oracle": "assertEquals(0, s.getActualCost());", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "  @Test\n  public void actual_cost()\n  {\n    PuzzleState s = new PuzzleState(getSolvedPuzzle());\n  }", "original_test_prefix": "  @Test\n  public void actual_cost()\n  {\n    PuzzleState s = new PuzzleState(getSolvedPuzzle());\n    assertEquals(0, s.getActualCost());\n  }", "test_with_params": false, "test_target": "org.teachingextensions.logo.PuzzleStateTest#actual_cost", "test_setup_list": []}
{"index": 494, "project_index": 259, "class_index": 0, "test_index": 0, "user_name": "TooTallNate", "repo_name": "Java-WebSocket", "sub_repos": [], "sub_repo": "", "commit_sha": "e630e60168f8a857549731cd500e9312dfccbc46", "build_system": "mvn", "class_name": "PerMessageDeflateExtensionTest", "class_path": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "test_name": "testDecodeFrame", "test_setup_file_path": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/java_websocket/extensions/PerMessageDeflateExtensionTest.java", "test_prefix": "  @Test\n  public void testDecodeFrame() throws InvalidDataException {\n    PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension();\n    String str = \"This is a highly compressable text\"\n        + \"This is a highly compressable text\"\n        + \"This is a highly compressable text\"\n        + \"This is a highly compressable text\"\n        + \"This is a highly compressable text\";\n    byte[] message = str.getBytes();\n    TextFrame frame = new TextFrame();\n    frame.setPayload(ByteBuffer.wrap(message));\n    deflateExtension.encodeFrame(frame);\n    deflateExtension.decodeFrame(frame);\n    <AssertPlaceHolder>;\n  }", "test_prefix_start_lineno": 20, "test_prefix_end_lineno": 34, "focal_method_file_path": "src/main/java/org/java_websocket/framing/FramedataImpl1.java", "focal_method": "  @Override\n  public ByteBuffer getPayloadData() {\n    return unmaskedpayload;\n  }", "focal_method_start_lineno": 124, "focal_method_end_lineno": 127, "ground_truth_oracle": "assertArrayEquals(message, frame.getPayloadData().array());", "ground_truth_oracle_lineno": 7, "test_prefix_wo_placeholder": "  @Test\n  public void testDecodeFrame() throws InvalidDataException {\n    PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension();\n    String str = \"This is a highly compressable text\"\n        + \"This is a highly compressable text\"\n        + \"This is a highly compressable text\"\n        + \"This is a highly compressable text\"\n        + \"This is a highly compressable text\";\n    byte[] message = str.getBytes();\n    TextFrame frame = new TextFrame();\n    frame.setPayload(ByteBuffer.wrap(message));\n    deflateExtension.encodeFrame(frame);\n    deflateExtension.decodeFrame(frame);\n  }", "original_test_prefix": "  @Test\n  public void testDecodeFrame() throws InvalidDataException {\n    PerMessageDeflateExtension deflateExtension = new PerMessageDeflateExtension();\n    String str = \"This is a highly compressable text\"\n        + \"This is a highly compressable text\"\n        + \"This is a highly compressable text\"\n        + \"This is a highly compressable text\"\n        + \"This is a highly compressable text\";\n    byte[] message = str.getBytes();\n    TextFrame frame = new TextFrame();\n    frame.setPayload(ByteBuffer.wrap(message));\n    deflateExtension.encodeFrame(frame);\n    deflateExtension.decodeFrame(frame);\n    assertArrayEquals(message, frame.getPayloadData().array());\n  }", "test_with_params": false, "test_target": "org.java_websocket.extensions.PerMessageDeflateExtensionTest#testDecodeFrame", "test_setup_list": []}
{"index": 495, "project_index": 260, "class_index": 0, "test_index": 0, "user_name": "rockagen", "repo_name": "commons-lib", "sub_repos": [], "sub_repo": "", "commit_sha": "f37141cf40be79d130db804c39ce61690541d5f1", "build_system": "mvn", "class_name": "OPLogTest", "class_path": "src/test/java/com/rockagen/commons/annotation/OPLogTest.java", "test_name": "testDescription", "test_setup_file_path": "src/test/java/com/rockagen/commons/annotation/OPLogTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/com/rockagen/commons/annotation/OPLogTest.java", "test_prefix": "      @Test\n      public void testDescription()\n        throws SecurityException, NoSuchMethodException\n      {\n\n          Plog annotation = (Plog)ClassUtil.getDeclaredMethod(getClass(), false, \"test\").getAnnotation(Plog.class);\n          String value=annotation.value();\n          <AssertPlaceHolder>;\n      }", "test_prefix_start_lineno": 35, "test_prefix_end_lineno": 43, "focal_method_file_path": "src/main/java/com/rockagen/commons/util/ClassUtil.java", "focal_method": "    public static Method getDeclaredMethod(Class<?> clazz, boolean recursively,\n            String methodName, Class<?>... parameterTypes) {\n\n        try {\n            return clazz.getDeclaredMethod(methodName,\n                    parameterTypes);\n        } catch (NoSuchMethodException e) {\n            Class<?> superClass = clazz.getSuperclass();\n            if (superClass != null && recursively) {\n                return getDeclaredMethod(superClass, true, methodName,\n                        parameterTypes);\n            }\n        } catch (SecurityException e) {\n            log.error(\"{}\",e.getMessage(),e);\n        }\n        return null;\n    }", "focal_method_start_lineno": 239, "focal_method_end_lineno": 255, "ground_truth_oracle": "Assert.assertEquals(\"Test\", value);", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "      @Test\n      public void testDescription()\n        throws SecurityException, NoSuchMethodException\n      {\n\n          Plog annotation = (Plog)ClassUtil.getDeclaredMethod(getClass(), false, \"test\").getAnnotation(Plog.class);\n          String value=annotation.value();\n      }", "original_test_prefix": "      @Test\n      public void testDescription()\n        throws SecurityException, NoSuchMethodException\n      {\n\n          Plog annotation = (Plog)ClassUtil.getDeclaredMethod(getClass(), false, \"test\").getAnnotation(Plog.class);\n          String value=annotation.value();\n          Assert.assertEquals(\"Test\", value);\n      }", "test_with_params": false, "test_target": "com.rockagen.commons.annotation.OPLogTest#testDescription", "test_setup_list": []}
{"index": 496, "project_index": 261, "class_index": 0, "test_index": 0, "user_name": "trautonen", "repo_name": "coveralls-maven-plugin", "sub_repos": [], "sub_repo": "", "commit_sha": "8b8995e42768a25c8db6e85ede62238bf4606cb2", "build_system": "mvn", "class_name": "SourceTest", "class_path": "src/test/java/org/eluder/coveralls/maven/plugin/domain/SourceTest.java", "test_name": "testHashCode", "test_setup_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/domain/SourceTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/eluder/coveralls/maven/plugin/domain/SourceTest.java", "test_prefix": "    @Test\n    public void testHashCode() {\n        Source source1 = new Source(\"src/main/java/Hello.java\", \"public class Hello {\\n  \\n}\\n\", \"E8BD88CF0BDB77A6408234FD91FD22C3\");\n        Source source2 = new Source(\"src/main/java/Hello.java\", \"public class Hello {\\n  \\n}\\n\", \"E8BD88CF0BDB77A6408234FD91FD22C3\");\n        Source source3 = new Source(\"src/main/java/Hello.java\", \"public class Hello {\\n  void();\\n}\\n\", \"CBA7831606B51D1499349451B70758E3\");\n        <AssertPlaceHolder>;\n        assertFalse(source1.hashCode() == source3.hashCode());\n        assertFalse(source2.hashCode() == source3.hashCode());\n    }", "test_prefix_start_lineno": 105, "test_prefix_end_lineno": 113, "focal_method_file_path": "src/main/java/org/eluder/coveralls/maven/plugin/domain/Source.java", "focal_method": "    @Override\n    public int hashCode() {\n        return Objects.hash(this.name, this.digest, this.coverage.length);\n    }", "focal_method_start_lineno": 122, "focal_method_end_lineno": 125, "ground_truth_oracle": "assertTrue(source1.hashCode() == source2.hashCode());", "ground_truth_oracle_lineno": 3, "test_prefix_wo_placeholder": "    @Test\n    public void testHashCode() {\n        Source source1 = new Source(\"src/main/java/Hello.java\", \"public class Hello {\\n  \\n}\\n\", \"E8BD88CF0BDB77A6408234FD91FD22C3\");\n        Source source2 = new Source(\"src/main/java/Hello.java\", \"public class Hello {\\n  \\n}\\n\", \"E8BD88CF0BDB77A6408234FD91FD22C3\");\n        Source source3 = new Source(\"src/main/java/Hello.java\", \"public class Hello {\\n  void();\\n}\\n\", \"CBA7831606B51D1499349451B70758E3\");\n    }", "original_test_prefix": "    @Test\n    public void testHashCode() {\n        Source source1 = new Source(\"src/main/java/Hello.java\", \"public class Hello {\\n  \\n}\\n\", \"E8BD88CF0BDB77A6408234FD91FD22C3\");\n        Source source2 = new Source(\"src/main/java/Hello.java\", \"public class Hello {\\n  \\n}\\n\", \"E8BD88CF0BDB77A6408234FD91FD22C3\");\n        Source source3 = new Source(\"src/main/java/Hello.java\", \"public class Hello {\\n  void();\\n}\\n\", \"CBA7831606B51D1499349451B70758E3\");\n        assertTrue(source1.hashCode() == source2.hashCode());\n        assertFalse(source1.hashCode() == source3.hashCode());\n        assertFalse(source2.hashCode() == source3.hashCode());\n    }", "test_with_params": false, "test_target": "org.eluder.coveralls.maven.plugin.domain.SourceTest#testHashCode", "test_setup_list": []}
{"index": 497, "project_index": 262, "class_index": 0, "test_index": 0, "user_name": "fabric8io", "repo_name": "fabric8-maven-plugin", "sub_repos": ["core", "enricher/api", "enricher/standard", "enricher/fabric8", "generator/api", "generator/java-exec", "generator/spring-boot", "generator/vertx", "generator/karaf", "generator/wildfly-swarm", "generator/quarkus", "generator/thorntail-v2", "generator/webapp", "generator/openliberty", "watcher/api", "watcher/standard", "enricher/deprecated", "it"], "sub_repo": "core", "commit_sha": "4beae533a97571ddd6a6bc5dfa37c56a028cd3a9", "build_system": "mvn", "class_name": "SpringBootUtilTest", "class_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_name": "testNonExistentPropertiesParsing", "test_setup_file_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "core/src/test/java/io/fabric8/maven/core/util/SpringBootUtilTest.java", "test_prefix": "    @Test\n    public void testNonExistentPropertiesParsing() {\n\n        Properties props = SpringBootUtil.getPropertiesResource(SpringBootUtilTest.class.getResource(\"/this-file-does-not-exist\"));\n        <AssertPlaceHolder>;\n        assertEquals(0, props.size());\n\n    }", "test_prefix_start_lineno": 76, "test_prefix_end_lineno": 83, "focal_method_file_path": "core/src/main/java/io/fabric8/maven/core/util/SpringBootUtil.java", "focal_method": "    protected static Properties getPropertiesResource(URL resource) {\n        Properties answer = new Properties();\n        if (resource != null) {\n            try(InputStream stream = resource.openStream()) {\n                answer.load(stream);\n            } catch (IOException e) {\n                throw new IllegalStateException(\"Error while reading resource from URL \" + resource, e);\n            }\n        }\n        return answer;\n    }", "focal_method_start_lineno": 77, "focal_method_end_lineno": 87, "ground_truth_oracle": "assertNotNull(props);", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testNonExistentPropertiesParsing() {\n\n        Properties props = SpringBootUtil.getPropertiesResource(SpringBootUtilTest.class.getResource(\"/this-file-does-not-exist\"));\n    }", "original_test_prefix": "    @Test\n    public void testNonExistentPropertiesParsing() {\n\n        Properties props = SpringBootUtil.getPropertiesResource(SpringBootUtilTest.class.getResource(\"/this-file-does-not-exist\"));\n        assertNotNull(props);\n        assertEquals(0, props.size());\n\n    }", "test_with_params": false, "test_target": "io.fabric8.maven.core.util.SpringBootUtilTest#testNonExistentPropertiesParsing", "test_setup_list": []}
{"index": 498, "project_index": 263, "class_index": 0, "test_index": 0, "user_name": "xmlet", "repo_name": "XsdParser", "sub_repos": [], "sub_repo": "", "commit_sha": "8dce9914aac46eea527f6c773a753175e93ad709", "build_system": "mvn", "class_name": "IssuesTest", "class_path": "src/test/java/org/xmlet/xsdparser/IssuesTest.java", "test_name": "testIssue27Attributes", "test_setup_file_path": "src/test/java/org/xmlet/xsdparser/IssuesTest.java", "test_setup": "", "test_setup_start_lineno": 0, "test_setup_end_lineno": 0, "test_prefix_file_path": "src/test/java/org/xmlet/xsdparser/IssuesTest.java", "test_prefix": "    @Test\n    public void testIssue27Attributes(){\n        XsdParser parser = new XsdParser(getFilePath(\"issue_27_attributes.xsd\"));\n\n        List<XsdSchema> schemas = parser.getResultXsdSchemas().collect(Collectors.toList());\n\n        <AssertPlaceHolder>;\n\n        XsdSchema schema = schemas.get(0);\n\n        List<XsdElement> schemaElements = schema.getChildrenElements().collect(Collectors.toList());\n\n        Assert.assertEquals(1, schemaElements.size());\n\n        XsdElement elementA = schemaElements.get(0);\n\n        XsdComplexType complexTypeA = elementA.getTypeAsComplexType();\n\n        Assert.assertNotNull(complexTypeA);\n\n        XsdSimpleContent simpleContentA = complexTypeA.getSimpleContent();\n\n        Assert.assertNotNull(simpleContentA);\n\n        XsdExtension xsdExtensionA = simpleContentA.getXsdExtension();\n\n        Assert.assertNotNull(xsdExtensionA);\n\n        List<XsdAttribute> xsdExtensionAttributes = xsdExtensionA.getXsdAttributes().collect(Collectors.toList());\n\n        Assert.assertEquals(2, xsdExtensionAttributes.size());\n\n        XsdAttribute attributeA = xsdExtensionAttributes.get(0);\n        XsdAttribute attributeB = xsdExtensionAttributes.get(1);\n\n        Assert.assertEquals(\"AttributeA\", attributeA.getName());\n        Assert.assertEquals(\"AttributeB\", attributeB.getName());\n    }", "test_prefix_start_lineno": 322, "test_prefix_end_lineno": 359, "focal_method_file_path": "src/main/java/org/xmlet/xsdparser/core/XsdParserCore.java", "focal_method": "    public Stream<XsdSchema> getResultXsdSchemas(){\n        return parseElements\n                .values()\n                .stream()\n                .flatMap(List::stream)\n                .filter(element -> element.getElement() instanceof XsdSchema)\n                .map(element -> (XsdSchema) element.getElement());\n    }", "focal_method_start_lineno": 413, "focal_method_end_lineno": 420, "ground_truth_oracle": "Assert.assertEquals(1, schemas.size());", "ground_truth_oracle_lineno": 2, "test_prefix_wo_placeholder": "    @Test\n    public void testIssue27Attributes(){\n        XsdParser parser = new XsdParser(getFilePath(\"issue_27_attributes.xsd\"));\n\n        List<XsdSchema> schemas = parser.getResultXsdSchemas().collect(Collectors.toList());\n\n    }", "original_test_prefix": "    @Test\n    public void testIssue27Attributes(){\n        XsdParser parser = new XsdParser(getFilePath(\"issue_27_attributes.xsd\"));\n\n        List<XsdSchema> schemas = parser.getResultXsdSchemas().collect(Collectors.toList());\n\n        Assert.assertEquals(1, schemas.size());\n\n        XsdSchema schema = schemas.get(0);\n\n        List<XsdElement> schemaElements = schema.getChildrenElements().collect(Collectors.toList());\n\n        Assert.assertEquals(1, schemaElements.size());\n\n        XsdElement elementA = schemaElements.get(0);\n\n        XsdComplexType complexTypeA = elementA.getTypeAsComplexType();\n\n        Assert.assertNotNull(complexTypeA);\n\n        XsdSimpleContent simpleContentA = complexTypeA.getSimpleContent();\n\n        Assert.assertNotNull(simpleContentA);\n\n        XsdExtension xsdExtensionA = simpleContentA.getXsdExtension();\n\n        Assert.assertNotNull(xsdExtensionA);\n\n        List<XsdAttribute> xsdExtensionAttributes = xsdExtensionA.getXsdAttributes().collect(Collectors.toList());\n\n        Assert.assertEquals(2, xsdExtensionAttributes.size());\n\n        XsdAttribute attributeA = xsdExtensionAttributes.get(0);\n        XsdAttribute attributeB = xsdExtensionAttributes.get(1);\n\n        Assert.assertEquals(\"AttributeA\", attributeA.getName());\n        Assert.assertEquals(\"AttributeB\", attributeB.getName());\n    }", "test_with_params": false, "test_target": "org.xmlet.xsdparser.IssuesTest#testIssue27Attributes", "test_setup_list": []}
{"index": 499, "project_index": 264, "class_index": 0, "test_index": 0, "user_name": "myabc", "repo_name": "markdownj", "sub_repos": ["core"], "sub_repo": "core", "commit_sha": "f8ed00caeb69fc602aa2209812d953c26c2a4263", "build_system": "mvn", "class_name": "LineConventions", "class_path": "core/src/test/java/org/markdownj/test/LineConventions.java", "test_name": "testWindowsLineConventions", "test_setup_file_path": "core/src/test/java/org/markdownj/test/LineConventions.java", "test_setup": "@Before\n    public void createProcessor() {\n        m = new MarkdownProcessor();\n    }", "test_setup_start_lineno": 47, "test_setup_end_lineno": 50, "test_prefix_file_path": "core/src/test/java/org/markdownj/test/LineConventions.java", "test_prefix": "    @Test\n    public void testWindowsLineConventions() {\n        MarkdownProcessor markup = new MarkdownProcessor();\n        <AssertPlaceHolder>;\n    }", "test_prefix_start_lineno": 57, "test_prefix_end_lineno": 61, "focal_method_file_path": "core/src/main/java/org/markdownj/MarkdownProcessor.java", "focal_method": "    public String markdown(String txt) {\n        if (txt == null) {\n            txt = \"\";\n        }\n        TextEditor text = new TextEditor(txt);\n\n        // Standardize line endings:\n        text.replaceAll(\"\\\\r\\\\n\", \"\\n\");     // DOS to Unix\n        text.replaceAll(\"\\\\r\", \"\\n\");        // Mac to Unix\n        text.replaceAll(\"^[ \\\\t]+$\", \"\");\n\n        // Make sure $text ends with a couple of newlines:\n        text.append(\"\\n\\n\");\n\n        text.detabify();\n        text.deleteAll(\"^[ ]+$\");\n        hashHTMLBlocks(text);\n        stripLinkDefinitions(text);\n        text = runBlockGamut(text);\n        unEscapeSpecialChars(text);\n\n        text.append(\"\\n\");\n        return text.toString();\n    }", "focal_method_start_lineno": 75, "focal_method_end_lineno": 98, "ground_truth_oracle": "assertEquals(EXPECTED, markup.markdown(\"a\\r\\nb\\r\\nc\\r\\n\"));", "ground_truth_oracle_lineno": 1, "test_prefix_wo_placeholder": "    @Test\n    public void testWindowsLineConventions() {\n        MarkdownProcessor markup = new MarkdownProcessor();\n    }", "original_test_prefix": "    @Test\n    public void testWindowsLineConventions() {\n        MarkdownProcessor markup = new MarkdownProcessor();\n        assertEquals(EXPECTED, markup.markdown(\"a\\r\\nb\\r\\nc\\r\\n\"));\n    }", "test_with_params": false, "test_target": "org.markdownj.test.LineConventions#testWindowsLineConventions", "test_setup_list": [{"test_setup": "@Before\n    public void createProcessor() {\n        m = new MarkdownProcessor();\n    }", "start_lineno": 47, "end_lineno": 50}]}
